<?php

use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InactiveScopeException;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\Reference;
use Symfony\Component\DependencyInjection\Parameter;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;

/**
 * ap_DevDebugProjectContainer
 *
 * This class has been auto-generated
 * by the Symfony Dependency Injection Component.
 */
class ap_DevDebugProjectContainer extends Container
{
    /**
     * Constructor.
     */
    public function __construct()
    {
        $this->parameters = $this->getDefaultParameters();

        $this->services =
        $this->scopedServices =
        $this->scopeStacks = array();

        $this->set('service_container', $this);

        $this->scopes = array('request' => 'container');
        $this->scopeChildren = array('request' => array());
        $this->methodMap = array(
            'a2lix_translation_form.default.listener.translations' => 'getA2lixTranslationForm_Default_Listener_TranslationsService',
            'a2lix_translation_form.default.service.translation' => 'getA2lixTranslationForm_Default_Service_TranslationService',
            'a2lix_translation_form.default.type.translations' => 'getA2lixTranslationForm_Default_Type_TranslationsService',
            'a2lix_translation_form.default.type.translationsfields' => 'getA2lixTranslationForm_Default_Type_TranslationsfieldsService',
            'a2lix_translation_form.default.type.translationsforms' => 'getA2lixTranslationForm_Default_Type_TranslationsformsService',
            'a2lix_translation_form.default.type.translationslocalesselector' => 'getA2lixTranslationForm_Default_Type_TranslationslocalesselectorService',
            'a2lix_translation_form.gedmo.listener.translations' => 'getA2lixTranslationForm_Gedmo_Listener_TranslationsService',
            'a2lix_translation_form.gedmo.service.translation' => 'getA2lixTranslationForm_Gedmo_Service_TranslationService',
            'a2lix_translation_form.gedmo.type.translations' => 'getA2lixTranslationForm_Gedmo_Type_TranslationsService',
            'a2lix_translation_form.gedmo.type.translationslocales' => 'getA2lixTranslationForm_Gedmo_Type_TranslationslocalesService',
            'a2lix_translation_form.listener.controller' => 'getA2lixTranslationForm_Listener_ControllerService',
            'annotation_reader' => 'getAnnotationReaderService',
            'assetic.asset_factory' => 'getAssetic_AssetFactoryService',
            'assetic.asset_manager' => 'getAssetic_AssetManagerService',
            'assetic.filter.cssmin' => 'getAssetic_Filter_CssminService',
            'assetic.filter.cssrewrite' => 'getAssetic_Filter_CssrewriteService',
            'assetic.filter.lessphp' => 'getAssetic_Filter_LessphpService',
            'assetic.filter_manager' => 'getAssetic_FilterManagerService',
            'assetic.helper.static' => 'getAssetic_Helper_StaticService',
            'besimple.soap.cache' => 'getBesimple_Soap_CacheService',
            'besimple.soap.context.soap' => 'getBesimple_Soap_Context_SoapService',
            'besimple.soap.converter.collection' => 'getBesimple_Soap_Converter_CollectionService',
            'besimple.soap.definition.loader' => 'getBesimple_Soap_Definition_LoaderService',
            'besimple.soap.exception_listener' => 'getBesimple_Soap_ExceptionListenerService',
            'besimple.soap.request_format.listener' => 'getBesimple_Soap_RequestFormat_ListenerService',
            'besimple.soap.response' => 'getBesimple_Soap_ResponseService',
            'besimple.soap.response.listener' => 'getBesimple_Soap_Response_ListenerService',
            'besimple.soap.type.repository' => 'getBesimple_Soap_Type_RepositoryService',
            'cache_clearer' => 'getCacheClearerService',
            'cache_warmer' => 'getCacheWarmerService',
            'clank.client_event.listener' => 'getClank_ClientEvent_ListenerService',
            'controller_name_converter' => 'getControllerNameConverterService',
            'data_collector.request' => 'getDataCollector_RequestService',
            'data_collector.router' => 'getDataCollector_RouterService',
            'debug.controller_resolver' => 'getDebug_ControllerResolverService',
            'debug.deprecation_logger_listener' => 'getDebug_DeprecationLoggerListenerService',
            'debug.emergency_logger_listener' => 'getDebug_EmergencyLoggerListenerService',
            'debug.event_dispatcher' => 'getDebug_EventDispatcherService',
            'debug.stopwatch' => 'getDebug_StopwatchService',
            'debug.templating.engine.php' => 'getDebug_Templating_Engine_PhpService',
            'debug.templating.engine.twig' => 'getDebug_Templating_Engine_TwigService',
            'doctrine' => 'getDoctrineService',
            'doctrine.dbal.connection_factory' => 'getDoctrine_Dbal_ConnectionFactoryService',
            'doctrine.dbal.default.wrapped_connection' => 'getDoctrine_Dbal_Default_WrappedConnectionService',
            'doctrine.dbal.default_connection' => 'getDoctrine_Dbal_DefaultConnectionService',
            'doctrine.dbal.logger' => 'getDoctrine_Dbal_LoggerService',
            'doctrine.dbal.logger.profiling.default' => 'getDoctrine_Dbal_Logger_Profiling_DefaultService',
            'doctrine.dbal.logger.profiling.report_source' => 'getDoctrine_Dbal_Logger_Profiling_ReportSourceService',
            'doctrine.dbal.logger.profiling.report_target' => 'getDoctrine_Dbal_Logger_Profiling_ReportTargetService',
            'doctrine.dbal.report_source_connection' => 'getDoctrine_Dbal_ReportSourceConnectionService',
            'doctrine.dbal.report_target_connection' => 'getDoctrine_Dbal_ReportTargetConnectionService',
            'doctrine.orm.default_entity_manager' => 'getDoctrine_Orm_DefaultEntityManagerService',
            'doctrine.orm.default_manager_configurator' => 'getDoctrine_Orm_DefaultManagerConfiguratorService',
            'doctrine.orm.listeners.resolve_target_entity' => 'getDoctrine_Orm_Listeners_ResolveTargetEntityService',
            'doctrine.orm.validator.unique' => 'getDoctrine_Orm_Validator_UniqueService',
            'doctrine.orm.validator_initializer' => 'getDoctrine_Orm_ValidatorInitializerService',
            'escape_wsse_authentication.encoder' => 'getEscapeWsseAuthentication_EncoderService',
            'escape_wsse_authentication.encoder.wsse_secured' => 'getEscapeWsseAuthentication_Encoder_WsseSecuredService',
            'escape_wsse_authentication.entry_point' => 'getEscapeWsseAuthentication_EntryPointService',
            'escape_wsse_authentication.entry_point.wsse_secured' => 'getEscapeWsseAuthentication_EntryPoint_WsseSecuredService',
            'escape_wsse_authentication.listener' => 'getEscapeWsseAuthentication_ListenerService',
            'escape_wsse_authentication.listener.wsse_secured' => 'getEscapeWsseAuthentication_Listener_WsseSecuredService',
            'escape_wsse_authentication.provider' => 'getEscapeWsseAuthentication_ProviderService',
            'escape_wsse_authentication.provider.wsse_secured' => 'getEscapeWsseAuthentication_Provider_WsseSecuredService',
            'event_dispatcher' => 'getEventDispatcherService',
            'file_locator' => 'getFileLocatorService',
            'filesystem' => 'getFilesystemService',
            'form.csrf_provider' => 'getForm_CsrfProviderService',
            'form.factory' => 'getForm_FactoryService',
            'form.registry' => 'getForm_RegistryService',
            'form.resolved_type_factory' => 'getForm_ResolvedTypeFactoryService',
            'form.type.birthday' => 'getForm_Type_BirthdayService',
            'form.type.button' => 'getForm_Type_ButtonService',
            'form.type.checkbox' => 'getForm_Type_CheckboxService',
            'form.type.choice' => 'getForm_Type_ChoiceService',
            'form.type.collection' => 'getForm_Type_CollectionService',
            'form.type.country' => 'getForm_Type_CountryService',
            'form.type.currency' => 'getForm_Type_CurrencyService',
            'form.type.date' => 'getForm_Type_DateService',
            'form.type.datetime' => 'getForm_Type_DatetimeService',
            'form.type.email' => 'getForm_Type_EmailService',
            'form.type.entity' => 'getForm_Type_EntityService',
            'form.type.file' => 'getForm_Type_FileService',
            'form.type.form' => 'getForm_Type_FormService',
            'form.type.hidden' => 'getForm_Type_HiddenService',
            'form.type.integer' => 'getForm_Type_IntegerService',
            'form.type.language' => 'getForm_Type_LanguageService',
            'form.type.locale' => 'getForm_Type_LocaleService',
            'form.type.money' => 'getForm_Type_MoneyService',
            'form.type.number' => 'getForm_Type_NumberService',
            'form.type.password' => 'getForm_Type_PasswordService',
            'form.type.percent' => 'getForm_Type_PercentService',
            'form.type.radio' => 'getForm_Type_RadioService',
            'form.type.repeated' => 'getForm_Type_RepeatedService',
            'form.type.reset' => 'getForm_Type_ResetService',
            'form.type.search' => 'getForm_Type_SearchService',
            'form.type.submit' => 'getForm_Type_SubmitService',
            'form.type.text' => 'getForm_Type_TextService',
            'form.type.textarea' => 'getForm_Type_TextareaService',
            'form.type.time' => 'getForm_Type_TimeService',
            'form.type.timezone' => 'getForm_Type_TimezoneService',
            'form.type.url' => 'getForm_Type_UrlService',
            'form.type_extension.csrf' => 'getForm_TypeExtension_CsrfService',
            'form.type_extension.form.http_foundation' => 'getForm_TypeExtension_Form_HttpFoundationService',
            'form.type_extension.form.validator' => 'getForm_TypeExtension_Form_ValidatorService',
            'form.type_extension.repeated.validator' => 'getForm_TypeExtension_Repeated_ValidatorService',
            'form.type_extension.submit.validator' => 'getForm_TypeExtension_Submit_ValidatorService',
            'form.type_guesser.doctrine' => 'getForm_TypeGuesser_DoctrineService',
            'form.type_guesser.validator' => 'getForm_TypeGuesser_ValidatorService',
            'fos_js_routing.controller' => 'getFosJsRouting_ControllerService',
            'fos_js_routing.extractor' => 'getFosJsRouting_ExtractorService',
            'fos_js_routing.serializer' => 'getFosJsRouting_SerializerService',
            'fos_rest.body_listener' => 'getFosRest_BodyListenerService',
            'fos_rest.decoder.json' => 'getFosRest_Decoder_JsonService',
            'fos_rest.decoder.jsontoform' => 'getFosRest_Decoder_JsontoformService',
            'fos_rest.decoder.xml' => 'getFosRest_Decoder_XmlService',
            'fos_rest.decoder_provider' => 'getFosRest_DecoderProviderService',
            'fos_rest.format_listener' => 'getFosRest_FormatListenerService',
            'fos_rest.format_negotiator' => 'getFosRest_FormatNegotiatorService',
            'fos_rest.inflector.doctrine' => 'getFosRest_Inflector_DoctrineService',
            'fos_rest.request.param_fetcher' => 'getFosRest_Request_ParamFetcherService',
            'fos_rest.request.param_fetcher.reader' => 'getFosRest_Request_ParamFetcher_ReaderService',
            'fos_rest.routing.loader.controller' => 'getFosRest_Routing_Loader_ControllerService',
            'fos_rest.routing.loader.processor' => 'getFosRest_Routing_Loader_ProcessorService',
            'fos_rest.routing.loader.reader.action' => 'getFosRest_Routing_Loader_Reader_ActionService',
            'fos_rest.routing.loader.reader.controller' => 'getFosRest_Routing_Loader_Reader_ControllerService',
            'fos_rest.routing.loader.xml_collection' => 'getFosRest_Routing_Loader_XmlCollectionService',
            'fos_rest.routing.loader.yaml_collection' => 'getFosRest_Routing_Loader_YamlCollectionService',
            'fos_rest.view_handler' => 'getFosRest_ViewHandlerService',
            'fragment.handler' => 'getFragment_HandlerService',
            'fragment.listener' => 'getFragment_ListenerService',
            'fragment.renderer.hinclude' => 'getFragment_Renderer_HincludeService',
            'fragment.renderer.inline' => 'getFragment_Renderer_InlineService',
            'genemu.form.core.type.captcha' => 'getGenemu_Form_Core_Type_CaptchaService',
            'genemu.form.core.type.plain' => 'getGenemu_Form_Core_Type_PlainService',
            'genemu.form.core.type.recaptcha' => 'getGenemu_Form_Core_Type_RecaptchaService',
            'genemu.form.core.type.tinymce' => 'getGenemu_Form_Core_Type_TinymceService',
            'genemu.form.entity.type.ajaxentity' => 'getGenemu_Form_Entity_Type_AjaxentityService',
            'genemu.form.jquery.type.autocomplete.document' => 'getGenemu_Form_Jquery_Type_Autocomplete_DocumentService',
            'genemu.form.jquery.type.autocomplete.entity' => 'getGenemu_Form_Jquery_Type_Autocomplete_EntityService',
            'genemu.form.jquery.type.autocomplete.text' => 'getGenemu_Form_Jquery_Type_Autocomplete_TextService',
            'genemu.form.jquery.type.autocompleter.choice' => 'getGenemu_Form_Jquery_Type_Autocompleter_ChoiceService',
            'genemu.form.jquery.type.autocompleter.country' => 'getGenemu_Form_Jquery_Type_Autocompleter_CountryService',
            'genemu.form.jquery.type.autocompleter.currency' => 'getGenemu_Form_Jquery_Type_Autocompleter_CurrencyService',
            'genemu.form.jquery.type.autocompleter.document' => 'getGenemu_Form_Jquery_Type_Autocompleter_DocumentService',
            'genemu.form.jquery.type.autocompleter.entity' => 'getGenemu_Form_Jquery_Type_Autocompleter_EntityService',
            'genemu.form.jquery.type.autocompleter.language' => 'getGenemu_Form_Jquery_Type_Autocompleter_LanguageService',
            'genemu.form.jquery.type.autocompleter.locale' => 'getGenemu_Form_Jquery_Type_Autocompleter_LocaleService',
            'genemu.form.jquery.type.autocompleter.model' => 'getGenemu_Form_Jquery_Type_Autocompleter_ModelService',
            'genemu.form.jquery.type.autocompleter.timezone' => 'getGenemu_Form_Jquery_Type_Autocompleter_TimezoneService',
            'genemu.form.jquery.type.chosen.choice' => 'getGenemu_Form_Jquery_Type_Chosen_ChoiceService',
            'genemu.form.jquery.type.chosen.country' => 'getGenemu_Form_Jquery_Type_Chosen_CountryService',
            'genemu.form.jquery.type.chosen.currency' => 'getGenemu_Form_Jquery_Type_Chosen_CurrencyService',
            'genemu.form.jquery.type.chosen.document' => 'getGenemu_Form_Jquery_Type_Chosen_DocumentService',
            'genemu.form.jquery.type.chosen.entity' => 'getGenemu_Form_Jquery_Type_Chosen_EntityService',
            'genemu.form.jquery.type.chosen.language' => 'getGenemu_Form_Jquery_Type_Chosen_LanguageService',
            'genemu.form.jquery.type.chosen.locale' => 'getGenemu_Form_Jquery_Type_Chosen_LocaleService',
            'genemu.form.jquery.type.chosen.model' => 'getGenemu_Form_Jquery_Type_Chosen_ModelService',
            'genemu.form.jquery.type.chosen.timezone' => 'getGenemu_Form_Jquery_Type_Chosen_TimezoneService',
            'genemu.form.jquery.type.color' => 'getGenemu_Form_Jquery_Type_ColorService',
            'genemu.form.jquery.type.date' => 'getGenemu_Form_Jquery_Type_DateService',
            'genemu.form.jquery.type.file' => 'getGenemu_Form_Jquery_Type_FileService',
            'genemu.form.jquery.type.geolocation' => 'getGenemu_Form_Jquery_Type_GeolocationService',
            'genemu.form.jquery.type.image' => 'getGenemu_Form_Jquery_Type_ImageService',
            'genemu.form.jquery.type.rating' => 'getGenemu_Form_Jquery_Type_RatingService',
            'genemu.form.jquery.type.select2.choice' => 'getGenemu_Form_Jquery_Type_Select2_ChoiceService',
            'genemu.form.jquery.type.select2.country' => 'getGenemu_Form_Jquery_Type_Select2_CountryService',
            'genemu.form.jquery.type.select2.currency' => 'getGenemu_Form_Jquery_Type_Select2_CurrencyService',
            'genemu.form.jquery.type.select2.document' => 'getGenemu_Form_Jquery_Type_Select2_DocumentService',
            'genemu.form.jquery.type.select2.entity' => 'getGenemu_Form_Jquery_Type_Select2_EntityService',
            'genemu.form.jquery.type.select2.hidden' => 'getGenemu_Form_Jquery_Type_Select2_HiddenService',
            'genemu.form.jquery.type.select2.language' => 'getGenemu_Form_Jquery_Type_Select2_LanguageService',
            'genemu.form.jquery.type.select2.locale' => 'getGenemu_Form_Jquery_Type_Select2_LocaleService',
            'genemu.form.jquery.type.select2.model' => 'getGenemu_Form_Jquery_Type_Select2_ModelService',
            'genemu.form.jquery.type.select2.timezone' => 'getGenemu_Form_Jquery_Type_Select2_TimezoneService',
            'genemu.form.jquery.type.slider' => 'getGenemu_Form_Jquery_Type_SliderService',
            'genemu.form.jquery.type.tokeninput.choice' => 'getGenemu_Form_Jquery_Type_Tokeninput_ChoiceService',
            'genemu.form.jquery.type.tokeninput.country' => 'getGenemu_Form_Jquery_Type_Tokeninput_CountryService',
            'genemu.form.jquery.type.tokeninput.currency' => 'getGenemu_Form_Jquery_Type_Tokeninput_CurrencyService',
            'genemu.form.jquery.type.tokeninput.document' => 'getGenemu_Form_Jquery_Type_Tokeninput_DocumentService',
            'genemu.form.jquery.type.tokeninput.entity' => 'getGenemu_Form_Jquery_Type_Tokeninput_EntityService',
            'genemu.form.jquery.type.tokeninput.language' => 'getGenemu_Form_Jquery_Type_Tokeninput_LanguageService',
            'genemu.form.jquery.type.tokeninput.locale' => 'getGenemu_Form_Jquery_Type_Tokeninput_LocaleService',
            'genemu.form.jquery.type.tokeninput.model' => 'getGenemu_Form_Jquery_Type_Tokeninput_ModelService',
            'genemu.form.jquery.type.tokeninput.timezone' => 'getGenemu_Form_Jquery_Type_Tokeninput_TimezoneService',
            'genemu.form.model.type.ajaxmodel' => 'getGenemu_Form_Model_Type_AjaxmodelService',
            'genemu.form.type_recaptcha.validator' => 'getGenemu_Form_TypeRecaptcha_ValidatorService',
            'genemu.gd.captcha' => 'getGenemu_Gd_CaptchaService',
            'genemu.twig.extension.form' => 'getGenemu_Twig_Extension_FormService',
            'http_kernel' => 'getHttpKernelService',
            'jdare_clank.clank_app' => 'getJdareClank_ClankAppService',
            'jdare_clank.clank_handler_rpc' => 'getJdareClank_ClankHandlerRpcService',
            'jdare_clank.clank_handler_topic' => 'getJdareClank_ClankHandlerTopicService',
            'jdare_clank.entry_point' => 'getJdareClank_EntryPointService',
            'jdare_clank.periodic_sample_service' => 'getJdareClank_PeriodicSampleServiceService',
            'jdare_clank.rpc_sample_service' => 'getJdareClank_RpcSampleServiceService',
            'jdare_clank.topic_sample_service' => 'getJdareClank_TopicSampleServiceService',
            'jdare_clank.twig.clank_extension' => 'getJdareClank_Twig_ClankExtensionService',
            'jdare_clank.web_socket_server' => 'getJdareClank_WebSocketServerService',
            'jms_job_queue.entity.many_to_any_listener' => 'getJmsJobQueue_Entity_ManyToAnyListenerService',
            'jms_job_queue.entity.statistics_listener' => 'getJmsJobQueue_Entity_StatisticsListenerService',
            'jms_job_queue.twig.extension' => 'getJmsJobQueue_Twig_ExtensionService',
            'jms_serializer' => 'getJmsSerializerService',
            'jms_serializer.array_collection_handler' => 'getJmsSerializer_ArrayCollectionHandlerService',
            'jms_serializer.constraint_violation_handler' => 'getJmsSerializer_ConstraintViolationHandlerService',
            'jms_serializer.datetime_handler' => 'getJmsSerializer_DatetimeHandlerService',
            'jms_serializer.doctrine_proxy_subscriber' => 'getJmsSerializer_DoctrineProxySubscriberService',
            'jms_serializer.form_error_handler' => 'getJmsSerializer_FormErrorHandlerService',
            'jms_serializer.handler_registry' => 'getJmsSerializer_HandlerRegistryService',
            'jms_serializer.json_deserialization_visitor' => 'getJmsSerializer_JsonDeserializationVisitorService',
            'jms_serializer.json_serialization_visitor' => 'getJmsSerializer_JsonSerializationVisitorService',
            'jms_serializer.metadata_driver' => 'getJmsSerializer_MetadataDriverService',
            'jms_serializer.metadata_factory' => 'getJmsSerializer_MetadataFactoryService',
            'jms_serializer.naming_strategy' => 'getJmsSerializer_NamingStrategyService',
            'jms_serializer.object_constructor' => 'getJmsSerializer_ObjectConstructorService',
            'jms_serializer.php_collection_handler' => 'getJmsSerializer_PhpCollectionHandlerService',
            'jms_serializer.stopwatch_subscriber' => 'getJmsSerializer_StopwatchSubscriberService',
            'jms_serializer.templating.helper.serializer' => 'getJmsSerializer_Templating_Helper_SerializerService',
            'jms_serializer.unserialize_object_constructor' => 'getJmsSerializer_UnserializeObjectConstructorService',
            'jms_serializer.xml_deserialization_visitor' => 'getJmsSerializer_XmlDeserializationVisitorService',
            'jms_serializer.xml_serialization_visitor' => 'getJmsSerializer_XmlSerializationVisitorService',
            'jms_serializer.yaml_serialization_visitor' => 'getJmsSerializer_YamlSerializationVisitorService',
            'kernel' => 'getKernelService',
            'kernel.listener.hashnav_response' => 'getKernel_Listener_HashnavResponseService',
            'kernel.listener.install.event' => 'getKernel_Listener_Install_EventService',
            'kernel.listener.maintenance.event' => 'getKernel_Listener_Maintenance_EventService',
            'kernel.listener.nav_history_response' => 'getKernel_Listener_NavHistoryResponseService',
            'kernel.listener.title_service.request_listener' => 'getKernel_Listener_TitleService_RequestListenerService',
            'knp_menu.factory' => 'getKnpMenu_FactoryService',
            'knp_menu.helper' => 'getKnpMenu_HelperService',
            'knp_menu.listener.voters' => 'getKnpMenu_Listener_VotersService',
            'knp_menu.matcher' => 'getKnpMenu_MatcherService',
            'knp_menu.menu_provider' => 'getKnpMenu_MenuProviderService',
            'knp_menu.renderer.list' => 'getKnpMenu_Renderer_ListService',
            'knp_menu.renderer.twig' => 'getKnpMenu_Renderer_TwigService',
            'knp_menu.renderer_provider' => 'getKnpMenu_RendererProviderService',
            'knp_menu.voter.router' => 'getKnpMenu_Voter_RouterService',
            'knp_paginator' => 'getKnpPaginatorService',
            'knp_paginator.helper.processor' => 'getKnpPaginator_Helper_ProcessorService',
            'knp_paginator.subscriber.filtration' => 'getKnpPaginator_Subscriber_FiltrationService',
            'knp_paginator.subscriber.paginate' => 'getKnpPaginator_Subscriber_PaginateService',
            'knp_paginator.subscriber.sliding_pagination' => 'getKnpPaginator_Subscriber_SlidingPaginationService',
            'knp_paginator.subscriber.sortable' => 'getKnpPaginator_Subscriber_SortableService',
            'knp_paginator.templating.helper.pagination' => 'getKnpPaginator_Templating_Helper_PaginationService',
            'knp_paginator.twig.extension.pagination' => 'getKnpPaginator_Twig_Extension_PaginationService',
            'knp_voter_request' => 'getKnpVoterRequestService',
            'lexik_maintenance.driver.factory' => 'getLexikMaintenance_Driver_FactoryService',
            'lexik_maintenance.listener' => 'getLexikMaintenance_ListenerService',
            'liip_imagine' => 'getLiipImagineService',
            'liip_imagine.cache.clearer' => 'getLiipImagine_Cache_ClearerService',
            'liip_imagine.cache.manager' => 'getLiipImagine_Cache_ManagerService',
            'liip_imagine.cache.resolver.no_cache' => 'getLiipImagine_Cache_Resolver_NoCacheService',
            'liip_imagine.cache.resolver.web_path' => 'getLiipImagine_Cache_Resolver_WebPathService',
            'liip_imagine.controller' => 'getLiipImagine_ControllerService',
            'liip_imagine.data.loader.filesystem' => 'getLiipImagine_Data_Loader_FilesystemService',
            'liip_imagine.data.manager' => 'getLiipImagine_Data_ManagerService',
            'liip_imagine.filter.configuration' => 'getLiipImagine_Filter_ConfigurationService',
            'liip_imagine.filter.loader.background' => 'getLiipImagine_Filter_Loader_BackgroundService',
            'liip_imagine.filter.loader.crop' => 'getLiipImagine_Filter_Loader_CropService',
            'liip_imagine.filter.loader.paste' => 'getLiipImagine_Filter_Loader_PasteService',
            'liip_imagine.filter.loader.relative_resize' => 'getLiipImagine_Filter_Loader_RelativeResizeService',
            'liip_imagine.filter.loader.resize' => 'getLiipImagine_Filter_Loader_ResizeService',
            'liip_imagine.filter.loader.strip' => 'getLiipImagine_Filter_Loader_StripService',
            'liip_imagine.filter.loader.thumbnail' => 'getLiipImagine_Filter_Loader_ThumbnailService',
            'liip_imagine.filter.loader.upscale' => 'getLiipImagine_Filter_Loader_UpscaleService',
            'liip_imagine.filter.loader.watermark' => 'getLiipImagine_Filter_Loader_WatermarkService',
            'liip_imagine.filter.manager' => 'getLiipImagine_Filter_ManagerService',
            'liip_imagine.form.type.image' => 'getLiipImagine_Form_Type_ImageService',
            'liip_imagine.routing.loader' => 'getLiipImagine_Routing_LoaderService',
            'liip_imagine.templating.helper' => 'getLiipImagine_Templating_HelperService',
            'locale_listener' => 'getLocaleListenerService',
            'logger' => 'getLoggerService',
            'monolog.handler.chromephp' => 'getMonolog_Handler_ChromephpService',
            'monolog.handler.debug' => 'getMonolog_Handler_DebugService',
            'monolog.handler.firephp' => 'getMonolog_Handler_FirephpService',
            'monolog.handler.main' => 'getMonolog_Handler_MainService',
            'monolog.logger.batch' => 'getMonolog_Logger_BatchService',
            'monolog.logger.deprecation' => 'getMonolog_Logger_DeprecationService',
            'monolog.logger.doctrine' => 'getMonolog_Logger_DoctrineService',
            'monolog.logger.emergency' => 'getMonolog_Logger_EmergencyService',
            'monolog.logger.event' => 'getMonolog_Logger_EventService',
            'monolog.logger.profiler' => 'getMonolog_Logger_ProfilerService',
            'monolog.logger.request' => 'getMonolog_Logger_RequestService',
            'monolog.logger.router' => 'getMonolog_Logger_RouterService',
            'monolog.logger.security' => 'getMonolog_Logger_SecurityService',
            'monolog.logger.templating' => 'getMonolog_Logger_TemplatingService',
            'nelmio_api_doc.doc_comment_extractor' => 'getNelmioApiDoc_DocCommentExtractorService',
            'nelmio_api_doc.event_listener.request' => 'getNelmioApiDoc_EventListener_RequestService',
            'nelmio_api_doc.extractor.api_doc_extractor' => 'getNelmioApiDoc_Extractor_ApiDocExtractorService',
            'nelmio_api_doc.form.extension.description_form_type_extension' => 'getNelmioApiDoc_Form_Extension_DescriptionFormTypeExtensionService',
            'nelmio_api_doc.formatter.abstract_formatter' => 'getNelmioApiDoc_Formatter_AbstractFormatterService',
            'nelmio_api_doc.formatter.html_formatter' => 'getNelmioApiDoc_Formatter_HtmlFormatterService',
            'nelmio_api_doc.formatter.markdown_formatter' => 'getNelmioApiDoc_Formatter_MarkdownFormatterService',
            'nelmio_api_doc.formatter.simple_formatter' => 'getNelmioApiDoc_Formatter_SimpleFormatterService',
            'nelmio_api_doc.parser.form_type_parser' => 'getNelmioApiDoc_Parser_FormTypeParserService',
            'nelmio_api_doc.parser.jms_metadata_parser' => 'getNelmioApiDoc_Parser_JmsMetadataParserService',
            'nelmio_api_doc.parser.validation_parser' => 'getNelmioApiDoc_Parser_ValidationParserService',
            'nelmio_api_doc.twig.extension.extra_markdown' => 'getNelmioApiDoc_Twig_Extension_ExtraMarkdownService',
            'oro_address.address.manager' => 'getOroAddress_Address_ManagerService',
            'oro_address.address.provider' => 'getOroAddress_Address_ProviderService',
            'oro_address.form.address' => 'getOroAddress_Form_AddressService',
            'oro_address.form.handler.address' => 'getOroAddress_Form_Handler_AddressService',
            'oro_address.form.listener.address' => 'getOroAddress_Form_Listener_AddressService',
            'oro_address.form.type.address' => 'getOroAddress_Form_Type_AddressService',
            'oro_address.form.type.country' => 'getOroAddress_Form_Type_CountryService',
            'oro_address.form.type.email' => 'getOroAddress_Form_Type_EmailService',
            'oro_address.form.type.phone' => 'getOroAddress_Form_Type_PhoneService',
            'oro_address.form.type.region' => 'getOroAddress_Form_Type_RegionService',
            'oro_address.form.type.typed_address' => 'getOroAddress_Form_Type_TypedAddressService',
            'oro_address.importexport.address_normalizer' => 'getOroAddress_Importexport_AddressNormalizerService',
            'oro_address.importexport.address_type_normalizer' => 'getOroAddress_Importexport_AddressTypeNormalizerService',
            'oro_address.importexport.email_normalizer' => 'getOroAddress_Importexport_EmailNormalizerService',
            'oro_address.importexport.phone_normalizer' => 'getOroAddress_Importexport_PhoneNormalizerService',
            'oro_address.importexport.typed_address_normalizer' => 'getOroAddress_Importexport_TypedAddressNormalizerService',
            'oro_address.type.address_collection' => 'getOroAddress_Type_AddressCollectionService',
            'oro_address.type.email_collection' => 'getOroAddress_Type_EmailCollectionService',
            'oro_address.type.phone_collection' => 'getOroAddress_Type_PhoneCollectionService',
            'oro_assetic.configuration' => 'getOroAssetic_ConfigurationService',
            'oro_assetic.twig.extension' => 'getOroAssetic_Twig_ExtensionService',
            'oro_batch.connectors' => 'getOroBatch_ConnectorsService',
            'oro_batch.job_factory' => 'getOroBatch_JobFactoryService',
            'oro_batch.job_repository' => 'getOroBatch_JobRepositoryService',
            'oro_batch.logger.batch_log_handler' => 'getOroBatch_Logger_BatchLogHandlerService',
            'oro_batch.logger_subscriber' => 'getOroBatch_LoggerSubscriberService',
            'oro_batch.mail_notifier' => 'getOroBatch_MailNotifierService',
            'oro_batch.notification_subscriber' => 'getOroBatch_NotificationSubscriberService',
            'oro_batch.set_job_execution_log_file_subscriber' => 'getOroBatch_SetJobExecutionLogFileSubscriberService',
            'oro_batch.step_factory' => 'getOroBatch_StepFactoryService',
            'oro_calendar.calendar_connection.manager.api' => 'getOroCalendar_CalendarConnection_Manager_ApiService',
            'oro_calendar.calendar_event.form' => 'getOroCalendar_CalendarEvent_FormService',
            'oro_calendar.calendar_event.form.api' => 'getOroCalendar_CalendarEvent_Form_ApiService',
            'oro_calendar.calendar_event.form.handler' => 'getOroCalendar_CalendarEvent_Form_HandlerService',
            'oro_calendar.calendar_event.form.handler.api' => 'getOroCalendar_CalendarEvent_Form_Handler_ApiService',
            'oro_calendar.calendar_event.form.type' => 'getOroCalendar_CalendarEvent_Form_TypeService',
            'oro_calendar.calendar_event.form.type.api' => 'getOroCalendar_CalendarEvent_Form_Type_ApiService',
            'oro_calendar.calendar_event.manager.api' => 'getOroCalendar_CalendarEvent_Manager_ApiService',
            'oro_calendar.format_converter.date_time.full_calendar' => 'getOroCalendar_FormatConverter_DateTime_FullCalendarService',
            'oro_calendar.provider.calendar_config' => 'getOroCalendar_Provider_CalendarConfigService',
            'oro_calendar.reminders_sender' => 'getOroCalendar_RemindersSenderService',
            'oro_calendar.twig.dateformat' => 'getOroCalendar_Twig_DateformatService',
            'oro_config.config_definition_bag' => 'getOroConfig_ConfigDefinitionBagService',
            'oro_config.form.config_subscriber' => 'getOroConfig_Form_ConfigSubscriberService',
            'oro_config.form.handler.config' => 'getOroConfig_Form_Handler_ConfigService',
            'oro_config.global' => 'getOroConfig_GlobalService',
            'oro_config.provider.system_configuration.form_provider' => 'getOroConfig_Provider_SystemConfiguration_FormProviderService',
            'oro_config.twig.config_extension' => 'getOroConfig_Twig_ConfigExtensionService',
            'oro_config.type.config_checkbox' => 'getOroConfig_Type_ConfigCheckboxService',
            'oro_config.type.form' => 'getOroConfig_Type_FormService',
            'oro_config.type.form_field' => 'getOroConfig_Type_FormFieldService',
            'oro_config.user' => 'getOroConfig_UserService',
            'oro_cron.job_daemon' => 'getOroCron_JobDaemonService',
            'oro_cron.job_manager' => 'getOroCron_JobManagerService',
            'oro_dashboard.manager' => 'getOroDashboard_ManagerService',
            'oro_dataaudit.dataaudit_grid_service' => 'getOroDataaudit_DataauditGridServiceService',
            'oro_dataaudit.event_listener.dataaudit_history_grid_listener' => 'getOroDataaudit_EventListener_DataauditHistoryGridListenerService',
            'oro_dataaudit.listener.entity_subscriber' => 'getOroDataaudit_Listener_EntitySubscriberService',
            'oro_dataaudit.listener.kernel_listener' => 'getOroDataaudit_Listener_KernelListenerService',
            'oro_dataaudit.loggable.loggable_manager' => 'getOroDataaudit_Loggable_LoggableManagerService',
            'oro_dataaudit.twig.extension.auditable' => 'getOroDataaudit_Twig_Extension_AuditableService',
            'oro_datagrid.configuration.provider' => 'getOroDatagrid_Configuration_ProviderService',
            'oro_datagrid.configuration.provider.chain' => 'getOroDatagrid_Configuration_Provider_ChainService',
            'oro_datagrid.datagrid.builder' => 'getOroDatagrid_Datagrid_BuilderService',
            'oro_datagrid.datagrid.manager' => 'getOroDatagrid_Datagrid_ManagerService',
            'oro_datagrid.datagrid.request_params' => 'getOroDatagrid_Datagrid_RequestParamsService',
            'oro_datagrid.datasource.orm' => 'getOroDatagrid_Datasource_OrmService',
            'oro_datagrid.extension.action' => 'getOroDatagrid_Extension_ActionService',
            'oro_datagrid.extension.action.type.ajax' => 'getOroDatagrid_Extension_Action_Type_AjaxService',
            'oro_datagrid.extension.action.type.delete' => 'getOroDatagrid_Extension_Action_Type_DeleteService',
            'oro_datagrid.extension.action.type.navigate' => 'getOroDatagrid_Extension_Action_Type_NavigateService',
            'oro_datagrid.extension.formatter' => 'getOroDatagrid_Extension_FormatterService',
            'oro_datagrid.extension.formatter.field_property' => 'getOroDatagrid_Extension_Formatter_FieldPropertyService',
            'oro_datagrid.extension.formatter.property.callback_property' => 'getOroDatagrid_Extension_Formatter_Property_CallbackPropertyService',
            'oro_datagrid.extension.formatter.property.localized_number_property' => 'getOroDatagrid_Extension_Formatter_Property_LocalizedNumberPropertyService',
            'oro_datagrid.extension.formatter.property.translatable_property' => 'getOroDatagrid_Extension_Formatter_Property_TranslatablePropertyService',
            'oro_datagrid.extension.formatter.property.twig_property' => 'getOroDatagrid_Extension_Formatter_Property_TwigPropertyService',
            'oro_datagrid.extension.formatter.property.url_property' => 'getOroDatagrid_Extension_Formatter_Property_UrlPropertyService',
            'oro_datagrid.extension.mass_action' => 'getOroDatagrid_Extension_MassActionService',
            'oro_datagrid.extension.mass_action.handler.delete' => 'getOroDatagrid_Extension_MassAction_Handler_DeleteService',
            'oro_datagrid.extension.mass_action.type.ajax' => 'getOroDatagrid_Extension_MassAction_Type_AjaxService',
            'oro_datagrid.extension.mass_action.type.delete' => 'getOroDatagrid_Extension_MassAction_Type_DeleteService',
            'oro_datagrid.extension.mass_action.type.redirect' => 'getOroDatagrid_Extension_MassAction_Type_RedirectService',
            'oro_datagrid.extension.mass_action.type.widget' => 'getOroDatagrid_Extension_MassAction_Type_WidgetService',
            'oro_datagrid.extension.mass_action.type.window' => 'getOroDatagrid_Extension_MassAction_Type_WindowService',
            'oro_datagrid.extension.orm_pager' => 'getOroDatagrid_Extension_OrmPagerService',
            'oro_datagrid.extension.orm_sorter' => 'getOroDatagrid_Extension_OrmSorterService',
            'oro_datagrid.extension.pager.orm.pager' => 'getOroDatagrid_Extension_Pager_Orm_PagerService',
            'oro_datagrid.extension.toolbar' => 'getOroDatagrid_Extension_ToolbarService',
            'oro_datagrid.extension.views' => 'getOroDatagrid_Extension_ViewsService',
            'oro_datagrid.mass_action.dispatcher' => 'getOroDatagrid_MassAction_DispatcherService',
            'oro_datagrid.mass_action.parameters_parser' => 'getOroDatagrid_MassAction_ParametersParserService',
            'oro_datagrid.provider.resolver' => 'getOroDatagrid_Provider_ResolverService',
            'oro_datagrid.twig.datagrid' => 'getOroDatagrid_Twig_DatagridService',
            'oro_distribution.composer' => 'getOroDistribution_ComposerService',
            'oro_distribution.composer.io' => 'getOroDistribution_Composer_IoService',
            'oro_distribution.package_manager' => 'getOroDistribution_PackageManagerService',
            'oro_distribution.routing_loader' => 'getOroDistribution_RoutingLoaderService',
            'oro_email.cache' => 'getOroEmail_CacheService',
            'oro_email.datagrid_query_factory' => 'getOroEmail_DatagridQueryFactoryService',
            'oro_email.direct_mailer' => 'getOroEmail_DirectMailerService',
            'oro_email.email.address.manager' => 'getOroEmail_Email_Address_ManagerService',
            'oro_email.email.cache.manager' => 'getOroEmail_Email_Cache_ManagerService',
            'oro_email.email.entity.builder' => 'getOroEmail_Email_Entity_BuilderService',
            'oro_email.email.owner.provider' => 'getOroEmail_Email_Owner_ProviderService',
            'oro_email.email.owner.provider.storage' => 'getOroEmail_Email_Owner_Provider_StorageService',
            'oro_email.email_renderer' => 'getOroEmail_EmailRendererService',
            'oro_email.emailtemplate.datagrid_helper' => 'getOroEmail_Emailtemplate_DatagridHelperService',
            'oro_email.emailtemplate.datagrid_view_list' => 'getOroEmail_Emailtemplate_DatagridViewListService',
            'oro_email.entity.cache.clearer' => 'getOroEmail_Entity_Cache_ClearerService',
            'oro_email.entity.cache.warmer' => 'getOroEmail_Entity_Cache_WarmerService',
            'oro_email.form.email' => 'getOroEmail_Form_EmailService',
            'oro_email.form.emailtemplate' => 'getOroEmail_Form_EmailtemplateService',
            'oro_email.form.emailtemplate.api' => 'getOroEmail_Form_Emailtemplate_ApiService',
            'oro_email.form.handler.email' => 'getOroEmail_Form_Handler_EmailService',
            'oro_email.form.handler.emailtemplate' => 'getOroEmail_Form_Handler_EmailtemplateService',
            'oro_email.form.handler.emailtemplate.api' => 'getOroEmail_Form_Handler_Emailtemplate_ApiService',
            'oro_email.form.subscriber.emailtemplate' => 'getOroEmail_Form_Subscriber_EmailtemplateService',
            'oro_email.form.type.email' => 'getOroEmail_Form_Type_EmailService',
            'oro_email.form.type.email_address' => 'getOroEmail_Form_Type_EmailAddressService',
            'oro_email.form.type.emailtemplate' => 'getOroEmail_Form_Type_EmailtemplateService',
            'oro_email.form.type.emailtemplate.api' => 'getOroEmail_Form_Type_Emailtemplate_ApiService',
            'oro_email.form.type.emailtemplate_select' => 'getOroEmail_Form_Type_EmailtemplateSelectService',
            'oro_email.form.type.emailtemplate_translation' => 'getOroEmail_Form_Type_EmailtemplateTranslationService',
            'oro_email.listener.config_subscriber' => 'getOroEmail_Listener_ConfigSubscriberService',
            'oro_email.mailer.processor' => 'getOroEmail_Mailer_ProcessorService',
            'oro_email.manager.email.api' => 'getOroEmail_Manager_Email_ApiService',
            'oro_email.manager.emailtemplate.api' => 'getOroEmail_Manager_Emailtemplate_ApiService',
            'oro_email.provider.variable_provider' => 'getOroEmail_Provider_VariableProviderService',
            'oro_email.twig.email_sandbox' => 'getOroEmail_Twig_EmailSandboxService',
            'oro_email.twig.email_security_policy' => 'getOroEmail_Twig_EmailSecurityPolicyService',
            'oro_email.twig.string_loader' => 'getOroEmail_Twig_StringLoaderService',
            'oro_email.validator.variables_validator' => 'getOroEmail_Validator_VariablesValidatorService',
            'oro_email.workflow.action.send_email' => 'getOroEmail_Workflow_Action_SendEmailService',
            'oro_entity.datagrid.extension' => 'getOroEntity_Datagrid_ExtensionService',
            'oro_entity.entity_field_provider' => 'getOroEntity_EntityFieldProviderService',
            'oro_entity.entity_provider' => 'getOroEntity_EntityProviderService',
            'oro_entity.event_listener.custom_entity_grid_subscriber' => 'getOroEntity_EventListener_CustomEntityGridSubscriberService',
            'oro_entity.event_listener.relation_entity_grid_subscriber' => 'getOroEntity_EventListener_RelationEntityGridSubscriberService',
            'oro_entity.form.handler.entity_select' => 'getOroEntity_Form_Handler_EntitySelectService',
            'oro_entity.form.type.custom_entity' => 'getOroEntity_Form_Type_CustomEntityService',
            'oro_entity.form.type.entity_choice' => 'getOroEntity_Form_Type_EntityChoiceService',
            'oro_entity.form.type.entity_field_choice' => 'getOroEntity_Form_Type_EntityFieldChoiceService',
            'oro_entity.form.type.entity_select' => 'getOroEntity_Form_Type_EntitySelectService',
            'oro_entity.form.type.option_select' => 'getOroEntity_Form_Type_OptionSelectService',
            'oro_entity.listener.navigation_listener' => 'getOroEntity_Listener_NavigationListenerService',
            'oro_entity.orm.entity_class_accessor' => 'getOroEntity_Orm_EntityClassAccessorService',
            'oro_entity.orm.entity_class_resolver' => 'getOroEntity_Orm_EntityClassResolverService',
            'oro_entity.orm.sql_filter_collection' => 'getOroEntity_Orm_SqlFilterCollectionService',
            'oro_entity.owner.entity_config_subscriber' => 'getOroEntity_Owner_EntityConfigSubscriberService',
            'oro_entity_config.cache.cache' => 'getOroEntityConfig_Cache_CacheService',
            'oro_entity_config.cache.file_cache' => 'getOroEntityConfig_Cache_FileCacheService',
            'oro_entity_config.config_manager' => 'getOroEntityConfig_ConfigManagerService',
            'oro_entity_config.event_listener.audit_log_grid_listener' => 'getOroEntityConfig_EventListener_AuditLogGridListenerService',
            'oro_entity_config.event_listener.entityconfig_grid_listener' => 'getOroEntityConfig_EventListener_EntityconfigGridListenerService',
            'oro_entity_config.event_listener.entityfields_grid_listener' => 'getOroEntityConfig_EventListener_EntityfieldsGridListenerService',
            'oro_entity_config.event_listener.option_set_listener' => 'getOroEntityConfig_EventListener_OptionSetListenerService',
            'oro_entity_config.extension.config' => 'getOroEntityConfig_Extension_ConfigService',
            'oro_entity_config.link.config_manager' => 'getOroEntityConfig_Link_ConfigManagerService',
            'oro_entity_config.link.entity_manager' => 'getOroEntityConfig_Link_EntityManagerService',
            'oro_entity_config.link.provider_bag' => 'getOroEntityConfig_Link_ProviderBagService',
            'oro_entity_config.link.security_context' => 'getOroEntityConfig_Link_SecurityContextService',
            'oro_entity_config.model.file_cache' => 'getOroEntityConfig_Model_FileCacheService',
            'oro_entity_config.provider.dataaudit' => 'getOroEntityConfig_Provider_DataauditService',
            'oro_entity_config.provider.datagrid' => 'getOroEntityConfig_Provider_DatagridService',
            'oro_entity_config.provider.email' => 'getOroEntityConfig_Provider_EmailService',
            'oro_entity_config.provider.entity' => 'getOroEntityConfig_Provider_EntityService',
            'oro_entity_config.provider.extend' => 'getOroEntityConfig_Provider_ExtendService',
            'oro_entity_config.provider.form' => 'getOroEntityConfig_Provider_FormService',
            'oro_entity_config.provider.ownership' => 'getOroEntityConfig_Provider_OwnershipService',
            'oro_entity_config.provider.security' => 'getOroEntityConfig_Provider_SecurityService',
            'oro_entity_config.provider.view' => 'getOroEntityConfig_Provider_ViewService',
            'oro_entity_config.provider_bag' => 'getOroEntityConfig_ProviderBagService',
            'oro_entity_config.twig.extension.dynamic_fields' => 'getOroEntityConfig_Twig_Extension_DynamicFieldsService',
            'oro_entity_config.type.config' => 'getOroEntityConfig_Type_ConfigService',
            'oro_entity_extend.extend.extend_manager' => 'getOroEntityExtend_Extend_ExtendManagerService',
            'oro_entity_extend.extension.extend_entity' => 'getOroEntityExtend_Extension_ExtendEntityService',
            'oro_entity_extend.listener.config_subscriber' => 'getOroEntityExtend_Listener_ConfigSubscriberService',
            'oro_entity_extend.listener.entity_subscriber' => 'getOroEntityExtend_Listener_EntitySubscriberService',
            'oro_entity_extend.tools.dumper' => 'getOroEntityExtend_Tools_DumperService',
            'oro_entity_extend.type.field' => 'getOroEntityExtend_Type_FieldService',
            'oro_entity_extend.type.option_set' => 'getOroEntityExtend_Type_OptionSetService',
            'oro_entity_extend.type.option_set_collection' => 'getOroEntityExtend_Type_OptionSetCollectionService',
            'oro_entity_extend.type.relation' => 'getOroEntityExtend_Type_RelationService',
            'oro_filter.boolean_filter' => 'getOroFilter_BooleanFilterService',
            'oro_filter.choice_filter' => 'getOroFilter_ChoiceFilterService',
            'oro_filter.date_range_filter' => 'getOroFilter_DateRangeFilterService',
            'oro_filter.datetime_range_filter' => 'getOroFilter_DatetimeRangeFilterService',
            'oro_filter.entity_filter' => 'getOroFilter_EntityFilterService',
            'oro_filter.extension.orm_filter' => 'getOroFilter_Extension_OrmFilterService',
            'oro_filter.filter_utility' => 'getOroFilter_FilterUtilityService',
            'oro_filter.form.type.date_range' => 'getOroFilter_Form_Type_DateRangeService',
            'oro_filter.form.type.datetime_range' => 'getOroFilter_Form_Type_DatetimeRangeService',
            'oro_filter.form.type.filter' => 'getOroFilter_Form_Type_FilterService',
            'oro_filter.form.type.filter.boolean' => 'getOroFilter_Form_Type_Filter_BooleanService',
            'oro_filter.form.type.filter.choice' => 'getOroFilter_Form_Type_Filter_ChoiceService',
            'oro_filter.form.type.filter.date_range' => 'getOroFilter_Form_Type_Filter_DateRangeService',
            'oro_filter.form.type.filter.datetime_range' => 'getOroFilter_Form_Type_Filter_DatetimeRangeService',
            'oro_filter.form.type.filter.entity' => 'getOroFilter_Form_Type_Filter_EntityService',
            'oro_filter.form.type.filter.number' => 'getOroFilter_Form_Type_Filter_NumberService',
            'oro_filter.form.type.filter.selectrow' => 'getOroFilter_Form_Type_Filter_SelectrowService',
            'oro_filter.form.type.filter.text' => 'getOroFilter_Form_Type_Filter_TextService',
            'oro_filter.number_filter' => 'getOroFilter_NumberFilterService',
            'oro_filter.percent_filter' => 'getOroFilter_PercentFilterService',
            'oro_filter.select_row_filter' => 'getOroFilter_SelectRowFilterService',
            'oro_filter.string_filter' => 'getOroFilter_StringFilterService',
            'oro_form.autocomplete.search_registry' => 'getOroForm_Autocomplete_SearchRegistryService',
            'oro_form.autocomplete.security' => 'getOroForm_Autocomplete_SecurityService',
            'oro_form.extension.client_validation' => 'getOroForm_Extension_ClientValidationService',
            'oro_form.extension.constraint_as_option' => 'getOroForm_Extension_ConstraintAsOptionService',
            'oro_form.extension.data_block' => 'getOroForm_Extension_DataBlockService',
            'oro_form.extension.js_validation' => 'getOroForm_Extension_JsValidationService',
            'oro_form.extension.js_validation.constraints_provider' => 'getOroForm_Extension_JsValidation_ConstraintsProviderService',
            'oro_form.extension.js_validation.repeated' => 'getOroForm_Extension_JsValidation_RepeatedService',
            'oro_form.importexport.primary_item_collection_normalizer' => 'getOroForm_Importexport_PrimaryItemCollectionNormalizerService',
            'oro_form.twig.form_extension' => 'getOroForm_Twig_FormExtensionService',
            'oro_form.twig.js_validation_extension' => 'getOroForm_Twig_JsValidationExtensionService',
            'oro_form.type.collection' => 'getOroForm_Type_CollectionService',
            'oro_form.type.date' => 'getOroForm_Type_DateService',
            'oro_form.type.datetime' => 'getOroForm_Type_DatetimeService',
            'oro_form.type.entity_identifier' => 'getOroForm_Type_EntityIdentifierService',
            'oro_form.type.icon' => 'getOroForm_Type_IconService',
            'oro_form.type.jqueryselect2_hidden' => 'getOroForm_Type_Jqueryselect2HiddenService',
            'oro_form.type.money' => 'getOroForm_Type_MoneyService',
            'oro_form.type.multiple_entity' => 'getOroForm_Type_MultipleEntityService',
            'oro_form.type.time_interval' => 'getOroForm_Type_TimeIntervalService',
            'oro_form.validator.constraint_factory' => 'getOroForm_Validator_ConstraintFactoryService',
            'oro_help.form.tooltip_extension' => 'getOroHelp_Form_TooltipExtensionService',
            'oro_help.listener.help_link' => 'getOroHelp_Listener_HelpLinkService',
            'oro_help.model.help_link_provider' => 'getOroHelp_Model_HelpLinkProviderService',
            'oro_help.twig.extension' => 'getOroHelp_Twig_ExtensionService',
            'oro_imap.connector.factory' => 'getOroImap_Connector_FactoryService',
            'oro_imap.email_synchronizer' => 'getOroImap_EmailSynchronizerService',
            'oro_imap.form.type.configuration' => 'getOroImap_Form_Type_ConfigurationService',
            'oro_importexport.context_registry' => 'getOroImportexport_ContextRegistryService',
            'oro_importexport.data_converter.default' => 'getOroImportexport_DataConverter_DefaultService',
            'oro_importexport.file.file_system_operator' => 'getOroImportexport_File_FileSystemOperatorService',
            'oro_importexport.form.type.import' => 'getOroImportexport_Form_Type_ImportService',
            'oro_importexport.job_executor' => 'getOroImportexport_JobExecutorService',
            'oro_importexport.processor.export_delegate' => 'getOroImportexport_Processor_ExportDelegateService',
            'oro_importexport.processor.import_delegate' => 'getOroImportexport_Processor_ImportDelegateService',
            'oro_importexport.processor.import_validation_delegate' => 'getOroImportexport_Processor_ImportValidationDelegateService',
            'oro_importexport.processor.registry' => 'getOroImportexport_Processor_RegistryService',
            'oro_importexport.reader.csv' => 'getOroImportexport_Reader_CsvService',
            'oro_importexport.reader.entity' => 'getOroImportexport_Reader_EntityService',
            'oro_importexport.serializer' => 'getOroImportexport_SerializerService',
            'oro_importexport.serializer.collection_normalizer' => 'getOroImportexport_Serializer_CollectionNormalizerService',
            'oro_importexport.serializer.datetime_normalizer' => 'getOroImportexport_Serializer_DatetimeNormalizerService',
            'oro_importexport.serializer.dummy_encoder' => 'getOroImportexport_Serializer_DummyEncoderService',
            'oro_importexport.strategy.import.helper' => 'getOroImportexport_Strategy_Import_HelperService',
            'oro_importexport.writer.csv' => 'getOroImportexport_Writer_CsvService',
            'oro_importexport.writer.doctrine_clear' => 'getOroImportexport_Writer_DoctrineClearService',
            'oro_importexport.writer.dummy' => 'getOroImportexport_Writer_DummyService',
            'oro_importexport.writer.entity' => 'getOroImportexport_Writer_EntityService',
            'oro_importexport.writer.entity_detach_fixer' => 'getOroImportexport_Writer_EntityDetachFixerService',
            'oro_installer.form.type.configuration' => 'getOroInstaller_Form_Type_ConfigurationService',
            'oro_installer.form.type.configuration.database' => 'getOroInstaller_Form_Type_Configuration_DatabaseService',
            'oro_installer.form.type.configuration.mailer' => 'getOroInstaller_Form_Type_Configuration_MailerService',
            'oro_installer.form.type.configuration.system' => 'getOroInstaller_Form_Type_Configuration_SystemService',
            'oro_installer.form.type.configuration.websocket' => 'getOroInstaller_Form_Type_Configuration_WebsocketService',
            'oro_installer.form.type.setup' => 'getOroInstaller_Form_Type_SetupService',
            'oro_installer.scenario' => 'getOroInstaller_ScenarioService',
            'oro_installer.script_manager' => 'getOroInstaller_ScriptManagerService',
            'oro_installer.yaml_persister' => 'getOroInstaller_YamlPersisterService',
            'oro_integration.channel.manager.api' => 'getOroIntegration_Channel_Manager_ApiService',
            'oro_integration.form.channel' => 'getOroIntegration_Form_ChannelService',
            'oro_integration.form.handler.channel' => 'getOroIntegration_Form_Handler_ChannelService',
            'oro_integration.form.type.channel' => 'getOroIntegration_Form_Type_ChannelService',
            'oro_integration.job_executor' => 'getOroIntegration_JobExecutorService',
            'oro_integration.logger.strategy' => 'getOroIntegration_Logger_StrategyService',
            'oro_integration.manager.types_registry' => 'getOroIntegration_Manager_TypesRegistryService',
            'oro_integration.provider.channel_type.simple' => 'getOroIntegration_Provider_ChannelType_SimpleService',
            'oro_integration.provider.simple_transport' => 'getOroIntegration_Provider_SimpleTransportService',
            'oro_integration.sync.processor' => 'getOroIntegration_Sync_ProcessorService',
            'oro_integration.writer.persistent_batch_writer' => 'getOroIntegration_Writer_PersistentBatchWriterService',
            'oro_locale.cache' => 'getOroLocale_CacheService',
            'oro_locale.calendar' => 'getOroLocale_CalendarService',
            'oro_locale.calendar_factory' => 'getOroLocale_CalendarFactoryService',
            'oro_locale.form.type.country' => 'getOroLocale_Form_Type_CountryService',
            'oro_locale.form.type.currency' => 'getOroLocale_Form_Type_CurrencyService',
            'oro_locale.form.type.locale' => 'getOroLocale_Form_Type_LocaleService',
            'oro_locale.form.type.name_format' => 'getOroLocale_Form_Type_NameFormatService',
            'oro_locale.form.type.timezone' => 'getOroLocale_Form_Type_TimezoneService',
            'oro_locale.format_converter.date_time.intl' => 'getOroLocale_FormatConverter_DateTime_IntlService',
            'oro_locale.format_converter.date_time.moment' => 'getOroLocale_FormatConverter_DateTime_MomentService',
            'oro_locale.format_converter.date_time.registry' => 'getOroLocale_FormatConverter_DateTime_RegistryService',
            'oro_locale.formatter.address' => 'getOroLocale_Formatter_AddressService',
            'oro_locale.formatter.date_time' => 'getOroLocale_Formatter_DateTimeService',
            'oro_locale.formatter.name' => 'getOroLocale_Formatter_NameService',
            'oro_locale.formatter.number' => 'getOroLocale_Formatter_NumberService',
            'oro_locale.locale_listener' => 'getOroLocale_LocaleListenerService',
            'oro_locale.settings' => 'getOroLocale_SettingsService',
            'oro_locale.twig.address' => 'getOroLocale_Twig_AddressService',
            'oro_locale.twig.calendar' => 'getOroLocale_Twig_CalendarService',
            'oro_locale.twig.date_format' => 'getOroLocale_Twig_DateFormatService',
            'oro_locale.twig.date_time' => 'getOroLocale_Twig_DateTimeService',
            'oro_locale.twig.locale' => 'getOroLocale_Twig_LocaleService',
            'oro_locale.twig.name' => 'getOroLocale_Twig_NameService',
            'oro_locale.twig.number' => 'getOroLocale_Twig_NumberService',
            'oro_measure.manager' => 'getOroMeasure_ManagerService',
            'oro_measure.measure_converter' => 'getOroMeasure_MeasureConverterService',
            'oro_menu.builder_chain' => 'getOroMenu_BuilderChainService',
            'oro_menu.cache' => 'getOroMenu_CacheService',
            'oro_menu.configuration_builder' => 'getOroMenu_ConfigurationBuilderService',
            'oro_menu.factory' => 'getOroMenu_FactoryService',
            'oro_menu.twig.extension' => 'getOroMenu_Twig_ExtensionService',
            'oro_menu_acl_extension' => 'getOroMenuAclExtensionService',
            'oro_navigation.breadcrumb_manager' => 'getOroNavigation_BreadcrumbManagerService',
            'oro_navigation.content.datagrid_tag_listener' => 'getOroNavigation_Content_DatagridTagListenerService',
            'oro_navigation.content.doctrine_tag_generator' => 'getOroNavigation_Content_DoctrineTagGeneratorService',
            'oro_navigation.content.security.context.linksss' => 'getOroNavigation_Content_Security_Context_LinksssService',
            'oro_navigation.content.simple_tag_generator' => 'getOroNavigation_Content_SimpleTagGeneratorService',
            'oro_navigation.content.tag_generator_chain' => 'getOroNavigation_Content_TagGeneratorChainService',
            'oro_navigation.content.tag_generator_chain.link' => 'getOroNavigation_Content_TagGeneratorChain_LinkService',
            'oro_navigation.content.topic_sender' => 'getOroNavigation_Content_TopicSenderService',
            'oro_navigation.event.doctrine_tag_subscriber' => 'getOroNavigation_Event_DoctrineTagSubscriberService',
            'oro_navigation.favorites_menu.builder' => 'getOroNavigation_FavoritesMenu_BuilderService',
            'oro_navigation.form.handler.pagestate' => 'getOroNavigation_Form_Handler_PagestateService',
            'oro_navigation.form.pagestate' => 'getOroNavigation_Form_PagestateService',
            'oro_navigation.form.type.pagestate' => 'getOroNavigation_Form_Type_PagestateService',
            'oro_navigation.history_menu.builder' => 'getOroNavigation_HistoryMenu_BuilderService',
            'oro_navigation.item.builder.favorite' => 'getOroNavigation_Item_Builder_FavoriteService',
            'oro_navigation.item.builder.history' => 'getOroNavigation_Item_Builder_HistoryService',
            'oro_navigation.item.builder.mostviewed' => 'getOroNavigation_Item_Builder_MostviewedService',
            'oro_navigation.item.builder.pinbar' => 'getOroNavigation_Item_Builder_PinbarService',
            'oro_navigation.item.factory' => 'getOroNavigation_Item_FactoryService',
            'oro_navigation.item.pinbar.post_persist_listener' => 'getOroNavigation_Item_Pinbar_PostPersistListenerService',
            'oro_navigation.mostviewed_menu.builder' => 'getOroNavigation_MostviewedMenu_BuilderService',
            'oro_navigation.pinbar_menu.builder' => 'getOroNavigation_PinbarMenu_BuilderService',
            'oro_navigation.title_annotations_reader' => 'getOroNavigation_TitleAnnotationsReaderService',
            'oro_navigation.title_config_reader' => 'getOroNavigation_TitleConfigReaderService',
            'oro_navigation.title_service' => 'getOroNavigation_TitleServiceService',
            'oro_navigation.title_service.twig.extension' => 'getOroNavigation_TitleService_Twig_ExtensionService',
            'oro_navigation.translation.extractor' => 'getOroNavigation_Translation_ExtractorService',
            'oro_navigation.twig.content_tags' => 'getOroNavigation_Twig_ContentTagsService',
            'oro_navigation.twig.hash_nav_extension' => 'getOroNavigation_Twig_HashNavExtensionService',
            'oro_notification.docrine.event.listener' => 'getOroNotification_Docrine_Event_ListenerService',
            'oro_notification.email_handler' => 'getOroNotification_EmailHandlerService',
            'oro_notification.email_notification.manager.api' => 'getOroNotification_EmailNotification_Manager_ApiService',
            'oro_notification.email_processor' => 'getOroNotification_EmailProcessorService',
            'oro_notification.event_listener.email_notification_service' => 'getOroNotification_EventListener_EmailNotificationServiceService',
            'oro_notification.form.email_notification' => 'getOroNotification_Form_EmailNotificationService',
            'oro_notification.form.email_notification.api' => 'getOroNotification_Form_EmailNotification_ApiService',
            'oro_notification.form.handler.email_notification' => 'getOroNotification_Form_Handler_EmailNotificationService',
            'oro_notification.form.handler.email_notification.api' => 'getOroNotification_Form_Handler_EmailNotification_ApiService',
            'oro_notification.form.type.email_notification' => 'getOroNotification_Form_Type_EmailNotificationService',
            'oro_notification.form.type.email_notification.api' => 'getOroNotification_Form_Type_EmailNotification_ApiService',
            'oro_notification.form.type.recipient_list' => 'getOroNotification_Form_Type_RecipientListService',
            'oro_notification.locale_listener' => 'getOroNotification_LocaleListenerService',
            'oro_notification.mailer.spool_db' => 'getOroNotification_Mailer_SpoolDbService',
            'oro_notification.manager' => 'getOroNotification_ManagerService',
            'oro_organization.business_unit.listener' => 'getOroOrganization_BusinessUnit_ListenerService',
            'oro_organization.business_unit.manager.api' => 'getOroOrganization_BusinessUnit_Manager_ApiService',
            'oro_organization.business_unit_manager' => 'getOroOrganization_BusinessUnitManagerService',
            'oro_organization.entity_ownership.listener' => 'getOroOrganization_EntityOwnership_ListenerService',
            'oro_organization.event_listener.bu_update_grid_listener' => 'getOroOrganization_EventListener_BuUpdateGridListenerService',
            'oro_organization.event_listener.bu_view_grid_listener' => 'getOroOrganization_EventListener_BuViewGridListenerService',
            'oro_organization.form.business_unit' => 'getOroOrganization_Form_BusinessUnitService',
            'oro_organization.form.business_unit.api' => 'getOroOrganization_Form_BusinessUnit_ApiService',
            'oro_organization.form.extension.owner' => 'getOroOrganization_Form_Extension_OwnerService',
            'oro_organization.form.handler.api' => 'getOroOrganization_Form_Handler_ApiService',
            'oro_organization.form.handler.business_unit' => 'getOroOrganization_Form_Handler_BusinessUnitService',
            'oro_organization.form.listener' => 'getOroOrganization_Form_ListenerService',
            'oro_organization.form.transformer.business_unit_select' => 'getOroOrganization_Form_Transformer_BusinessUnitSelectService',
            'oro_organization.form.type.business_unit' => 'getOroOrganization_Form_Type_BusinessUnitService',
            'oro_organization.form.type.business_unit.api' => 'getOroOrganization_Form_Type_BusinessUnit_ApiService',
            'oro_organization.form.type.business_unit_select' => 'getOroOrganization_Form_Type_BusinessUnitSelectService',
            'oro_organization.form.type.business_unit_tree_select_type' => 'getOroOrganization_Form_Type_BusinessUnitTreeSelectTypeService',
            'oro_organization.form.type.ownership_type' => 'getOroOrganization_Form_Type_OwnershipTypeService',
            'oro_organization.method.get_ownership_type' => 'getOroOrganization_Method_GetOwnershipTypeService',
            'oro_organization.organization.manager.api' => 'getOroOrganization_Organization_Manager_ApiService',
            'oro_organization.provider.business_units_grid' => 'getOroOrganization_Provider_BusinessUnitsGridService',
            'oro_organization.twig.business_units' => 'getOroOrganization_Twig_BusinessUnitsService',
            'oro_organization.twig.get_owner' => 'getOroOrganization_Twig_GetOwnerService',
            'oro_platform.maintenance' => 'getOroPlatform_MaintenanceService',
            'oro_query_designer.config.resolver' => 'getOroQueryDesigner_Config_ResolverService',
            'oro_query_designer.form.type.function_choice' => 'getOroQueryDesigner_Form_Type_FunctionChoiceService',
            'oro_query_designer.form.type.query_designer_column' => 'getOroQueryDesigner_Form_Type_QueryDesignerColumnService',
            'oro_query_designer.form.type.query_designer_filter' => 'getOroQueryDesigner_Form_Type_QueryDesignerFilterService',
            'oro_query_designer.form.type.query_designer_grouping' => 'getOroQueryDesigner_Form_Type_QueryDesignerGroupingService',
            'oro_query_designer.form.type.sorting_choice' => 'getOroQueryDesigner_Form_Type_SortingChoiceService',
            'oro_query_designer.grid.extension.orm_datasource' => 'getOroQueryDesigner_Grid_Extension_OrmDatasourceService',
            'oro_query_designer.query_designer.manager' => 'getOroQueryDesigner_QueryDesigner_ManagerService',
            'oro_report.datagrid.configuration.provider' => 'getOroReport_Datagrid_Configuration_ProviderService',
            'oro_report.entity_field_provider' => 'getOroReport_EntityFieldProviderService',
            'oro_report.form.handler.report' => 'getOroReport_Form_Handler_ReportService',
            'oro_report.form.report' => 'getOroReport_Form_ReportService',
            'oro_report.form.type.entity_choice' => 'getOroReport_Form_Type_EntityChoiceService',
            'oro_report.form.type.entity_field_choice' => 'getOroReport_Form_Type_EntityFieldChoiceService',
            'oro_report.form.type.report' => 'getOroReport_Form_Type_ReportService',
            'oro_report.listener.navigation_listener' => 'getOroReport_Listener_NavigationListenerService',
            'oro_report.report.manager.api' => 'getOroReport_Report_Manager_ApiService',
            'oro_report.report_manager' => 'getOroReport_ReportManagerService',
            'oro_requirejs.cache' => 'getOroRequirejs_CacheService',
            'oro_requirejs.twig.requirejs_extension' => 'getOroRequirejs_Twig_RequirejsExtensionService',
            'oro_requirejs_config_provider' => 'getOroRequirejsConfigProviderService',
            'oro_search.datasource.search' => 'getOroSearch_Datasource_SearchService',
            'oro_search.event_listener.search_results_grid_listener' => 'getOroSearch_EventListener_SearchResultsGridListenerService',
            'oro_search.extension.formatter.property.search_result_property' => 'getOroSearch_Extension_Formatter_Property_SearchResultPropertyService',
            'oro_search.extension.pager.orm.pager' => 'getOroSearch_Extension_Pager_Orm_PagerService',
            'oro_search.extension.search_pager' => 'getOroSearch_Extension_SearchPagerService',
            'oro_search.extension.search_results' => 'getOroSearch_Extension_SearchResultsService',
            'oro_search.formatter.result_formatter' => 'getOroSearch_Formatter_ResultFormatterService',
            'oro_search.index' => 'getOroSearch_IndexService',
            'oro_search.index_listener' => 'getOroSearch_IndexListenerService',
            'oro_search.mapper' => 'getOroSearch_MapperService',
            'oro_search.prepare_result_item.listener' => 'getOroSearch_PrepareResultItem_ListenerService',
            'oro_search.provider.result_statistics_provider' => 'getOroSearch_Provider_ResultStatisticsProviderService',
            'oro_search.search.engine' => 'getOroSearch_Search_EngineService',
            'oro_search.twig.search_extension' => 'getOroSearch_Twig_SearchExtensionService',
            'oro_security.acl.annotation_provider' => 'getOroSecurity_Acl_AnnotationProviderService',
            'oro_security.acl.extension_selector' => 'getOroSecurity_Acl_ExtensionSelectorService',
            'oro_security.acl.manager' => 'getOroSecurity_Acl_ManagerService',
            'oro_security.acl.object_id_accessor' => 'getOroSecurity_Acl_ObjectIdAccessorService',
            'oro_security.acl.object_identity_factory' => 'getOroSecurity_Acl_ObjectIdentityFactoryService',
            'oro_security.acl.permission_granting_strategy' => 'getOroSecurity_Acl_PermissionGrantingStrategyService',
            'oro_security.acl.privilege_repository' => 'getOroSecurity_Acl_PrivilegeRepositoryService',
            'oro_security.acl.sid_manager' => 'getOroSecurity_Acl_SidManagerService',
            'oro_security.acl.voter_link' => 'getOroSecurity_Acl_VoterLinkService',
            'oro_security.acl_helper' => 'getOroSecurity_AclHelperService',
            'oro_security.action_metadata_provider' => 'getOroSecurity_ActionMetadataProviderService',
            'oro_security.encoder.mcrypt' => 'getOroSecurity_Encoder_McryptService',
            'oro_security.entity_security_config_subscriber' => 'getOroSecurity_EntitySecurityConfigSubscriberService',
            'oro_security.entity_security_metadata_provider' => 'getOroSecurity_EntitySecurityMetadataProviderService',
            'oro_security.form.type.object_label_type' => 'getOroSecurity_Form_Type_ObjectLabelTypeService',
            'oro_security.form.type.oro_acl_access_level_selector' => 'getOroSecurity_Form_Type_OroAclAccessLevelSelectorService',
            'oro_security.link.ownership_tree_provider' => 'getOroSecurity_Link_OwnershipTreeProviderService',
            'oro_security.link.sid_manager' => 'getOroSecurity_Link_SidManagerService',
            'oro_security.listener.controller' => 'getOroSecurity_Listener_ControllerService',
            'oro_security.owner.entity_owner_accessor' => 'getOroSecurity_Owner_EntityOwnerAccessorService',
            'oro_security.owner.ownership_config_subscriber' => 'getOroSecurity_Owner_OwnershipConfigSubscriberService',
            'oro_security.owner.ownership_metadata_provider' => 'getOroSecurity_Owner_OwnershipMetadataProviderService',
            'oro_security.ownership_tree_provider' => 'getOroSecurity_OwnershipTreeProviderService',
            'oro_security.ownership_tree_subscriber' => 'getOroSecurity_OwnershipTreeSubscriberService',
            'oro_security.security_facade' => 'getOroSecurity_SecurityFacadeService',
            'oro_security.twig.security_extension' => 'getOroSecurity_Twig_SecurityExtensionService',
            'oro_sidebar.twig.extension' => 'getOroSidebar_Twig_ExtensionService',
            'oro_sidebar.widget_definition.registry' => 'getOroSidebar_WidgetDefinition_RegistryService',
            'oro_tag.autocomplete.tag.search_handler' => 'getOroTag_Autocomplete_Tag_SearchHandlerService',
            'oro_tag.docrine.event.listener' => 'getOroTag_Docrine_Event_ListenerService',
            'oro_tag.event_listener.search_results_grid_listener' => 'getOroTag_EventListener_SearchResultsGridListenerService',
            'oro_tag.form.handler.api' => 'getOroTag_Form_Handler_ApiService',
            'oro_tag.form.handler.tag' => 'getOroTag_Form_Handler_TagService',
            'oro_tag.form.subscriber.tag_select' => 'getOroTag_Form_Subscriber_TagSelectService',
            'oro_tag.form.tag' => 'getOroTag_Form_TagService',
            'oro_tag.form.tag.api' => 'getOroTag_Form_Tag_ApiService',
            'oro_tag.form.transformer.tag_select' => 'getOroTag_Form_Transformer_TagSelectService',
            'oro_tag.form.type.tag' => 'getOroTag_Form_Type_TagService',
            'oro_tag.form.type.tag.api' => 'getOroTag_Form_Type_Tag_ApiService',
            'oro_tag.form.type.tag_autocomplete' => 'getOroTag_Form_Type_TagAutocompleteService',
            'oro_tag.form.type.tag_select' => 'getOroTag_Form_Type_TagSelectService',
            'oro_tag.provider.search_provider' => 'getOroTag_Provider_SearchProviderService',
            'oro_tag.tag.manager' => 'getOroTag_Tag_ManagerService',
            'oro_tag.tag.manager.api' => 'getOroTag_Tag_Manager_ApiService',
            'oro_tag.twig.tag.extension' => 'getOroTag_Twig_Tag_ExtensionService',
            'oro_theme.event_listener.load_css' => 'getOroTheme_EventListener_LoadCssService',
            'oro_theme.registry' => 'getOroTheme_RegistryService',
            'oro_theme.twig.extension' => 'getOroTheme_Twig_ExtensionService',
            'oro_translation.controller' => 'getOroTranslation_ControllerService',
            'oro_translation.database_translation.loader' => 'getOroTranslation_DatabaseTranslation_LoaderService',
            'oro_translation.database_translation.metadata.cache' => 'getOroTranslation_DatabaseTranslation_Metadata_CacheService',
            'oro_translation.extractor.php_code_extractor' => 'getOroTranslation_Extractor_PhpCodeExtractorService',
            'oro_translation.form.type.jqueryselect2_translatable_entity' => 'getOroTranslation_Form_Type_Jqueryselect2TranslatableEntityService',
            'oro_translation.form.type.translatable_entity' => 'getOroTranslation_Form_Type_TranslatableEntityService',
            'oro_translation.listener.request' => 'getOroTranslation_Listener_RequestService',
            'oro_ui.format_converter.date_time.jquery_ui' => 'getOroUi_FormatConverter_DateTime_JqueryUiService',
            'oro_ui.router' => 'getOroUi_RouterService',
            'oro_ui.twig.ceil_extension' => 'getOroUi_Twig_CeilExtensionService',
            'oro_ui.twig.date_extension' => 'getOroUi_Twig_DateExtensionService',
            'oro_ui.twig.form_extension' => 'getOroUi_Twig_FormExtensionService',
            'oro_ui.twig.mobile_extension' => 'getOroUi_Twig_MobileExtensionService',
            'oro_ui.twig.skype_button_extension' => 'getOroUi_Twig_SkypeButtonExtensionService',
            'oro_ui.twig.ui_extension' => 'getOroUi_Twig_UiExtensionService',
            'oro_ui.twig.widget_extension' => 'getOroUi_Twig_WidgetExtensionService',
            'oro_ui.view.listener' => 'getOroUi_View_ListenerService',
            'oro_user.autocomplete.user.search_acl_handler' => 'getOroUser_Autocomplete_User_SearchAclHandlerService',
            'oro_user.autocomplete.user.search_handler' => 'getOroUser_Autocomplete_User_SearchHandlerService',
            'oro_user.cache' => 'getOroUser_CacheService',
            'oro_user.change_password.subscriber' => 'getOroUser_ChangePassword_SubscriberService',
            'oro_user.email.owner.provider' => 'getOroUser_Email_Owner_ProviderService',
            'oro_user.entity_with_image.subscriber' => 'getOroUser_EntityWithImage_SubscriberService',
            'oro_user.event_listener.group_users_grid_listener' => 'getOroUser_EventListener_GroupUsersGridListenerService',
            'oro_user.event_listener.role_users_grid_listener' => 'getOroUser_EventListener_RoleUsersGridListenerService',
            'oro_user.event_listener.user_email_grid_listener' => 'getOroUser_EventListener_UserEmailGridListenerService',
            'oro_user.event_listener.without_from_user_email_grid_listener' => 'getOroUser_EventListener_WithoutFromUserEmailGridListenerService',
            'oro_user.form.group' => 'getOroUser_Form_GroupService',
            'oro_user.form.group.api' => 'getOroUser_Form_Group_ApiService',
            'oro_user.form.handler.acl_role' => 'getOroUser_Form_Handler_AclRoleService',
            'oro_user.form.handler.group' => 'getOroUser_Form_Handler_GroupService',
            'oro_user.form.handler.group.api' => 'getOroUser_Form_Handler_Group_ApiService',
            'oro_user.form.handler.reset' => 'getOroUser_Form_Handler_ResetService',
            'oro_user.form.handler.role.api' => 'getOroUser_Form_Handler_Role_ApiService',
            'oro_user.form.handler.status' => 'getOroUser_Form_Handler_StatusService',
            'oro_user.form.handler.user' => 'getOroUser_Form_Handler_UserService',
            'oro_user.form.handler.user.api' => 'getOroUser_Form_Handler_User_ApiService',
            'oro_user.form.reset' => 'getOroUser_Form_ResetService',
            'oro_user.form.role' => 'getOroUser_Form_RoleService',
            'oro_user.form.role.api' => 'getOroUser_Form_Role_ApiService',
            'oro_user.form.status' => 'getOroUser_Form_StatusService',
            'oro_user.form.type.change_password' => 'getOroUser_Form_Type_ChangePasswordService',
            'oro_user.form.type.email' => 'getOroUser_Form_Type_EmailService',
            'oro_user.form.type.gender' => 'getOroUser_Form_Type_GenderService',
            'oro_user.form.type.group' => 'getOroUser_Form_Type_GroupService',
            'oro_user.form.type.group.api' => 'getOroUser_Form_Type_Group_ApiService',
            'oro_user.form.type.reset' => 'getOroUser_Form_Type_ResetService',
            'oro_user.form.type.role.api' => 'getOroUser_Form_Type_Role_ApiService',
            'oro_user.form.type.status' => 'getOroUser_Form_Type_StatusService',
            'oro_user.form.type.user' => 'getOroUser_Form_Type_UserService',
            'oro_user.form.type.user.api' => 'getOroUser_Form_Type_User_ApiService',
            'oro_user.form.type.user_acl_select' => 'getOroUser_Form_Type_UserAclSelectService',
            'oro_user.form.type.user_multiselect' => 'getOroUser_Form_Type_UserMultiselectService',
            'oro_user.form.type.user_select' => 'getOroUser_Form_Type_UserSelectService',
            'oro_user.form.user' => 'getOroUser_Form_UserService',
            'oro_user.form.user.api' => 'getOroUser_Form_User_ApiService',
            'oro_user.gender_provider' => 'getOroUser_GenderProviderService',
            'oro_user.group_manager' => 'getOroUser_GroupManagerService',
            'oro_user.group_manager.api' => 'getOroUser_GroupManager_ApiService',
            'oro_user.importexport.user_normalizer' => 'getOroUser_Importexport_UserNormalizerService',
            'oro_user.manager' => 'getOroUser_ManagerService',
            'oro_user.manager.api' => 'getOroUser_Manager_ApiService',
            'oro_user.role.listener' => 'getOroUser_Role_ListenerService',
            'oro_user.role_manager' => 'getOroUser_RoleManagerService',
            'oro_user.role_manager.api' => 'getOroUser_RoleManager_ApiService',
            'oro_user.security.login' => 'getOroUser_Security_LoginService',
            'oro_user.security.provider' => 'getOroUser_Security_ProviderService',
            'oro_user.status_manager' => 'getOroUser_StatusManagerService',
            'oro_user.twig.user_extension' => 'getOroUser_Twig_UserExtensionService',
            'oro_user.user_menu' => 'getOroUser_UserMenuService',
            'oro_wamp.db_ping' => 'getOroWamp_DbPingService',
            'oro_wamp.publisher' => 'getOroWamp_PublisherService',
            'oro_wamp.twig.sync_extension' => 'getOroWamp_Twig_SyncExtensionService',
            'oro_windows.twig.extension' => 'getOroWindows_Twig_ExtensionService',
            'oro_workflow.action.assign_active_user' => 'getOroWorkflow_Action_AssignActiveUserService',
            'oro_workflow.action.assign_value' => 'getOroWorkflow_Action_AssignValueService',
            'oro_workflow.action.call_method' => 'getOroWorkflow_Action_CallMethodService',
            'oro_workflow.action.close_workflow' => 'getOroWorkflow_Action_CloseWorkflowService',
            'oro_workflow.action.configurable' => 'getOroWorkflow_Action_ConfigurableService',
            'oro_workflow.action.create_entity' => 'getOroWorkflow_Action_CreateEntityService',
            'oro_workflow.action.create_object' => 'getOroWorkflow_Action_CreateObjectService',
            'oro_workflow.action.format_name' => 'getOroWorkflow_Action_FormatNameService',
            'oro_workflow.action.format_string' => 'getOroWorkflow_Action_FormatStringService',
            'oro_workflow.action.redirect' => 'getOroWorkflow_Action_RedirectService',
            'oro_workflow.action.redirect_to_workflow' => 'getOroWorkflow_Action_RedirectToWorkflowService',
            'oro_workflow.action.request_entity' => 'getOroWorkflow_Action_RequestEntityService',
            'oro_workflow.action.start_workflow' => 'getOroWorkflow_Action_StartWorkflowService',
            'oro_workflow.action.tree' => 'getOroWorkflow_Action_TreeService',
            'oro_workflow.action.unset_value' => 'getOroWorkflow_Action_UnsetValueService',
            'oro_workflow.action_assembler' => 'getOroWorkflow_ActionAssemblerService',
            'oro_workflow.action_factory' => 'getOroWorkflow_ActionFactoryService',
            'oro_workflow.attribute_assembler' => 'getOroWorkflow_AttributeAssemblerService',
            'oro_workflow.condition.andx' => 'getOroWorkflow_Condition_AndxService',
            'oro_workflow.condition.blank' => 'getOroWorkflow_Condition_BlankService',
            'oro_workflow.condition.configurable' => 'getOroWorkflow_Condition_ConfigurableService',
            'oro_workflow.condition.equal_to' => 'getOroWorkflow_Condition_EqualToService',
            'oro_workflow.condition.false' => 'getOroWorkflow_Condition_FalseService',
            'oro_workflow.condition.greater_than' => 'getOroWorkflow_Condition_GreaterThanService',
            'oro_workflow.condition.greater_than_or_equal' => 'getOroWorkflow_Condition_GreaterThanOrEqualService',
            'oro_workflow.condition.has_value' => 'getOroWorkflow_Condition_HasValueService',
            'oro_workflow.condition.less_than' => 'getOroWorkflow_Condition_LessThanService',
            'oro_workflow.condition.less_than_or_equal' => 'getOroWorkflow_Condition_LessThanOrEqualService',
            'oro_workflow.condition.not' => 'getOroWorkflow_Condition_NotService',
            'oro_workflow.condition.not_blank' => 'getOroWorkflow_Condition_NotBlankService',
            'oro_workflow.condition.not_equal_to' => 'getOroWorkflow_Condition_NotEqualToService',
            'oro_workflow.condition.not_has_value' => 'getOroWorkflow_Condition_NotHasValueService',
            'oro_workflow.condition.orx' => 'getOroWorkflow_Condition_OrxService',
            'oro_workflow.condition.true' => 'getOroWorkflow_Condition_TrueService',
            'oro_workflow.condition_assembler' => 'getOroWorkflow_ConditionAssemblerService',
            'oro_workflow.condition_factory' => 'getOroWorkflow_ConditionFactoryService',
            'oro_workflow.configuration.builder.workflow_definition' => 'getOroWorkflow_Configuration_Builder_WorkflowDefinitionService',
            'oro_workflow.configuration.config.workflow_list' => 'getOroWorkflow_Configuration_Config_WorkflowListService',
            'oro_workflow.configuration.config.workflow_sole' => 'getOroWorkflow_Configuration_Config_WorkflowSoleService',
            'oro_workflow.configuration.config_provider' => 'getOroWorkflow_Configuration_ConfigProviderService',
            'oro_workflow.configuration_pass.replace_property_path' => 'getOroWorkflow_ConfigurationPass_ReplacePropertyPathService',
            'oro_workflow.context_accessor' => 'getOroWorkflow_ContextAccessorService',
            'oro_workflow.doctrine_helper' => 'getOroWorkflow_DoctrineHelperService',
            'oro_workflow.entity_binder' => 'getOroWorkflow_EntityBinderService',
            'oro_workflow.form.event_listener.default_values' => 'getOroWorkflow_Form_EventListener_DefaultValuesService',
            'oro_workflow.form.event_listener.init_actions' => 'getOroWorkflow_Form_EventListener_InitActionsService',
            'oro_workflow.form.event_listener.required_attributes' => 'getOroWorkflow_Form_EventListener_RequiredAttributesService',
            'oro_workflow.form.type.attributes' => 'getOroWorkflow_Form_Type_AttributesService',
            'oro_workflow.form.type.step' => 'getOroWorkflow_Form_Type_StepService',
            'oro_workflow.form.type.transition' => 'getOroWorkflow_Form_Type_TransitionService',
            'oro_workflow.form_options_assembler' => 'getOroWorkflow_FormOptionsAssemblerService',
            'oro_workflow.http.workflow_item_validator' => 'getOroWorkflow_Http_WorkflowItemValidatorService',
            'oro_workflow.listener.subscriber.workflow_data_serialize' => 'getOroWorkflow_Listener_Subscriber_WorkflowDataSerializeService',
            'oro_workflow.listener.subscriver.workflow_definition' => 'getOroWorkflow_Listener_Subscriver_WorkflowDefinitionService',
            'oro_workflow.manager' => 'getOroWorkflow_ManagerService',
            'oro_workflow.prototype.attribute_manager' => 'getOroWorkflow_Prototype_AttributeManagerService',
            'oro_workflow.prototype.step_manager' => 'getOroWorkflow_Prototype_StepManagerService',
            'oro_workflow.prototype.transition_manager' => 'getOroWorkflow_Prototype_TransitionManagerService',
            'oro_workflow.prototype.workflow' => 'getOroWorkflow_Prototype_WorkflowService',
            'oro_workflow.registry' => 'getOroWorkflow_RegistryService',
            'oro_workflow.serializer.data.attribute_normalizer.entity' => 'getOroWorkflow_Serializer_Data_AttributeNormalizer_EntityService',
            'oro_workflow.serializer.data.attribute_normalizer.standard' => 'getOroWorkflow_Serializer_Data_AttributeNormalizer_StandardService',
            'oro_workflow.serializer.data.normalizer' => 'getOroWorkflow_Serializer_Data_NormalizerService',
            'oro_workflow.serializer.data.serializer' => 'getOroWorkflow_Serializer_Data_SerializerService',
            'oro_workflow.serializer.handler.workflow_result' => 'getOroWorkflow_Serializer_Handler_WorkflowResultService',
            'oro_workflow.step_assembler' => 'getOroWorkflow_StepAssemblerService',
            'oro_workflow.transition_assembler' => 'getOroWorkflow_TransitionAssemblerService',
            'oro_workflow.twig.extension.class_name' => 'getOroWorkflow_Twig_Extension_ClassNameService',
            'oro_workflow.twig.extension.view_attribute' => 'getOroWorkflow_Twig_Extension_ViewAttributeService',
            'oro_workflow.twig.extension.workflow' => 'getOroWorkflow_Twig_Extension_WorkflowService',
            'oro_workflow.validator.transition_is_allowed' => 'getOroWorkflow_Validator_TransitionIsAllowedService',
            'oro_workflow.workflow_assembler' => 'getOroWorkflow_WorkflowAssemblerService',
            'profiler' => 'getProfilerService',
            'profiler_listener' => 'getProfilerListenerService',
            'property_accessor' => 'getPropertyAccessorService',
            'request' => 'getRequestService',
            'response_listener' => 'getResponseListenerService',
            'router' => 'getRouterService',
            'router.request_context' => 'getRouter_RequestContextService',
            'router_listener' => 'getRouterListenerService',
            'routing.loader' => 'getRouting_LoaderService',
            'security.access.decision_manager' => 'getSecurity_Access_DecisionManagerService',
            'security.access_listener' => 'getSecurity_AccessListenerService',
            'security.access_map' => 'getSecurity_AccessMapService',
            'security.acl.cache' => 'getSecurity_Acl_CacheService',
            'security.acl.dbal.schema' => 'getSecurity_Acl_Dbal_SchemaService',
            'security.acl.dbal.schema_listener' => 'getSecurity_Acl_Dbal_SchemaListenerService',
            'security.acl.provider' => 'getSecurity_Acl_ProviderService',
            'security.acl.voter.basic_permissions' => 'getSecurity_Acl_Voter_BasicPermissionsService',
            'security.authentication.manager' => 'getSecurity_Authentication_ManagerService',
            'security.authentication.trust_resolver' => 'getSecurity_Authentication_TrustResolverService',
            'security.channel_listener' => 'getSecurity_ChannelListenerService',
            'security.context' => 'getSecurity_ContextService',
            'security.context_listener.0' => 'getSecurity_ContextListener_0Service',
            'security.encoder_factory' => 'getSecurity_EncoderFactoryService',
            'security.firewall' => 'getSecurity_FirewallService',
            'security.firewall.map.context.dev' => 'getSecurity_Firewall_Map_Context_DevService',
            'security.firewall.map.context.install' => 'getSecurity_Firewall_Map_Context_InstallService',
            'security.firewall.map.context.login' => 'getSecurity_Firewall_Map_Context_LoginService',
            'security.firewall.map.context.main' => 'getSecurity_Firewall_Map_Context_MainService',
            'security.firewall.map.context.reset_password' => 'getSecurity_Firewall_Map_Context_ResetPasswordService',
            'security.firewall.map.context.wsse_secured' => 'getSecurity_Firewall_Map_Context_WsseSecuredService',
            'security.http_utils' => 'getSecurity_HttpUtilsService',
            'security.rememberme.response_listener' => 'getSecurity_Rememberme_ResponseListenerService',
            'security.role_hierarchy' => 'getSecurity_RoleHierarchyService',
            'security.secure_random' => 'getSecurity_SecureRandomService',
            'security.user.provider.concrete.chain_provider' => 'getSecurity_User_Provider_Concrete_ChainProviderService',
            'security.user.provider.concrete.in_memory' => 'getSecurity_User_Provider_Concrete_InMemoryService',
            'security.validator.user_password' => 'getSecurity_Validator_UserPasswordService',
            'sensio_distribution.webconfigurator' => 'getSensioDistribution_WebconfiguratorService',
            'sensio_framework_extra.cache.listener' => 'getSensioFrameworkExtra_Cache_ListenerService',
            'sensio_framework_extra.controller.listener' => 'getSensioFrameworkExtra_Controller_ListenerService',
            'sensio_framework_extra.converter.datetime' => 'getSensioFrameworkExtra_Converter_DatetimeService',
            'sensio_framework_extra.converter.doctrine.orm' => 'getSensioFrameworkExtra_Converter_Doctrine_OrmService',
            'sensio_framework_extra.converter.listener' => 'getSensioFrameworkExtra_Converter_ListenerService',
            'sensio_framework_extra.converter.manager' => 'getSensioFrameworkExtra_Converter_ManagerService',
            'sensio_framework_extra.view.guesser' => 'getSensioFrameworkExtra_View_GuesserService',
            'sensio_framework_extra.view.listener' => 'getSensioFrameworkExtra_View_ListenerService',
            'service_container' => 'getServiceContainerService',
            'session' => 'getSessionService',
            'session.handler' => 'getSession_HandlerService',
            'session.handler.pdo' => 'getSession_Handler_PdoService',
            'session.storage.filesystem' => 'getSession_Storage_FilesystemService',
            'session.storage.native' => 'getSession_Storage_NativeService',
            'session.storage.php_bridge' => 'getSession_Storage_PhpBridgeService',
            'session_listener' => 'getSessionListenerService',
            'stof_doctrine_extensions.event_listener.locale' => 'getStofDoctrineExtensions_EventListener_LocaleService',
            'stof_doctrine_extensions.listener.translatable' => 'getStofDoctrineExtensions_Listener_TranslatableService',
            'stof_doctrine_extensions.uploadable.manager' => 'getStofDoctrineExtensions_Uploadable_ManagerService',
            'streamed_response_listener' => 'getStreamedResponseListenerService',
            'swiftmailer.email_sender.listener' => 'getSwiftmailer_EmailSender_ListenerService',
            'swiftmailer.mailer.db_spool_mailer' => 'getSwiftmailer_Mailer_DbSpoolMailerService',
            'swiftmailer.mailer.default' => 'getSwiftmailer_Mailer_DefaultService',
            'swiftmailer.mailer.default.plugin.messagelogger' => 'getSwiftmailer_Mailer_Default_Plugin_MessageloggerService',
            'swiftmailer.mailer.default.spool' => 'getSwiftmailer_Mailer_Default_SpoolService',
            'swiftmailer.mailer.default.transport' => 'getSwiftmailer_Mailer_Default_TransportService',
            'swiftmailer.mailer.default.transport.eventdispatcher' => 'getSwiftmailer_Mailer_Default_Transport_EventdispatcherService',
            'swiftmailer.mailer.default.transport.real' => 'getSwiftmailer_Mailer_Default_Transport_RealService',
            'sylius.controller.process' => 'getSylius_Controller_ProcessService',
            'sylius.process.builder' => 'getSylius_Process_BuilderService',
            'sylius.process.context' => 'getSylius_Process_ContextService',
            'sylius.process.coordinator' => 'getSylius_Process_CoordinatorService',
            'sylius.process_storage.session' => 'getSylius_ProcessStorage_SessionService',
            'sylius.process_storage.session.bag' => 'getSylius_ProcessStorage_Session_BagService',
            'templating' => 'getTemplatingService',
            'templating.asset.package_factory' => 'getTemplating_Asset_PackageFactoryService',
            'templating.filename_parser' => 'getTemplating_FilenameParserService',
            'templating.globals' => 'getTemplating_GlobalsService',
            'templating.helper.actions' => 'getTemplating_Helper_ActionsService',
            'templating.helper.assets' => 'getTemplating_Helper_AssetsService',
            'templating.helper.code' => 'getTemplating_Helper_CodeService',
            'templating.helper.form' => 'getTemplating_Helper_FormService',
            'templating.helper.logout_url' => 'getTemplating_Helper_LogoutUrlService',
            'templating.helper.request' => 'getTemplating_Helper_RequestService',
            'templating.helper.router' => 'getTemplating_Helper_RouterService',
            'templating.helper.security' => 'getTemplating_Helper_SecurityService',
            'templating.helper.session' => 'getTemplating_Helper_SessionService',
            'templating.helper.slots' => 'getTemplating_Helper_SlotsService',
            'templating.helper.translator' => 'getTemplating_Helper_TranslatorService',
            'templating.loader' => 'getTemplating_LoaderService',
            'templating.locator' => 'getTemplating_LocatorService',
            'templating.name_parser' => 'getTemplating_NameParserService',
            'translation.dumper.csv' => 'getTranslation_Dumper_CsvService',
            'translation.dumper.ini' => 'getTranslation_Dumper_IniService',
            'translation.dumper.mo' => 'getTranslation_Dumper_MoService',
            'translation.dumper.php' => 'getTranslation_Dumper_PhpService',
            'translation.dumper.po' => 'getTranslation_Dumper_PoService',
            'translation.dumper.qt' => 'getTranslation_Dumper_QtService',
            'translation.dumper.res' => 'getTranslation_Dumper_ResService',
            'translation.dumper.xliff' => 'getTranslation_Dumper_XliffService',
            'translation.dumper.yml' => 'getTranslation_Dumper_YmlService',
            'translation.extractor' => 'getTranslation_ExtractorService',
            'translation.extractor.php' => 'getTranslation_Extractor_PhpService',
            'translation.loader' => 'getTranslation_LoaderService',
            'translation.loader.csv' => 'getTranslation_Loader_CsvService',
            'translation.loader.dat' => 'getTranslation_Loader_DatService',
            'translation.loader.ini' => 'getTranslation_Loader_IniService',
            'translation.loader.mo' => 'getTranslation_Loader_MoService',
            'translation.loader.php' => 'getTranslation_Loader_PhpService',
            'translation.loader.po' => 'getTranslation_Loader_PoService',
            'translation.loader.qt' => 'getTranslation_Loader_QtService',
            'translation.loader.res' => 'getTranslation_Loader_ResService',
            'translation.loader.xliff' => 'getTranslation_Loader_XliffService',
            'translation.loader.yml' => 'getTranslation_Loader_YmlService',
            'translation.writer' => 'getTranslation_WriterService',
            'translator.default' => 'getTranslator_DefaultService',
            'twig' => 'getTwigService',
            'twig.controller.exception' => 'getTwig_Controller_ExceptionService',
            'twig.exception_listener' => 'getTwig_ExceptionListenerService',
            'twig.extension.intl' => 'getTwig_Extension_IntlService',
            'twig.form.renderer' => 'getTwig_Form_RendererService',
            'twig.loader' => 'getTwig_LoaderService',
            'twig.translation.extractor' => 'getTwig_Translation_ExtractorService',
            'uri_signer' => 'getUriSignerService',
            'validator' => 'getValidatorService',
            'validator.mapping.class_metadata_factory' => 'getValidator_Mapping_ClassMetadataFactoryService',
            'web_profiler.controller.exception' => 'getWebProfiler_Controller_ExceptionService',
            'web_profiler.controller.profiler' => 'getWebProfiler_Controller_ProfilerService',
            'web_profiler.controller.router' => 'getWebProfiler_Controller_RouterService',
            'web_profiler.debug_toolbar' => 'getWebProfiler_DebugToolbarService',
        );
        $this->aliases = array(
            'a2lix_translation_form.manager_registry' => 'doctrine',
            'database_connection' => 'doctrine.dbal.default_connection',
            'doctrine.orm.entity_manager' => 'doctrine.orm.default_entity_manager',
            'fos_rest.inflector' => 'fos_rest.inflector.doctrine',
            'fos_rest.router' => 'router',
            'fos_rest.serializer' => 'jms_serializer',
            'fos_rest.templating' => 'templating',
            'mailer' => 'swiftmailer.mailer.default',
            'oro_report.entity_provider' => 'oro_entity.entity_provider',
            'security.acl.dbal.connection' => 'doctrine.dbal.default_connection',
            'sensio.distribution.webconfigurator' => 'sensio_distribution.webconfigurator',
            'serializer' => 'jms_serializer',
            'session.storage' => 'session.storage.native',
            'swiftmailer.mailer' => 'swiftmailer.mailer.default',
            'swiftmailer.mailer.db_spool_mailer.transport.real' => 'swiftmailer.mailer.default.transport.real',
            'swiftmailer.plugin.messagelogger' => 'swiftmailer.mailer.default.plugin.messagelogger',
            'swiftmailer.spool' => 'swiftmailer.mailer.default.spool',
            'swiftmailer.transport' => 'swiftmailer.mailer.default.transport',
            'swiftmailer.transport.real' => 'swiftmailer.mailer.default.transport.real',
            'sylius.process_storage' => 'sylius.process_storage.session',
            'translator' => 'translator.default',
        );
    }

    /**
     * Gets the 'a2lix_translation_form.default.listener.translations' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return A2lix\TranslationFormBundle\Form\EventListener\DefaultTranslationsListener A A2lix\TranslationFormBundle\Form\EventListener\DefaultTranslationsListener instance.
     */
    protected function getA2lixTranslationForm_Default_Listener_TranslationsService()
    {
        return $this->services['a2lix_translation_form.default.listener.translations'] = new \A2lix\TranslationFormBundle\Form\EventListener\DefaultTranslationsListener($this->get('a2lix_translation_form.default.service.translation'));
    }

    /**
     * Gets the 'a2lix_translation_form.default.service.translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return A2lix\TranslationFormBundle\TranslationForm\DefaultTranslationForm A A2lix\TranslationFormBundle\TranslationForm\DefaultTranslationForm instance.
     */
    protected function getA2lixTranslationForm_Default_Service_TranslationService()
    {
        return $this->services['a2lix_translation_form.default.service.translation'] = new \A2lix\TranslationFormBundle\TranslationForm\DefaultTranslationForm($this->get('form.registry'), $this->get('doctrine'));
    }

    /**
     * Gets the 'a2lix_translation_form.default.type.translations' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return A2lix\TranslationFormBundle\Form\Type\TranslationsType A A2lix\TranslationFormBundle\Form\Type\TranslationsType instance.
     */
    protected function getA2lixTranslationForm_Default_Type_TranslationsService()
    {
        return $this->services['a2lix_translation_form.default.type.translations'] = new \A2lix\TranslationFormBundle\Form\Type\TranslationsType($this->get('a2lix_translation_form.default.listener.translations'), array(0 => 'en', 1 => 'fr'), true);
    }

    /**
     * Gets the 'a2lix_translation_form.default.type.translationsfields' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return A2lix\TranslationFormBundle\Form\Type\TranslationsFieldsType A A2lix\TranslationFormBundle\Form\Type\TranslationsFieldsType instance.
     */
    protected function getA2lixTranslationForm_Default_Type_TranslationsfieldsService()
    {
        return $this->services['a2lix_translation_form.default.type.translationsfields'] = new \A2lix\TranslationFormBundle\Form\Type\TranslationsFieldsType();
    }

    /**
     * Gets the 'a2lix_translation_form.default.type.translationsforms' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return A2lix\TranslationFormBundle\Form\Type\TranslationsFormsType A A2lix\TranslationFormBundle\Form\Type\TranslationsFormsType instance.
     */
    protected function getA2lixTranslationForm_Default_Type_TranslationsformsService()
    {
        return $this->services['a2lix_translation_form.default.type.translationsforms'] = new \A2lix\TranslationFormBundle\Form\Type\TranslationsFormsType(array(0 => 'en', 1 => 'fr'), true);
    }

    /**
     * Gets the 'a2lix_translation_form.default.type.translationslocalesselector' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return A2lix\TranslationFormBundle\Form\Type\TranslationsLocalesSelectorType A A2lix\TranslationFormBundle\Form\Type\TranslationsLocalesSelectorType instance.
     */
    protected function getA2lixTranslationForm_Default_Type_TranslationslocalesselectorService()
    {
        return $this->services['a2lix_translation_form.default.type.translationslocalesselector'] = new \A2lix\TranslationFormBundle\Form\Type\TranslationsLocalesSelectorType(array(0 => 'en', 1 => 'fr'));
    }

    /**
     * Gets the 'a2lix_translation_form.gedmo.listener.translations' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return A2lix\TranslationFormBundle\Form\EventListener\GedmoTranslationsListener A A2lix\TranslationFormBundle\Form\EventListener\GedmoTranslationsListener instance.
     */
    protected function getA2lixTranslationForm_Gedmo_Listener_TranslationsService()
    {
        return $this->services['a2lix_translation_form.gedmo.listener.translations'] = new \A2lix\TranslationFormBundle\Form\EventListener\GedmoTranslationsListener($this->get('a2lix_translation_form.gedmo.service.translation'));
    }

    /**
     * Gets the 'a2lix_translation_form.gedmo.service.translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return A2lix\TranslationFormBundle\TranslationForm\GedmoTranslationForm A A2lix\TranslationFormBundle\TranslationForm\GedmoTranslationForm instance.
     */
    protected function getA2lixTranslationForm_Gedmo_Service_TranslationService()
    {
        $this->services['a2lix_translation_form.gedmo.service.translation'] = $instance = new \A2lix\TranslationFormBundle\TranslationForm\GedmoTranslationForm($this->get('form.registry'), $this->get('doctrine'));

        $instance->setGedmoTranslatableListener($this->get('stof_doctrine_extensions.listener.translatable'));

        return $instance;
    }

    /**
     * Gets the 'a2lix_translation_form.gedmo.type.translations' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return A2lix\TranslationFormBundle\Form\Type\GedmoTranslationsType A A2lix\TranslationFormBundle\Form\Type\GedmoTranslationsType instance.
     */
    protected function getA2lixTranslationForm_Gedmo_Type_TranslationsService()
    {
        return $this->services['a2lix_translation_form.gedmo.type.translations'] = new \A2lix\TranslationFormBundle\Form\Type\GedmoTranslationsType($this->get('a2lix_translation_form.gedmo.listener.translations'), $this->get('a2lix_translation_form.gedmo.service.translation'), array(0 => 'en', 1 => 'fr'), true);
    }

    /**
     * Gets the 'a2lix_translation_form.gedmo.type.translationslocales' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return A2lix\TranslationFormBundle\Form\Type\GedmoTranslationsLocalesType A A2lix\TranslationFormBundle\Form\Type\GedmoTranslationsLocalesType instance.
     */
    protected function getA2lixTranslationForm_Gedmo_Type_TranslationslocalesService()
    {
        return $this->services['a2lix_translation_form.gedmo.type.translationslocales'] = new \A2lix\TranslationFormBundle\Form\Type\GedmoTranslationsLocalesType();
    }

    /**
     * Gets the 'a2lix_translation_form.listener.controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return A2lix\TranslationFormBundle\EventListener\ControllerListener A A2lix\TranslationFormBundle\EventListener\ControllerListener instance.
     */
    protected function getA2lixTranslationForm_Listener_ControllerService()
    {
        return $this->services['a2lix_translation_form.listener.controller'] = new \A2lix\TranslationFormBundle\EventListener\ControllerListener($this->get('annotation_reader'), $this->get('stof_doctrine_extensions.listener.translatable'));
    }

    /**
     * Gets the 'annotation_reader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Doctrine\Common\Annotations\FileCacheReader A Doctrine\Common\Annotations\FileCacheReader instance.
     */
    protected function getAnnotationReaderService()
    {
        return $this->services['annotation_reader'] = new \Doctrine\Common\Annotations\FileCacheReader(new \Doctrine\Common\Annotations\AnnotationReader(), '/var/www/orocrm-platform/app/cache/de_/annotations', true);
    }

    /**
     * Gets the 'assetic.asset_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Assetic\Factory\LazyAssetManager A Assetic\Factory\LazyAssetManager instance.
     */
    protected function getAssetic_AssetManagerService()
    {
        $a = $this->get('assetic.asset_factory');
        $b = $this->get('templating.loader');

        $c = new \Assetic\Cache\ConfigCache('/var/www/orocrm-platform/app/cache/de_/assetic/config');

        $this->services['assetic.asset_manager'] = $instance = new \Assetic\Factory\LazyAssetManager($a, array('twig' => new \Assetic\Factory\Loader\CachedFormulaLoader(new \Assetic\Extension\Twig\TwigFormulaLoader($this->get('twig')), $c, true), 'php' => new \Assetic\Factory\Loader\CachedFormulaLoader(new \Symfony\Bundle\AsseticBundle\Factory\Loader\AsseticHelperFormulaLoader($a), $c, true)));

        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'FrameworkBundle', '/var/www/orocrm-platform/app/Resources/FrameworkBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'FrameworkBundle', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'FrameworkBundle', '/var/www/orocrm-platform/app/Resources/FrameworkBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'FrameworkBundle', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'SecurityBundle', '/var/www/orocrm-platform/app/Resources/SecurityBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'SecurityBundle', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Bundle/SecurityBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'SecurityBundle', '/var/www/orocrm-platform/app/Resources/SecurityBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'SecurityBundle', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Bundle/SecurityBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'TwigBundle', '/var/www/orocrm-platform/app/Resources/TwigBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'TwigBundle', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Bundle/TwigBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'TwigBundle', '/var/www/orocrm-platform/app/Resources/TwigBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'TwigBundle', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Bundle/TwigBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'MonologBundle', '/var/www/orocrm-platform/app/Resources/MonologBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'MonologBundle', '/var/www/orocrm-platform/vendor/symfony/monolog-bundle/Symfony/Bundle/MonologBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'MonologBundle', '/var/www/orocrm-platform/app/Resources/MonologBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'MonologBundle', '/var/www/orocrm-platform/vendor/symfony/monolog-bundle/Symfony/Bundle/MonologBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'SwiftmailerBundle', '/var/www/orocrm-platform/app/Resources/SwiftmailerBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'SwiftmailerBundle', '/var/www/orocrm-platform/vendor/symfony/swiftmailer-bundle/Symfony/Bundle/SwiftmailerBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'SwiftmailerBundle', '/var/www/orocrm-platform/app/Resources/SwiftmailerBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'SwiftmailerBundle', '/var/www/orocrm-platform/vendor/symfony/swiftmailer-bundle/Symfony/Bundle/SwiftmailerBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'AsseticBundle', '/var/www/orocrm-platform/app/Resources/AsseticBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'AsseticBundle', '/var/www/orocrm-platform/vendor/symfony/assetic-bundle/Symfony/Bundle/AsseticBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'AsseticBundle', '/var/www/orocrm-platform/app/Resources/AsseticBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'AsseticBundle', '/var/www/orocrm-platform/vendor/symfony/assetic-bundle/Symfony/Bundle/AsseticBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'DoctrineBundle', '/var/www/orocrm-platform/app/Resources/DoctrineBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'DoctrineBundle', '/var/www/orocrm-platform/vendor/doctrine/doctrine-bundle/Doctrine/Bundle/DoctrineBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'DoctrineBundle', '/var/www/orocrm-platform/app/Resources/DoctrineBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'DoctrineBundle', '/var/www/orocrm-platform/vendor/doctrine/doctrine-bundle/Doctrine/Bundle/DoctrineBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'DoctrineFixturesBundle', '/var/www/orocrm-platform/app/Resources/DoctrineFixturesBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'DoctrineFixturesBundle', '/var/www/orocrm-platform/vendor/doctrine/doctrine-fixtures-bundle/Doctrine/Bundle/FixturesBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'DoctrineFixturesBundle', '/var/www/orocrm-platform/app/Resources/DoctrineFixturesBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'DoctrineFixturesBundle', '/var/www/orocrm-platform/vendor/doctrine/doctrine-fixtures-bundle/Doctrine/Bundle/FixturesBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'SensioFrameworkExtraBundle', '/var/www/orocrm-platform/app/Resources/SensioFrameworkExtraBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'SensioFrameworkExtraBundle', '/var/www/orocrm-platform/vendor/sensio/framework-extra-bundle/Sensio/Bundle/FrameworkExtraBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'SensioFrameworkExtraBundle', '/var/www/orocrm-platform/app/Resources/SensioFrameworkExtraBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'SensioFrameworkExtraBundle', '/var/www/orocrm-platform/vendor/sensio/framework-extra-bundle/Sensio/Bundle/FrameworkExtraBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'JMSSerializerBundle', '/var/www/orocrm-platform/app/Resources/JMSSerializerBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'JMSSerializerBundle', '/var/www/orocrm-platform/vendor/jms/serializer-bundle/JMS/SerializerBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'JMSSerializerBundle', '/var/www/orocrm-platform/app/Resources/JMSSerializerBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'JMSSerializerBundle', '/var/www/orocrm-platform/vendor/jms/serializer-bundle/JMS/SerializerBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'KnpPaginatorBundle', '/var/www/orocrm-platform/app/Resources/KnpPaginatorBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'KnpPaginatorBundle', '/var/www/orocrm-platform/vendor/knplabs/knp-paginator-bundle/Knp/Bundle/PaginatorBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'KnpPaginatorBundle', '/var/www/orocrm-platform/app/Resources/KnpPaginatorBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'KnpPaginatorBundle', '/var/www/orocrm-platform/vendor/knplabs/knp-paginator-bundle/Knp/Bundle/PaginatorBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'KnpMenuBundle', '/var/www/orocrm-platform/app/Resources/KnpMenuBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'KnpMenuBundle', '/var/www/orocrm-platform/vendor/knplabs/knp-menu-bundle/Knp/Bundle/MenuBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'KnpMenuBundle', '/var/www/orocrm-platform/app/Resources/KnpMenuBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'KnpMenuBundle', '/var/www/orocrm-platform/vendor/knplabs/knp-menu-bundle/Knp/Bundle/MenuBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'FOSRestBundle', '/var/www/orocrm-platform/app/Resources/FOSRestBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'FOSRestBundle', '/var/www/orocrm-platform/vendor/friendsofsymfony/rest-bundle/FOS/RestBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'FOSRestBundle', '/var/www/orocrm-platform/app/Resources/FOSRestBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'FOSRestBundle', '/var/www/orocrm-platform/vendor/friendsofsymfony/rest-bundle/FOS/RestBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'FOSJsRoutingBundle', '/var/www/orocrm-platform/app/Resources/FOSJsRoutingBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'FOSJsRoutingBundle', '/var/www/orocrm-platform/vendor/friendsofsymfony/jsrouting-bundle/FOS/JsRoutingBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'FOSJsRoutingBundle', '/var/www/orocrm-platform/app/Resources/FOSJsRoutingBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'FOSJsRoutingBundle', '/var/www/orocrm-platform/vendor/friendsofsymfony/jsrouting-bundle/FOS/JsRoutingBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'NelmioApiDocBundle', '/var/www/orocrm-platform/app/Resources/NelmioApiDocBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'NelmioApiDocBundle', '/var/www/orocrm-platform/vendor/nelmio/api-doc-bundle/Nelmio/ApiDocBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'NelmioApiDocBundle', '/var/www/orocrm-platform/app/Resources/NelmioApiDocBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'NelmioApiDocBundle', '/var/www/orocrm-platform/vendor/nelmio/api-doc-bundle/Nelmio/ApiDocBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'BeSimpleSoapBundle', '/var/www/orocrm-platform/app/Resources/BeSimpleSoapBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'BeSimpleSoapBundle', '/var/www/orocrm-platform/vendor/besimple/soap/src/BeSimple/SoapBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'BeSimpleSoapBundle', '/var/www/orocrm-platform/app/Resources/BeSimpleSoapBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'BeSimpleSoapBundle', '/var/www/orocrm-platform/vendor/besimple/soap/src/BeSimple/SoapBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'StofDoctrineExtensionsBundle', '/var/www/orocrm-platform/app/Resources/StofDoctrineExtensionsBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'StofDoctrineExtensionsBundle', '/var/www/orocrm-platform/vendor/stof/doctrine-extensions-bundle/Stof/DoctrineExtensionsBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'StofDoctrineExtensionsBundle', '/var/www/orocrm-platform/app/Resources/StofDoctrineExtensionsBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'StofDoctrineExtensionsBundle', '/var/www/orocrm-platform/vendor/stof/doctrine-extensions-bundle/Stof/DoctrineExtensionsBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'EscapeWSSEAuthenticationBundle', '/var/www/orocrm-platform/app/Resources/EscapeWSSEAuthenticationBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'EscapeWSSEAuthenticationBundle', '/var/www/orocrm-platform/vendor/escapestudios/wsse-authentication-bundle/Escape/WSSEAuthenticationBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'EscapeWSSEAuthenticationBundle', '/var/www/orocrm-platform/app/Resources/EscapeWSSEAuthenticationBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'EscapeWSSEAuthenticationBundle', '/var/www/orocrm-platform/vendor/escapestudios/wsse-authentication-bundle/Escape/WSSEAuthenticationBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'LiipImagineBundle', '/var/www/orocrm-platform/app/Resources/LiipImagineBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'LiipImagineBundle', '/var/www/orocrm-platform/vendor/liip/imagine-bundle/Liip/ImagineBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'LiipImagineBundle', '/var/www/orocrm-platform/app/Resources/LiipImagineBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'LiipImagineBundle', '/var/www/orocrm-platform/vendor/liip/imagine-bundle/Liip/ImagineBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'GenemuFormBundle', '/var/www/orocrm-platform/app/Resources/GenemuFormBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'GenemuFormBundle', '/var/www/orocrm-platform/vendor/genemu/form-bundle/Genemu/Bundle/FormBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'GenemuFormBundle', '/var/www/orocrm-platform/app/Resources/GenemuFormBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'GenemuFormBundle', '/var/www/orocrm-platform/vendor/genemu/form-bundle/Genemu/Bundle/FormBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'A2lixTranslationFormBundle', '/var/www/orocrm-platform/app/Resources/A2lixTranslationFormBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'A2lixTranslationFormBundle', '/var/www/orocrm-platform/vendor/a2lix/translation-form-bundle/A2lix/TranslationFormBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'A2lixTranslationFormBundle', '/var/www/orocrm-platform/app/Resources/A2lixTranslationFormBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'A2lixTranslationFormBundle', '/var/www/orocrm-platform/vendor/a2lix/translation-form-bundle/A2lix/TranslationFormBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'LexikMaintenanceBundle', '/var/www/orocrm-platform/app/Resources/LexikMaintenanceBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'LexikMaintenanceBundle', '/var/www/orocrm-platform/vendor/lexik/maintenance-bundle/Lexik/Bundle/MaintenanceBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'LexikMaintenanceBundle', '/var/www/orocrm-platform/app/Resources/LexikMaintenanceBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'LexikMaintenanceBundle', '/var/www/orocrm-platform/vendor/lexik/maintenance-bundle/Lexik/Bundle/MaintenanceBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroSecurityBundle', '/var/www/orocrm-platform/app/Resources/OroSecurityBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroSecurityBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/SecurityBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroSecurityBundle', '/var/www/orocrm-platform/app/Resources/OroSecurityBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroSecurityBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/SecurityBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroUIBundle', '/var/www/orocrm-platform/app/Resources/OroUIBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroUIBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/UIBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroUIBundle', '/var/www/orocrm-platform/app/Resources/OroUIBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroUIBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/UIBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroEntityBundle', '/var/www/orocrm-platform/app/Resources/OroEntityBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroEntityBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/EntityBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroEntityBundle', '/var/www/orocrm-platform/app/Resources/OroEntityBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroEntityBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/EntityBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'JDareClankBundle', '/var/www/orocrm-platform/app/Resources/JDareClankBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'JDareClankBundle', '/var/www/orocrm-platform/vendor/jdare/clank-bundle/JDare/ClankBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'JDareClankBundle', '/var/www/orocrm-platform/app/Resources/JDareClankBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'JDareClankBundle', '/var/www/orocrm-platform/vendor/jdare/clank-bundle/JDare/ClankBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'JMSJobQueueBundle', '/var/www/orocrm-platform/app/Resources/JMSJobQueueBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'JMSJobQueueBundle', '/var/www/orocrm-platform/vendor/jms/job-queue-bundle/JMS/JobQueueBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'JMSJobQueueBundle', '/var/www/orocrm-platform/app/Resources/JMSJobQueueBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'JMSJobQueueBundle', '/var/www/orocrm-platform/vendor/jms/job-queue-bundle/JMS/JobQueueBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroAddressBundle', '/var/www/orocrm-platform/app/Resources/OroAddressBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroAddressBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/AddressBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroAddressBundle', '/var/www/orocrm-platform/app/Resources/OroAddressBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroAddressBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/AddressBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroAsseticBundle', '/var/www/orocrm-platform/app/Resources/OroAsseticBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroAsseticBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/AsseticBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroAsseticBundle', '/var/www/orocrm-platform/app/Resources/OroAsseticBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroAsseticBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/AsseticBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroBatchBundle', '/var/www/orocrm-platform/app/Resources/OroBatchBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroBatchBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/BatchBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroBatchBundle', '/var/www/orocrm-platform/app/Resources/OroBatchBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroBatchBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/BatchBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroBusinessEntitiesBundle', '/var/www/orocrm-platform/app/Resources/OroBusinessEntitiesBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroBusinessEntitiesBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/BusinessEntitiesBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroBusinessEntitiesBundle', '/var/www/orocrm-platform/app/Resources/OroBusinessEntitiesBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroBusinessEntitiesBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/BusinessEntitiesBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroCalendarBundle', '/var/www/orocrm-platform/app/Resources/OroCalendarBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroCalendarBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/CalendarBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroCalendarBundle', '/var/www/orocrm-platform/app/Resources/OroCalendarBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroCalendarBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/CalendarBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroConfigBundle', '/var/www/orocrm-platform/app/Resources/OroConfigBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroConfigBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/ConfigBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroConfigBundle', '/var/www/orocrm-platform/app/Resources/OroConfigBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroConfigBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/ConfigBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroCronBundle', '/var/www/orocrm-platform/app/Resources/OroCronBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroCronBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/CronBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroCronBundle', '/var/www/orocrm-platform/app/Resources/OroCronBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroCronBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/CronBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroDashboardBundle', '/var/www/orocrm-platform/app/Resources/OroDashboardBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroDashboardBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/DashboardBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroDashboardBundle', '/var/www/orocrm-platform/app/Resources/OroDashboardBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroDashboardBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/DashboardBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroDataAuditBundle', '/var/www/orocrm-platform/app/Resources/OroDataAuditBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroDataAuditBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/DataAuditBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroDataAuditBundle', '/var/www/orocrm-platform/app/Resources/OroDataAuditBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroDataAuditBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/DataAuditBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroDataGridBundle', '/var/www/orocrm-platform/app/Resources/OroDataGridBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroDataGridBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/DataGridBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroDataGridBundle', '/var/www/orocrm-platform/app/Resources/OroDataGridBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroDataGridBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/DataGridBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroDistributionBundle', '/var/www/orocrm-platform/app/Resources/OroDistributionBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroDistributionBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/DistributionBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroDistributionBundle', '/var/www/orocrm-platform/app/Resources/OroDistributionBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroDistributionBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/DistributionBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroEmailBundle', '/var/www/orocrm-platform/app/Resources/OroEmailBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroEmailBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/EmailBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroEmailBundle', '/var/www/orocrm-platform/app/Resources/OroEmailBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroEmailBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/EmailBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroEntityConfigBundle', '/var/www/orocrm-platform/app/Resources/OroEntityConfigBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroEntityConfigBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/EntityConfigBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroEntityConfigBundle', '/var/www/orocrm-platform/app/Resources/OroEntityConfigBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroEntityConfigBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/EntityConfigBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroEntityExtendBundle', '/var/www/orocrm-platform/app/Resources/OroEntityExtendBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroEntityExtendBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/EntityExtendBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroEntityExtendBundle', '/var/www/orocrm-platform/app/Resources/OroEntityExtendBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroEntityExtendBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/EntityExtendBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroFilterBundle', '/var/www/orocrm-platform/app/Resources/OroFilterBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroFilterBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/FilterBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroFilterBundle', '/var/www/orocrm-platform/app/Resources/OroFilterBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroFilterBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/FilterBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroFormBundle', '/var/www/orocrm-platform/app/Resources/OroFormBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroFormBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/FormBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroFormBundle', '/var/www/orocrm-platform/app/Resources/OroFormBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroFormBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/FormBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroHelpBundle', '/var/www/orocrm-platform/app/Resources/OroHelpBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroHelpBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/HelpBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroHelpBundle', '/var/www/orocrm-platform/app/Resources/OroHelpBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroHelpBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/HelpBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroImapBundle', '/var/www/orocrm-platform/app/Resources/OroImapBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroImapBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/ImapBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroImapBundle', '/var/www/orocrm-platform/app/Resources/OroImapBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroImapBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/ImapBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroImportExportBundle', '/var/www/orocrm-platform/app/Resources/OroImportExportBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroImportExportBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/ImportExportBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroImportExportBundle', '/var/www/orocrm-platform/app/Resources/OroImportExportBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroImportExportBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/ImportExportBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroInstallerBundle', '/var/www/orocrm-platform/app/Resources/OroInstallerBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroInstallerBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/InstallerBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroInstallerBundle', '/var/www/orocrm-platform/app/Resources/OroInstallerBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroInstallerBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/InstallerBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroIntegrationBundle', '/var/www/orocrm-platform/app/Resources/OroIntegrationBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroIntegrationBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/IntegrationBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroIntegrationBundle', '/var/www/orocrm-platform/app/Resources/OroIntegrationBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroIntegrationBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/IntegrationBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroLocaleBundle', '/var/www/orocrm-platform/app/Resources/OroLocaleBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroLocaleBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/LocaleBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroLocaleBundle', '/var/www/orocrm-platform/app/Resources/OroLocaleBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroLocaleBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/LocaleBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroMeasureBundle', '/var/www/orocrm-platform/app/Resources/OroMeasureBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroMeasureBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/MeasureBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroMeasureBundle', '/var/www/orocrm-platform/app/Resources/OroMeasureBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroMeasureBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/MeasureBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroNotificationBundle', '/var/www/orocrm-platform/app/Resources/OroNotificationBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroNotificationBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/NotificationBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroNotificationBundle', '/var/www/orocrm-platform/app/Resources/OroNotificationBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroNotificationBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/NotificationBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroOrganizationBundle', '/var/www/orocrm-platform/app/Resources/OroOrganizationBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroOrganizationBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/OrganizationBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroOrganizationBundle', '/var/www/orocrm-platform/app/Resources/OroOrganizationBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroOrganizationBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/OrganizationBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroPlatformBundle', '/var/www/orocrm-platform/app/Resources/OroPlatformBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroPlatformBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/PlatformBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroPlatformBundle', '/var/www/orocrm-platform/app/Resources/OroPlatformBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroPlatformBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/PlatformBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroQueryDesignerBundle', '/var/www/orocrm-platform/app/Resources/OroQueryDesignerBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroQueryDesignerBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/QueryDesignerBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroQueryDesignerBundle', '/var/www/orocrm-platform/app/Resources/OroQueryDesignerBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroQueryDesignerBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/QueryDesignerBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroReportBundle', '/var/www/orocrm-platform/app/Resources/OroReportBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroReportBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/ReportBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroReportBundle', '/var/www/orocrm-platform/app/Resources/OroReportBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroReportBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/ReportBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroRequireJSBundle', '/var/www/orocrm-platform/app/Resources/OroRequireJSBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroRequireJSBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/RequireJSBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroRequireJSBundle', '/var/www/orocrm-platform/app/Resources/OroRequireJSBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroRequireJSBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/RequireJSBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroSearchBundle', '/var/www/orocrm-platform/app/Resources/OroSearchBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroSearchBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/SearchBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroSearchBundle', '/var/www/orocrm-platform/app/Resources/OroSearchBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroSearchBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/SearchBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroSegmentationTreeBundle', '/var/www/orocrm-platform/app/Resources/OroSegmentationTreeBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroSegmentationTreeBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/SegmentationTreeBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroSegmentationTreeBundle', '/var/www/orocrm-platform/app/Resources/OroSegmentationTreeBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroSegmentationTreeBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/SegmentationTreeBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroSidebarBundle', '/var/www/orocrm-platform/app/Resources/OroSidebarBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroSidebarBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/SidebarBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroSidebarBundle', '/var/www/orocrm-platform/app/Resources/OroSidebarBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroSidebarBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/SidebarBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroSoapBundle', '/var/www/orocrm-platform/app/Resources/OroSoapBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroSoapBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/SoapBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroSoapBundle', '/var/www/orocrm-platform/app/Resources/OroSoapBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroSoapBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/SoapBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroSyncBundle', '/var/www/orocrm-platform/app/Resources/OroSyncBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroSyncBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/SyncBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroSyncBundle', '/var/www/orocrm-platform/app/Resources/OroSyncBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroSyncBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/SyncBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroTagBundle', '/var/www/orocrm-platform/app/Resources/OroTagBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroTagBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/TagBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroTagBundle', '/var/www/orocrm-platform/app/Resources/OroTagBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroTagBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/TagBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroThemeBundle', '/var/www/orocrm-platform/app/Resources/OroThemeBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroThemeBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/ThemeBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroThemeBundle', '/var/www/orocrm-platform/app/Resources/OroThemeBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroThemeBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/ThemeBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroTranslationBundle', '/var/www/orocrm-platform/app/Resources/OroTranslationBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroTranslationBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/TranslationBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroTranslationBundle', '/var/www/orocrm-platform/app/Resources/OroTranslationBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroTranslationBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/TranslationBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroUserBundle', '/var/www/orocrm-platform/app/Resources/OroUserBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroUserBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/UserBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroUserBundle', '/var/www/orocrm-platform/app/Resources/OroUserBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroUserBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/UserBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroWindowsBundle', '/var/www/orocrm-platform/app/Resources/OroWindowsBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroWindowsBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/WindowsBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroWindowsBundle', '/var/www/orocrm-platform/app/Resources/OroWindowsBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroWindowsBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/WindowsBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroWorkflowBundle', '/var/www/orocrm-platform/app/Resources/OroWorkflowBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroWorkflowBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/WorkflowBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroWorkflowBundle', '/var/www/orocrm-platform/app/Resources/OroWorkflowBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroWorkflowBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/WorkflowBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'SyliusFlowBundle', '/var/www/orocrm-platform/app/Resources/SyliusFlowBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'SyliusFlowBundle', '/var/www/orocrm-platform/vendor/sylius/flow-bundle/Sylius/Bundle/FlowBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'SyliusFlowBundle', '/var/www/orocrm-platform/app/Resources/SyliusFlowBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'SyliusFlowBundle', '/var/www/orocrm-platform/vendor/sylius/flow-bundle/Sylius/Bundle/FlowBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroNavigationBundle', '/var/www/orocrm-platform/app/Resources/OroNavigationBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroNavigationBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/NavigationBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroNavigationBundle', '/var/www/orocrm-platform/app/Resources/OroNavigationBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'OroNavigationBundle', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/NavigationBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'WebProfilerBundle', '/var/www/orocrm-platform/app/Resources/WebProfilerBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'WebProfilerBundle', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Bundle/WebProfilerBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'WebProfilerBundle', '/var/www/orocrm-platform/app/Resources/WebProfilerBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'WebProfilerBundle', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Bundle/WebProfilerBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'SensioDistributionBundle', '/var/www/orocrm-platform/app/Resources/SensioDistributionBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'SensioDistributionBundle', '/var/www/orocrm-platform/vendor/sensio/distribution-bundle/Sensio/Bundle/DistributionBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'SensioDistributionBundle', '/var/www/orocrm-platform/app/Resources/SensioDistributionBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'SensioDistributionBundle', '/var/www/orocrm-platform/vendor/sensio/distribution-bundle/Sensio/Bundle/DistributionBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'SensioGeneratorBundle', '/var/www/orocrm-platform/app/Resources/SensioGeneratorBundle/views', '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'SensioGeneratorBundle', '/var/www/orocrm-platform/vendor/sensio/generator-bundle/Sensio/Bundle/GeneratorBundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'SensioGeneratorBundle', '/var/www/orocrm-platform/app/Resources/SensioGeneratorBundle/views', '/\\.[^.]+\\.php$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, 'SensioGeneratorBundle', '/var/www/orocrm-platform/vendor/sensio/generator-bundle/Sensio/Bundle/GeneratorBundle/Resources/views', '/\\.[^.]+\\.php$/'))), 'php');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, '', '/var/www/orocrm-platform/app/Resources/views', '/\\.[^.]+\\.twig$/'), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($b, '', '/var/www/orocrm-platform/app/Resources/views', '/\\.[^.]+\\.php$/'), 'php');

        return $instance;
    }

    /**
     * Gets the 'assetic.filter.cssmin' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Assetic\Filter\CssMinFilter A Assetic\Filter\CssMinFilter instance.
     */
    protected function getAssetic_Filter_CssminService()
    {
        require_once '/var/www/orocrm-platform/app/Resources/php/cssmin-v3.0.1.php';

        $this->services['assetic.filter.cssmin'] = $instance = new \Assetic\Filter\CssMinFilter();

        $instance->setFilters(array());
        $instance->setPlugins(array());

        return $instance;
    }

    /**
     * Gets the 'assetic.filter.cssrewrite' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Assetic\Filter\CssRewriteFilter A Assetic\Filter\CssRewriteFilter instance.
     */
    protected function getAssetic_Filter_CssrewriteService()
    {
        return $this->services['assetic.filter.cssrewrite'] = new \Assetic\Filter\CssRewriteFilter();
    }

    /**
     * Gets the 'assetic.filter.lessphp' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Assetic\Filter\LessphpFilter A Assetic\Filter\LessphpFilter instance.
     */
    protected function getAssetic_Filter_LessphpService()
    {
        require_once '/var/www/orocrm-platform/app/../vendor/leafo/lessphp/lessc.inc.php';

        $this->services['assetic.filter.lessphp'] = $instance = new \Assetic\Filter\LessphpFilter();

        $instance->setPresets(array());
        $instance->setLoadPaths(array());
        $instance->setFormatter(NULL);
        $instance->setPreserveComments(NULL);

        return $instance;
    }

    /**
     * Gets the 'assetic.filter_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\AsseticBundle\FilterManager A Symfony\Bundle\AsseticBundle\FilterManager instance.
     */
    protected function getAssetic_FilterManagerService()
    {
        return $this->services['assetic.filter_manager'] = new \Symfony\Bundle\AsseticBundle\FilterManager($this, array('cssrewrite' => 'assetic.filter.cssrewrite', 'lessphp' => 'assetic.filter.lessphp', 'cssmin' => 'assetic.filter.cssmin'));
    }

    /**
     * Gets the 'assetic.helper.static' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\AsseticBundle\Templating\StaticAsseticHelper A Symfony\Bundle\AsseticBundle\Templating\StaticAsseticHelper instance.
     * 
     * @throws InactiveScopeException when the 'assetic.helper.static' service is requested while the 'request' scope is not active
     */
    protected function getAssetic_Helper_StaticService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('assetic.helper.static', 'request');
        }

        return $this->services['assetic.helper.static'] = $this->scopedServices['request']['assetic.helper.static'] = new \Symfony\Bundle\AsseticBundle\Templating\StaticAsseticHelper($this->get('templating.helper.assets'), $this->get('assetic.asset_factory'));
    }

    /**
     * Gets the 'besimple.soap.cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return BeSimple\SoapBundle\Cache A BeSimple\SoapBundle\Cache instance.
     */
    protected function getBesimple_Soap_CacheService()
    {
        return $this->services['besimple.soap.cache'] = new \BeSimple\SoapBundle\Cache(true, 1, '/var/www/orocrm-platform/app/cache/de_/besimple/soap/php', 86400, 5);
    }

    /**
     * Gets the 'besimple.soap.context.soap' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return BeSimple\SoapBundle\WebServiceContext A BeSimple\SoapBundle\WebServiceContext instance.
     */
    protected function getBesimple_Soap_Context_SoapService()
    {
        return $this->services['besimple.soap.context.soap'] = new \BeSimple\SoapBundle\WebServiceContext($this->get('besimple.soap.definition.loader'), $this->get('besimple.soap.converter.collection'), array('cache_dir' => '/var/www/orocrm-platform/app/cache/de_/besimple/soap', 'debug' => true, 'cache_type' => NULL, 'binder_request_header_class' => 'BeSimple\\SoapBundle\\ServiceBinding\\RpcLiteralRequestHeaderMessageBinder', 'binder_request_class' => 'BeSimple\\SoapBundle\\ServiceBinding\\RpcLiteralRequestMessageBinder', 'binder_response_class' => 'BeSimple\\SoapBundle\\ServiceBinding\\RpcLiteralResponseMessageBinder', 'wsdl_stylesheet' => NULL, 'namespace' => 'urn:OroPlatform', 'resource' => '.', 'resource_type' => 'oro_soap', 'name' => 'soap'), $this->get('besimple.soap.cache'));
    }

    /**
     * Gets the 'besimple.soap.converter.collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return BeSimple\SoapCommon\Converter\TypeConverterCollection A BeSimple\SoapCommon\Converter\TypeConverterCollection instance.
     */
    protected function getBesimple_Soap_Converter_CollectionService()
    {
        $this->services['besimple.soap.converter.collection'] = $instance = new \BeSimple\SoapCommon\Converter\TypeConverterCollection();

        $instance->add(new \BeSimple\SoapCommon\Converter\DateTimeTypeConverter());
        $instance->add(new \BeSimple\SoapCommon\Converter\DateTypeConverter());

        return $instance;
    }

    /**
     * Gets the 'besimple.soap.definition.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Config\Loader\DelegatingLoader A Symfony\Component\Config\Loader\DelegatingLoader instance.
     */
    protected function getBesimple_Soap_Definition_LoaderService()
    {
        $a = $this->get('annotation_reader');
        $b = $this->get('besimple.soap.type.repository');
        $c = $this->get('file_locator');

        $d = new \BeSimple\SoapBundle\ServiceDefinition\Loader\AnnotationClassLoader($a, $b);

        $e = new \Symfony\Component\Config\Loader\LoaderResolver();
        $e->addLoader(new \BeSimple\SoapBundle\ServiceDefinition\Loader\AnnotationFileLoader($c, $d));
        $e->addLoader($d);
        $e->addLoader(new \BeSimple\SoapBundle\ServiceDefinition\Loader\AnnotationComplexTypeLoader($a, $b));
        $e->addLoader(new \Oro\Bundle\SoapBundle\ServiceDefinition\Loader\OroSoapLoader($c, $d, array(0 => 'Oro\\Bundle\\AddressBundle\\Controller\\Api\\Soap\\AddressTypeController', 1 => 'Oro\\Bundle\\AddressBundle\\Controller\\Api\\Soap\\CountryController', 2 => 'Oro\\Bundle\\AddressBundle\\Controller\\Api\\Soap\\RegionController', 3 => 'Oro\\Bundle\\DataAuditBundle\\Controller\\Api\\Soap\\AuditController', 4 => 'Oro\\Bundle\\EmailBundle\\Controller\\Api\\Soap\\EmailController', 5 => 'Oro\\Bundle\\OrganizationBundle\\Controller\\Api\\Soap\\BusinessUnitController', 6 => 'Oro\\Bundle\\OrganizationBundle\\Controller\\Api\\Soap\\OrganizationController', 7 => 'Oro\\Bundle\\SearchBundle\\Controller\\Api\\SoapController', 8 => 'Oro\\Bundle\\UserBundle\\Controller\\Api\\Soap\\UserController', 9 => 'Oro\\Bundle\\UserBundle\\Controller\\Api\\Soap\\RoleController', 10 => 'Oro\\Bundle\\UserBundle\\Controller\\Api\\Soap\\GroupController')));

        return $this->services['besimple.soap.definition.loader'] = new \Symfony\Component\Config\Loader\DelegatingLoader($e);
    }

    /**
     * Gets the 'besimple.soap.exception_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return BeSimple\SoapBundle\EventListener\SoapExceptionListener A BeSimple\SoapBundle\EventListener\SoapExceptionListener instance.
     */
    protected function getBesimple_Soap_ExceptionListenerService()
    {
        return $this->services['besimple.soap.exception_listener'] = new \BeSimple\SoapBundle\EventListener\SoapExceptionListener($this, 'BeSimpleSoapBundle:SoapWebService:exception', $this->get('monolog.logger.request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'besimple.soap.request_format.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return BeSimple\SoapBundle\EventListener\RequestFormatListener A BeSimple\SoapBundle\EventListener\RequestFormatListener instance.
     */
    protected function getBesimple_Soap_RequestFormat_ListenerService()
    {
        return $this->services['besimple.soap.request_format.listener'] = new \BeSimple\SoapBundle\EventListener\RequestFormatListener();
    }

    /**
     * Gets the 'besimple.soap.response' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return BeSimple\SoapBundle\Soap\SoapResponse A BeSimple\SoapBundle\Soap\SoapResponse instance.
     */
    protected function getBesimple_Soap_ResponseService()
    {
        return $this->services['besimple.soap.response'] = new \BeSimple\SoapBundle\Soap\SoapResponse();
    }

    /**
     * Gets the 'besimple.soap.response.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return BeSimple\SoapBundle\EventListener\SoapResponseListener A BeSimple\SoapBundle\EventListener\SoapResponseListener instance.
     */
    protected function getBesimple_Soap_Response_ListenerService()
    {
        return $this->services['besimple.soap.response.listener'] = new \BeSimple\SoapBundle\EventListener\SoapResponseListener($this->get('besimple.soap.response'));
    }

    /**
     * Gets the 'besimple.soap.type.repository' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return BeSimple\SoapCommon\Definition\Type\TypeRepository A BeSimple\SoapCommon\Definition\Type\TypeRepository instance.
     */
    protected function getBesimple_Soap_Type_RepositoryService()
    {
        $this->services['besimple.soap.type.repository'] = $instance = new \BeSimple\SoapCommon\Definition\Type\TypeRepository(new \BeSimple\SoapServer\Classmap());

        $instance->addXmlNamespace('xsd', 'http://www.w3.org/2001/XMLSchema');
        $instance->addType('string', 'xsd:string');
        $instance->addType('boolean', 'xsd:boolean');
        $instance->addType('int', 'xsd:int');
        $instance->addType('float', 'xsd:float');
        $instance->addType('date', 'xsd:date');
        $instance->addType('dateTime', 'xsd:dateTime');

        return $instance;
    }

    /**
     * Gets the 'cache_clearer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer A Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer instance.
     */
    protected function getCacheClearerService()
    {
        return $this->services['cache_clearer'] = new \Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer(array(0 => $this->get('liip_imagine.cache.clearer'), 1 => new \Oro\Bundle\SecurityBundle\Cache\OwnershipMetadataCacheClearer($this->get('oro_security.owner.ownership_metadata_provider')), 2 => new \Oro\Bundle\SecurityBundle\Cache\AclAnnotationCacheClearer($this->get('oro_security.acl.annotation_provider')), 3 => new \Oro\Bundle\SecurityBundle\Cache\ActionMetadataCacheClearer($this->get('oro_security.action_metadata_provider')), 4 => new \Oro\Bundle\SecurityBundle\Cache\EntitySecurityMetadataCacheClearer($this->get('oro_security.entity_security_metadata_provider')), 5 => new \Oro\Bundle\SecurityBundle\Cache\OwnerTreeCacheCleaner($this->get('oro_security.ownership_tree_provider')), 6 => $this->get('oro_email.entity.cache.clearer')));
    }

    /**
     * Gets the 'cache_warmer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate A Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate instance.
     */
    protected function getCacheWarmerService()
    {
        $a = $this->get('kernel');
        $b = $this->get('templating.filename_parser');

        $c = new \Symfony\Bundle\FrameworkBundle\CacheWarmer\TemplateFinder($a, $b, '/var/www/orocrm-platform/app/Resources');

        return $this->services['cache_warmer'] = new \Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate(array(0 => $this->get('oro_email.entity.cache.warmer'), 1 => new \Symfony\Bundle\FrameworkBundle\CacheWarmer\TemplatePathsCacheWarmer($c, $this->get('templating.locator')), 2 => new \Symfony\Bundle\AsseticBundle\CacheWarmer\AssetManagerCacheWarmer($this), 3 => new \Symfony\Bundle\FrameworkBundle\CacheWarmer\RouterCacheWarmer($this->get('router')), 4 => new \Symfony\Bundle\TwigBundle\CacheWarmer\TemplateCacheCacheWarmer($this, $c), 5 => new \Symfony\Bridge\Doctrine\CacheWarmer\ProxyCacheWarmer($this->get('doctrine')), 6 => new \Oro\Bundle\SecurityBundle\Cache\OwnershipMetadataCacheWarmer($this->get('oro_security.owner.ownership_metadata_provider')), 7 => new \Oro\Bundle\SecurityBundle\Cache\AclAnnotationCacheWarmer($this->get('oro_security.acl.annotation_provider')), 8 => new \Oro\Bundle\SecurityBundle\Cache\ActionMetadataCacheWarmer($this->get('oro_security.action_metadata_provider')), 9 => new \Oro\Bundle\SecurityBundle\Cache\EntitySecurityMetadataCacheWarmer($this->get('oro_security.entity_security_metadata_provider')), 10 => new \Oro\Bundle\SecurityBundle\Cache\OwnerTreeCacheWarmer($this->get('oro_security.ownership_tree_provider')), 11 => new \Oro\Bundle\EntityExtendBundle\Cache\EntityCacheWarmer($this->get('oro_entity_extend.tools.dumper'))));
    }

    /**
     * Gets the 'clank.client_event.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return JDare\ClankBundle\Event\AcmeClientEventListener A JDare\ClankBundle\Event\AcmeClientEventListener instance.
     */
    protected function getClank_ClientEvent_ListenerService()
    {
        return $this->services['clank.client_event.listener'] = new \JDare\ClankBundle\Event\AcmeClientEventListener();
    }

    /**
     * Gets the 'data_collector.request' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\HttpKernel\DataCollector\RequestDataCollector A Symfony\Component\HttpKernel\DataCollector\RequestDataCollector instance.
     */
    protected function getDataCollector_RequestService()
    {
        return $this->services['data_collector.request'] = new \Symfony\Component\HttpKernel\DataCollector\RequestDataCollector();
    }

    /**
     * Gets the 'data_collector.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector A Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector instance.
     */
    protected function getDataCollector_RouterService()
    {
        return $this->services['data_collector.router'] = new \Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector();
    }

    /**
     * Gets the 'debug.controller_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\HttpKernel\Controller\TraceableControllerResolver A Symfony\Component\HttpKernel\Controller\TraceableControllerResolver instance.
     */
    protected function getDebug_ControllerResolverService()
    {
        return $this->services['debug.controller_resolver'] = new \Symfony\Component\HttpKernel\Controller\TraceableControllerResolver(new \Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver($this, $this->get('controller_name_converter'), $this->get('monolog.logger.request', ContainerInterface::NULL_ON_INVALID_REFERENCE)), $this->get('debug.stopwatch'));
    }

    /**
     * Gets the 'debug.deprecation_logger_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\HttpKernel\EventListener\ErrorsLoggerListener A Symfony\Component\HttpKernel\EventListener\ErrorsLoggerListener instance.
     */
    protected function getDebug_DeprecationLoggerListenerService()
    {
        return $this->services['debug.deprecation_logger_listener'] = new \Symfony\Component\HttpKernel\EventListener\ErrorsLoggerListener('deprecation', $this->get('monolog.logger.deprecation', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'debug.emergency_logger_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\HttpKernel\EventListener\ErrorsLoggerListener A Symfony\Component\HttpKernel\EventListener\ErrorsLoggerListener instance.
     */
    protected function getDebug_EmergencyLoggerListenerService()
    {
        return $this->services['debug.emergency_logger_listener'] = new \Symfony\Component\HttpKernel\EventListener\ErrorsLoggerListener('emergency', $this->get('monolog.logger.emergency', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'debug.event_dispatcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher A Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher instance.
     */
    protected function getDebug_EventDispatcherService()
    {
        $this->services['debug.event_dispatcher'] = $instance = new \Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher($this->get('event_dispatcher'), $this->get('debug.stopwatch'), $this->get('monolog.logger.event', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        $instance->setProfiler($this->get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        return $instance;
    }

    /**
     * Gets the 'debug.stopwatch' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Stopwatch\Stopwatch A Symfony\Component\Stopwatch\Stopwatch instance.
     */
    protected function getDebug_StopwatchService()
    {
        return $this->services['debug.stopwatch'] = new \Symfony\Component\Stopwatch\Stopwatch();
    }

    /**
     * Gets the 'debug.templating.engine.php' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\FrameworkBundle\Templating\TimedPhpEngine A Symfony\Bundle\FrameworkBundle\Templating\TimedPhpEngine instance.
     */
    protected function getDebug_Templating_Engine_PhpService()
    {
        $this->services['debug.templating.engine.php'] = $instance = new \Symfony\Bundle\FrameworkBundle\Templating\TimedPhpEngine($this->get('templating.name_parser'), $this, $this->get('templating.loader'), $this->get('debug.stopwatch'), $this->get('templating.globals'));

        $instance->setHelpers(array('slots' => 'templating.helper.slots', 'assets' => 'templating.helper.assets', 'request' => 'templating.helper.request', 'session' => 'templating.helper.session', 'router' => 'templating.helper.router', 'actions' => 'templating.helper.actions', 'code' => 'templating.helper.code', 'translator' => 'templating.helper.translator', 'form' => 'templating.helper.form', 'logout_url' => 'templating.helper.logout_url', 'security' => 'templating.helper.security', 'assetic' => 'assetic.helper.static', 'jms_serializer' => 'jms_serializer.templating.helper.serializer', 'knp_pagination' => 'knp_paginator.templating.helper.pagination', 'imagine' => 'liip_imagine.templating.helper'));

        return $instance;
    }

    /**
     * Gets the 'debug.templating.engine.twig' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\TwigBundle\Debug\TimedTwigEngine A Symfony\Bundle\TwigBundle\Debug\TimedTwigEngine instance.
     */
    protected function getDebug_Templating_Engine_TwigService()
    {
        $this->services['debug.templating.engine.twig'] = $instance = new \Symfony\Bundle\TwigBundle\Debug\TimedTwigEngine($this->get('twig'), $this->get('templating.name_parser'), $this->get('templating.locator'), $this->get('debug.stopwatch'), $this->get('templating.globals'));

        $instance->setDefaultEscapingStrategy(array(0 => $instance, 1 => 'guessDefaultEscapingStrategy'));

        return $instance;
    }

    /**
     * Gets the 'doctrine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Doctrine\Bundle\DoctrineBundle\Registry A Doctrine\Bundle\DoctrineBundle\Registry instance.
     */
    protected function getDoctrineService()
    {
        return $this->services['doctrine'] = new \Doctrine\Bundle\DoctrineBundle\Registry($this, array('default' => 'doctrine.dbal.default_connection', 'report_source' => 'doctrine.dbal.report_source_connection', 'report_target' => 'doctrine.dbal.report_target_connection'), array('default' => 'doctrine.orm.default_entity_manager'), 'default', 'default');
    }

    /**
     * Gets the 'doctrine.dbal.connection_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Doctrine\Bundle\DoctrineBundle\ConnectionFactory A Doctrine\Bundle\DoctrineBundle\ConnectionFactory instance.
     */
    protected function getDoctrine_Dbal_ConnectionFactoryService()
    {
        return $this->services['doctrine.dbal.connection_factory'] = new \Doctrine\Bundle\DoctrineBundle\ConnectionFactory(array('date' => array('class' => 'Oro\\Bundle\\LocaleBundle\\DoctrineExtensions\\DBAL\\Types\\UTCDateType', 'commented' => true), 'datetime' => array('class' => 'Oro\\Bundle\\LocaleBundle\\DoctrineExtensions\\DBAL\\Types\\UTCDateTimeType', 'commented' => true), 'time' => array('class' => 'Oro\\Bundle\\LocaleBundle\\DoctrineExtensions\\DBAL\\Types\\UTCTimeType', 'commented' => true)));
    }

    /**
     * Gets the 'doctrine.dbal.default.wrapped_connection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return PDO A PDO instance.
     */
    protected function getDoctrine_Dbal_Default_WrappedConnectionService()
    {
        return $this->services['doctrine.dbal.default.wrapped_connection'] = $this->get('doctrine.dbal.default_connection')->getWrappedConnection();
    }

    /**
     * Gets the 'doctrine.dbal.default_connection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Doctrine\DBAL\Connection A Doctrine\DBAL\Connection instance.
     */
    protected function getDoctrine_Dbal_DefaultConnectionService()
    {
        $a = new \Doctrine\DBAL\Logging\LoggerChain();
        $a->addLogger($this->get('doctrine.dbal.logger'));
        $a->addLogger($this->get('doctrine.dbal.logger.profiling.default'));

        $b = new \Doctrine\DBAL\Configuration();
        $b->setSQLLogger($a);

        $c = new \Gedmo\Tree\TreeListener();
        $c->setAnnotationReader($this->get('annotation_reader'));

        $d = new \Symfony\Bridge\Doctrine\ContainerAwareEventManager($this);
        $d->addEventSubscriber(new \Oro\Bundle\EmailBundle\EventListener\EntitySubscriber(new \Oro\Bundle\EmailBundle\Entity\Manager\EmailOwnerManager($this->get('oro_email.email.owner.provider.storage'), $this->get('oro_email.email.address.manager'))));
        $d->addEventSubscriber($c);
        $d->addEventSubscriber(new \Oro\Bundle\CalendarBundle\EventListener\EntitySubscriber(new \Oro\Bundle\CalendarBundle\Notification\RemindTimeCalculator(15)));
        $d->addEventSubscriber($this->get('oro_dataaudit.listener.entity_subscriber'));
        $d->addEventSubscriber($this->get('oro_entity_extend.listener.entity_subscriber'));
        $d->addEventSubscriber($this->get('oro_user.entity_with_image.subscriber'));
        $d->addEventSubscriber($this->get('oro_workflow.listener.subscriver.workflow_definition'));
        $d->addEventSubscriber($this->get('oro_workflow.listener.subscriber.workflow_data_serialize'));
        $d->addEventSubscriber($this->get('oro_navigation.event.doctrine_tag_subscriber'));
        $d->addEventSubscriber($this->get('stof_doctrine_extensions.listener.translatable'));
        $d->addEventListener(array(0 => 'prePersist'), $this->get('oro_organization.entity_ownership.listener'));
        $d->addEventListener(array(0 => 'loadClassMetadata'), $this->get('doctrine.orm.listeners.resolve_target_entity'));
        $d->addEventListener(array(0 => 'preUpdate'), $this->get('oro_user.role.listener'));
        $d->addEventListener(array(0 => 'onFlush'), $this->get('oro_security.ownership_tree_subscriber'));
        $d->addEventListener(array(0 => 'onFlush', 1 => 'postFlush'), $this->get('oro_search.index_listener'));
        $d->addEventListener(array(0 => 'postGenerateSchema', 1 => 'postLoad', 2 => 'postPersist', 3 => 'preRemove'), 'jms_job_queue.entity.many_to_any_listener');
        $d->addEventListener(array(0 => 'postGenerateSchema'), 'security.acl.dbal.schema_listener');
        $d->addEventListener(array(0 => 'postGenerateSchema'), 'jms_job_queue.entity.statistics_listener');
        $d->addEventListener(array(0 => 'preRemove'), $this->get('oro_organization.business_unit.listener'));
        $d->addEventListener(array(0 => 'postPersist', 1 => 'postFlush'), $this->get('oro_entity_config.event_listener.option_set_listener'));
        $d->addEventListener(array(0 => 'preRemove'), $this->get('oro_tag.docrine.event.listener'));
        $d->addEventListener(array(0 => 'postPersist', 1 => 'postUpdate', 2 => 'postRemove'), $this->get('oro_notification.docrine.event.listener'));
        $d->addEventListener(array(0 => 'postPersist'), $this->get('oro_navigation.item.pinbar.post_persist_listener'));

        return $this->services['doctrine.dbal.default_connection'] = $this->get('doctrine.dbal.connection_factory')->createConnection(array('dbname' => 'bap_standard', 'host' => '127.0.0.1', 'port' => NULL, 'user' => 'root', 'password' => NULL, 'charset' => 'UTF8', 'driver' => 'pdo_mysql', 'driverOptions' => array()), $b, $d, array());
    }

    /**
     * Gets the 'doctrine.dbal.report_source_connection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Doctrine\DBAL\Connection A Doctrine\DBAL\Connection instance.
     */
    protected function getDoctrine_Dbal_ReportSourceConnectionService()
    {
        $a = new \Doctrine\DBAL\Logging\LoggerChain();
        $a->addLogger($this->get('doctrine.dbal.logger'));
        $a->addLogger($this->get('doctrine.dbal.logger.profiling.report_source'));

        $b = new \Doctrine\DBAL\Configuration();
        $b->setSQLLogger($a);

        $c = new \Symfony\Bridge\Doctrine\ContainerAwareEventManager($this);
        $c->addEventSubscriber($this->get('oro_user.entity_with_image.subscriber'));
        $c->addEventSubscriber($this->get('oro_workflow.listener.subscriver.workflow_definition'));
        $c->addEventSubscriber($this->get('oro_workflow.listener.subscriber.workflow_data_serialize'));
        $c->addEventListener(array(0 => 'prePersist'), $this->get('oro_organization.entity_ownership.listener'));
        $c->addEventListener(array(0 => 'preUpdate'), $this->get('oro_user.role.listener'));
        $c->addEventListener(array(0 => 'onFlush'), $this->get('oro_security.ownership_tree_subscriber'));
        $c->addEventListener(array(0 => 'onFlush', 1 => 'postFlush'), $this->get('oro_search.index_listener'));
        $c->addEventListener(array(0 => 'postGenerateSchema', 1 => 'postLoad', 2 => 'postPersist', 3 => 'preRemove'), 'jms_job_queue.entity.many_to_any_listener');
        $c->addEventListener(array(0 => 'loadClassMetadata'), $this->get('doctrine.orm.listeners.resolve_target_entity'));
        $c->addEventListener(array(0 => 'postGenerateSchema'), 'jms_job_queue.entity.statistics_listener');
        $c->addEventListener(array(0 => 'preRemove'), $this->get('oro_organization.business_unit.listener'));
        $c->addEventListener(array(0 => 'postPersist', 1 => 'postFlush'), $this->get('oro_entity_config.event_listener.option_set_listener'));
        $c->addEventListener(array(0 => 'preRemove'), $this->get('oro_tag.docrine.event.listener'));
        $c->addEventListener(array(0 => 'postPersist', 1 => 'postUpdate', 2 => 'postRemove'), $this->get('oro_notification.docrine.event.listener'));
        $c->addEventListener(array(0 => 'postPersist'), $this->get('oro_navigation.item.pinbar.post_persist_listener'));

        return $this->services['doctrine.dbal.report_source_connection'] = $this->get('doctrine.dbal.connection_factory')->createConnection(array('dbname' => 'bap_standard', 'host' => '127.0.0.1', 'port' => NULL, 'user' => 'root', 'password' => NULL, 'charset' => 'UTF8', 'driver' => 'pdo_mysql', 'driverOptions' => array()), $b, $c, array());
    }

    /**
     * Gets the 'doctrine.dbal.report_target_connection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Doctrine\DBAL\Connection A Doctrine\DBAL\Connection instance.
     */
    protected function getDoctrine_Dbal_ReportTargetConnectionService()
    {
        $a = new \Doctrine\DBAL\Logging\LoggerChain();
        $a->addLogger($this->get('doctrine.dbal.logger'));
        $a->addLogger($this->get('doctrine.dbal.logger.profiling.report_target'));

        $b = new \Doctrine\DBAL\Configuration();
        $b->setSQLLogger($a);

        $c = new \Symfony\Bridge\Doctrine\ContainerAwareEventManager($this);
        $c->addEventSubscriber($this->get('oro_user.entity_with_image.subscriber'));
        $c->addEventSubscriber($this->get('oro_workflow.listener.subscriver.workflow_definition'));
        $c->addEventSubscriber($this->get('oro_workflow.listener.subscriber.workflow_data_serialize'));
        $c->addEventListener(array(0 => 'prePersist'), $this->get('oro_organization.entity_ownership.listener'));
        $c->addEventListener(array(0 => 'preUpdate'), $this->get('oro_user.role.listener'));
        $c->addEventListener(array(0 => 'onFlush'), $this->get('oro_security.ownership_tree_subscriber'));
        $c->addEventListener(array(0 => 'onFlush', 1 => 'postFlush'), $this->get('oro_search.index_listener'));
        $c->addEventListener(array(0 => 'postGenerateSchema', 1 => 'postLoad', 2 => 'postPersist', 3 => 'preRemove'), 'jms_job_queue.entity.many_to_any_listener');
        $c->addEventListener(array(0 => 'loadClassMetadata'), $this->get('doctrine.orm.listeners.resolve_target_entity'));
        $c->addEventListener(array(0 => 'postGenerateSchema'), 'jms_job_queue.entity.statistics_listener');
        $c->addEventListener(array(0 => 'preRemove'), $this->get('oro_organization.business_unit.listener'));
        $c->addEventListener(array(0 => 'postPersist', 1 => 'postFlush'), $this->get('oro_entity_config.event_listener.option_set_listener'));
        $c->addEventListener(array(0 => 'preRemove'), $this->get('oro_tag.docrine.event.listener'));
        $c->addEventListener(array(0 => 'postPersist', 1 => 'postUpdate', 2 => 'postRemove'), $this->get('oro_notification.docrine.event.listener'));
        $c->addEventListener(array(0 => 'postPersist'), $this->get('oro_navigation.item.pinbar.post_persist_listener'));

        return $this->services['doctrine.dbal.report_target_connection'] = $this->get('doctrine.dbal.connection_factory')->createConnection(array('dbname' => 'bap_standard', 'host' => '127.0.0.1', 'port' => NULL, 'user' => 'root', 'password' => NULL, 'charset' => 'UTF8', 'driver' => 'pdo_mysql', 'driverOptions' => array()), $b, $c, array());
    }

    /**
     * Gets the 'doctrine.orm.default_entity_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityBundle\ORM\OroEntityManager A Oro\Bundle\EntityBundle\ORM\OroEntityManager instance.
     */
    protected function getDoctrine_Orm_DefaultEntityManagerService()
    {
        $a = $this->get('annotation_reader');

        $b = new \Doctrine\Common\Cache\ArrayCache();
        $b->setNamespace('sf2orm_default_e3843ca3b2b7e4aa02df42cbdc837fdc');

        $c = new \Doctrine\Common\Cache\ArrayCache();
        $c->setNamespace('sf2orm_default_e3843ca3b2b7e4aa02df42cbdc837fdc');

        $d = new \Doctrine\Common\Cache\ArrayCache();
        $d->setNamespace('sf2orm_default_e3843ca3b2b7e4aa02df42cbdc837fdc');

        $e = new \Doctrine\ORM\Mapping\Driver\AnnotationDriver($a, array(0 => '/var/www/orocrm-platform/vendor/jms/job-queue-bundle/JMS/JobQueueBundle/Entity', 1 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/AddressBundle/Entity', 2 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/BatchBundle/Entity', 3 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/BusinessEntitiesBundle/Entity', 4 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/CalendarBundle/Entity', 5 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/ConfigBundle/Entity', 6 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/CronBundle/Entity', 7 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/DataAuditBundle/Entity', 8 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/EmailBundle/Entity', 9 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/EntityConfigBundle/Entity', 10 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/EntityExtendBundle/Entity', 11 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/FormBundle/Entity', 12 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/ImapBundle/Entity', 13 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/IntegrationBundle/Entity', 14 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/NotificationBundle/Entity', 15 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/OrganizationBundle/Entity', 16 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/ReportBundle/Entity', 17 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/SearchBundle/Entity', 18 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/SegmentationTreeBundle/Entity', 19 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/SidebarBundle/Entity', 20 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/SoapBundle/Entity', 21 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/TagBundle/Entity', 22 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/TranslationBundle/Entity', 23 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/UserBundle/Entity', 24 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/WindowsBundle/Entity', 25 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/WorkflowBundle/Entity', 26 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/NavigationBundle/Entity'));

        $f = new \Doctrine\Common\Persistence\Mapping\Driver\MappingDriverChain();
        $f->addDriver($e, 'JMS\\JobQueueBundle\\Entity');
        $f->addDriver($e, 'Oro\\Bundle\\AddressBundle\\Entity');
        $f->addDriver($e, 'Oro\\Bundle\\BatchBundle\\Entity');
        $f->addDriver($e, 'Oro\\Bundle\\BusinessEntitiesBundle\\Entity');
        $f->addDriver($e, 'Oro\\Bundle\\CalendarBundle\\Entity');
        $f->addDriver($e, 'Oro\\Bundle\\ConfigBundle\\Entity');
        $f->addDriver($e, 'Oro\\Bundle\\CronBundle\\Entity');
        $f->addDriver($e, 'Oro\\Bundle\\DataAuditBundle\\Entity');
        $f->addDriver($e, 'Oro\\Bundle\\EmailBundle\\Entity');
        $f->addDriver($e, 'Oro\\Bundle\\EntityConfigBundle\\Entity');
        $f->addDriver($e, 'Oro\\Bundle\\EntityExtendBundle\\Entity');
        $f->addDriver($e, 'Oro\\Bundle\\FormBundle\\Entity');
        $f->addDriver($e, 'Oro\\Bundle\\ImapBundle\\Entity');
        $f->addDriver($e, 'Oro\\Bundle\\IntegrationBundle\\Entity');
        $f->addDriver($e, 'Oro\\Bundle\\NotificationBundle\\Entity');
        $f->addDriver($e, 'Oro\\Bundle\\OrganizationBundle\\Entity');
        $f->addDriver($e, 'Oro\\Bundle\\ReportBundle\\Entity');
        $f->addDriver($e, 'Oro\\Bundle\\SearchBundle\\Entity');
        $f->addDriver($e, 'Oro\\Bundle\\SegmentationTreeBundle\\Entity');
        $f->addDriver($e, 'Oro\\Bundle\\SidebarBundle\\Entity');
        $f->addDriver($e, 'Oro\\Bundle\\SoapBundle\\Entity');
        $f->addDriver($e, 'Oro\\Bundle\\TagBundle\\Entity');
        $f->addDriver($e, 'Oro\\Bundle\\TranslationBundle\\Entity');
        $f->addDriver($e, 'Oro\\Bundle\\UserBundle\\Entity');
        $f->addDriver($e, 'Oro\\Bundle\\WindowsBundle\\Entity');
        $f->addDriver($e, 'Oro\\Bundle\\WorkflowBundle\\Entity');
        $f->addDriver($e, 'Oro\\Bundle\\NavigationBundle\\Entity');
        $f->addDriver(new \Doctrine\ORM\Mapping\Driver\AnnotationDriver($a, array(0 => '/var/www/orocrm-platform/app/emails/OroEmail/Cache/OroEmailBundle/Entity')), 'OroEmail\\Cache\\OroEmailBundle\\Entity');
        $f->addDriver(new \Doctrine\ORM\Mapping\Driver\YamlDriver(new \Doctrine\Common\Persistence\Mapping\Driver\SymfonyFileLocator(array('/var/www/orocrm-platform/app/cache/de_/oro_entities/Extend/Entity' => 'Extend\\Entity'), '.orm.yml')), 'Extend\\Entity');

        $g = new \Doctrine\ORM\Configuration();
        $g->setEntityNamespaces(array('JMSJobQueueBundle' => 'JMS\\JobQueueBundle\\Entity', 'OroAddressBundle' => 'Oro\\Bundle\\AddressBundle\\Entity', 'OroBatchBundle' => 'Oro\\Bundle\\BatchBundle\\Entity', 'OroBusinessEntitiesBundle' => 'Oro\\Bundle\\BusinessEntitiesBundle\\Entity', 'OroCalendarBundle' => 'Oro\\Bundle\\CalendarBundle\\Entity', 'OroConfigBundle' => 'Oro\\Bundle\\ConfigBundle\\Entity', 'OroCronBundle' => 'Oro\\Bundle\\CronBundle\\Entity', 'OroDataAuditBundle' => 'Oro\\Bundle\\DataAuditBundle\\Entity', 'OroEmailBundle' => 'Oro\\Bundle\\EmailBundle\\Entity', 'OroEntityConfigBundle' => 'Oro\\Bundle\\EntityConfigBundle\\Entity', 'OroEntityExtendBundle' => 'Oro\\Bundle\\EntityExtendBundle\\Entity', 'OroFormBundle' => 'Oro\\Bundle\\FormBundle\\Entity', 'OroImapBundle' => 'Oro\\Bundle\\ImapBundle\\Entity', 'OroIntegrationBundle' => 'Oro\\Bundle\\IntegrationBundle\\Entity', 'OroNotificationBundle' => 'Oro\\Bundle\\NotificationBundle\\Entity', 'OroOrganizationBundle' => 'Oro\\Bundle\\OrganizationBundle\\Entity', 'OroReportBundle' => 'Oro\\Bundle\\ReportBundle\\Entity', 'OroSearchBundle' => 'Oro\\Bundle\\SearchBundle\\Entity', 'OroSegmentationTreeBundle' => 'Oro\\Bundle\\SegmentationTreeBundle\\Entity', 'OroSidebarBundle' => 'Oro\\Bundle\\SidebarBundle\\Entity', 'OroSoapBundle' => 'Oro\\Bundle\\SoapBundle\\Entity', 'OroTagBundle' => 'Oro\\Bundle\\TagBundle\\Entity', 'OroTranslationBundle' => 'Oro\\Bundle\\TranslationBundle\\Entity', 'OroUserBundle' => 'Oro\\Bundle\\UserBundle\\Entity', 'OroWindowsBundle' => 'Oro\\Bundle\\WindowsBundle\\Entity', 'OroWorkflowBundle' => 'Oro\\Bundle\\WorkflowBundle\\Entity', 'OroNavigationBundle' => 'Oro\\Bundle\\NavigationBundle\\Entity'));
        $g->setMetadataCacheImpl($b);
        $g->setQueryCacheImpl($c);
        $g->setResultCacheImpl($d);
        $g->setMetadataDriverImpl($f);
        $g->setProxyDir('/var/www/orocrm-platform/app/cache/de_/doctrine/orm/Proxies');
        $g->setProxyNamespace('Proxies');
        $g->setAutoGenerateProxyClasses(true);
        $g->setClassMetadataFactoryName('Oro\\Bundle\\EntityExtendBundle\\Mapping\\ExtendClassMetadataFactory');
        $g->setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
        $g->setNamingStrategy(new \Doctrine\ORM\Mapping\DefaultNamingStrategy());

        $this->services['doctrine.orm.default_entity_manager'] = $instance = call_user_func(array('Oro\\Bundle\\EntityBundle\\ORM\\OroEntityManager', 'create'), $this->get('doctrine.dbal.default_connection'), $g);

        $instance->setFilterCollection($this->get('oro_entity.orm.sql_filter_collection'));
        $instance->setExtendManager($this->get('oro_entity_extend.extend.extend_manager'));
        $this->get('doctrine.orm.default_manager_configurator')->configure($instance);

        return $instance;
    }

    /**
     * Gets the 'doctrine.orm.default_manager_configurator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Doctrine\Bundle\DoctrineBundle\ManagerConfigurator A Doctrine\Bundle\DoctrineBundle\ManagerConfigurator instance.
     */
    protected function getDoctrine_Orm_DefaultManagerConfiguratorService()
    {
        return $this->services['doctrine.orm.default_manager_configurator'] = new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator(array(), array());
    }

    /**
     * Gets the 'doctrine.orm.validator.unique' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator A Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator instance.
     */
    protected function getDoctrine_Orm_Validator_UniqueService()
    {
        return $this->services['doctrine.orm.validator.unique'] = new \Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator($this->get('doctrine'));
    }

    /**
     * Gets the 'doctrine.orm.validator_initializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bridge\Doctrine\Validator\DoctrineInitializer A Symfony\Bridge\Doctrine\Validator\DoctrineInitializer instance.
     */
    protected function getDoctrine_Orm_ValidatorInitializerService()
    {
        return $this->services['doctrine.orm.validator_initializer'] = new \Symfony\Bridge\Doctrine\Validator\DoctrineInitializer($this->get('doctrine'));
    }

    /**
     * Gets the 'escape_wsse_authentication.encoder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Security\Core\Encoder\MessageDigestPasswordEncoder A Symfony\Component\Security\Core\Encoder\MessageDigestPasswordEncoder instance.
     */
    protected function getEscapeWsseAuthentication_EncoderService()
    {
        return $this->services['escape_wsse_authentication.encoder'] = new \Symfony\Component\Security\Core\Encoder\MessageDigestPasswordEncoder('sha1', true, 1);
    }

    /**
     * Gets the 'escape_wsse_authentication.encoder.wsse_secured' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Security\Core\Encoder\MessageDigestPasswordEncoder A Symfony\Component\Security\Core\Encoder\MessageDigestPasswordEncoder instance.
     */
    protected function getEscapeWsseAuthentication_Encoder_WsseSecuredService()
    {
        return $this->services['escape_wsse_authentication.encoder.wsse_secured'] = new \Symfony\Component\Security\Core\Encoder\MessageDigestPasswordEncoder('sha1', true, 1);
    }

    /**
     * Gets the 'escape_wsse_authentication.entry_point' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Escape\WSSEAuthenticationBundle\Security\Http\EntryPoint\EntryPoint A Escape\WSSEAuthenticationBundle\Security\Http\EntryPoint\EntryPoint instance.
     */
    protected function getEscapeWsseAuthentication_EntryPointService()
    {
        return $this->services['escape_wsse_authentication.entry_point'] = new \Escape\WSSEAuthenticationBundle\Security\Http\EntryPoint\EntryPoint($this->get('logger'), NULL, 'UsernameToken');
    }

    /**
     * Gets the 'escape_wsse_authentication.entry_point.wsse_secured' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Escape\WSSEAuthenticationBundle\Security\Http\EntryPoint\EntryPoint A Escape\WSSEAuthenticationBundle\Security\Http\EntryPoint\EntryPoint instance.
     */
    protected function getEscapeWsseAuthentication_EntryPoint_WsseSecuredService()
    {
        return $this->services['escape_wsse_authentication.entry_point.wsse_secured'] = new \Escape\WSSEAuthenticationBundle\Security\Http\EntryPoint\EntryPoint($this->get('logger'), 'Secured API', 'UsernameToken');
    }

    /**
     * Gets the 'escape_wsse_authentication.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Security\WsseAuthListener A Oro\Bundle\UserBundle\Security\WsseAuthListener instance.
     */
    protected function getEscapeWsseAuthentication_ListenerService()
    {
        return $this->services['escape_wsse_authentication.listener'] = new \Oro\Bundle\UserBundle\Security\WsseAuthListener($this->get('security.context'), $this->get('security.authentication.manager'));
    }

    /**
     * Gets the 'escape_wsse_authentication.listener.wsse_secured' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Security\WsseAuthListener A Oro\Bundle\UserBundle\Security\WsseAuthListener instance.
     */
    protected function getEscapeWsseAuthentication_Listener_WsseSecuredService()
    {
        return $this->services['escape_wsse_authentication.listener.wsse_secured'] = new \Oro\Bundle\UserBundle\Security\WsseAuthListener($this->get('security.context'), $this->get('security.authentication.manager'), $this->get('escape_wsse_authentication.entry_point.wsse_secured'));
    }

    /**
     * Gets the 'escape_wsse_authentication.provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Security\WsseUserProvider A Oro\Bundle\UserBundle\Security\WsseUserProvider instance.
     */
    protected function getEscapeWsseAuthentication_ProviderService()
    {
        return $this->services['escape_wsse_authentication.provider'] = new \Oro\Bundle\UserBundle\Security\WsseUserProvider(NULL, NULL, '/var/www/orocrm-platform/app/cache/de_/security/nonces', 300);
    }

    /**
     * Gets the 'escape_wsse_authentication.provider.wsse_secured' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Security\WsseUserProvider A Oro\Bundle\UserBundle\Security\WsseUserProvider instance.
     */
    protected function getEscapeWsseAuthentication_Provider_WsseSecuredService()
    {
        return $this->services['escape_wsse_authentication.provider.wsse_secured'] = new \Oro\Bundle\UserBundle\Security\WsseUserProvider($this->get('security.user.provider.concrete.chain_provider'), $this->get('escape_wsse_authentication.encoder.wsse_secured'), NULL, 3600);
    }

    /**
     * Gets the 'event_dispatcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher A Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher instance.
     */
    protected function getEventDispatcherService()
    {
        $this->services['event_dispatcher'] = $instance = new \Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher($this);

        $instance->addListenerService('knp_pager.before', array(0 => 'knp_paginator.subscriber.paginate', 1 => 'before'), 0);
        $instance->addListenerService('knp_pager.pagination', array(0 => 'knp_paginator.subscriber.paginate', 1 => 'pagination'), 0);
        $instance->addListenerService('knp_pager.before', array(0 => 'knp_paginator.subscriber.sortable', 1 => 'before'), 1);
        $instance->addListenerService('knp_pager.before', array(0 => 'knp_paginator.subscriber.filtration', 1 => 'before'), 1);
        $instance->addListenerService('knp_pager.pagination', array(0 => 'knp_paginator.subscriber.sliding_pagination', 1 => 'pagination'), 1);
        $instance->addListenerService('kernel.controller', array(0 => 'data_collector.router', 1 => 'onKernelController'), 0);
        $instance->addListenerService('kernel.response', array(0 => 'monolog.handler.firephp', 1 => 'onKernelResponse'), 0);
        $instance->addListenerService('kernel.response', array(0 => 'monolog.handler.chromephp', 1 => 'onKernelResponse'), 0);
        $instance->addListenerService('kernel.request', array(0 => 'knp_paginator.subscriber.sliding_pagination', 1 => 'onKernelRequest'), 0);
        $instance->addListenerService('kernel.request', array(0 => 'knp_menu.listener.voters', 1 => 'onKernelRequest'), 0);
        $instance->addListenerService('kernel.request', array(0 => 'fos_rest.body_listener', 1 => 'onKernelRequest'), 0);
        $instance->addListenerService('kernel.controller', array(0 => 'fos_rest.format_listener', 1 => 'onKernelController'), 0);
        $instance->addListenerService('kernel.request', array(0 => 'nelmio_api_doc.event_listener.request', 1 => 'onKernelRequest'), 0);
        $instance->addListenerService('kernel.request', array(0 => 'besimple.soap.request_format.listener', 1 => 'onKernelRequest'), 0);
        $instance->addListenerService('kernel.view', array(0 => 'besimple.soap.response.listener', 1 => 'onKernelView'), 0);
        $instance->addListenerService('kernel.controller', array(0 => 'a2lix_translation_form.listener.controller', 1 => 'onKernelController'), 0);
        $instance->addListenerService('kernel.request', array(0 => 'lexik_maintenance.listener', 1 => 'onKernelRequest'), 0);
        $instance->addListenerService('kernel.controller', array(0 => 'oro_security.listener.controller', 1 => 'onKernelController'), -1);
        $instance->addListenerService('kernel.view', array(0 => 'oro_ui.view.listener', 1 => 'onKernelView'), 0);
        $instance->addListenerService('oro_menu.configure.application_menu', array(0 => 'oro_entity.listener.navigation_listener', 1 => 'onNavigationConfigure'), 0);
        $instance->addListenerService('kernel.request', array(0 => 'oro_dataaudit.listener.kernel_listener', 1 => 'onKernelRequest'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after.audit-history-grid', array(0 => 'oro_dataaudit.event_listener.dataaudit_history_grid_listener', 1 => 'onBuildAfter'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after.audit-log-grid', array(0 => 'oro_entity_config.event_listener.audit_log_grid_listener', 1 => 'onBuildAfter'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after.auditfield-log-grid', array(0 => 'oro_entity_config.event_listener.audit_log_grid_listener', 1 => 'onBuildAfter'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.before.auditfield-log-grid', array(0 => 'oro_entity_config.event_listener.audit_log_grid_listener', 1 => 'onBuildBefore'), 0);
        $instance->addListenerService('kernel.controller', array(0 => 'oro_help.listener.help_link', 1 => 'onKernelController'), -200);
        $instance->addListenerService('kernel.request', array(0 => 'kernel.listener.install.event', 1 => 'onRequest'), 10);
        $instance->addListenerService('entity_form.render.before', array(0 => 'oro_organization.form.listener', 1 => 'addOwnerField'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after.bu-update-users-grid', array(0 => 'oro_organization.event_listener.bu_update_grid_listener', 1 => 'onBuildAfter'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after.bu-view-users-grid', array(0 => 'oro_organization.event_listener.bu_view_grid_listener', 1 => 'onBuildAfter'), 0);
        $instance->addListenerService('oro_menu.configure.application_menu', array(0 => 'oro_report.listener.navigation_listener', 1 => 'onNavigationConfigure'), 0);
        $instance->addListenerService('oro_search.prepare_result_item', array(0 => 'oro_search.prepare_result_item.listener', 1 => 'process'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after.search-grid', array(0 => 'oro_search.event_listener.search_results_grid_listener', 1 => 'onBuildAfter'), 0);
        $instance->addListenerService('maintenance.on', array(0 => 'kernel.listener.maintenance.event', 1 => 'onModeOn'), 0);
        $instance->addListenerService('maintenance.off', array(0 => 'kernel.listener.maintenance.event', 1 => 'onModeOff'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after.tag-results-grid', array(0 => 'oro_tag.event_listener.search_results_grid_listener', 1 => 'onBuildAfter'), 0);
        $instance->addListenerService('oro_assetic.load_css', array(0 => 'oro_theme.event_listener.load_css', 1 => 'onLoadCss'), 0);
        $instance->addListenerService('kernel.request', array(0 => 'oro_translation.listener.request', 1 => 'onKernelRequest'), 0);
        $instance->addListenerService('security.interactive_login', array(0 => 'oro_user.security.login', 1 => 'onLogin'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after.users-email-grid', array(0 => 'oro_user.event_listener.user_email_grid_listener', 1 => 'onBuildAfter'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after.dashboard-recent-emails-inbox-grid', array(0 => 'oro_user.event_listener.user_email_grid_listener', 1 => 'onBuildAfter'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after.dashboard-recent-emails-sent-grid', array(0 => 'oro_user.event_listener.without_from_user_email_grid_listener', 1 => 'onBuildAfter'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after.role-users-grid', array(0 => 'oro_user.event_listener.role_users_grid_listener', 1 => 'onBuildAfter'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after.group-users-grid', array(0 => 'oro_user.event_listener.group_users_grid_listener', 1 => 'onBuildAfter'), 0);
        $instance->addListenerService('kernel.response', array(0 => 'kernel.listener.nav_history_response', 1 => 'onResponse'), 0);
        $instance->addListenerService('kernel.request', array(0 => 'kernel.listener.title_service.request_listener', 1 => 'onKernelRequest'), -255);
        $instance->addListenerService('kernel.response', array(0 => 'kernel.listener.hashnav_response', 1 => 'onResponse'), 0);
        $instance->addListenerService('kernel.request', array(0 => 'oro_navigation.twig.hash_nav_extension', 1 => 'onKernelRequest'), 0);
        $instance->addListenerService('oro_datagrid.datgrid.build.after', array(0 => 'oro_navigation.content.datagrid_tag_listener', 1 => 'buildAfter'), 0);
        $instance->addListenerService('clank.client.connected', array(0 => 'clank.client_event.listener', 1 => 'onClientConnect'), 0);
        $instance->addListenerService('clank.client.disconnected', array(0 => 'clank.client_event.listener', 1 => 'onClientDisconnect'), 0);
        $instance->addListenerService('clank.client.error', array(0 => 'clank.client_event.listener', 1 => 'onClientError'), 0);
        $instance->addSubscriberService('response_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener');
        $instance->addSubscriberService('streamed_response_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener');
        $instance->addSubscriberService('locale_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener');
        $instance->addSubscriberService('debug.emergency_logger_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorsLoggerListener');
        $instance->addSubscriberService('debug.deprecation_logger_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorsLoggerListener');
        $instance->addSubscriberService('session_listener', 'Symfony\\Bundle\\FrameworkBundle\\EventListener\\SessionListener');
        $instance->addSubscriberService('fragment.listener', 'Symfony\\Component\\HttpKernel\\EventListener\\FragmentListener');
        $instance->addSubscriberService('profiler_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\ProfilerListener');
        $instance->addSubscriberService('data_collector.request', 'Symfony\\Component\\HttpKernel\\DataCollector\\RequestDataCollector');
        $instance->addSubscriberService('router_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\RouterListener');
        $instance->addSubscriberService('security.firewall', 'Symfony\\Component\\Security\\Http\\Firewall');
        $instance->addSubscriberService('security.rememberme.response_listener', 'Symfony\\Component\\Security\\Http\\RememberMe\\ResponseListener');
        $instance->addSubscriberService('twig.exception_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\ExceptionListener');
        $instance->addSubscriberService('swiftmailer.email_sender.listener', 'Symfony\\Bundle\\SwiftmailerBundle\\EventListener\\EmailSenderListener');
        $instance->addSubscriberService('sensio_framework_extra.controller.listener', 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener');
        $instance->addSubscriberService('sensio_framework_extra.converter.listener', 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener');
        $instance->addSubscriberService('sensio_framework_extra.view.listener', 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener');
        $instance->addSubscriberService('sensio_framework_extra.cache.listener', 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\CacheListener');
        $instance->addSubscriberService('besimple.soap.exception_listener', 'BeSimple\\SoapBundle\\EventListener\\SoapExceptionListener');
        $instance->addSubscriberService('stof_doctrine_extensions.event_listener.locale', 'Stof\\DoctrineExtensionsBundle\\EventListener\\LocaleListener');
        $instance->addSubscriberService('oro_security.owner.ownership_config_subscriber', 'Oro\\Bundle\\SecurityBundle\\EventListener\\OwnershipConfigSubscriber');
        $instance->addSubscriberService('oro_security.entity_security_config_subscriber', 'Oro\\Bundle\\SecurityBundle\\EventListener\\EntitySecurityMetadataConfigSubscriber');
        $instance->addSubscriberService('oro_entity.owner.entity_config_subscriber', 'Oro\\Bundle\\EntityBundle\\EventListener\\EntityConfigSubscriber');
        $instance->addSubscriberService('oro_entity.event_listener.custom_entity_grid_subscriber', 'Oro\\Bundle\\EntityBundle\\EventListener\\CustomEntityGridListener');
        $instance->addSubscriberService('oro_entity.event_listener.relation_entity_grid_subscriber', 'Oro\\Bundle\\EntityBundle\\EventListener\\RelationEntityGridListener');
        $instance->addSubscriberService('oro_batch.logger_subscriber', 'Oro\\Bundle\\BatchBundle\\EventListener\\LoggerSubscriber');
        $instance->addSubscriberService('oro_batch.notification_subscriber', 'Oro\\Bundle\\BatchBundle\\EventListener\\NotificationSubscriber');
        $instance->addSubscriberService('oro_batch.set_job_execution_log_file_subscriber', 'Oro\\Bundle\\BatchBundle\\EventListener\\SetJobExecutionLogFileSubscriber');
        $instance->addSubscriberService('oro_email.listener.config_subscriber', 'Oro\\Bundle\\EmailBundle\\EventListener\\ConfigSubscriber');
        $instance->addSubscriberService('oro_entity_config.event_listener.entityconfig_grid_listener', 'Oro\\Bundle\\EntityConfigBundle\\EventListener\\EntityConfigGridListener');
        $instance->addSubscriberService('oro_entity_config.event_listener.entityfields_grid_listener', 'Oro\\Bundle\\EntityConfigBundle\\EventListener\\FieldConfigGridListener');
        $instance->addSubscriberService('oro_entity_extend.listener.config_subscriber', 'Oro\\Bundle\\EntityExtendBundle\\EventListener\\ConfigSubscriber');
        $instance->addSubscriberService('oro_locale.locale_listener', 'Oro\\Bundle\\LocaleBundle\\EventListener\\LocaleListener');
        $instance->addSubscriberService('oro_notification.locale_listener', 'Oro\\Bundle\\NotificationBundle\\EventListener\\LocaleListener');
        $instance->addSubscriberService('web_profiler.debug_toolbar', 'Symfony\\Bundle\\WebProfilerBundle\\EventListener\\WebDebugToolbarListener');

        return $instance;
    }

    /**
     * Gets the 'file_locator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\HttpKernel\Config\FileLocator A Symfony\Component\HttpKernel\Config\FileLocator instance.
     */
    protected function getFileLocatorService()
    {
        return $this->services['file_locator'] = new \Symfony\Component\HttpKernel\Config\FileLocator($this->get('kernel'), '/var/www/orocrm-platform/app/Resources');
    }

    /**
     * Gets the 'filesystem' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Filesystem\Filesystem A Symfony\Component\Filesystem\Filesystem instance.
     */
    protected function getFilesystemService()
    {
        return $this->services['filesystem'] = new \Symfony\Component\Filesystem\Filesystem();
    }

    /**
     * Gets the 'form.csrf_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Csrf\CsrfProvider\SessionCsrfProvider A Symfony\Component\Form\Extension\Csrf\CsrfProvider\SessionCsrfProvider instance.
     */
    protected function getForm_CsrfProviderService()
    {
        return $this->services['form.csrf_provider'] = new \Symfony\Component\Form\Extension\Csrf\CsrfProvider\SessionCsrfProvider($this->get('session'), 'ThisTokenIsNotSoSecretChangeIt');
    }

    /**
     * Gets the 'form.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\FormFactory A Symfony\Component\Form\FormFactory instance.
     */
    protected function getForm_FactoryService()
    {
        return $this->services['form.factory'] = new \Symfony\Component\Form\FormFactory($this->get('form.registry'), $this->get('form.resolved_type_factory'));
    }

    /**
     * Gets the 'form.registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\FormRegistry A Symfony\Component\Form\FormRegistry instance.
     */
    protected function getForm_RegistryService()
    {
        return $this->services['form.registry'] = new \Symfony\Component\Form\FormRegistry(array(0 => new \Symfony\Component\Form\Extension\DependencyInjection\DependencyInjectionExtension($this, array('form' => 'form.type.form', 'birthday' => 'form.type.birthday', 'checkbox' => 'form.type.checkbox', 'choice' => 'form.type.choice', 'collection' => 'form.type.collection', 'country' => 'form.type.country', 'date' => 'form.type.date', 'datetime' => 'form.type.datetime', 'email' => 'form.type.email', 'file' => 'form.type.file', 'hidden' => 'form.type.hidden', 'integer' => 'form.type.integer', 'language' => 'form.type.language', 'locale' => 'form.type.locale', 'money' => 'form.type.money', 'number' => 'form.type.number', 'password' => 'form.type.password', 'percent' => 'form.type.percent', 'radio' => 'form.type.radio', 'repeated' => 'form.type.repeated', 'search' => 'form.type.search', 'textarea' => 'form.type.textarea', 'text' => 'form.type.text', 'time' => 'form.type.time', 'timezone' => 'form.type.timezone', 'url' => 'form.type.url', 'button' => 'form.type.button', 'submit' => 'form.type.submit', 'reset' => 'form.type.reset', 'currency' => 'form.type.currency', 'entity' => 'form.type.entity', 'liip_imagine_image' => 'liip_imagine.form.type.image', 'genemu_recaptcha' => 'genemu.form.core.type.recaptcha', 'genemu_captcha' => 'genemu.form.core.type.captcha', 'genemu_plain' => 'genemu.form.core.type.plain', 'genemu_tinymce' => 'genemu.form.core.type.tinymce', 'genemu_ajaxmodel' => 'genemu.form.model.type.ajaxmodel', 'genemu_jquerycolor' => 'genemu.form.jquery.type.color', 'genemu_jquerydate' => 'genemu.form.jquery.type.date', 'genemu_jqueryfile' => 'genemu.form.jquery.type.file', 'genemu_jquerygeolocation' => 'genemu.form.jquery.type.geolocation', 'genemu_jqueryimage' => 'genemu.form.jquery.type.image', 'genemu_jqueryrating' => 'genemu.form.jquery.type.rating', 'genemu_jqueryslider' => 'genemu.form.jquery.type.slider', 'genemu_ajaxentity' => 'genemu.form.entity.type.ajaxentity', 'genemu_jqueryautocomplete_text' => 'genemu.form.jquery.type.autocomplete.text', 'genemu_jqueryautocomplete_entity' => 'genemu.form.jquery.type.autocomplete.entity', 'genemu_jqueryautocomplete_document' => 'genemu.form.jquery.type.autocomplete.document', 'genemu_jqueryselect2_choice' => 'genemu.form.jquery.type.select2.choice', 'genemu_jqueryselect2_language' => 'genemu.form.jquery.type.select2.language', 'genemu_jqueryselect2_country' => 'genemu.form.jquery.type.select2.country', 'genemu_jqueryselect2_timezone' => 'genemu.form.jquery.type.select2.timezone', 'genemu_jqueryselect2_locale' => 'genemu.form.jquery.type.select2.locale', 'genemu_jqueryselect2_entity' => 'genemu.form.jquery.type.select2.entity', 'genemu_jqueryselect2_document' => 'genemu.form.jquery.type.select2.document', 'genemu_jqueryselect2_model' => 'genemu.form.jquery.type.select2.model', 'genemu_jqueryselect2_currency' => 'genemu.form.jquery.type.select2.currency', 'genemu_jqueryselect2_hidden' => 'genemu.form.jquery.type.select2.hidden', 'genemu_jquerychosen_choice' => 'genemu.form.jquery.type.chosen.choice', 'genemu_jquerychosen_language' => 'genemu.form.jquery.type.chosen.language', 'genemu_jquerychosen_country' => 'genemu.form.jquery.type.chosen.country', 'genemu_jquerychosen_timezone' => 'genemu.form.jquery.type.chosen.timezone', 'genemu_jquerychosen_locale' => 'genemu.form.jquery.type.chosen.locale', 'genemu_jquerychosen_entity' => 'genemu.form.jquery.type.chosen.entity', 'genemu_jquerychosen_document' => 'genemu.form.jquery.type.chosen.document', 'genemu_jquerychosen_model' => 'genemu.form.jquery.type.chosen.model', 'genemu_jquerychosen_currency' => 'genemu.form.jquery.type.chosen.currency', 'genemu_jqueryautocompleter_choice' => 'genemu.form.jquery.type.autocompleter.choice', 'genemu_jqueryautocompleter_language' => 'genemu.form.jquery.type.autocompleter.language', 'genemu_jqueryautocompleter_country' => 'genemu.form.jquery.type.autocompleter.country', 'genemu_jqueryautocompleter_timezone' => 'genemu.form.jquery.type.autocompleter.timezone', 'genemu_jqueryautocompleter_locale' => 'genemu.form.jquery.type.autocompleter.locale', 'genemu_jqueryautocompleter_entity' => 'genemu.form.jquery.type.autocompleter.entity', 'genemu_jqueryautocompleter_document' => 'genemu.form.jquery.type.autocompleter.document', 'genemu_jqueryautocompleter_model' => 'genemu.form.jquery.type.autocompleter.model', 'genemu_jqueryautocompleter_currency' => 'genemu.form.jquery.type.autocompleter.currency', 'genemu_jquerytokeninput_choice' => 'genemu.form.jquery.type.tokeninput.choice', 'genemu_jquerytokeninput_language' => 'genemu.form.jquery.type.tokeninput.language', 'genemu_jquerytokeninput_country' => 'genemu.form.jquery.type.tokeninput.country', 'genemu_jquerytokeninput_timezone' => 'genemu.form.jquery.type.tokeninput.timezone', 'genemu_jquerytokeninput_locale' => 'genemu.form.jquery.type.tokeninput.locale', 'genemu_jquerytokeninput_entity' => 'genemu.form.jquery.type.tokeninput.entity', 'genemu_jquerytokeninput_document' => 'genemu.form.jquery.type.tokeninput.document', 'genemu_jquerytokeninput_model' => 'genemu.form.jquery.type.tokeninput.model', 'genemu_jquerytokeninput_currency' => 'genemu.form.jquery.type.tokeninput.currency', 'a2lix_translations' => 'a2lix_translation_form.default.type.translations', 'a2lix_translationsFields' => 'a2lix_translation_form.default.type.translationsfields', 'a2lix_translationsForms' => 'a2lix_translation_form.default.type.translationsforms', 'a2lix_translationsLocalesSelector' => 'a2lix_translation_form.default.type.translationslocalesselector', 'a2lix_translations_gedmo' => 'a2lix_translation_form.gedmo.type.translations', 'a2lix_translationsLocales_gedmo' => 'a2lix_translation_form.gedmo.type.translationslocales', 'oro_acl_access_level_selector' => 'oro_security.form.type.oro_acl_access_level_selector', 'oro_acl_label' => 'oro_security.form.type.object_label_type', 'custom_entity_type' => 'oro_entity.form.type.custom_entity', 'oro_entity_choice' => 'oro_entity.form.type.entity_choice', 'oro_entity_field_choice' => 'oro_entity.form.type.entity_field_choice', 'oro_option_select' => 'oro_entity.form.type.option_select', 'oro_entity_select' => 'oro_entity.form.type.entity_select', 'oro_address' => 'oro_address.form.type.address', 'oro_address_collection' => 'oro_address.type.address_collection', 'oro_typed_address' => 'oro_address.form.type.typed_address', 'oro_email' => 'oro_address.form.type.email', 'oro_email_collection' => 'oro_address.type.email_collection', 'oro_phone' => 'oro_address.form.type.phone', 'oro_phone_collection' => 'oro_address.type.phone_collection', 'oro_country' => 'oro_address.form.type.country', 'oro_region' => 'oro_address.form.type.region', 'oro_calendar_event' => 'oro_calendar.calendar_event.form.type', 'oro_calendar_event_api' => 'oro_calendar.calendar_event.form.type.api', 'oro_config_form_type' => 'oro_config.type.form', 'oro_config_form_field_type' => 'oro_config.type.form_field', 'oro_config_checkbox' => 'oro_config.type.config_checkbox', 'oro_email_emailtemplate' => 'oro_email.form.type.emailtemplate', 'oro_email_emailtemplate_translatation' => 'oro_email.form.type.emailtemplate_translation', 'oro_email_template_list' => 'oro_email.form.type.emailtemplate_select', 'oro_email_emailtemplate_api' => 'oro_email.form.type.emailtemplate.api', 'oro_email_email' => 'oro_email.form.type.email', 'oro_email_email_address' => 'oro_email.form.type.email_address', 'oro_entity_config_type' => 'oro_entity_config.type.config', 'oro_entity_extend_field_type' => 'oro_entity_extend.type.field', 'oro_entity_relation_type' => 'oro_entity_extend.type.relation', 'oro_entity_option_set' => 'oro_entity_extend.type.option_set', 'oro_entity_option_set_collection' => 'oro_entity_extend.type.option_set_collection', 'oro_type_date_range' => 'oro_filter.form.type.date_range', 'oro_type_datetime_range' => 'oro_filter.form.type.datetime_range', 'oro_type_filter' => 'oro_filter.form.type.filter', 'oro_type_choice_filter' => 'oro_filter.form.type.filter.choice', 'oro_type_text_filter' => 'oro_filter.form.type.filter.text', 'oro_type_number_filter' => 'oro_filter.form.type.filter.number', 'oro_type_date_range_filter' => 'oro_filter.form.type.filter.date_range', 'oro_type_datetime_range_filter' => 'oro_filter.form.type.filter.datetime_range', 'oro_type_boolean_filter' => 'oro_filter.form.type.filter.boolean', 'oro_type_entity_filter' => 'oro_filter.form.type.filter.entity', 'oro_type_selectrow_filter' => 'oro_filter.form.type.filter.selectrow', 'oro_date' => 'oro_form.type.date', 'oro_datetime' => 'oro_form.type.datetime', 'oro_time_interval' => 'oro_form.type.time_interval', 'oro_money' => 'oro_form.type.money', 'oro_icon_select' => 'oro_form.type.icon', 'oro_entity_identifier' => 'oro_form.type.entity_identifier', 'oro_jqueryselect2_hidden' => 'oro_form.type.jqueryselect2_hidden', 'oro_multiple_entity' => 'oro_form.type.multiple_entity', 'oro_collection' => 'oro_form.type.collection', 'oro_imap_configuration' => 'oro_imap.form.type.configuration', 'oro_importexport_import' => 'oro_importexport.form.type.import', 'oro_installer_configuration' => 'oro_installer.form.type.configuration', 'oro_installer_configuration_database' => 'oro_installer.form.type.configuration.database', 'oro_installer_configuration_mailer' => 'oro_installer.form.type.configuration.mailer', 'oro_installer_configuration_system' => 'oro_installer.form.type.configuration.system', 'oro_installer_configuration_websocket' => 'oro_installer.form.type.configuration.websocket', 'oro_installer_setup' => 'oro_installer.form.type.setup', 'oro_integration_channel_form' => 'oro_integration.form.type.channel', 'oro_name_format' => 'oro_locale.form.type.name_format', 'oro_locale_country' => 'oro_locale.form.type.country', 'oro_currency' => 'oro_locale.form.type.currency', 'oro_locale' => 'oro_locale.form.type.locale', 'oro_locale_timezone' => 'oro_locale.form.type.timezone', 'emailnotification' => 'oro_notification.form.type.email_notification', 'oro_notification_recipient_list' => 'oro_notification.form.type.recipient_list', 'emailnotification_api' => 'oro_notification.form.type.email_notification.api', 'oro_business_unit' => 'oro_organization.form.type.business_unit', 'business_unit' => 'oro_organization.form.type.business_unit.api', 'oro_type_choice_ownership_type' => 'oro_organization.form.type.ownership_type', 'oro_business_unit_tree_select' => 'oro_organization.form.type.business_unit_tree_select_type', 'oro_business_unit_select' => 'oro_organization.form.type.business_unit_select', 'oro_function_choice' => 'oro_query_designer.form.type.function_choice', 'oro_sorting_choice' => 'oro_query_designer.form.type.sorting_choice', 'oro_query_designer_column' => 'oro_query_designer.form.type.query_designer_column', 'oro_query_designer_filter' => 'oro_query_designer.form.type.query_designer_filter', 'oro_query_designer_grouping' => 'oro_query_designer.form.type.query_designer_grouping', 'oro_report' => 'oro_report.form.type.report', 'oro_report_entity_choice' => 'oro_report.form.type.entity_choice', 'oro_report_entity_field_choice' => 'oro_report.form.type.entity_field_choice', 'oro_tag_tag' => 'oro_tag.form.type.tag.api', 'oro_tag_autocomplete' => 'oro_tag.form.type.tag_autocomplete', 'oro_tag_select' => 'oro_tag.form.type.tag_select', 'translatable_entity' => 'oro_translation.form.type.translatable_entity', 'genemu_jqueryselect2_translatable_entity' => 'oro_translation.form.type.jqueryselect2_translatable_entity', 'oro_user_user' => 'oro_user.form.type.user', 'user' => 'oro_user.form.type.user.api', 'oro_change_password' => 'oro_user.form.type.change_password', 'oro_user_email' => 'oro_user.form.type.email', 'role' => 'oro_user.form.type.role.api', 'oro_user_group' => 'oro_user.form.type.group', 'group' => 'oro_user.form.type.group.api', 'oro_user_reset' => 'oro_user.form.type.reset', 'oro_user_status' => 'oro_user.form.type.status', 'oro_user_select' => 'oro_user.form.type.user_select', 'oro_user_acl_select' => 'oro_user.form.type.user_acl_select', 'oro_user_multiselect' => 'oro_user.form.type.user_multiselect', 'oro_gender' => 'oro_user.form.type.gender', 'oro_workflow_attributes' => 'oro_workflow.form.type.attributes', 'oro_workflow_step' => 'oro_workflow.form.type.step', 'oro_workflow_transition' => 'oro_workflow.form.type.transition', 'pagestate' => 'oro_navigation.form.type.pagestate'), array('form' => array(0 => 'form.type_extension.form.http_foundation', 1 => 'form.type_extension.form.validator', 2 => 'form.type_extension.csrf', 3 => 'nelmio_api_doc.form.extension.description_form_type_extension', 4 => 'oro_entity_config.extension.config', 5 => 'oro_entity_extend.extension.extend_entity', 6 => 'oro_form.extension.data_block', 7 => 'oro_form.extension.client_validation', 8 => 'oro_help.form.tooltip_extension', 9 => 'oro_form.extension.constraint_as_option', 10 => 'oro_form.extension.js_validation', 11 => 'oro_organization.form.extension.owner'), 'repeated' => array(0 => 'form.type_extension.repeated.validator', 1 => 'oro_form.extension.js_validation.repeated'), 'submit' => array(0 => 'form.type_extension.submit.validator')), array(0 => 'form.type_guesser.validator', 1 => 'form.type_guesser.doctrine'))), $this->get('form.resolved_type_factory'));
    }

    /**
     * Gets the 'form.resolved_type_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\ResolvedFormTypeFactory A Symfony\Component\Form\ResolvedFormTypeFactory instance.
     */
    protected function getForm_ResolvedTypeFactoryService()
    {
        return $this->services['form.resolved_type_factory'] = new \Symfony\Component\Form\ResolvedFormTypeFactory();
    }

    /**
     * Gets the 'form.type.birthday' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Core\Type\BirthdayType A Symfony\Component\Form\Extension\Core\Type\BirthdayType instance.
     */
    protected function getForm_Type_BirthdayService()
    {
        return $this->services['form.type.birthday'] = new \Symfony\Component\Form\Extension\Core\Type\BirthdayType();
    }

    /**
     * Gets the 'form.type.button' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Core\Type\ButtonType A Symfony\Component\Form\Extension\Core\Type\ButtonType instance.
     */
    protected function getForm_Type_ButtonService()
    {
        return $this->services['form.type.button'] = new \Symfony\Component\Form\Extension\Core\Type\ButtonType();
    }

    /**
     * Gets the 'form.type.checkbox' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Core\Type\CheckboxType A Symfony\Component\Form\Extension\Core\Type\CheckboxType instance.
     */
    protected function getForm_Type_CheckboxService()
    {
        return $this->services['form.type.checkbox'] = new \Symfony\Component\Form\Extension\Core\Type\CheckboxType();
    }

    /**
     * Gets the 'form.type.choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Core\Type\ChoiceType A Symfony\Component\Form\Extension\Core\Type\ChoiceType instance.
     */
    protected function getForm_Type_ChoiceService()
    {
        return $this->services['form.type.choice'] = new \Symfony\Component\Form\Extension\Core\Type\ChoiceType();
    }

    /**
     * Gets the 'form.type.collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Core\Type\CollectionType A Symfony\Component\Form\Extension\Core\Type\CollectionType instance.
     */
    protected function getForm_Type_CollectionService()
    {
        return $this->services['form.type.collection'] = new \Symfony\Component\Form\Extension\Core\Type\CollectionType();
    }

    /**
     * Gets the 'form.type.country' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Core\Type\CountryType A Symfony\Component\Form\Extension\Core\Type\CountryType instance.
     */
    protected function getForm_Type_CountryService()
    {
        return $this->services['form.type.country'] = new \Symfony\Component\Form\Extension\Core\Type\CountryType();
    }

    /**
     * Gets the 'form.type.currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Core\Type\CurrencyType A Symfony\Component\Form\Extension\Core\Type\CurrencyType instance.
     */
    protected function getForm_Type_CurrencyService()
    {
        return $this->services['form.type.currency'] = new \Symfony\Component\Form\Extension\Core\Type\CurrencyType();
    }

    /**
     * Gets the 'form.type.date' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Core\Type\DateType A Symfony\Component\Form\Extension\Core\Type\DateType instance.
     */
    protected function getForm_Type_DateService()
    {
        return $this->services['form.type.date'] = new \Symfony\Component\Form\Extension\Core\Type\DateType();
    }

    /**
     * Gets the 'form.type.datetime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Core\Type\DateTimeType A Symfony\Component\Form\Extension\Core\Type\DateTimeType instance.
     */
    protected function getForm_Type_DatetimeService()
    {
        return $this->services['form.type.datetime'] = new \Symfony\Component\Form\Extension\Core\Type\DateTimeType();
    }

    /**
     * Gets the 'form.type.email' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Core\Type\EmailType A Symfony\Component\Form\Extension\Core\Type\EmailType instance.
     */
    protected function getForm_Type_EmailService()
    {
        return $this->services['form.type.email'] = new \Symfony\Component\Form\Extension\Core\Type\EmailType();
    }

    /**
     * Gets the 'form.type.entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bridge\Doctrine\Form\Type\EntityType A Symfony\Bridge\Doctrine\Form\Type\EntityType instance.
     */
    protected function getForm_Type_EntityService()
    {
        return $this->services['form.type.entity'] = new \Symfony\Bridge\Doctrine\Form\Type\EntityType($this->get('doctrine'));
    }

    /**
     * Gets the 'form.type.file' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Core\Type\FileType A Symfony\Component\Form\Extension\Core\Type\FileType instance.
     */
    protected function getForm_Type_FileService()
    {
        return $this->services['form.type.file'] = new \Symfony\Component\Form\Extension\Core\Type\FileType();
    }

    /**
     * Gets the 'form.type.form' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Core\Type\FormType A Symfony\Component\Form\Extension\Core\Type\FormType instance.
     */
    protected function getForm_Type_FormService()
    {
        return $this->services['form.type.form'] = new \Symfony\Component\Form\Extension\Core\Type\FormType($this->get('property_accessor'));
    }

    /**
     * Gets the 'form.type.hidden' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Core\Type\HiddenType A Symfony\Component\Form\Extension\Core\Type\HiddenType instance.
     */
    protected function getForm_Type_HiddenService()
    {
        return $this->services['form.type.hidden'] = new \Symfony\Component\Form\Extension\Core\Type\HiddenType();
    }

    /**
     * Gets the 'form.type.integer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Core\Type\IntegerType A Symfony\Component\Form\Extension\Core\Type\IntegerType instance.
     */
    protected function getForm_Type_IntegerService()
    {
        return $this->services['form.type.integer'] = new \Symfony\Component\Form\Extension\Core\Type\IntegerType();
    }

    /**
     * Gets the 'form.type.language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Core\Type\LanguageType A Symfony\Component\Form\Extension\Core\Type\LanguageType instance.
     */
    protected function getForm_Type_LanguageService()
    {
        return $this->services['form.type.language'] = new \Symfony\Component\Form\Extension\Core\Type\LanguageType();
    }

    /**
     * Gets the 'form.type.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Core\Type\LocaleType A Symfony\Component\Form\Extension\Core\Type\LocaleType instance.
     */
    protected function getForm_Type_LocaleService()
    {
        return $this->services['form.type.locale'] = new \Symfony\Component\Form\Extension\Core\Type\LocaleType();
    }

    /**
     * Gets the 'form.type.money' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Core\Type\MoneyType A Symfony\Component\Form\Extension\Core\Type\MoneyType instance.
     */
    protected function getForm_Type_MoneyService()
    {
        return $this->services['form.type.money'] = new \Symfony\Component\Form\Extension\Core\Type\MoneyType();
    }

    /**
     * Gets the 'form.type.number' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Core\Type\NumberType A Symfony\Component\Form\Extension\Core\Type\NumberType instance.
     */
    protected function getForm_Type_NumberService()
    {
        return $this->services['form.type.number'] = new \Symfony\Component\Form\Extension\Core\Type\NumberType();
    }

    /**
     * Gets the 'form.type.password' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Core\Type\PasswordType A Symfony\Component\Form\Extension\Core\Type\PasswordType instance.
     */
    protected function getForm_Type_PasswordService()
    {
        return $this->services['form.type.password'] = new \Symfony\Component\Form\Extension\Core\Type\PasswordType();
    }

    /**
     * Gets the 'form.type.percent' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Core\Type\PercentType A Symfony\Component\Form\Extension\Core\Type\PercentType instance.
     */
    protected function getForm_Type_PercentService()
    {
        return $this->services['form.type.percent'] = new \Symfony\Component\Form\Extension\Core\Type\PercentType();
    }

    /**
     * Gets the 'form.type.radio' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Core\Type\RadioType A Symfony\Component\Form\Extension\Core\Type\RadioType instance.
     */
    protected function getForm_Type_RadioService()
    {
        return $this->services['form.type.radio'] = new \Symfony\Component\Form\Extension\Core\Type\RadioType();
    }

    /**
     * Gets the 'form.type.repeated' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Core\Type\RepeatedType A Symfony\Component\Form\Extension\Core\Type\RepeatedType instance.
     */
    protected function getForm_Type_RepeatedService()
    {
        return $this->services['form.type.repeated'] = new \Symfony\Component\Form\Extension\Core\Type\RepeatedType();
    }

    /**
     * Gets the 'form.type.reset' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Core\Type\ResetType A Symfony\Component\Form\Extension\Core\Type\ResetType instance.
     */
    protected function getForm_Type_ResetService()
    {
        return $this->services['form.type.reset'] = new \Symfony\Component\Form\Extension\Core\Type\ResetType();
    }

    /**
     * Gets the 'form.type.search' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Core\Type\SearchType A Symfony\Component\Form\Extension\Core\Type\SearchType instance.
     */
    protected function getForm_Type_SearchService()
    {
        return $this->services['form.type.search'] = new \Symfony\Component\Form\Extension\Core\Type\SearchType();
    }

    /**
     * Gets the 'form.type.submit' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Core\Type\SubmitType A Symfony\Component\Form\Extension\Core\Type\SubmitType instance.
     */
    protected function getForm_Type_SubmitService()
    {
        return $this->services['form.type.submit'] = new \Symfony\Component\Form\Extension\Core\Type\SubmitType();
    }

    /**
     * Gets the 'form.type.text' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Core\Type\TextType A Symfony\Component\Form\Extension\Core\Type\TextType instance.
     */
    protected function getForm_Type_TextService()
    {
        return $this->services['form.type.text'] = new \Symfony\Component\Form\Extension\Core\Type\TextType();
    }

    /**
     * Gets the 'form.type.textarea' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Core\Type\TextareaType A Symfony\Component\Form\Extension\Core\Type\TextareaType instance.
     */
    protected function getForm_Type_TextareaService()
    {
        return $this->services['form.type.textarea'] = new \Symfony\Component\Form\Extension\Core\Type\TextareaType();
    }

    /**
     * Gets the 'form.type.time' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Core\Type\TimeType A Symfony\Component\Form\Extension\Core\Type\TimeType instance.
     */
    protected function getForm_Type_TimeService()
    {
        return $this->services['form.type.time'] = new \Symfony\Component\Form\Extension\Core\Type\TimeType();
    }

    /**
     * Gets the 'form.type.timezone' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Core\Type\TimezoneType A Symfony\Component\Form\Extension\Core\Type\TimezoneType instance.
     */
    protected function getForm_Type_TimezoneService()
    {
        return $this->services['form.type.timezone'] = new \Symfony\Component\Form\Extension\Core\Type\TimezoneType();
    }

    /**
     * Gets the 'form.type.url' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Core\Type\UrlType A Symfony\Component\Form\Extension\Core\Type\UrlType instance.
     */
    protected function getForm_Type_UrlService()
    {
        return $this->services['form.type.url'] = new \Symfony\Component\Form\Extension\Core\Type\UrlType();
    }

    /**
     * Gets the 'form.type_extension.csrf' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension A Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension instance.
     */
    protected function getForm_TypeExtension_CsrfService()
    {
        return $this->services['form.type_extension.csrf'] = new \Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension($this->get('form.csrf_provider'), true, '_token', $this->get('translator.default'), 'validators');
    }

    /**
     * Gets the 'form.type_extension.form.http_foundation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension A Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension instance.
     */
    protected function getForm_TypeExtension_Form_HttpFoundationService()
    {
        return $this->services['form.type_extension.form.http_foundation'] = new \Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension();
    }

    /**
     * Gets the 'form.type_extension.form.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension A Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension instance.
     */
    protected function getForm_TypeExtension_Form_ValidatorService()
    {
        return $this->services['form.type_extension.form.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension($this->get('validator'));
    }

    /**
     * Gets the 'form.type_extension.repeated.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension A Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension instance.
     */
    protected function getForm_TypeExtension_Repeated_ValidatorService()
    {
        return $this->services['form.type_extension.repeated.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension();
    }

    /**
     * Gets the 'form.type_extension.submit.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension A Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension instance.
     */
    protected function getForm_TypeExtension_Submit_ValidatorService()
    {
        return $this->services['form.type_extension.submit.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension();
    }

    /**
     * Gets the 'form.type_guesser.doctrine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser A Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser instance.
     */
    protected function getForm_TypeGuesser_DoctrineService()
    {
        return $this->services['form.type_guesser.doctrine'] = new \Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser($this->get('doctrine'));
    }

    /**
     * Gets the 'form.type_guesser.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser A Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser instance.
     */
    protected function getForm_TypeGuesser_ValidatorService()
    {
        return $this->services['form.type_guesser.validator'] = new \Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser($this->get('validator.mapping.class_metadata_factory'));
    }

    /**
     * Gets the 'fos_js_routing.controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return FOS\JsRoutingBundle\Controller\Controller A FOS\JsRoutingBundle\Controller\Controller instance.
     */
    protected function getFosJsRouting_ControllerService()
    {
        return $this->services['fos_js_routing.controller'] = new \FOS\JsRoutingBundle\Controller\Controller($this->get('fos_js_routing.serializer'), $this->get('fos_js_routing.extractor'), array('enabled' => false), true);
    }

    /**
     * Gets the 'fos_js_routing.extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return FOS\JsRoutingBundle\Extractor\ExposedRoutesExtractor A FOS\JsRoutingBundle\Extractor\ExposedRoutesExtractor instance.
     */
    protected function getFosJsRouting_ExtractorService()
    {
        return $this->services['fos_js_routing.extractor'] = new \FOS\JsRoutingBundle\Extractor\ExposedRoutesExtractor($this->get('router'), array(0 => 'oro_*'), '/var/www/orocrm-platform/app/cache/de_', array('FrameworkBundle' => 'Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle', 'SecurityBundle' => 'Symfony\\Bundle\\SecurityBundle\\SecurityBundle', 'TwigBundle' => 'Symfony\\Bundle\\TwigBundle\\TwigBundle', 'MonologBundle' => 'Symfony\\Bundle\\MonologBundle\\MonologBundle', 'SwiftmailerBundle' => 'Symfony\\Bundle\\SwiftmailerBundle\\SwiftmailerBundle', 'AsseticBundle' => 'Symfony\\Bundle\\AsseticBundle\\AsseticBundle', 'DoctrineBundle' => 'Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle', 'DoctrineFixturesBundle' => 'Doctrine\\Bundle\\FixturesBundle\\DoctrineFixturesBundle', 'SensioFrameworkExtraBundle' => 'Sensio\\Bundle\\FrameworkExtraBundle\\SensioFrameworkExtraBundle', 'JMSSerializerBundle' => 'JMS\\SerializerBundle\\JMSSerializerBundle', 'KnpPaginatorBundle' => 'Knp\\Bundle\\PaginatorBundle\\KnpPaginatorBundle', 'KnpMenuBundle' => 'Knp\\Bundle\\MenuBundle\\KnpMenuBundle', 'FOSRestBundle' => 'FOS\\RestBundle\\FOSRestBundle', 'FOSJsRoutingBundle' => 'FOS\\JsRoutingBundle\\FOSJsRoutingBundle', 'NelmioApiDocBundle' => 'Nelmio\\ApiDocBundle\\NelmioApiDocBundle', 'BeSimpleSoapBundle' => 'BeSimple\\SoapBundle\\BeSimpleSoapBundle', 'StofDoctrineExtensionsBundle' => 'Stof\\DoctrineExtensionsBundle\\StofDoctrineExtensionsBundle', 'EscapeWSSEAuthenticationBundle' => 'Escape\\WSSEAuthenticationBundle\\EscapeWSSEAuthenticationBundle', 'LiipImagineBundle' => 'Liip\\ImagineBundle\\LiipImagineBundle', 'GenemuFormBundle' => 'Genemu\\Bundle\\FormBundle\\GenemuFormBundle', 'A2lixTranslationFormBundle' => 'A2lix\\TranslationFormBundle\\A2lixTranslationFormBundle', 'LexikMaintenanceBundle' => 'Lexik\\Bundle\\MaintenanceBundle\\LexikMaintenanceBundle', 'OroSecurityBundle' => 'Oro\\Bundle\\SecurityBundle\\OroSecurityBundle', 'OroUIBundle' => 'Oro\\Bundle\\UIBundle\\OroUIBundle', 'OroEntityBundle' => 'Oro\\Bundle\\EntityBundle\\OroEntityBundle', 'JDareClankBundle' => 'JDare\\ClankBundle\\JDareClankBundle', 'JMSJobQueueBundle' => 'JMS\\JobQueueBundle\\JMSJobQueueBundle', 'OroAddressBundle' => 'Oro\\Bundle\\AddressBundle\\OroAddressBundle', 'OroAsseticBundle' => 'Oro\\Bundle\\AsseticBundle\\OroAsseticBundle', 'OroBatchBundle' => 'Oro\\Bundle\\BatchBundle\\OroBatchBundle', 'OroBusinessEntitiesBundle' => 'Oro\\Bundle\\BusinessEntitiesBundle\\OroBusinessEntitiesBundle', 'OroCalendarBundle' => 'Oro\\Bundle\\CalendarBundle\\OroCalendarBundle', 'OroConfigBundle' => 'Oro\\Bundle\\ConfigBundle\\OroConfigBundle', 'OroCronBundle' => 'Oro\\Bundle\\CronBundle\\OroCronBundle', 'OroDashboardBundle' => 'Oro\\Bundle\\DashboardBundle\\OroDashboardBundle', 'OroDataAuditBundle' => 'Oro\\Bundle\\DataAuditBundle\\OroDataAuditBundle', 'OroDataGridBundle' => 'Oro\\Bundle\\DataGridBundle\\OroDataGridBundle', 'OroDistributionBundle' => 'Oro\\Bundle\\DistributionBundle\\OroDistributionBundle', 'OroEmailBundle' => 'Oro\\Bundle\\EmailBundle\\OroEmailBundle', 'OroEntityConfigBundle' => 'Oro\\Bundle\\EntityConfigBundle\\OroEntityConfigBundle', 'OroEntityExtendBundle' => 'Oro\\Bundle\\EntityExtendBundle\\OroEntityExtendBundle', 'OroFilterBundle' => 'Oro\\Bundle\\FilterBundle\\OroFilterBundle', 'OroFormBundle' => 'Oro\\Bundle\\FormBundle\\OroFormBundle', 'OroHelpBundle' => 'Oro\\Bundle\\HelpBundle\\OroHelpBundle', 'OroImapBundle' => 'Oro\\Bundle\\ImapBundle\\OroImapBundle', 'OroImportExportBundle' => 'Oro\\Bundle\\ImportExportBundle\\OroImportExportBundle', 'OroInstallerBundle' => 'Oro\\Bundle\\InstallerBundle\\OroInstallerBundle', 'OroIntegrationBundle' => 'Oro\\Bundle\\IntegrationBundle\\OroIntegrationBundle', 'OroLocaleBundle' => 'Oro\\Bundle\\LocaleBundle\\OroLocaleBundle', 'OroMeasureBundle' => 'Oro\\Bundle\\MeasureBundle\\OroMeasureBundle', 'OroNotificationBundle' => 'Oro\\Bundle\\NotificationBundle\\OroNotificationBundle', 'OroOrganizationBundle' => 'Oro\\Bundle\\OrganizationBundle\\OroOrganizationBundle', 'OroPlatformBundle' => 'Oro\\Bundle\\PlatformBundle\\OroPlatformBundle', 'OroQueryDesignerBundle' => 'Oro\\Bundle\\QueryDesignerBundle\\OroQueryDesignerBundle', 'OroReportBundle' => 'Oro\\Bundle\\ReportBundle\\OroReportBundle', 'OroRequireJSBundle' => 'Oro\\Bundle\\RequireJSBundle\\OroRequireJSBundle', 'OroSearchBundle' => 'Oro\\Bundle\\SearchBundle\\OroSearchBundle', 'OroSegmentationTreeBundle' => 'Oro\\Bundle\\SegmentationTreeBundle\\OroSegmentationTreeBundle', 'OroSidebarBundle' => 'Oro\\Bundle\\SidebarBundle\\OroSidebarBundle', 'OroSoapBundle' => 'Oro\\Bundle\\SoapBundle\\OroSoapBundle', 'OroSyncBundle' => 'Oro\\Bundle\\SyncBundle\\OroSyncBundle', 'OroTagBundle' => 'Oro\\Bundle\\TagBundle\\OroTagBundle', 'OroThemeBundle' => 'Oro\\Bundle\\ThemeBundle\\OroThemeBundle', 'OroTranslationBundle' => 'Oro\\Bundle\\TranslationBundle\\OroTranslationBundle', 'OroUserBundle' => 'Oro\\Bundle\\UserBundle\\OroUserBundle', 'OroWindowsBundle' => 'Oro\\Bundle\\WindowsBundle\\OroWindowsBundle', 'OroWorkflowBundle' => 'Oro\\Bundle\\WorkflowBundle\\OroWorkflowBundle', 'SyliusFlowBundle' => 'Sylius\\Bundle\\FlowBundle\\SyliusFlowBundle', 'OroNavigationBundle' => 'Oro\\Bundle\\NavigationBundle\\OroNavigationBundle', 'WebProfilerBundle' => 'Symfony\\Bundle\\WebProfilerBundle\\WebProfilerBundle', 'SensioDistributionBundle' => 'Sensio\\Bundle\\DistributionBundle\\SensioDistributionBundle', 'SensioGeneratorBundle' => 'Sensio\\Bundle\\GeneratorBundle\\SensioGeneratorBundle'));
    }

    /**
     * Gets the 'fos_js_routing.serializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Serializer\Serializer A Symfony\Component\Serializer\Serializer instance.
     */
    protected function getFosJsRouting_SerializerService()
    {
        return $this->services['fos_js_routing.serializer'] = new \Symfony\Component\Serializer\Serializer(array(0 => new \Symfony\Component\Serializer\Normalizer\GetSetMethodNormalizer()), array('json' => new \Symfony\Component\Serializer\Encoder\JsonEncoder()));
    }

    /**
     * Gets the 'fos_rest.body_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return FOS\RestBundle\EventListener\BodyListener A FOS\RestBundle\EventListener\BodyListener instance.
     */
    protected function getFosRest_BodyListenerService()
    {
        return $this->services['fos_rest.body_listener'] = new \FOS\RestBundle\EventListener\BodyListener($this->get('fos_rest.decoder_provider'));
    }

    /**
     * Gets the 'fos_rest.decoder.json' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return FOS\Rest\Decoder\JsonDecoder A FOS\Rest\Decoder\JsonDecoder instance.
     */
    protected function getFosRest_Decoder_JsonService()
    {
        return $this->services['fos_rest.decoder.json'] = new \FOS\Rest\Decoder\JsonDecoder();
    }

    /**
     * Gets the 'fos_rest.decoder.jsontoform' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return FOS\Rest\Decoder\JsonToFormDecoder A FOS\Rest\Decoder\JsonToFormDecoder instance.
     */
    protected function getFosRest_Decoder_JsontoformService()
    {
        return $this->services['fos_rest.decoder.jsontoform'] = new \FOS\Rest\Decoder\JsonToFormDecoder();
    }

    /**
     * Gets the 'fos_rest.decoder.xml' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return FOS\Rest\Decoder\XmlDecoder A FOS\Rest\Decoder\XmlDecoder instance.
     */
    protected function getFosRest_Decoder_XmlService()
    {
        return $this->services['fos_rest.decoder.xml'] = new \FOS\Rest\Decoder\XmlDecoder();
    }

    /**
     * Gets the 'fos_rest.decoder_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return FOS\RestBundle\Decoder\ContainerDecoderProvider A FOS\RestBundle\Decoder\ContainerDecoderProvider instance.
     */
    protected function getFosRest_DecoderProviderService()
    {
        $this->services['fos_rest.decoder_provider'] = $instance = new \FOS\RestBundle\Decoder\ContainerDecoderProvider(array('json' => 'fos_rest.decoder.json', 'xml' => 'fos_rest.decoder.xml'));

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'fos_rest.format_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return FOS\RestBundle\EventListener\FormatListener A FOS\RestBundle\EventListener\FormatListener instance.
     */
    protected function getFosRest_FormatListenerService()
    {
        return $this->services['fos_rest.format_listener'] = new \FOS\RestBundle\EventListener\FormatListener($this->get('fos_rest.format_negotiator'), 'html', array(0 => 'html', 1 => '*/*'), true);
    }

    /**
     * Gets the 'fos_rest.format_negotiator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return FOS\Rest\Util\FormatNegotiator A FOS\Rest\Util\FormatNegotiator instance.
     */
    protected function getFosRest_FormatNegotiatorService()
    {
        return $this->services['fos_rest.format_negotiator'] = new \FOS\Rest\Util\FormatNegotiator();
    }

    /**
     * Gets the 'fos_rest.inflector.doctrine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return FOS\RestBundle\Util\Inflector\DoctrineInflector A FOS\RestBundle\Util\Inflector\DoctrineInflector instance.
     */
    protected function getFosRest_Inflector_DoctrineService()
    {
        return $this->services['fos_rest.inflector.doctrine'] = new \FOS\RestBundle\Util\Inflector\DoctrineInflector();
    }

    /**
     * Gets the 'fos_rest.request.param_fetcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return FOS\RestBundle\Request\ParamFetcher A FOS\RestBundle\Request\ParamFetcher instance.
     * 
     * @throws InactiveScopeException when the 'fos_rest.request.param_fetcher' service is requested while the 'request' scope is not active
     */
    protected function getFosRest_Request_ParamFetcherService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('fos_rest.request.param_fetcher', 'request');
        }

        return $this->services['fos_rest.request.param_fetcher'] = $this->scopedServices['request']['fos_rest.request.param_fetcher'] = new \FOS\RestBundle\Request\ParamFetcher($this->get('fos_rest.request.param_fetcher.reader'), $this->get('request'));
    }

    /**
     * Gets the 'fos_rest.request.param_fetcher.reader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return FOS\RestBundle\Request\ParamReader A FOS\RestBundle\Request\ParamReader instance.
     */
    protected function getFosRest_Request_ParamFetcher_ReaderService()
    {
        return $this->services['fos_rest.request.param_fetcher.reader'] = new \FOS\RestBundle\Request\ParamReader($this->get('annotation_reader'));
    }

    /**
     * Gets the 'fos_rest.routing.loader.controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return FOS\RestBundle\Routing\Loader\RestRouteLoader A FOS\RestBundle\Routing\Loader\RestRouteLoader instance.
     */
    protected function getFosRest_Routing_Loader_ControllerService()
    {
        return $this->services['fos_rest.routing.loader.controller'] = new \FOS\RestBundle\Routing\Loader\RestRouteLoader($this, $this->get('file_locator'), $this->get('controller_name_converter'), $this->get('fos_rest.routing.loader.reader.controller'), 'json');
    }

    /**
     * Gets the 'fos_rest.routing.loader.processor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return FOS\RestBundle\Routing\Loader\RestRouteProcessor A FOS\RestBundle\Routing\Loader\RestRouteProcessor instance.
     */
    protected function getFosRest_Routing_Loader_ProcessorService()
    {
        return $this->services['fos_rest.routing.loader.processor'] = new \FOS\RestBundle\Routing\Loader\RestRouteProcessor();
    }

    /**
     * Gets the 'fos_rest.routing.loader.reader.action' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return FOS\RestBundle\Routing\Loader\Reader\RestActionReader A FOS\RestBundle\Routing\Loader\Reader\RestActionReader instance.
     */
    protected function getFosRest_Routing_Loader_Reader_ActionService()
    {
        return $this->services['fos_rest.routing.loader.reader.action'] = new \FOS\RestBundle\Routing\Loader\Reader\RestActionReader($this->get('annotation_reader'), $this->get('fos_rest.request.param_fetcher.reader'), $this->get('fos_rest.inflector.doctrine'), true, array('json' => false, 'xml' => false, 'html' => true));
    }

    /**
     * Gets the 'fos_rest.routing.loader.reader.controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return FOS\RestBundle\Routing\Loader\Reader\RestControllerReader A FOS\RestBundle\Routing\Loader\Reader\RestControllerReader instance.
     */
    protected function getFosRest_Routing_Loader_Reader_ControllerService()
    {
        return $this->services['fos_rest.routing.loader.reader.controller'] = new \FOS\RestBundle\Routing\Loader\Reader\RestControllerReader($this->get('fos_rest.routing.loader.reader.action'), $this->get('annotation_reader'));
    }

    /**
     * Gets the 'fos_rest.routing.loader.xml_collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return FOS\RestBundle\Routing\Loader\RestXmlCollectionLoader A FOS\RestBundle\Routing\Loader\RestXmlCollectionLoader instance.
     */
    protected function getFosRest_Routing_Loader_XmlCollectionService()
    {
        return $this->services['fos_rest.routing.loader.xml_collection'] = new \FOS\RestBundle\Routing\Loader\RestXmlCollectionLoader($this->get('file_locator'), $this->get('fos_rest.routing.loader.processor'));
    }

    /**
     * Gets the 'fos_rest.routing.loader.yaml_collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return FOS\RestBundle\Routing\Loader\RestYamlCollectionLoader A FOS\RestBundle\Routing\Loader\RestYamlCollectionLoader instance.
     */
    protected function getFosRest_Routing_Loader_YamlCollectionService()
    {
        return $this->services['fos_rest.routing.loader.yaml_collection'] = new \FOS\RestBundle\Routing\Loader\RestYamlCollectionLoader($this->get('file_locator'), $this->get('fos_rest.routing.loader.processor'));
    }

    /**
     * Gets the 'fos_rest.view_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return FOS\RestBundle\View\ViewHandler A FOS\RestBundle\View\ViewHandler instance.
     */
    protected function getFosRest_ViewHandlerService()
    {
        $this->services['fos_rest.view_handler'] = $instance = new \FOS\RestBundle\View\ViewHandler(array('json' => false, 'xml' => false, 'html' => true), 400, 204, false, array('html' => 302), 'php');

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'fragment.handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\HttpKernel\Fragment\FragmentHandler A Symfony\Component\HttpKernel\Fragment\FragmentHandler instance.
     */
    protected function getFragment_HandlerService()
    {
        $this->services['fragment.handler'] = $instance = new \Symfony\Component\HttpKernel\Fragment\FragmentHandler(array(), true);

        $instance->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        $instance->addRenderer($this->get('fragment.renderer.inline'));
        $instance->addRenderer($this->get('fragment.renderer.hinclude'));

        return $instance;
    }

    /**
     * Gets the 'fragment.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\HttpKernel\EventListener\FragmentListener A Symfony\Component\HttpKernel\EventListener\FragmentListener instance.
     */
    protected function getFragment_ListenerService()
    {
        return $this->services['fragment.listener'] = new \Symfony\Component\HttpKernel\EventListener\FragmentListener($this->get('uri_signer'), '/_fragment');
    }

    /**
     * Gets the 'fragment.renderer.hinclude' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\FrameworkBundle\Fragment\ContainerAwareHIncludeFragmentRenderer A Symfony\Bundle\FrameworkBundle\Fragment\ContainerAwareHIncludeFragmentRenderer instance.
     */
    protected function getFragment_Renderer_HincludeService()
    {
        $this->services['fragment.renderer.hinclude'] = $instance = new \Symfony\Bundle\FrameworkBundle\Fragment\ContainerAwareHIncludeFragmentRenderer($this, $this->get('uri_signer'), NULL);

        $instance->setFragmentPath('/_fragment');

        return $instance;
    }

    /**
     * Gets the 'fragment.renderer.inline' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer A Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer instance.
     */
    protected function getFragment_Renderer_InlineService()
    {
        $this->services['fragment.renderer.inline'] = $instance = new \Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer($this->get('http_kernel'), $this->get('event_dispatcher'));

        $instance->setFragmentPath('/_fragment');

        return $instance;
    }

    /**
     * Gets the 'genemu.form.core.type.captcha' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\Core\Type\CaptchaType A Genemu\Bundle\FormBundle\Form\Core\Type\CaptchaType instance.
     */
    protected function getGenemu_Form_Core_Type_CaptchaService()
    {
        return $this->services['genemu.form.core.type.captcha'] = new \Genemu\Bundle\FormBundle\Form\Core\Type\CaptchaType($this->get('genemu.gd.captcha'), array('enabled' => true, 'driver' => 'gd', 'width' => 100, 'height' => 30, 'length' => 4, 'format' => 'png', 'chars' => array(0 => 0, 1 => 1, 2 => 2, 3 => 3, 4 => 4, 5 => 5, 6 => 6, 7 => 7, 8 => 8, 9 => 9), 'font_size' => 18, 'grayscale' => false, 'font_color' => array(0 => '252525', 1 => '8B8787', 2 => '550707', 3 => '3526E6', 4 => '88531E'), 'background_color' => 'DDDDDD', 'border_color' => '000000', 'code' => NULL));
    }

    /**
     * Gets the 'genemu.form.core.type.plain' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\Core\Type\PlainType A Genemu\Bundle\FormBundle\Form\Core\Type\PlainType instance.
     */
    protected function getGenemu_Form_Core_Type_PlainService()
    {
        return $this->services['genemu.form.core.type.plain'] = new \Genemu\Bundle\FormBundle\Form\Core\Type\PlainType();
    }

    /**
     * Gets the 'genemu.form.core.type.recaptcha' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\Core\Type\ReCaptchaType A Genemu\Bundle\FormBundle\Form\Core\Type\ReCaptchaType instance.
     */
    protected function getGenemu_Form_Core_Type_RecaptchaService()
    {
        return $this->services['genemu.form.core.type.recaptcha'] = new \Genemu\Bundle\FormBundle\Form\Core\Type\ReCaptchaType($this->get('genemu.form.type_recaptcha.validator'), '', '', array());
    }

    /**
     * Gets the 'genemu.form.core.type.tinymce' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\Core\Type\TinymceType A Genemu\Bundle\FormBundle\Form\Core\Type\TinymceType instance.
     */
    protected function getGenemu_Form_Core_Type_TinymceService()
    {
        return $this->services['genemu.form.core.type.tinymce'] = new \Genemu\Bundle\FormBundle\Form\Core\Type\TinymceType(array('theme' => 'advanced'));
    }

    /**
     * Gets the 'genemu.form.entity.type.ajaxentity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\Doctrine\Type\AjaxEntityType A Genemu\Bundle\FormBundle\Form\Doctrine\Type\AjaxEntityType instance.
     */
    protected function getGenemu_Form_Entity_Type_AjaxentityService()
    {
        return $this->services['genemu.form.entity.type.ajaxentity'] = new \Genemu\Bundle\FormBundle\Form\Doctrine\Type\AjaxEntityType($this->get('doctrine', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'genemu.form.jquery.type.autocomplete.document' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleteType A Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleteType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Autocomplete_DocumentService()
    {
        return $this->services['genemu.form.jquery.type.autocomplete.document'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleteType('document', NULL);
    }

    /**
     * Gets the 'genemu.form.jquery.type.autocomplete.entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleteType A Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleteType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Autocomplete_EntityService()
    {
        return $this->services['genemu.form.jquery.type.autocomplete.entity'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleteType('entity', $this->get('doctrine', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'genemu.form.jquery.type.autocomplete.text' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleteType A Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleteType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Autocomplete_TextService()
    {
        return $this->services['genemu.form.jquery.type.autocomplete.text'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleteType('text');
    }

    /**
     * Gets the 'genemu.form.jquery.type.autocompleter.choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType A Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Autocompleter_ChoiceService()
    {
        return $this->services['genemu.form.jquery.type.autocompleter.choice'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType('choice');
    }

    /**
     * Gets the 'genemu.form.jquery.type.autocompleter.country' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType A Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Autocompleter_CountryService()
    {
        return $this->services['genemu.form.jquery.type.autocompleter.country'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType('country');
    }

    /**
     * Gets the 'genemu.form.jquery.type.autocompleter.currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType A Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Autocompleter_CurrencyService()
    {
        return $this->services['genemu.form.jquery.type.autocompleter.currency'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType('currency');
    }

    /**
     * Gets the 'genemu.form.jquery.type.autocompleter.document' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType A Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Autocompleter_DocumentService()
    {
        return $this->services['genemu.form.jquery.type.autocompleter.document'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType('document');
    }

    /**
     * Gets the 'genemu.form.jquery.type.autocompleter.entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType A Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Autocompleter_EntityService()
    {
        return $this->services['genemu.form.jquery.type.autocompleter.entity'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType('entity');
    }

    /**
     * Gets the 'genemu.form.jquery.type.autocompleter.language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType A Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Autocompleter_LanguageService()
    {
        return $this->services['genemu.form.jquery.type.autocompleter.language'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType('language');
    }

    /**
     * Gets the 'genemu.form.jquery.type.autocompleter.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType A Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Autocompleter_LocaleService()
    {
        return $this->services['genemu.form.jquery.type.autocompleter.locale'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType('locale');
    }

    /**
     * Gets the 'genemu.form.jquery.type.autocompleter.model' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType A Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Autocompleter_ModelService()
    {
        return $this->services['genemu.form.jquery.type.autocompleter.model'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType('model');
    }

    /**
     * Gets the 'genemu.form.jquery.type.autocompleter.timezone' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType A Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Autocompleter_TimezoneService()
    {
        return $this->services['genemu.form.jquery.type.autocompleter.timezone'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\AutocompleterType('timezone');
    }

    /**
     * Gets the 'genemu.form.jquery.type.chosen.choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType A Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Chosen_ChoiceService()
    {
        return $this->services['genemu.form.jquery.type.chosen.choice'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType('choice');
    }

    /**
     * Gets the 'genemu.form.jquery.type.chosen.country' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType A Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Chosen_CountryService()
    {
        return $this->services['genemu.form.jquery.type.chosen.country'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType('country');
    }

    /**
     * Gets the 'genemu.form.jquery.type.chosen.currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType A Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Chosen_CurrencyService()
    {
        return $this->services['genemu.form.jquery.type.chosen.currency'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType('currency');
    }

    /**
     * Gets the 'genemu.form.jquery.type.chosen.document' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType A Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Chosen_DocumentService()
    {
        return $this->services['genemu.form.jquery.type.chosen.document'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType('document');
    }

    /**
     * Gets the 'genemu.form.jquery.type.chosen.entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType A Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Chosen_EntityService()
    {
        return $this->services['genemu.form.jquery.type.chosen.entity'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType('entity');
    }

    /**
     * Gets the 'genemu.form.jquery.type.chosen.language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType A Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Chosen_LanguageService()
    {
        return $this->services['genemu.form.jquery.type.chosen.language'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType('language');
    }

    /**
     * Gets the 'genemu.form.jquery.type.chosen.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType A Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Chosen_LocaleService()
    {
        return $this->services['genemu.form.jquery.type.chosen.locale'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType('locale');
    }

    /**
     * Gets the 'genemu.form.jquery.type.chosen.model' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType A Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Chosen_ModelService()
    {
        return $this->services['genemu.form.jquery.type.chosen.model'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType('model');
    }

    /**
     * Gets the 'genemu.form.jquery.type.chosen.timezone' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType A Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Chosen_TimezoneService()
    {
        return $this->services['genemu.form.jquery.type.chosen.timezone'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\ChosenType('timezone');
    }

    /**
     * Gets the 'genemu.form.jquery.type.color' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\ColorType A Genemu\Bundle\FormBundle\Form\JQuery\Type\ColorType instance.
     */
    protected function getGenemu_Form_Jquery_Type_ColorService()
    {
        return $this->services['genemu.form.jquery.type.color'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\ColorType(array());
    }

    /**
     * Gets the 'genemu.form.jquery.type.date' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\DateType A Genemu\Bundle\FormBundle\Form\JQuery\Type\DateType instance.
     */
    protected function getGenemu_Form_Jquery_Type_DateService()
    {
        return $this->services['genemu.form.jquery.type.date'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\DateType(array());
    }

    /**
     * Gets the 'genemu.form.jquery.type.file' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\FileType A Genemu\Bundle\FormBundle\Form\JQuery\Type\FileType instance.
     */
    protected function getGenemu_Form_Jquery_Type_FileService()
    {
        return $this->services['genemu.form.jquery.type.file'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\FileType(array(), '/var/www/orocrm-platform/app/../web');
    }

    /**
     * Gets the 'genemu.form.jquery.type.geolocation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\GeolocationType A Genemu\Bundle\FormBundle\Form\JQuery\Type\GeolocationType instance.
     */
    protected function getGenemu_Form_Jquery_Type_GeolocationService()
    {
        return $this->services['genemu.form.jquery.type.geolocation'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\GeolocationType();
    }

    /**
     * Gets the 'genemu.form.jquery.type.image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\ImageType A Genemu\Bundle\FormBundle\Form\JQuery\Type\ImageType instance.
     */
    protected function getGenemu_Form_Jquery_Type_ImageService()
    {
        return $this->services['genemu.form.jquery.type.image'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\ImageType('', array(), array());
    }

    /**
     * Gets the 'genemu.form.jquery.type.rating' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\RatingType A Genemu\Bundle\FormBundle\Form\JQuery\Type\RatingType instance.
     */
    protected function getGenemu_Form_Jquery_Type_RatingService()
    {
        return $this->services['genemu.form.jquery.type.rating'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\RatingType(array());
    }

    /**
     * Gets the 'genemu.form.jquery.type.select2.choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type A Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type instance.
     */
    protected function getGenemu_Form_Jquery_Type_Select2_ChoiceService()
    {
        return $this->services['genemu.form.jquery.type.select2.choice'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type('choice');
    }

    /**
     * Gets the 'genemu.form.jquery.type.select2.country' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type A Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type instance.
     */
    protected function getGenemu_Form_Jquery_Type_Select2_CountryService()
    {
        return $this->services['genemu.form.jquery.type.select2.country'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type('country');
    }

    /**
     * Gets the 'genemu.form.jquery.type.select2.currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type A Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type instance.
     */
    protected function getGenemu_Form_Jquery_Type_Select2_CurrencyService()
    {
        return $this->services['genemu.form.jquery.type.select2.currency'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type('currency');
    }

    /**
     * Gets the 'genemu.form.jquery.type.select2.document' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type A Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type instance.
     */
    protected function getGenemu_Form_Jquery_Type_Select2_DocumentService()
    {
        return $this->services['genemu.form.jquery.type.select2.document'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type('document');
    }

    /**
     * Gets the 'genemu.form.jquery.type.select2.entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type A Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type instance.
     */
    protected function getGenemu_Form_Jquery_Type_Select2_EntityService()
    {
        return $this->services['genemu.form.jquery.type.select2.entity'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type('entity');
    }

    /**
     * Gets the 'genemu.form.jquery.type.select2.hidden' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type A Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type instance.
     */
    protected function getGenemu_Form_Jquery_Type_Select2_HiddenService()
    {
        return $this->services['genemu.form.jquery.type.select2.hidden'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type('hidden');
    }

    /**
     * Gets the 'genemu.form.jquery.type.select2.language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type A Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type instance.
     */
    protected function getGenemu_Form_Jquery_Type_Select2_LanguageService()
    {
        return $this->services['genemu.form.jquery.type.select2.language'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type('language');
    }

    /**
     * Gets the 'genemu.form.jquery.type.select2.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type A Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type instance.
     */
    protected function getGenemu_Form_Jquery_Type_Select2_LocaleService()
    {
        return $this->services['genemu.form.jquery.type.select2.locale'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type('locale');
    }

    /**
     * Gets the 'genemu.form.jquery.type.select2.model' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type A Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type instance.
     */
    protected function getGenemu_Form_Jquery_Type_Select2_ModelService()
    {
        return $this->services['genemu.form.jquery.type.select2.model'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type('model');
    }

    /**
     * Gets the 'genemu.form.jquery.type.select2.timezone' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type A Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type instance.
     */
    protected function getGenemu_Form_Jquery_Type_Select2_TimezoneService()
    {
        return $this->services['genemu.form.jquery.type.select2.timezone'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type('timezone');
    }

    /**
     * Gets the 'genemu.form.jquery.type.slider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\SliderType A Genemu\Bundle\FormBundle\Form\JQuery\Type\SliderType instance.
     */
    protected function getGenemu_Form_Jquery_Type_SliderService()
    {
        return $this->services['genemu.form.jquery.type.slider'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\SliderType();
    }

    /**
     * Gets the 'genemu.form.jquery.type.tokeninput.choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType A Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Tokeninput_ChoiceService()
    {
        return $this->services['genemu.form.jquery.type.tokeninput.choice'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType('choice');
    }

    /**
     * Gets the 'genemu.form.jquery.type.tokeninput.country' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType A Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Tokeninput_CountryService()
    {
        return $this->services['genemu.form.jquery.type.tokeninput.country'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType('country');
    }

    /**
     * Gets the 'genemu.form.jquery.type.tokeninput.currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType A Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Tokeninput_CurrencyService()
    {
        return $this->services['genemu.form.jquery.type.tokeninput.currency'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType('currency');
    }

    /**
     * Gets the 'genemu.form.jquery.type.tokeninput.document' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType A Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Tokeninput_DocumentService()
    {
        return $this->services['genemu.form.jquery.type.tokeninput.document'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType('document');
    }

    /**
     * Gets the 'genemu.form.jquery.type.tokeninput.entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType A Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Tokeninput_EntityService()
    {
        return $this->services['genemu.form.jquery.type.tokeninput.entity'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType('entity');
    }

    /**
     * Gets the 'genemu.form.jquery.type.tokeninput.language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType A Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Tokeninput_LanguageService()
    {
        return $this->services['genemu.form.jquery.type.tokeninput.language'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType('language');
    }

    /**
     * Gets the 'genemu.form.jquery.type.tokeninput.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType A Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Tokeninput_LocaleService()
    {
        return $this->services['genemu.form.jquery.type.tokeninput.locale'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType('locale');
    }

    /**
     * Gets the 'genemu.form.jquery.type.tokeninput.model' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType A Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Tokeninput_ModelService()
    {
        return $this->services['genemu.form.jquery.type.tokeninput.model'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType('model');
    }

    /**
     * Gets the 'genemu.form.jquery.type.tokeninput.timezone' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType A Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType instance.
     */
    protected function getGenemu_Form_Jquery_Type_Tokeninput_TimezoneService()
    {
        return $this->services['genemu.form.jquery.type.tokeninput.timezone'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\TokeninputType('timezone');
    }

    /**
     * Gets the 'genemu.form.model.type.ajaxmodel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\Model\Type\AjaxModelType A Genemu\Bundle\FormBundle\Form\Model\Type\AjaxModelType instance.
     */
    protected function getGenemu_Form_Model_Type_AjaxmodelService()
    {
        return $this->services['genemu.form.model.type.ajaxmodel'] = new \Genemu\Bundle\FormBundle\Form\Model\Type\AjaxModelType();
    }

    /**
     * Gets the 'genemu.form.type_recaptcha.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\Core\Validator\ReCaptchaValidator A Genemu\Bundle\FormBundle\Form\Core\Validator\ReCaptchaValidator instance.
     */
    protected function getGenemu_Form_TypeRecaptcha_ValidatorService()
    {
        return $this->services['genemu.form.type_recaptcha.validator'] = new \Genemu\Bundle\FormBundle\Form\Core\Validator\ReCaptchaValidator($this->get('request'), '', array());
    }

    /**
     * Gets the 'genemu.gd.captcha' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Gd\Type\Captcha A Genemu\Bundle\FormBundle\Gd\Type\Captcha instance.
     */
    protected function getGenemu_Gd_CaptchaService()
    {
        return $this->services['genemu.gd.captcha'] = new \Genemu\Bundle\FormBundle\Gd\Type\Captcha($this->get('session'), 'ThisTokenIsNotSoSecretChangeIt');
    }

    /**
     * Gets the 'genemu.twig.extension.form' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Twig\Extension\FormExtension A Genemu\Bundle\FormBundle\Twig\Extension\FormExtension instance.
     */
    protected function getGenemu_Twig_Extension_FormService()
    {
        return $this->services['genemu.twig.extension.form'] = new \Genemu\Bundle\FormBundle\Twig\Extension\FormExtension($this->get('twig.form.renderer'));
    }

    /**
     * Gets the 'http_kernel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\HttpKernel\DependencyInjection\ContainerAwareHttpKernel A Symfony\Component\HttpKernel\DependencyInjection\ContainerAwareHttpKernel instance.
     */
    protected function getHttpKernelService()
    {
        return $this->services['http_kernel'] = new \Symfony\Component\HttpKernel\DependencyInjection\ContainerAwareHttpKernel($this->get('debug.event_dispatcher'), $this, $this->get('debug.controller_resolver'));
    }

    /**
     * Gets the 'jdare_clank.clank_app' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return JDare\ClankBundle\Server\App\ClankApp A JDare\ClankBundle\Server\App\ClankApp instance.
     */
    protected function getJdareClank_ClankAppService()
    {
        return $this->services['jdare_clank.clank_app'] = new \JDare\ClankBundle\Server\App\ClankApp($this->get('jdare_clank.clank_handler_rpc'), $this->get('jdare_clank.clank_handler_topic'), $this->get('event_dispatcher'));
    }

    /**
     * Gets the 'jdare_clank.clank_handler_rpc' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return JDare\ClankBundle\Server\App\Handler\RPCHandler A JDare\ClankBundle\Server\App\Handler\RPCHandler instance.
     */
    protected function getJdareClank_ClankHandlerRpcService()
    {
        $this->services['jdare_clank.clank_handler_rpc'] = $instance = new \JDare\ClankBundle\Server\App\Handler\RPCHandler();

        $instance->setContainer($this);
        $instance->setRPCServices(array());

        return $instance;
    }

    /**
     * Gets the 'jdare_clank.clank_handler_topic' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return JDare\ClankBundle\Server\App\Handler\TopicHandler A JDare\ClankBundle\Server\App\Handler\TopicHandler instance.
     */
    protected function getJdareClank_ClankHandlerTopicService()
    {
        $this->services['jdare_clank.clank_handler_topic'] = $instance = new \JDare\ClankBundle\Server\App\Handler\TopicHandler();

        $instance->setContainer($this);
        $instance->setTopicServices(array());

        return $instance;
    }

    /**
     * Gets the 'jdare_clank.entry_point' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return JDare\ClankBundle\Server\EntryPoint A JDare\ClankBundle\Server\EntryPoint instance.
     */
    protected function getJdareClank_EntryPointService()
    {
        return $this->services['jdare_clank.entry_point'] = new \JDare\ClankBundle\Server\EntryPoint($this, array(0 => 'jdare_clank.web_socket_server'));
    }

    /**
     * Gets the 'jdare_clank.periodic_sample_service' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return JDare\ClankBundle\Periodic\AcmePeriodic A JDare\ClankBundle\Periodic\AcmePeriodic instance.
     */
    protected function getJdareClank_PeriodicSampleServiceService()
    {
        return $this->services['jdare_clank.periodic_sample_service'] = new \JDare\ClankBundle\Periodic\AcmePeriodic();
    }

    /**
     * Gets the 'jdare_clank.rpc_sample_service' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return JDare\ClankBundle\RPC\AcmeService A JDare\ClankBundle\RPC\AcmeService instance.
     */
    protected function getJdareClank_RpcSampleServiceService()
    {
        return $this->services['jdare_clank.rpc_sample_service'] = new \JDare\ClankBundle\RPC\AcmeService();
    }

    /**
     * Gets the 'jdare_clank.topic_sample_service' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return JDare\ClankBundle\Topic\AcmeTopic A JDare\ClankBundle\Topic\AcmeTopic instance.
     */
    protected function getJdareClank_TopicSampleServiceService()
    {
        return $this->services['jdare_clank.topic_sample_service'] = new \JDare\ClankBundle\Topic\AcmeTopic();
    }

    /**
     * Gets the 'jdare_clank.twig.clank_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return JDare\ClankBundle\Twig\ClankExtension A JDare\ClankBundle\Twig\ClankExtension instance.
     */
    protected function getJdareClank_Twig_ClankExtensionService()
    {
        return $this->services['jdare_clank.twig.clank_extension'] = new \JDare\ClankBundle\Twig\ClankExtension($this);
    }

    /**
     * Gets the 'jdare_clank.web_socket_server' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return JDare\ClankBundle\Server\Type\WebSocketServerType A JDare\ClankBundle\Server\Type\WebSocketServerType instance.
     */
    protected function getJdareClank_WebSocketServerService()
    {
        $this->services['jdare_clank.web_socket_server'] = $instance = new \JDare\ClankBundle\Server\Type\WebSocketServerType('127.0.0.1', 8080);

        $instance->setContainer($this);
        $instance->setPeriodicServices(array(0 => array('service' => 'oro_wamp.db_ping', 'time' => 60000)));
        $instance->setSession('session.handler.pdo');

        return $instance;
    }

    /**
     * Gets the 'jms_job_queue.entity.many_to_any_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return JMS\JobQueueBundle\Entity\Listener\ManyToAnyListener A JMS\JobQueueBundle\Entity\Listener\ManyToAnyListener instance.
     */
    protected function getJmsJobQueue_Entity_ManyToAnyListenerService()
    {
        return $this->services['jms_job_queue.entity.many_to_any_listener'] = new \JMS\JobQueueBundle\Entity\Listener\ManyToAnyListener($this->get('doctrine'));
    }

    /**
     * Gets the 'jms_job_queue.entity.statistics_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return JMS\JobQueueBundle\Entity\Listener\StatisticsListener A JMS\JobQueueBundle\Entity\Listener\StatisticsListener instance.
     */
    protected function getJmsJobQueue_Entity_StatisticsListenerService()
    {
        return $this->services['jms_job_queue.entity.statistics_listener'] = new \JMS\JobQueueBundle\Entity\Listener\StatisticsListener();
    }

    /**
     * Gets the 'jms_job_queue.twig.extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return JMS\JobQueueBundle\Twig\JobQueueExtension A JMS\JobQueueBundle\Twig\JobQueueExtension instance.
     */
    protected function getJmsJobQueue_Twig_ExtensionService()
    {
        return $this->services['jms_job_queue.twig.extension'] = new \JMS\JobQueueBundle\Twig\JobQueueExtension(array());
    }

    /**
     * Gets the 'jms_serializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return JMS\Serializer\Serializer A JMS\Serializer\Serializer instance.
     */
    protected function getJmsSerializerService()
    {
        $a = new \JMS\Serializer\EventDispatcher\LazyEventDispatcher($this);
        $a->setListeners(array('serializer.pre_serialize' => array(0 => array(0 => array(0 => 'jms_serializer.stopwatch_subscriber', 1 => 'onPreSerialize'), 1 => NULL, 2 => NULL), 1 => array(0 => array(0 => 'jms_serializer.doctrine_proxy_subscriber', 1 => 'onPreSerialize'), 1 => NULL, 2 => NULL)), 'serializer.post_serialize' => array(0 => array(0 => array(0 => 'jms_serializer.stopwatch_subscriber', 1 => 'onPostSerialize'), 1 => NULL, 2 => NULL))));

        return $this->services['jms_serializer'] = new \JMS\Serializer\Serializer($this->get('jms_serializer.metadata_factory'), $this->get('jms_serializer.handler_registry'), $this->get('jms_serializer.unserialize_object_constructor'), new \JMS\DiExtraBundle\DependencyInjection\Collection\LazyServiceMap($this, array('json' => 'jms_serializer.json_serialization_visitor', 'xml' => 'jms_serializer.xml_serialization_visitor', 'yml' => 'jms_serializer.yaml_serialization_visitor')), new \JMS\DiExtraBundle\DependencyInjection\Collection\LazyServiceMap($this, array('json' => 'jms_serializer.json_deserialization_visitor', 'xml' => 'jms_serializer.xml_deserialization_visitor')), $a);
    }

    /**
     * Gets the 'jms_serializer.array_collection_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return JMS\Serializer\Handler\ArrayCollectionHandler A JMS\Serializer\Handler\ArrayCollectionHandler instance.
     */
    protected function getJmsSerializer_ArrayCollectionHandlerService()
    {
        return $this->services['jms_serializer.array_collection_handler'] = new \JMS\Serializer\Handler\ArrayCollectionHandler();
    }

    /**
     * Gets the 'jms_serializer.constraint_violation_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return JMS\Serializer\Handler\ConstraintViolationHandler A JMS\Serializer\Handler\ConstraintViolationHandler instance.
     */
    protected function getJmsSerializer_ConstraintViolationHandlerService()
    {
        return $this->services['jms_serializer.constraint_violation_handler'] = new \JMS\Serializer\Handler\ConstraintViolationHandler();
    }

    /**
     * Gets the 'jms_serializer.datetime_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return JMS\Serializer\Handler\DateHandler A JMS\Serializer\Handler\DateHandler instance.
     */
    protected function getJmsSerializer_DatetimeHandlerService()
    {
        return $this->services['jms_serializer.datetime_handler'] = new \JMS\Serializer\Handler\DateHandler('Y-m-d\\TH:i:sO', 'UTC', true);
    }

    /**
     * Gets the 'jms_serializer.doctrine_proxy_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return JMS\Serializer\EventDispatcher\Subscriber\DoctrineProxySubscriber A JMS\Serializer\EventDispatcher\Subscriber\DoctrineProxySubscriber instance.
     */
    protected function getJmsSerializer_DoctrineProxySubscriberService()
    {
        return $this->services['jms_serializer.doctrine_proxy_subscriber'] = new \JMS\Serializer\EventDispatcher\Subscriber\DoctrineProxySubscriber();
    }

    /**
     * Gets the 'jms_serializer.form_error_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return JMS\Serializer\Handler\FormErrorHandler A JMS\Serializer\Handler\FormErrorHandler instance.
     */
    protected function getJmsSerializer_FormErrorHandlerService()
    {
        return $this->services['jms_serializer.form_error_handler'] = new \JMS\Serializer\Handler\FormErrorHandler($this->get('translator.default'));
    }

    /**
     * Gets the 'jms_serializer.handler_registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return JMS\Serializer\Handler\LazyHandlerRegistry A JMS\Serializer\Handler\LazyHandlerRegistry instance.
     */
    protected function getJmsSerializer_HandlerRegistryService()
    {
        return $this->services['jms_serializer.handler_registry'] = new \JMS\Serializer\Handler\LazyHandlerRegistry($this, array(1 => array('Oro\\Bundle\\WorkflowBundle\\Model\\WorkflowResult' => array('json' => array(0 => 'oro_workflow.serializer.handler.workflow_result', 1 => 'workflowResultToJson')), 'DateTime' => array('json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTime'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTime'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTime')), 'DateInterval' => array('json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateInterval'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateInterval'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateInterval')), 'ArrayCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'Doctrine\\Common\\Collections\\ArrayCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'Doctrine\\ORM\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'Doctrine\\ODM\\MongoDB\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'Doctrine\\ODM\\PHPCR\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'PhpCollection\\Sequence' => array('json' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeSequence'), 'xml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeSequence'), 'yml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeSequence')), 'PhpCollection\\Map' => array('json' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeMap'), 'xml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeMap'), 'yml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeMap')), 'Symfony\\Component\\Form\\Form' => array('xml' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormToxml'), 'json' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormTojson'), 'yml' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormToyml')), 'Symfony\\Component\\Form\\FormError' => array('xml' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormErrorToxml'), 'json' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormErrorTojson'), 'yml' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormErrorToyml')), 'Symfony\\Component\\Validator\\ConstraintViolationList' => array('xml' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeListToxml'), 'json' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeListTojson'), 'yml' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeListToyml')), 'Symfony\\Component\\Validator\\ConstraintViolation' => array('xml' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeViolationToxml'), 'json' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeViolationTojson'), 'yml' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeViolationToyml'))), 2 => array('DateTime' => array('json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeFromjson'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeFromxml'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeFromyml')), 'ArrayCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'Doctrine\\Common\\Collections\\ArrayCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'Doctrine\\ORM\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'Doctrine\\ODM\\MongoDB\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'Doctrine\\ODM\\PHPCR\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'PhpCollection\\Sequence' => array('json' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeSequence'), 'xml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeSequence'), 'yml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeSequence')), 'PhpCollection\\Map' => array('json' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeMap'), 'xml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeMap'), 'yml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeMap')))));
    }

    /**
     * Gets the 'jms_serializer.json_deserialization_visitor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return JMS\Serializer\JsonDeserializationVisitor A JMS\Serializer\JsonDeserializationVisitor instance.
     */
    protected function getJmsSerializer_JsonDeserializationVisitorService()
    {
        return $this->services['jms_serializer.json_deserialization_visitor'] = new \JMS\Serializer\JsonDeserializationVisitor($this->get('jms_serializer.naming_strategy'), $this->get('jms_serializer.unserialize_object_constructor'));
    }

    /**
     * Gets the 'jms_serializer.json_serialization_visitor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return JMS\Serializer\JsonSerializationVisitor A JMS\Serializer\JsonSerializationVisitor instance.
     */
    protected function getJmsSerializer_JsonSerializationVisitorService()
    {
        $this->services['jms_serializer.json_serialization_visitor'] = $instance = new \JMS\Serializer\JsonSerializationVisitor($this->get('jms_serializer.naming_strategy'));

        $instance->setOptions(0);

        return $instance;
    }

    /**
     * Gets the 'jms_serializer.metadata_driver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return JMS\Serializer\Metadata\Driver\DoctrineTypeDriver A JMS\Serializer\Metadata\Driver\DoctrineTypeDriver instance.
     */
    protected function getJmsSerializer_MetadataDriverService()
    {
        $a = new \Metadata\Driver\FileLocator(array('Symfony\\Bundle\\FrameworkBundle' => '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Resources/config/serializer', 'Symfony\\Bundle\\SecurityBundle' => '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Bundle/SecurityBundle/Resources/config/serializer', 'Symfony\\Bundle\\TwigBundle' => '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Bundle/TwigBundle/Resources/config/serializer', 'Symfony\\Bundle\\MonologBundle' => '/var/www/orocrm-platform/vendor/symfony/monolog-bundle/Symfony/Bundle/MonologBundle/Resources/config/serializer', 'Symfony\\Bundle\\SwiftmailerBundle' => '/var/www/orocrm-platform/vendor/symfony/swiftmailer-bundle/Symfony/Bundle/SwiftmailerBundle/Resources/config/serializer', 'Symfony\\Bundle\\AsseticBundle' => '/var/www/orocrm-platform/vendor/symfony/assetic-bundle/Symfony/Bundle/AsseticBundle/Resources/config/serializer', 'Doctrine\\Bundle\\DoctrineBundle' => '/var/www/orocrm-platform/vendor/doctrine/doctrine-bundle/Doctrine/Bundle/DoctrineBundle/Resources/config/serializer', 'Doctrine\\Bundle\\FixturesBundle' => '/var/www/orocrm-platform/vendor/doctrine/doctrine-fixtures-bundle/Doctrine/Bundle/FixturesBundle/Resources/config/serializer', 'Sensio\\Bundle\\FrameworkExtraBundle' => '/var/www/orocrm-platform/vendor/sensio/framework-extra-bundle/Sensio/Bundle/FrameworkExtraBundle/Resources/config/serializer', 'JMS\\SerializerBundle' => '/var/www/orocrm-platform/vendor/jms/serializer-bundle/JMS/SerializerBundle/Resources/config/serializer', 'Knp\\Bundle\\PaginatorBundle' => '/var/www/orocrm-platform/vendor/knplabs/knp-paginator-bundle/Knp/Bundle/PaginatorBundle/Resources/config/serializer', 'Knp\\Bundle\\MenuBundle' => '/var/www/orocrm-platform/vendor/knplabs/knp-menu-bundle/Knp/Bundle/MenuBundle/Resources/config/serializer', 'FOS\\RestBundle' => '/var/www/orocrm-platform/vendor/friendsofsymfony/rest-bundle/FOS/RestBundle/Resources/config/serializer', 'FOS\\JsRoutingBundle' => '/var/www/orocrm-platform/vendor/friendsofsymfony/jsrouting-bundle/FOS/JsRoutingBundle/Resources/config/serializer', 'Nelmio\\ApiDocBundle' => '/var/www/orocrm-platform/vendor/nelmio/api-doc-bundle/Nelmio/ApiDocBundle/Resources/config/serializer', 'BeSimple\\SoapBundle' => '/var/www/orocrm-platform/vendor/besimple/soap/src/BeSimple/SoapBundle/Resources/config/serializer', 'Stof\\DoctrineExtensionsBundle' => '/var/www/orocrm-platform/vendor/stof/doctrine-extensions-bundle/Stof/DoctrineExtensionsBundle/Resources/config/serializer', 'Escape\\WSSEAuthenticationBundle' => '/var/www/orocrm-platform/vendor/escapestudios/wsse-authentication-bundle/Escape/WSSEAuthenticationBundle/Resources/config/serializer', 'Liip\\ImagineBundle' => '/var/www/orocrm-platform/vendor/liip/imagine-bundle/Liip/ImagineBundle/Resources/config/serializer', 'Genemu\\Bundle\\FormBundle' => '/var/www/orocrm-platform/vendor/genemu/form-bundle/Genemu/Bundle/FormBundle/Resources/config/serializer', 'A2lix\\TranslationFormBundle' => '/var/www/orocrm-platform/vendor/a2lix/translation-form-bundle/A2lix/TranslationFormBundle/Resources/config/serializer', 'Lexik\\Bundle\\MaintenanceBundle' => '/var/www/orocrm-platform/vendor/lexik/maintenance-bundle/Lexik/Bundle/MaintenanceBundle/Resources/config/serializer', 'Oro\\Bundle\\SecurityBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/SecurityBundle/Resources/config/serializer', 'Oro\\Bundle\\UIBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/UIBundle/Resources/config/serializer', 'Oro\\Bundle\\EntityBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/EntityBundle/Resources/config/serializer', 'JDare\\ClankBundle' => '/var/www/orocrm-platform/vendor/jdare/clank-bundle/JDare/ClankBundle/Resources/config/serializer', 'JMS\\JobQueueBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/CronBundle/Resources/config/serializer/JobQueueBundle', 'Oro\\Bundle\\AddressBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/AddressBundle/Resources/config/serializer', 'Oro\\Bundle\\AsseticBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/AsseticBundle/Resources/config/serializer', 'Oro\\Bundle\\BatchBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/BatchBundle/Resources/config/serializer', 'Oro\\Bundle\\BusinessEntitiesBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/BusinessEntitiesBundle/Resources/config/serializer', 'Oro\\Bundle\\CalendarBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/CalendarBundle/Resources/config/serializer', 'Oro\\Bundle\\ConfigBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/ConfigBundle/Resources/config/serializer', 'Oro\\Bundle\\CronBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/CronBundle/Resources/config/serializer', 'Oro\\Bundle\\DashboardBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/DashboardBundle/Resources/config/serializer', 'Oro\\Bundle\\DataAuditBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/DataAuditBundle/Resources/config/serializer', 'Oro\\Bundle\\DataGridBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/DataGridBundle/Resources/config/serializer', 'Oro\\Bundle\\DistributionBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/DistributionBundle/Resources/config/serializer', 'Oro\\Bundle\\EmailBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/EmailBundle/Resources/config/serializer', 'Oro\\Bundle\\EntityConfigBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/EntityConfigBundle/Resources/config/serializer', 'Oro\\Bundle\\EntityExtendBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/EntityExtendBundle/Resources/config/serializer', 'Oro\\Bundle\\FilterBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/FilterBundle/Resources/config/serializer', 'Oro\\Bundle\\FormBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/FormBundle/Resources/config/serializer', 'Oro\\Bundle\\HelpBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/HelpBundle/Resources/config/serializer', 'Oro\\Bundle\\ImapBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/ImapBundle/Resources/config/serializer', 'Oro\\Bundle\\ImportExportBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/ImportExportBundle/Resources/config/serializer', 'Oro\\Bundle\\InstallerBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/InstallerBundle/Resources/config/serializer', 'Oro\\Bundle\\IntegrationBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/IntegrationBundle/Resources/config/serializer', 'Oro\\Bundle\\LocaleBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/LocaleBundle/Resources/config/serializer', 'Oro\\Bundle\\MeasureBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/MeasureBundle/Resources/config/serializer', 'Oro\\Bundle\\NotificationBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/NotificationBundle/Resources/config/serializer', 'Oro\\Bundle\\OrganizationBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/OrganizationBundle/Resources/config/serializer', 'Oro\\Bundle\\PlatformBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/PlatformBundle/Resources/config/serializer', 'Oro\\Bundle\\QueryDesignerBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/QueryDesignerBundle/Resources/config/serializer', 'Oro\\Bundle\\ReportBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/ReportBundle/Resources/config/serializer', 'Oro\\Bundle\\RequireJSBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/RequireJSBundle/Resources/config/serializer', 'Oro\\Bundle\\SearchBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/SearchBundle/Resources/config/serializer', 'Oro\\Bundle\\SegmentationTreeBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/SegmentationTreeBundle/Resources/config/serializer', 'Oro\\Bundle\\SidebarBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/SidebarBundle/Resources/config/serializer', 'Oro\\Bundle\\SoapBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/SoapBundle/Resources/config/serializer', 'Oro\\Bundle\\SyncBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/SyncBundle/Resources/config/serializer', 'Oro\\Bundle\\TagBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/TagBundle/Resources/config/serializer', 'Oro\\Bundle\\ThemeBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/ThemeBundle/Resources/config/serializer', 'Oro\\Bundle\\TranslationBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/TranslationBundle/Resources/config/serializer', 'Oro\\Bundle\\UserBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/UserBundle/Resources/config/serializer', 'Oro\\Bundle\\WindowsBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/WindowsBundle/Resources/config/serializer', 'Oro\\Bundle\\WorkflowBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/WorkflowBundle/Resources/config/serializer', 'Sylius\\Bundle\\FlowBundle' => '/var/www/orocrm-platform/vendor/sylius/flow-bundle/Sylius/Bundle/FlowBundle/Resources/config/serializer', 'Oro\\Bundle\\NavigationBundle' => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/NavigationBundle/Resources/config/serializer', 'Symfony\\Bundle\\WebProfilerBundle' => '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Bundle/WebProfilerBundle/Resources/config/serializer', 'Sensio\\Bundle\\DistributionBundle' => '/var/www/orocrm-platform/vendor/sensio/distribution-bundle/Sensio/Bundle/DistributionBundle/Resources/config/serializer', 'Sensio\\Bundle\\GeneratorBundle' => '/var/www/orocrm-platform/vendor/sensio/generator-bundle/Sensio/Bundle/GeneratorBundle/Resources/config/serializer'));

        return $this->services['jms_serializer.metadata_driver'] = new \JMS\Serializer\Metadata\Driver\DoctrineTypeDriver(new \Metadata\Driver\DriverChain(array(0 => new \JMS\Serializer\Metadata\Driver\YamlDriver($a), 1 => new \JMS\Serializer\Metadata\Driver\XmlDriver($a), 2 => new \JMS\Serializer\Metadata\Driver\PhpDriver($a), 3 => new \JMS\Serializer\Metadata\Driver\AnnotationDriver($this->get('annotation_reader')))), $this->get('doctrine'));
    }

    /**
     * Gets the 'jms_serializer.naming_strategy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return JMS\Serializer\Naming\CacheNamingStrategy A JMS\Serializer\Naming\CacheNamingStrategy instance.
     */
    protected function getJmsSerializer_NamingStrategyService()
    {
        return $this->services['jms_serializer.naming_strategy'] = new \JMS\Serializer\Naming\CacheNamingStrategy(new \JMS\Serializer\Naming\SerializedNameAnnotationStrategy(new \JMS\Serializer\Naming\CamelCaseNamingStrategy('_', true)));
    }

    /**
     * Gets the 'jms_serializer.object_constructor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return JMS\Serializer\Construction\DoctrineObjectConstructor A JMS\Serializer\Construction\DoctrineObjectConstructor instance.
     */
    protected function getJmsSerializer_ObjectConstructorService()
    {
        return $this->services['jms_serializer.object_constructor'] = new \JMS\Serializer\Construction\DoctrineObjectConstructor($this->get('doctrine'), $this->get('jms_serializer.unserialize_object_constructor'));
    }

    /**
     * Gets the 'jms_serializer.php_collection_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return JMS\Serializer\Handler\PhpCollectionHandler A JMS\Serializer\Handler\PhpCollectionHandler instance.
     */
    protected function getJmsSerializer_PhpCollectionHandlerService()
    {
        return $this->services['jms_serializer.php_collection_handler'] = new \JMS\Serializer\Handler\PhpCollectionHandler();
    }

    /**
     * Gets the 'jms_serializer.stopwatch_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return JMS\SerializerBundle\Serializer\StopwatchEventSubscriber A JMS\SerializerBundle\Serializer\StopwatchEventSubscriber instance.
     */
    protected function getJmsSerializer_StopwatchSubscriberService()
    {
        return $this->services['jms_serializer.stopwatch_subscriber'] = new \JMS\SerializerBundle\Serializer\StopwatchEventSubscriber($this->get('debug.stopwatch'));
    }

    /**
     * Gets the 'jms_serializer.templating.helper.serializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return JMS\SerializerBundle\Templating\SerializerHelper A JMS\SerializerBundle\Templating\SerializerHelper instance.
     */
    protected function getJmsSerializer_Templating_Helper_SerializerService()
    {
        return $this->services['jms_serializer.templating.helper.serializer'] = new \JMS\SerializerBundle\Templating\SerializerHelper($this->get('jms_serializer'));
    }

    /**
     * Gets the 'jms_serializer.xml_deserialization_visitor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return JMS\Serializer\XmlDeserializationVisitor A JMS\Serializer\XmlDeserializationVisitor instance.
     */
    protected function getJmsSerializer_XmlDeserializationVisitorService()
    {
        $this->services['jms_serializer.xml_deserialization_visitor'] = $instance = new \JMS\Serializer\XmlDeserializationVisitor($this->get('jms_serializer.naming_strategy'), $this->get('jms_serializer.unserialize_object_constructor'));

        $instance->setDoctypeWhitelist(array());

        return $instance;
    }

    /**
     * Gets the 'jms_serializer.xml_serialization_visitor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return JMS\Serializer\XmlSerializationVisitor A JMS\Serializer\XmlSerializationVisitor instance.
     */
    protected function getJmsSerializer_XmlSerializationVisitorService()
    {
        return $this->services['jms_serializer.xml_serialization_visitor'] = new \JMS\Serializer\XmlSerializationVisitor($this->get('jms_serializer.naming_strategy'));
    }

    /**
     * Gets the 'jms_serializer.yaml_serialization_visitor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return JMS\Serializer\YamlSerializationVisitor A JMS\Serializer\YamlSerializationVisitor instance.
     */
    protected function getJmsSerializer_YamlSerializationVisitorService()
    {
        return $this->services['jms_serializer.yaml_serialization_visitor'] = new \JMS\Serializer\YamlSerializationVisitor($this->get('jms_serializer.naming_strategy'));
    }

    /**
     * Gets the 'kernel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @throws RuntimeException always since this service is expected to be injected dynamically
     */
    protected function getKernelService()
    {
        throw new RuntimeException('You have requested a synthetic service ("kernel"). The DIC does not know how to construct this service.');
    }

    /**
     * Gets the 'kernel.listener.hashnav_response' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Event\ResponseHashnavListener A Oro\Bundle\NavigationBundle\Event\ResponseHashnavListener instance.
     */
    protected function getKernel_Listener_HashnavResponseService()
    {
        return $this->services['kernel.listener.hashnav_response'] = new \Oro\Bundle\NavigationBundle\Event\ResponseHashnavListener($this->get('security.context'), $this->get('templating'));
    }

    /**
     * Gets the 'kernel.listener.install.event' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\InstallerBundle\EventListener\RequestListener A Oro\Bundle\InstallerBundle\EventListener\RequestListener instance.
     */
    protected function getKernel_Listener_Install_EventService()
    {
        return $this->services['kernel.listener.install.event'] = new \Oro\Bundle\InstallerBundle\EventListener\RequestListener($this->get('router'), NULL, true);
    }

    /**
     * Gets the 'kernel.listener.maintenance.event' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SyncBundle\EventListener\MaintenanceListener A Oro\Bundle\SyncBundle\EventListener\MaintenanceListener instance.
     */
    protected function getKernel_Listener_Maintenance_EventService()
    {
        return $this->services['kernel.listener.maintenance.event'] = new \Oro\Bundle\SyncBundle\EventListener\MaintenanceListener($this->get('oro_wamp.publisher'));
    }

    /**
     * Gets the 'kernel.listener.nav_history_response' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Event\ResponseHistoryListener A Oro\Bundle\NavigationBundle\Event\ResponseHistoryListener instance.
     */
    protected function getKernel_Listener_NavHistoryResponseService()
    {
        return $this->services['kernel.listener.nav_history_response'] = new \Oro\Bundle\NavigationBundle\Event\ResponseHistoryListener($this->get('oro_navigation.item.factory'), $this->get('security.context'), $this->get('doctrine.orm.default_entity_manager'), $this->get('oro_navigation.title_service'));
    }

    /**
     * Gets the 'kernel.listener.title_service.request_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Event\RequestTitleListener A Oro\Bundle\NavigationBundle\Event\RequestTitleListener instance.
     */
    protected function getKernel_Listener_TitleService_RequestListenerService()
    {
        return $this->services['kernel.listener.title_service.request_listener'] = new \Oro\Bundle\NavigationBundle\Event\RequestTitleListener($this->get('oro_navigation.title_service'));
    }

    /**
     * Gets the 'knp_menu.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Knp\Menu\MenuFactory A Knp\Menu\MenuFactory instance.
     */
    protected function getKnpMenu_FactoryService()
    {
        $this->services['knp_menu.factory'] = $instance = new \Knp\Menu\MenuFactory();

        $instance->addExtension(new \Knp\Menu\Silex\RoutingExtension($this->get('router')), 0);

        return $instance;
    }

    /**
     * Gets the 'knp_menu.listener.voters' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Knp\Bundle\MenuBundle\EventListener\VoterInitializerListener A Knp\Bundle\MenuBundle\EventListener\VoterInitializerListener instance.
     */
    protected function getKnpMenu_Listener_VotersService()
    {
        $this->services['knp_menu.listener.voters'] = $instance = new \Knp\Bundle\MenuBundle\EventListener\VoterInitializerListener();

        $instance->addVoter($this->get('knp_menu.voter.router'));
        $instance->addVoter($this->get('knp_voter_request'));

        return $instance;
    }

    /**
     * Gets the 'knp_menu.matcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Knp\Menu\Matcher\Matcher A Knp\Menu\Matcher\Matcher instance.
     */
    protected function getKnpMenu_MatcherService()
    {
        $this->services['knp_menu.matcher'] = $instance = new \Knp\Menu\Matcher\Matcher();

        $instance->addVoter($this->get('knp_menu.voter.router'));
        $instance->addVoter($this->get('knp_voter_request'));

        return $instance;
    }

    /**
     * Gets the 'knp_menu.menu_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Knp\Menu\Provider\ChainProvider A Knp\Menu\Provider\ChainProvider instance.
     */
    protected function getKnpMenu_MenuProviderService()
    {
        return $this->services['knp_menu.menu_provider'] = new \Knp\Menu\Provider\ChainProvider(array(0 => new \Knp\Bundle\MenuBundle\Provider\ContainerAwareProvider($this, array()), 1 => new \Knp\Bundle\MenuBundle\Provider\BuilderAliasProvider($this->get('kernel'), $this, $this->get('knp_menu.factory')), 2 => $this->get('oro_menu.builder_chain')));
    }

    /**
     * Gets the 'knp_menu.renderer.list' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Knp\Menu\Renderer\ListRenderer A Knp\Menu\Renderer\ListRenderer instance.
     */
    protected function getKnpMenu_Renderer_ListService()
    {
        return $this->services['knp_menu.renderer.list'] = new \Knp\Menu\Renderer\ListRenderer($this->get('knp_menu.matcher'), array(), 'UTF-8');
    }

    /**
     * Gets the 'knp_menu.renderer.twig' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Knp\Menu\Renderer\TwigRenderer A Knp\Menu\Renderer\TwigRenderer instance.
     */
    protected function getKnpMenu_Renderer_TwigService()
    {
        return $this->services['knp_menu.renderer.twig'] = new \Knp\Menu\Renderer\TwigRenderer($this->get('twig'), 'knp_menu.html.twig', $this->get('knp_menu.matcher'), array());
    }

    /**
     * Gets the 'knp_menu.renderer_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Knp\Bundle\MenuBundle\Renderer\ContainerAwareProvider A Knp\Bundle\MenuBundle\Renderer\ContainerAwareProvider instance.
     */
    protected function getKnpMenu_RendererProviderService()
    {
        return $this->services['knp_menu.renderer_provider'] = new \Knp\Bundle\MenuBundle\Renderer\ContainerAwareProvider($this, 'twig', array('list' => 'knp_menu.renderer.list', 'twig' => 'knp_menu.renderer.twig'));
    }

    /**
     * Gets the 'knp_menu.voter.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Menu\Matcher\Voter\RoutePatternVoter A Oro\Bundle\NavigationBundle\Menu\Matcher\Voter\RoutePatternVoter instance.
     */
    protected function getKnpMenu_Voter_RouterService()
    {
        return $this->services['knp_menu.voter.router'] = new \Oro\Bundle\NavigationBundle\Menu\Matcher\Voter\RoutePatternVoter();
    }

    /**
     * Gets the 'knp_paginator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Knp\Component\Pager\Paginator A Knp\Component\Pager\Paginator instance.
     */
    protected function getKnpPaginatorService()
    {
        $this->services['knp_paginator'] = $instance = new \Knp\Component\Pager\Paginator($this->get('event_dispatcher'));

        $instance->setDefaultPaginatorOptions(array('pageParameterName' => 'page', 'sortFieldParameterName' => 'sort', 'sortDirectionParameterName' => 'direction', 'filterFieldParameterName' => 'filterField', 'filterValueParameterName' => 'filterValue', 'distinct' => false));

        return $instance;
    }

    /**
     * Gets the 'knp_paginator.helper.processor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Knp\Bundle\PaginatorBundle\Helper\Processor A Knp\Bundle\PaginatorBundle\Helper\Processor instance.
     */
    protected function getKnpPaginator_Helper_ProcessorService()
    {
        return $this->services['knp_paginator.helper.processor'] = new \Knp\Bundle\PaginatorBundle\Helper\Processor($this->get('templating.helper.router'), $this->get('translator.default'));
    }

    /**
     * Gets the 'knp_paginator.subscriber.filtration' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Knp\Component\Pager\Event\Subscriber\Filtration\FiltrationSubscriber A Knp\Component\Pager\Event\Subscriber\Filtration\FiltrationSubscriber instance.
     */
    protected function getKnpPaginator_Subscriber_FiltrationService()
    {
        return $this->services['knp_paginator.subscriber.filtration'] = new \Knp\Component\Pager\Event\Subscriber\Filtration\FiltrationSubscriber();
    }

    /**
     * Gets the 'knp_paginator.subscriber.paginate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Knp\Component\Pager\Event\Subscriber\Paginate\PaginationSubscriber A Knp\Component\Pager\Event\Subscriber\Paginate\PaginationSubscriber instance.
     */
    protected function getKnpPaginator_Subscriber_PaginateService()
    {
        return $this->services['knp_paginator.subscriber.paginate'] = new \Knp\Component\Pager\Event\Subscriber\Paginate\PaginationSubscriber();
    }

    /**
     * Gets the 'knp_paginator.subscriber.sliding_pagination' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Knp\Bundle\PaginatorBundle\Subscriber\SlidingPaginationSubscriber A Knp\Bundle\PaginatorBundle\Subscriber\SlidingPaginationSubscriber instance.
     */
    protected function getKnpPaginator_Subscriber_SlidingPaginationService()
    {
        return $this->services['knp_paginator.subscriber.sliding_pagination'] = new \Knp\Bundle\PaginatorBundle\Subscriber\SlidingPaginationSubscriber(array('defaultPaginationTemplate' => 'OroUIBundle::pager.html.twig', 'defaultSortableTemplate' => 'KnpPaginatorBundle:Pagination:sortable_link.html.twig', 'defaultFiltrationTemplate' => 'KnpPaginatorBundle:Pagination:filtration.html.twig', 'defaultPageRange' => 5));
    }

    /**
     * Gets the 'knp_paginator.subscriber.sortable' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Knp\Component\Pager\Event\Subscriber\Sortable\SortableSubscriber A Knp\Component\Pager\Event\Subscriber\Sortable\SortableSubscriber instance.
     */
    protected function getKnpPaginator_Subscriber_SortableService()
    {
        return $this->services['knp_paginator.subscriber.sortable'] = new \Knp\Component\Pager\Event\Subscriber\Sortable\SortableSubscriber();
    }

    /**
     * Gets the 'knp_paginator.templating.helper.pagination' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Knp\Bundle\PaginatorBundle\Templating\PaginationHelper A Knp\Bundle\PaginatorBundle\Templating\PaginationHelper instance.
     */
    protected function getKnpPaginator_Templating_Helper_PaginationService()
    {
        return $this->services['knp_paginator.templating.helper.pagination'] = new \Knp\Bundle\PaginatorBundle\Templating\PaginationHelper($this->get('knp_paginator.helper.processor'), $this->get('debug.templating.engine.php'));
    }

    /**
     * Gets the 'knp_paginator.twig.extension.pagination' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Knp\Bundle\PaginatorBundle\Twig\Extension\PaginationExtension A Knp\Bundle\PaginatorBundle\Twig\Extension\PaginationExtension instance.
     */
    protected function getKnpPaginator_Twig_Extension_PaginationService()
    {
        return $this->services['knp_paginator.twig.extension.pagination'] = new \Knp\Bundle\PaginatorBundle\Twig\Extension\PaginationExtension($this->get('knp_paginator.helper.processor'));
    }

    /**
     * Gets the 'knp_voter_request' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Menu\Matcher\Voter\RequestVoter A Oro\Bundle\NavigationBundle\Menu\Matcher\Voter\RequestVoter instance.
     */
    protected function getKnpVoterRequestService()
    {
        return $this->services['knp_voter_request'] = new \Oro\Bundle\NavigationBundle\Menu\Matcher\Voter\RequestVoter();
    }

    /**
     * Gets the 'lexik_maintenance.driver.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Lexik\Bundle\MaintenanceBundle\Drivers\DriverFactory A Lexik\Bundle\MaintenanceBundle\Drivers\DriverFactory instance.
     */
    protected function getLexikMaintenance_Driver_FactoryService()
    {
        return $this->services['lexik_maintenance.driver.factory'] = new \Lexik\Bundle\MaintenanceBundle\Drivers\DriverFactory(new \Lexik\Bundle\MaintenanceBundle\Drivers\DatabaseDriver($this->get('doctrine', ContainerInterface::NULL_ON_INVALID_REFERENCE)), $this->get('translator.default'), array('class' => 'Lexik\\Bundle\\MaintenanceBundle\\Drivers\\FileDriver', 'options' => array('file_path' => '/var/www/orocrm-platform/app/cache/lock'), 'ttl' => NULL));
    }

    /**
     * Gets the 'lexik_maintenance.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Lexik\Bundle\MaintenanceBundle\Listener\MaintenanceListener A Lexik\Bundle\MaintenanceBundle\Listener\MaintenanceListener instance.
     */
    protected function getLexikMaintenance_ListenerService()
    {
        return $this->services['lexik_maintenance.listener'] = new \Lexik\Bundle\MaintenanceBundle\Listener\MaintenanceListener($this->get('lexik_maintenance.driver.factory'), 'maintenance|.*\\.js', NULL, NULL, array(), NULL, array());
    }

    /**
     * Gets the 'liip_imagine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Imagine\Gd\Imagine A Imagine\Gd\Imagine instance.
     */
    protected function getLiipImagineService()
    {
        return $this->services['liip_imagine'] = new \Imagine\Gd\Imagine();
    }

    /**
     * Gets the 'liip_imagine.cache.clearer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Liip\ImagineBundle\Imagine\Cache\CacheClearer A Liip\ImagineBundle\Imagine\Cache\CacheClearer instance.
     */
    protected function getLiipImagine_Cache_ClearerService()
    {
        return $this->services['liip_imagine.cache.clearer'] = new \Liip\ImagineBundle\Imagine\Cache\CacheClearer($this->get('liip_imagine.cache.manager'), '/media/cache');
    }

    /**
     * Gets the 'liip_imagine.cache.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Liip\ImagineBundle\Imagine\Cache\CacheManager A Liip\ImagineBundle\Imagine\Cache\CacheManager instance.
     */
    protected function getLiipImagine_Cache_ManagerService()
    {
        $this->services['liip_imagine.cache.manager'] = $instance = new \Liip\ImagineBundle\Imagine\Cache\CacheManager($this->get('liip_imagine.filter.configuration'), $this->get('router'), '/var/www/orocrm-platform/app/../web', 'web_path');

        $instance->addResolver('web_path', $this->get('liip_imagine.cache.resolver.web_path'));
        $instance->addResolver('no_cache', $this->get('liip_imagine.cache.resolver.no_cache'));

        return $instance;
    }

    /**
     * Gets the 'liip_imagine.cache.resolver.no_cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Liip\ImagineBundle\Imagine\Cache\Resolver\NoCacheResolver A Liip\ImagineBundle\Imagine\Cache\Resolver\NoCacheResolver instance.
     */
    protected function getLiipImagine_Cache_Resolver_NoCacheService()
    {
        return $this->services['liip_imagine.cache.resolver.no_cache'] = new \Liip\ImagineBundle\Imagine\Cache\Resolver\NoCacheResolver($this->get('filesystem'));
    }

    /**
     * Gets the 'liip_imagine.cache.resolver.web_path' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Liip\ImagineBundle\Imagine\Cache\Resolver\WebPathResolver A Liip\ImagineBundle\Imagine\Cache\Resolver\WebPathResolver instance.
     */
    protected function getLiipImagine_Cache_Resolver_WebPathService()
    {
        $this->services['liip_imagine.cache.resolver.web_path'] = $instance = new \Liip\ImagineBundle\Imagine\Cache\Resolver\WebPathResolver($this->get('filesystem'));

        $instance->setBasePath('');
        $instance->setFolderPermissions(511);

        return $instance;
    }

    /**
     * Gets the 'liip_imagine.controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Liip\ImagineBundle\Controller\ImagineController A Liip\ImagineBundle\Controller\ImagineController instance.
     */
    protected function getLiipImagine_ControllerService()
    {
        return $this->services['liip_imagine.controller'] = new \Liip\ImagineBundle\Controller\ImagineController($this->get('liip_imagine.data.manager'), $this->get('liip_imagine.filter.manager'), $this->get('liip_imagine.cache.manager'));
    }

    /**
     * Gets the 'liip_imagine.data.loader.filesystem' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Liip\ImagineBundle\Imagine\Data\Loader\FileSystemLoader A Liip\ImagineBundle\Imagine\Data\Loader\FileSystemLoader instance.
     */
    protected function getLiipImagine_Data_Loader_FilesystemService()
    {
        return $this->services['liip_imagine.data.loader.filesystem'] = new \Liip\ImagineBundle\Imagine\Data\Loader\FileSystemLoader($this->get('liip_imagine'), array(), '/var/www/orocrm-platform/app/../web');
    }

    /**
     * Gets the 'liip_imagine.data.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Liip\ImagineBundle\Imagine\Data\DataManager A Liip\ImagineBundle\Imagine\Data\DataManager instance.
     */
    protected function getLiipImagine_Data_ManagerService()
    {
        $this->services['liip_imagine.data.manager'] = $instance = new \Liip\ImagineBundle\Imagine\Data\DataManager($this->get('liip_imagine.filter.configuration'), 'filesystem');

        $instance->addLoader('filesystem', $this->get('liip_imagine.data.loader.filesystem'));

        return $instance;
    }

    /**
     * Gets the 'liip_imagine.filter.configuration' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Liip\ImagineBundle\Imagine\Filter\FilterConfiguration A Liip\ImagineBundle\Imagine\Filter\FilterConfiguration instance.
     */
    protected function getLiipImagine_Filter_ConfigurationService()
    {
        return $this->services['liip_imagine.filter.configuration'] = new \Liip\ImagineBundle\Imagine\Filter\FilterConfiguration(array('avatar_med' => array('quality' => 95, 'filters' => array('thumbnail' => array('size' => array(0 => 58, 1 => 58), 'mode' => 'outbound'), 'strip' => array()), 'format' => NULL, 'cache' => NULL, 'data_loader' => NULL, 'controller_action' => NULL, 'route' => array())));
    }

    /**
     * Gets the 'liip_imagine.filter.loader.background' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Liip\ImagineBundle\Imagine\Filter\Loader\BackgroundFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\BackgroundFilterLoader instance.
     */
    protected function getLiipImagine_Filter_Loader_BackgroundService()
    {
        return $this->services['liip_imagine.filter.loader.background'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\BackgroundFilterLoader($this->get('liip_imagine'));
    }

    /**
     * Gets the 'liip_imagine.filter.loader.crop' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Liip\ImagineBundle\Imagine\Filter\Loader\CropFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\CropFilterLoader instance.
     */
    protected function getLiipImagine_Filter_Loader_CropService()
    {
        return $this->services['liip_imagine.filter.loader.crop'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\CropFilterLoader();
    }

    /**
     * Gets the 'liip_imagine.filter.loader.paste' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Liip\ImagineBundle\Imagine\Filter\Loader\PasteFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\PasteFilterLoader instance.
     */
    protected function getLiipImagine_Filter_Loader_PasteService()
    {
        return $this->services['liip_imagine.filter.loader.paste'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\PasteFilterLoader($this->get('liip_imagine'), '/var/www/orocrm-platform/app');
    }

    /**
     * Gets the 'liip_imagine.filter.loader.relative_resize' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Liip\ImagineBundle\Imagine\Filter\Loader\RelativeResizeFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\RelativeResizeFilterLoader instance.
     */
    protected function getLiipImagine_Filter_Loader_RelativeResizeService()
    {
        return $this->services['liip_imagine.filter.loader.relative_resize'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\RelativeResizeFilterLoader();
    }

    /**
     * Gets the 'liip_imagine.filter.loader.resize' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Liip\ImagineBundle\Imagine\Filter\Loader\ResizeFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\ResizeFilterLoader instance.
     */
    protected function getLiipImagine_Filter_Loader_ResizeService()
    {
        return $this->services['liip_imagine.filter.loader.resize'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\ResizeFilterLoader();
    }

    /**
     * Gets the 'liip_imagine.filter.loader.strip' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Liip\ImagineBundle\Imagine\Filter\Loader\StripFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\StripFilterLoader instance.
     */
    protected function getLiipImagine_Filter_Loader_StripService()
    {
        return $this->services['liip_imagine.filter.loader.strip'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\StripFilterLoader();
    }

    /**
     * Gets the 'liip_imagine.filter.loader.thumbnail' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Liip\ImagineBundle\Imagine\Filter\Loader\ThumbnailFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\ThumbnailFilterLoader instance.
     */
    protected function getLiipImagine_Filter_Loader_ThumbnailService()
    {
        return $this->services['liip_imagine.filter.loader.thumbnail'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\ThumbnailFilterLoader();
    }

    /**
     * Gets the 'liip_imagine.filter.loader.upscale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Liip\ImagineBundle\Imagine\Filter\Loader\UpscaleFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\UpscaleFilterLoader instance.
     */
    protected function getLiipImagine_Filter_Loader_UpscaleService()
    {
        return $this->services['liip_imagine.filter.loader.upscale'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\UpscaleFilterLoader();
    }

    /**
     * Gets the 'liip_imagine.filter.loader.watermark' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Liip\ImagineBundle\Imagine\Filter\Loader\WatermarkFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\WatermarkFilterLoader instance.
     */
    protected function getLiipImagine_Filter_Loader_WatermarkService()
    {
        return $this->services['liip_imagine.filter.loader.watermark'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\WatermarkFilterLoader($this->get('liip_imagine'), '/var/www/orocrm-platform/app');
    }

    /**
     * Gets the 'liip_imagine.filter.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Liip\ImagineBundle\Imagine\Filter\FilterManager A Liip\ImagineBundle\Imagine\Filter\FilterManager instance.
     */
    protected function getLiipImagine_Filter_ManagerService()
    {
        $this->services['liip_imagine.filter.manager'] = $instance = new \Liip\ImagineBundle\Imagine\Filter\FilterManager($this->get('liip_imagine.filter.configuration'));

        $instance->addLoader('relative_resize', $this->get('liip_imagine.filter.loader.relative_resize'));
        $instance->addLoader('resize', $this->get('liip_imagine.filter.loader.resize'));
        $instance->addLoader('thumbnail', $this->get('liip_imagine.filter.loader.thumbnail'));
        $instance->addLoader('crop', $this->get('liip_imagine.filter.loader.crop'));
        $instance->addLoader('paste', $this->get('liip_imagine.filter.loader.paste'));
        $instance->addLoader('watermark', $this->get('liip_imagine.filter.loader.watermark'));
        $instance->addLoader('background', $this->get('liip_imagine.filter.loader.background'));
        $instance->addLoader('strip', $this->get('liip_imagine.filter.loader.strip'));
        $instance->addLoader('upscale', $this->get('liip_imagine.filter.loader.upscale'));

        return $instance;
    }

    /**
     * Gets the 'liip_imagine.form.type.image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Liip\ImagineBundle\Form\Type\ImageType A Liip\ImagineBundle\Form\Type\ImageType instance.
     */
    protected function getLiipImagine_Form_Type_ImageService()
    {
        return $this->services['liip_imagine.form.type.image'] = new \Liip\ImagineBundle\Form\Type\ImageType();
    }

    /**
     * Gets the 'liip_imagine.routing.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Liip\ImagineBundle\Routing\ImagineLoader A Liip\ImagineBundle\Routing\ImagineLoader instance.
     */
    protected function getLiipImagine_Routing_LoaderService()
    {
        return $this->services['liip_imagine.routing.loader'] = new \Liip\ImagineBundle\Routing\ImagineLoader('liip_imagine.controller:filterAction', '/media/cache', array('avatar_med' => array('quality' => 95, 'filters' => array('thumbnail' => array('size' => array(0 => 58, 1 => 58), 'mode' => 'outbound'), 'strip' => array()), 'format' => NULL, 'cache' => NULL, 'data_loader' => NULL, 'controller_action' => NULL, 'route' => array())));
    }

    /**
     * Gets the 'liip_imagine.templating.helper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Liip\ImagineBundle\Templating\Helper\ImagineHelper A Liip\ImagineBundle\Templating\Helper\ImagineHelper instance.
     */
    protected function getLiipImagine_Templating_HelperService()
    {
        return $this->services['liip_imagine.templating.helper'] = new \Liip\ImagineBundle\Templating\Helper\ImagineHelper($this->get('liip_imagine.cache.manager'));
    }

    /**
     * Gets the 'locale_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\HttpKernel\EventListener\LocaleListener A Symfony\Component\HttpKernel\EventListener\LocaleListener instance.
     */
    protected function getLocaleListenerService()
    {
        $this->services['locale_listener'] = $instance = new \Symfony\Component\HttpKernel\EventListener\LocaleListener('en', $this->get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        $instance->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        return $instance;
    }

    /**
     * Gets the 'logger' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getLoggerService()
    {
        $this->services['logger'] = $instance = new \Symfony\Bridge\Monolog\Logger('app');

        $instance->pushHandler($this->get('monolog.handler.chromephp'));
        $instance->pushHandler($this->get('monolog.handler.firephp'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.handler.chromephp' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bridge\Monolog\Handler\ChromePhpHandler A Symfony\Bridge\Monolog\Handler\ChromePhpHandler instance.
     */
    protected function getMonolog_Handler_ChromephpService()
    {
        return $this->services['monolog.handler.chromephp'] = new \Symfony\Bridge\Monolog\Handler\ChromePhpHandler(200, true);
    }

    /**
     * Gets the 'monolog.handler.debug' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bridge\Monolog\Handler\DebugHandler A Symfony\Bridge\Monolog\Handler\DebugHandler instance.
     */
    protected function getMonolog_Handler_DebugService()
    {
        return $this->services['monolog.handler.debug'] = new \Symfony\Bridge\Monolog\Handler\DebugHandler(100, true);
    }

    /**
     * Gets the 'monolog.handler.firephp' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bridge\Monolog\Handler\FirePHPHandler A Symfony\Bridge\Monolog\Handler\FirePHPHandler instance.
     */
    protected function getMonolog_Handler_FirephpService()
    {
        return $this->services['monolog.handler.firephp'] = new \Symfony\Bridge\Monolog\Handler\FirePHPHandler(200, true);
    }

    /**
     * Gets the 'monolog.handler.main' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Monolog\Handler\StreamHandler A Monolog\Handler\StreamHandler instance.
     */
    protected function getMonolog_Handler_MainService()
    {
        return $this->services['monolog.handler.main'] = new \Monolog\Handler\StreamHandler('/var/www/orocrm-platform/app/logs/dev.log', 100, true);
    }

    /**
     * Gets the 'monolog.logger.batch' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_BatchService()
    {
        $this->services['monolog.logger.batch'] = $instance = new \Symfony\Bridge\Monolog\Logger('batch');

        $instance->pushHandler($this->get('monolog.handler.chromephp'));
        $instance->pushHandler($this->get('monolog.handler.firephp'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));
        $instance->pushHandler($this->get('oro_batch.logger.batch_log_handler'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.deprecation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_DeprecationService()
    {
        $this->services['monolog.logger.deprecation'] = $instance = new \Symfony\Bridge\Monolog\Logger('deprecation');

        $instance->pushHandler($this->get('monolog.handler.chromephp'));
        $instance->pushHandler($this->get('monolog.handler.firephp'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.doctrine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_DoctrineService()
    {
        $this->services['monolog.logger.doctrine'] = $instance = new \Symfony\Bridge\Monolog\Logger('doctrine');

        $instance->pushHandler($this->get('monolog.handler.chromephp'));
        $instance->pushHandler($this->get('monolog.handler.firephp'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.emergency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_EmergencyService()
    {
        $this->services['monolog.logger.emergency'] = $instance = new \Symfony\Bridge\Monolog\Logger('emergency');

        $instance->pushHandler($this->get('monolog.handler.chromephp'));
        $instance->pushHandler($this->get('monolog.handler.firephp'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.event' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_EventService()
    {
        $this->services['monolog.logger.event'] = $instance = new \Symfony\Bridge\Monolog\Logger('event');

        $instance->pushHandler($this->get('monolog.handler.chromephp'));
        $instance->pushHandler($this->get('monolog.handler.firephp'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.profiler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_ProfilerService()
    {
        $this->services['monolog.logger.profiler'] = $instance = new \Symfony\Bridge\Monolog\Logger('profiler');

        $instance->pushHandler($this->get('monolog.handler.chromephp'));
        $instance->pushHandler($this->get('monolog.handler.firephp'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.request' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_RequestService()
    {
        $this->services['monolog.logger.request'] = $instance = new \Symfony\Bridge\Monolog\Logger('request');

        $instance->pushHandler($this->get('monolog.handler.chromephp'));
        $instance->pushHandler($this->get('monolog.handler.firephp'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_RouterService()
    {
        $this->services['monolog.logger.router'] = $instance = new \Symfony\Bridge\Monolog\Logger('router');

        $instance->pushHandler($this->get('monolog.handler.chromephp'));
        $instance->pushHandler($this->get('monolog.handler.firephp'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.security' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_SecurityService()
    {
        $this->services['monolog.logger.security'] = $instance = new \Symfony\Bridge\Monolog\Logger('security');

        $instance->pushHandler($this->get('monolog.handler.chromephp'));
        $instance->pushHandler($this->get('monolog.handler.firephp'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.templating' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_TemplatingService()
    {
        $this->services['monolog.logger.templating'] = $instance = new \Symfony\Bridge\Monolog\Logger('templating');

        $instance->pushHandler($this->get('monolog.handler.chromephp'));
        $instance->pushHandler($this->get('monolog.handler.firephp'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'nelmio_api_doc.doc_comment_extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Nelmio\ApiDocBundle\Util\DocCommentExtractor A Nelmio\ApiDocBundle\Util\DocCommentExtractor instance.
     */
    protected function getNelmioApiDoc_DocCommentExtractorService()
    {
        return $this->services['nelmio_api_doc.doc_comment_extractor'] = new \Nelmio\ApiDocBundle\Util\DocCommentExtractor();
    }

    /**
     * Gets the 'nelmio_api_doc.event_listener.request' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Nelmio\ApiDocBundle\EventListener\RequestListener A Nelmio\ApiDocBundle\EventListener\RequestListener instance.
     */
    protected function getNelmioApiDoc_EventListener_RequestService()
    {
        return $this->services['nelmio_api_doc.event_listener.request'] = new \Nelmio\ApiDocBundle\EventListener\RequestListener($this->get('nelmio_api_doc.extractor.api_doc_extractor'), $this->get('nelmio_api_doc.formatter.html_formatter'), '_doc');
    }

    /**
     * Gets the 'nelmio_api_doc.extractor.api_doc_extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Nelmio\ApiDocBundle\Extractor\ApiDocExtractor A Nelmio\ApiDocBundle\Extractor\ApiDocExtractor instance.
     */
    protected function getNelmioApiDoc_Extractor_ApiDocExtractorService()
    {
        $a = $this->get('nelmio_api_doc.doc_comment_extractor');

        $this->services['nelmio_api_doc.extractor.api_doc_extractor'] = $instance = new \Nelmio\ApiDocBundle\Extractor\ApiDocExtractor($this, $this->get('router'), $this->get('annotation_reader'), $a, array(0 => new \Nelmio\ApiDocBundle\Extractor\Handler\FosRestHandler(), 1 => new \Nelmio\ApiDocBundle\Extractor\Handler\JmsSecurityExtraHandler(), 2 => new \Nelmio\ApiDocBundle\Extractor\Handler\SensioFrameworkExtraHandler(), 3 => new \Nelmio\ApiDocBundle\Extractor\Handler\PhpDocHandler($a)));

        $instance->addParser($this->get('nelmio_api_doc.parser.form_type_parser'));
        $instance->addParser($this->get('nelmio_api_doc.parser.validation_parser'));
        $instance->addParser($this->get('nelmio_api_doc.parser.jms_metadata_parser'));

        return $instance;
    }

    /**
     * Gets the 'nelmio_api_doc.form.extension.description_form_type_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Nelmio\ApiDocBundle\Form\Extension\DescriptionFormTypeExtension A Nelmio\ApiDocBundle\Form\Extension\DescriptionFormTypeExtension instance.
     */
    protected function getNelmioApiDoc_Form_Extension_DescriptionFormTypeExtensionService()
    {
        return $this->services['nelmio_api_doc.form.extension.description_form_type_extension'] = new \Nelmio\ApiDocBundle\Form\Extension\DescriptionFormTypeExtension();
    }

    /**
     * Gets the 'nelmio_api_doc.formatter.abstract_formatter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Nelmio\ApiDocBundle\Formatter\AbstractFormatter A Nelmio\ApiDocBundle\Formatter\AbstractFormatter instance.
     */
    protected function getNelmioApiDoc_Formatter_AbstractFormatterService()
    {
        return $this->services['nelmio_api_doc.formatter.abstract_formatter'] = new \Nelmio\ApiDocBundle\Formatter\AbstractFormatter();
    }

    /**
     * Gets the 'nelmio_api_doc.formatter.html_formatter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Nelmio\ApiDocBundle\Formatter\HtmlFormatter A Nelmio\ApiDocBundle\Formatter\HtmlFormatter instance.
     */
    protected function getNelmioApiDoc_Formatter_HtmlFormatterService()
    {
        $this->services['nelmio_api_doc.formatter.html_formatter'] = $instance = new \Nelmio\ApiDocBundle\Formatter\HtmlFormatter();

        $instance->setTemplatingEngine($this->get('templating'));
        $instance->setMotdTemplate('NelmioApiDocBundle::Components/motd.html.twig');
        $instance->setApiName('API documentation');
        $instance->setEnableSandbox(true);
        $instance->setEndpoint(NULL);
        $instance->setRequestFormatMethod('format_param');
        $instance->setDefaultRequestFormat('json');
        $instance->setAcceptType('');
        $instance->setBodyFormat('form');
        $instance->setAuthentication(NULL);

        return $instance;
    }

    /**
     * Gets the 'nelmio_api_doc.formatter.markdown_formatter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Nelmio\ApiDocBundle\Formatter\MarkdownFormatter A Nelmio\ApiDocBundle\Formatter\MarkdownFormatter instance.
     */
    protected function getNelmioApiDoc_Formatter_MarkdownFormatterService()
    {
        return $this->services['nelmio_api_doc.formatter.markdown_formatter'] = new \Nelmio\ApiDocBundle\Formatter\MarkdownFormatter();
    }

    /**
     * Gets the 'nelmio_api_doc.formatter.simple_formatter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Nelmio\ApiDocBundle\Formatter\SimpleFormatter A Nelmio\ApiDocBundle\Formatter\SimpleFormatter instance.
     */
    protected function getNelmioApiDoc_Formatter_SimpleFormatterService()
    {
        return $this->services['nelmio_api_doc.formatter.simple_formatter'] = new \Nelmio\ApiDocBundle\Formatter\SimpleFormatter();
    }

    /**
     * Gets the 'nelmio_api_doc.parser.form_type_parser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Nelmio\ApiDocBundle\Parser\FormTypeParser A Nelmio\ApiDocBundle\Parser\FormTypeParser instance.
     */
    protected function getNelmioApiDoc_Parser_FormTypeParserService()
    {
        return $this->services['nelmio_api_doc.parser.form_type_parser'] = new \Nelmio\ApiDocBundle\Parser\FormTypeParser($this->get('form.factory'));
    }

    /**
     * Gets the 'nelmio_api_doc.parser.jms_metadata_parser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Nelmio\ApiDocBundle\Parser\JmsMetadataParser A Nelmio\ApiDocBundle\Parser\JmsMetadataParser instance.
     */
    protected function getNelmioApiDoc_Parser_JmsMetadataParserService()
    {
        return $this->services['nelmio_api_doc.parser.jms_metadata_parser'] = new \Nelmio\ApiDocBundle\Parser\JmsMetadataParser($this->get('jms_serializer.metadata_factory'), $this->get('jms_serializer.naming_strategy'), $this->get('nelmio_api_doc.doc_comment_extractor'));
    }

    /**
     * Gets the 'nelmio_api_doc.parser.validation_parser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Nelmio\ApiDocBundle\Parser\ValidationParser A Nelmio\ApiDocBundle\Parser\ValidationParser instance.
     */
    protected function getNelmioApiDoc_Parser_ValidationParserService()
    {
        return $this->services['nelmio_api_doc.parser.validation_parser'] = new \Nelmio\ApiDocBundle\Parser\ValidationParser($this->get('validator.mapping.class_metadata_factory'));
    }

    /**
     * Gets the 'nelmio_api_doc.twig.extension.extra_markdown' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Nelmio\ApiDocBundle\Twig\Extension\MarkdownExtension A Nelmio\ApiDocBundle\Twig\Extension\MarkdownExtension instance.
     */
    protected function getNelmioApiDoc_Twig_Extension_ExtraMarkdownService()
    {
        return $this->services['nelmio_api_doc.twig.extension.extra_markdown'] = new \Nelmio\ApiDocBundle\Twig\Extension\MarkdownExtension();
    }

    /**
     * Gets the 'oro_address.address.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\AddressBundle\Entity\Manager\AddressManager A Oro\Bundle\AddressBundle\Entity\Manager\AddressManager instance.
     */
    protected function getOroAddress_Address_ManagerService()
    {
        return $this->services['oro_address.address.manager'] = new \Oro\Bundle\AddressBundle\Entity\Manager\AddressManager('Oro\\Bundle\\AddressBundle\\Entity\\Address', $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_address.address.provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\AddressBundle\Provider\AddressProvider A Oro\Bundle\AddressBundle\Provider\AddressProvider instance.
     */
    protected function getOroAddress_Address_ProviderService()
    {
        $this->services['oro_address.address.provider'] = $instance = new \Oro\Bundle\AddressBundle\Provider\AddressProvider();

        $instance->addStorage($this->get('oro_address.address.manager'));

        return $instance;
    }

    /**
     * Gets the 'oro_address.form.address' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroAddress_Form_AddressService()
    {
        return $this->services['oro_address.form.address'] = $this->get('form.factory')->createNamed('oro_address_form', 'oro_address', NULL);
    }

    /**
     * Gets the 'oro_address.form.handler.address' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\AddressBundle\Form\Handler\AddressHandler A Oro\Bundle\AddressBundle\Form\Handler\AddressHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_address.form.handler.address' service is requested while the 'request' scope is not active
     */
    protected function getOroAddress_Form_Handler_AddressService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_address.form.handler.address', 'request');
        }

        return $this->services['oro_address.form.handler.address'] = $this->scopedServices['request']['oro_address.form.handler.address'] = new \Oro\Bundle\AddressBundle\Form\Handler\AddressHandler($this->get('oro_address.form.address'), $this->get('request'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_address.form.listener.address' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\AddressBundle\Form\EventListener\AddressCountryAndRegionSubscriber A Oro\Bundle\AddressBundle\Form\EventListener\AddressCountryAndRegionSubscriber instance.
     */
    protected function getOroAddress_Form_Listener_AddressService()
    {
        return $this->services['oro_address.form.listener.address'] = new \Oro\Bundle\AddressBundle\Form\EventListener\AddressCountryAndRegionSubscriber($this->get('doctrine.orm.default_entity_manager'), $this->get('form.factory'));
    }

    /**
     * Gets the 'oro_address.form.type.address' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\AddressBundle\Form\Type\AddressType A Oro\Bundle\AddressBundle\Form\Type\AddressType instance.
     */
    protected function getOroAddress_Form_Type_AddressService()
    {
        return $this->services['oro_address.form.type.address'] = new \Oro\Bundle\AddressBundle\Form\Type\AddressType($this->get('oro_address.form.listener.address'));
    }

    /**
     * Gets the 'oro_address.form.type.country' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\AddressBundle\Form\Type\CountryType A Oro\Bundle\AddressBundle\Form\Type\CountryType instance.
     */
    protected function getOroAddress_Form_Type_CountryService()
    {
        return $this->services['oro_address.form.type.country'] = new \Oro\Bundle\AddressBundle\Form\Type\CountryType();
    }

    /**
     * Gets the 'oro_address.form.type.email' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\AddressBundle\Form\Type\EmailType A Oro\Bundle\AddressBundle\Form\Type\EmailType instance.
     */
    protected function getOroAddress_Form_Type_EmailService()
    {
        return $this->services['oro_address.form.type.email'] = new \Oro\Bundle\AddressBundle\Form\Type\EmailType();
    }

    /**
     * Gets the 'oro_address.form.type.phone' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\AddressBundle\Form\Type\PhoneType A Oro\Bundle\AddressBundle\Form\Type\PhoneType instance.
     */
    protected function getOroAddress_Form_Type_PhoneService()
    {
        return $this->services['oro_address.form.type.phone'] = new \Oro\Bundle\AddressBundle\Form\Type\PhoneType();
    }

    /**
     * Gets the 'oro_address.form.type.region' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\AddressBundle\Form\Type\RegionType A Oro\Bundle\AddressBundle\Form\Type\RegionType instance.
     */
    protected function getOroAddress_Form_Type_RegionService()
    {
        return $this->services['oro_address.form.type.region'] = new \Oro\Bundle\AddressBundle\Form\Type\RegionType();
    }

    /**
     * Gets the 'oro_address.form.type.typed_address' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\AddressBundle\Form\Type\TypedAddressType A Oro\Bundle\AddressBundle\Form\Type\TypedAddressType instance.
     */
    protected function getOroAddress_Form_Type_TypedAddressService()
    {
        return $this->services['oro_address.form.type.typed_address'] = new \Oro\Bundle\AddressBundle\Form\Type\TypedAddressType();
    }

    /**
     * Gets the 'oro_address.importexport.address_normalizer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\AddressBundle\ImportExport\Serializer\Normalizer\AddressNormalizer A Oro\Bundle\AddressBundle\ImportExport\Serializer\Normalizer\AddressNormalizer instance.
     */
    protected function getOroAddress_Importexport_AddressNormalizerService()
    {
        return $this->services['oro_address.importexport.address_normalizer'] = new \Oro\Bundle\AddressBundle\ImportExport\Serializer\Normalizer\AddressNormalizer();
    }

    /**
     * Gets the 'oro_address.importexport.address_type_normalizer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\AddressBundle\ImportExport\Serializer\Normalizer\AddressTypeNormalizer A Oro\Bundle\AddressBundle\ImportExport\Serializer\Normalizer\AddressTypeNormalizer instance.
     */
    protected function getOroAddress_Importexport_AddressTypeNormalizerService()
    {
        return $this->services['oro_address.importexport.address_type_normalizer'] = new \Oro\Bundle\AddressBundle\ImportExport\Serializer\Normalizer\AddressTypeNormalizer();
    }

    /**
     * Gets the 'oro_address.importexport.email_normalizer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\AddressBundle\ImportExport\Serializer\Normalizer\EmailNormalizer A Oro\Bundle\AddressBundle\ImportExport\Serializer\Normalizer\EmailNormalizer instance.
     */
    protected function getOroAddress_Importexport_EmailNormalizerService()
    {
        return $this->services['oro_address.importexport.email_normalizer'] = new \Oro\Bundle\AddressBundle\ImportExport\Serializer\Normalizer\EmailNormalizer();
    }

    /**
     * Gets the 'oro_address.importexport.phone_normalizer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\AddressBundle\ImportExport\Serializer\Normalizer\PhoneNormalizer A Oro\Bundle\AddressBundle\ImportExport\Serializer\Normalizer\PhoneNormalizer instance.
     */
    protected function getOroAddress_Importexport_PhoneNormalizerService()
    {
        return $this->services['oro_address.importexport.phone_normalizer'] = new \Oro\Bundle\AddressBundle\ImportExport\Serializer\Normalizer\PhoneNormalizer();
    }

    /**
     * Gets the 'oro_address.importexport.typed_address_normalizer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\AddressBundle\ImportExport\Serializer\Normalizer\TypedAddressNormalizer A Oro\Bundle\AddressBundle\ImportExport\Serializer\Normalizer\TypedAddressNormalizer instance.
     */
    protected function getOroAddress_Importexport_TypedAddressNormalizerService()
    {
        return $this->services['oro_address.importexport.typed_address_normalizer'] = new \Oro\Bundle\AddressBundle\ImportExport\Serializer\Normalizer\TypedAddressNormalizer($this->get('oro_address.importexport.address_normalizer'));
    }

    /**
     * Gets the 'oro_address.type.address_collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\AddressBundle\Form\Type\AddressCollectionType A Oro\Bundle\AddressBundle\Form\Type\AddressCollectionType instance.
     */
    protected function getOroAddress_Type_AddressCollectionService()
    {
        return $this->services['oro_address.type.address_collection'] = new \Oro\Bundle\AddressBundle\Form\Type\AddressCollectionType();
    }

    /**
     * Gets the 'oro_address.type.email_collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\AddressBundle\Form\Type\EmailCollectionType A Oro\Bundle\AddressBundle\Form\Type\EmailCollectionType instance.
     */
    protected function getOroAddress_Type_EmailCollectionService()
    {
        return $this->services['oro_address.type.email_collection'] = new \Oro\Bundle\AddressBundle\Form\Type\EmailCollectionType();
    }

    /**
     * Gets the 'oro_address.type.phone_collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\AddressBundle\Form\Type\PhoneCollectionType A Oro\Bundle\AddressBundle\Form\Type\PhoneCollectionType instance.
     */
    protected function getOroAddress_Type_PhoneCollectionService()
    {
        return $this->services['oro_address.type.phone_collection'] = new \Oro\Bundle\AddressBundle\Form\Type\PhoneCollectionType();
    }

    /**
     * Gets the 'oro_assetic.configuration' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\AsseticBundle\AssetsConfiguration A Oro\Bundle\AsseticBundle\AssetsConfiguration instance.
     */
    protected function getOroAssetic_ConfigurationService()
    {
        return $this->services['oro_assetic.configuration'] = new \Oro\Bundle\AsseticBundle\AssetsConfiguration($this->get('event_dispatcher'), array('css_debug_groups' => array(), 'css_debug_all' => false, 'css' => array('UI' => array(0 => 'bundles/oroui/css/less/main.less', 1 => 'bundles/oroui/css/all.css', 2 => 'bundles/oroui/lib/jstree/themes/default/style.css', 3 => 'bundles/oroui/css/jquery-ui.grid.css', 4 => 'bundles/oroui/lib/font-awesome/css/font-awesome.css'), 'address' => array(0 => 'bundles/oroaddress/css/less/address.less', 1 => 'bundles/oroaddress/css/address.css'), 'full-calendar' => array(0 => 'bundles/orocalendar/css/calendar.css', 1 => 'bundles/orocalendar/lib/fullcalendar/fullcalendar.css'), 'config' => array(0 => 'bundles/oroconfig/css/less/config.less'), 'dashboard' => array(0 => 'bundles/orodashboard/css/less/dashboard.less'), 'grids' => array(0 => 'bundles/orodatagrid/lib/backgrid/backgrid.css', 1 => 'bundles/orodatagrid/lib/backgrid/extensions/paginator/backgrid-paginator.css', 2 => 'bundles/orodatagrid/lib/multiselect/jquery.multiselect.css', 3 => 'bundles/orodatagrid/lib/multiselect/jquery.multiselect.filter.css', 4 => 'bundles/orodatagrid/css/oro.grid.css'), 'email' => array(0 => 'bundles/oroemail/css/style.css'), 'entityextend' => array(0 => 'bundles/oroentityextend/css/extend.css'), 'filters' => array(0 => 'bundles/orofilter/lib/multiselect/jquery.multiselect.css', 1 => 'bundles/orofilter/lib/multiselect/jquery.multiselect.filter.css', 2 => 'bundles/orofilter/css/oro.filter.css'), 'user' => array(0 => 'bundles/oronotification/css/translation-widget.css', 1 => 'bundles/orouser/css/jquery-ui-1.10.2.custom.css'), 'query_designer' => array(0 => 'bundles/oroquerydesigner/css/query-designer.css'), 'report' => array(0 => 'bundles/ororeport/css/report.css'), 'search' => array(0 => 'bundles/orosearch/css/search.css'), 'sidebar' => array(0 => 'bundles/orosidebar/css/sidebar.css', 1 => 'bundles/orosidebar/css/widget-add.css'), 'tags' => array(0 => 'bundles/orotag/css/tag-grid.css'), 'windows' => array(0 => 'bundles/orowindows/css/jquery.dialog.extended.css'))));
    }

    /**
     * Gets the 'oro_assetic.twig.extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\AsseticBundle\Twig\AsseticExtension A Oro\Bundle\AsseticBundle\Twig\AsseticExtension instance.
     */
    protected function getOroAssetic_Twig_ExtensionService()
    {
        return $this->services['oro_assetic.twig.extension'] = new \Oro\Bundle\AsseticBundle\Twig\AsseticExtension($this->get('oro_assetic.configuration'), $this->get('assetic.asset_factory'));
    }

    /**
     * Gets the 'oro_batch.connectors' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\BatchBundle\Connector\ConnectorRegistry A Oro\Bundle\BatchBundle\Connector\ConnectorRegistry instance.
     */
    protected function getOroBatch_ConnectorsService()
    {
        $a = $this->get('oro_importexport.reader.csv');

        $this->services['oro_batch.connectors'] = $instance = new \Oro\Bundle\BatchBundle\Connector\ConnectorRegistry($this->get('oro_batch.job_factory'), $this->get('oro_batch.step_factory'));

        $instance->addStepToJob('oro_importexport', 'export', 'entity_export_to_csv', 'Entity Export to CSV', 'export', 'Oro\\Bundle\\BatchBundle\\Step\\ItemStep', array('reader' => $this->get('oro_importexport.reader.entity'), 'processor' => $this->get('oro_importexport.processor.export_delegate'), 'writer' => $this->get('oro_importexport.writer.csv')), array());
        $instance->addStepToJob('oro_importexport', 'import_validation', 'entity_import_validation_from_csv', 'Entity Import Validation from CSV', 'import_validation', 'Oro\\Bundle\\BatchBundle\\Step\\ItemStep', array('reader' => $a, 'processor' => $this->get('oro_importexport.processor.import_validation_delegate'), 'writer' => $this->get('oro_importexport.writer.doctrine_clear')), array());
        $instance->addStepToJob('oro_importexport', 'import', 'entity_import_from_csv', 'Entity Import from CSV', 'import', 'Oro\\Bundle\\BatchBundle\\Step\\ItemStep', array('reader' => $a, 'processor' => $this->get('oro_importexport.processor.import_delegate'), 'writer' => $this->get('oro_importexport.writer.entity')), array());

        return $instance;
    }

    /**
     * Gets the 'oro_batch.job_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\BatchBundle\Job\JobFactory A Oro\Bundle\BatchBundle\Job\JobFactory instance.
     */
    protected function getOroBatch_JobFactoryService()
    {
        return $this->services['oro_batch.job_factory'] = new \Oro\Bundle\BatchBundle\Job\JobFactory($this->get('event_dispatcher'), $this->get('oro_batch.job_repository'));
    }

    /**
     * Gets the 'oro_batch.job_repository' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\BatchBundle\Job\DoctrineJobRepository A Oro\Bundle\BatchBundle\Job\DoctrineJobRepository instance.
     */
    protected function getOroBatch_JobRepositoryService()
    {
        return $this->services['oro_batch.job_repository'] = new \Oro\Bundle\BatchBundle\Job\DoctrineJobRepository($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_batch.logger.batch_log_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\BatchBundle\Monolog\Handler\BatchLogHandler A Oro\Bundle\BatchBundle\Monolog\Handler\BatchLogHandler instance.
     */
    protected function getOroBatch_Logger_BatchLogHandlerService()
    {
        return $this->services['oro_batch.logger.batch_log_handler'] = new \Oro\Bundle\BatchBundle\Monolog\Handler\BatchLogHandler('/var/www/orocrm-platform/app/logs/batch');
    }

    /**
     * Gets the 'oro_batch.logger_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\BatchBundle\EventListener\LoggerSubscriber A Oro\Bundle\BatchBundle\EventListener\LoggerSubscriber instance.
     */
    protected function getOroBatch_LoggerSubscriberService()
    {
        return $this->services['oro_batch.logger_subscriber'] = new \Oro\Bundle\BatchBundle\EventListener\LoggerSubscriber($this->get('monolog.logger.batch'));
    }

    /**
     * Gets the 'oro_batch.mail_notifier' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\BatchBundle\Notification\MailNotifier A Oro\Bundle\BatchBundle\Notification\MailNotifier instance.
     */
    protected function getOroBatch_MailNotifierService()
    {
        return $this->services['oro_batch.mail_notifier'] = new \Oro\Bundle\BatchBundle\Notification\MailNotifier($this->get('oro_batch.logger.batch_log_handler'), $this->get('security.context'), $this->get('twig'), $this->get('swiftmailer.mailer.default'), 'mailer@bap.com');
    }

    /**
     * Gets the 'oro_batch.notification_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\BatchBundle\EventListener\NotificationSubscriber A Oro\Bundle\BatchBundle\EventListener\NotificationSubscriber instance.
     */
    protected function getOroBatch_NotificationSubscriberService()
    {
        return $this->services['oro_batch.notification_subscriber'] = new \Oro\Bundle\BatchBundle\EventListener\NotificationSubscriber();
    }

    /**
     * Gets the 'oro_batch.set_job_execution_log_file_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\BatchBundle\EventListener\SetJobExecutionLogFileSubscriber A Oro\Bundle\BatchBundle\EventListener\SetJobExecutionLogFileSubscriber instance.
     */
    protected function getOroBatch_SetJobExecutionLogFileSubscriberService()
    {
        return $this->services['oro_batch.set_job_execution_log_file_subscriber'] = new \Oro\Bundle\BatchBundle\EventListener\SetJobExecutionLogFileSubscriber($this->get('oro_batch.logger.batch_log_handler'));
    }

    /**
     * Gets the 'oro_batch.step_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\BatchBundle\Step\StepFactory A Oro\Bundle\BatchBundle\Step\StepFactory instance.
     */
    protected function getOroBatch_StepFactoryService()
    {
        return $this->services['oro_batch.step_factory'] = new \Oro\Bundle\BatchBundle\Step\StepFactory($this->get('event_dispatcher'), $this->get('oro_batch.job_repository'));
    }

    /**
     * Gets the 'oro_calendar.calendar_connection.manager.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager A Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager instance.
     */
    protected function getOroCalendar_CalendarConnection_Manager_ApiService()
    {
        return $this->services['oro_calendar.calendar_connection.manager.api'] = new \Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager('Oro\\Bundle\\CalendarBundle\\Entity\\CalendarConnection', $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_calendar.calendar_event.form' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroCalendar_CalendarEvent_FormService()
    {
        return $this->services['oro_calendar.calendar_event.form'] = $this->get('form.factory')->createNamed('oro_calendar_event_form', 'oro_calendar_event');
    }

    /**
     * Gets the 'oro_calendar.calendar_event.form.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroCalendar_CalendarEvent_Form_ApiService()
    {
        return $this->services['oro_calendar.calendar_event.form.api'] = $this->get('form.factory')->createNamed(NULL, 'oro_calendar_event_api');
    }

    /**
     * Gets the 'oro_calendar.calendar_event.form.handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\CalendarBundle\Form\Handler\CalendarEventHandler A Oro\Bundle\CalendarBundle\Form\Handler\CalendarEventHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_calendar.calendar_event.form.handler' service is requested while the 'request' scope is not active
     */
    protected function getOroCalendar_CalendarEvent_Form_HandlerService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_calendar.calendar_event.form.handler', 'request');
        }

        return $this->services['oro_calendar.calendar_event.form.handler'] = $this->scopedServices['request']['oro_calendar.calendar_event.form.handler'] = new \Oro\Bundle\CalendarBundle\Form\Handler\CalendarEventHandler($this->get('oro_calendar.calendar_event.form'), $this->get('request'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_calendar.calendar_event.form.handler.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\CalendarBundle\Form\Handler\CalendarEventHandler A Oro\Bundle\CalendarBundle\Form\Handler\CalendarEventHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_calendar.calendar_event.form.handler.api' service is requested while the 'request' scope is not active
     */
    protected function getOroCalendar_CalendarEvent_Form_Handler_ApiService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_calendar.calendar_event.form.handler.api', 'request');
        }

        return $this->services['oro_calendar.calendar_event.form.handler.api'] = $this->scopedServices['request']['oro_calendar.calendar_event.form.handler.api'] = new \Oro\Bundle\CalendarBundle\Form\Handler\CalendarEventHandler($this->get('oro_calendar.calendar_event.form.api'), $this->get('request'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_calendar.calendar_event.form.type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\CalendarBundle\Form\Type\CalendarEventType A Oro\Bundle\CalendarBundle\Form\Type\CalendarEventType instance.
     */
    protected function getOroCalendar_CalendarEvent_Form_TypeService()
    {
        return $this->services['oro_calendar.calendar_event.form.type'] = new \Oro\Bundle\CalendarBundle\Form\Type\CalendarEventType();
    }

    /**
     * Gets the 'oro_calendar.calendar_event.form.type.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\CalendarBundle\Form\Type\CalendarEventApiType A Oro\Bundle\CalendarBundle\Form\Type\CalendarEventApiType instance.
     */
    protected function getOroCalendar_CalendarEvent_Form_Type_ApiService()
    {
        return $this->services['oro_calendar.calendar_event.form.type.api'] = new \Oro\Bundle\CalendarBundle\Form\Type\CalendarEventApiType();
    }

    /**
     * Gets the 'oro_calendar.calendar_event.manager.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager A Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager instance.
     */
    protected function getOroCalendar_CalendarEvent_Manager_ApiService()
    {
        return $this->services['oro_calendar.calendar_event.manager.api'] = new \Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager('Oro\\Bundle\\CalendarBundle\\Entity\\CalendarEvent', $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_calendar.format_converter.date_time.full_calendar' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\CalendarBundle\Converter\FullCalendarDateTimeFormatConverter A Oro\Bundle\CalendarBundle\Converter\FullCalendarDateTimeFormatConverter instance.
     */
    protected function getOroCalendar_FormatConverter_DateTime_FullCalendarService()
    {
        return $this->services['oro_calendar.format_converter.date_time.full_calendar'] = new \Oro\Bundle\CalendarBundle\Converter\FullCalendarDateTimeFormatConverter($this->get('oro_locale.formatter.date_time'));
    }

    /**
     * Gets the 'oro_calendar.provider.calendar_config' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\CalendarBundle\Provider\CalendarDateTimeConfigProvider A Oro\Bundle\CalendarBundle\Provider\CalendarDateTimeConfigProvider instance.
     */
    protected function getOroCalendar_Provider_CalendarConfigService()
    {
        return $this->services['oro_calendar.provider.calendar_config'] = new \Oro\Bundle\CalendarBundle\Provider\CalendarDateTimeConfigProvider($this->get('oro_locale.settings'));
    }

    /**
     * Gets the 'oro_calendar.reminders_sender' service.
     *
     * @return Oro\Bundle\CalendarBundle\Notification\RemindersSender A Oro\Bundle\CalendarBundle\Notification\RemindersSender instance.
     */
    protected function getOroCalendar_RemindersSenderService()
    {
        return new \Oro\Bundle\CalendarBundle\Notification\RemindersSender($this->get('doctrine.orm.default_entity_manager'), $this->get('oro_notification.email_processor'));
    }

    /**
     * Gets the 'oro_calendar.twig.dateformat' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\CalendarBundle\Twig\DateFormatExtension A Oro\Bundle\CalendarBundle\Twig\DateFormatExtension instance.
     */
    protected function getOroCalendar_Twig_DateformatService()
    {
        return $this->services['oro_calendar.twig.dateformat'] = new \Oro\Bundle\CalendarBundle\Twig\DateFormatExtension($this->get('oro_locale.formatter.date_time'));
    }

    /**
     * Gets the 'oro_config.config_definition_bag' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ConfigBundle\Config\ConfigDefinitionImmutableBag A Oro\Bundle\ConfigBundle\Config\ConfigDefinitionImmutableBag instance.
     */
    protected function getOroConfig_ConfigDefinitionBagService()
    {
        return $this->services['oro_config.config_definition_bag'] = new \Oro\Bundle\ConfigBundle\Config\ConfigDefinitionImmutableBag(array('oro_ui' => array('resolved' => true, 'application_name' => array('value' => 'ORO', 'scope' => 'app'), 'application_title' => array('value' => 'ORO Business Application Platform', 'scope' => 'app')), 'oro_locale' => array('resolved' => true, 'locale' => array('value' => 'en', 'scope' => 'app'), 'language' => array('value' => 'en', 'scope' => 'app'), 'country' => array('value' => 'US', 'scope' => 'app'), 'currency' => array('value' => 'USD', 'scope' => 'app'), 'timezone' => array('value' => 'UTC', 'scope' => 'app'), 'format_address_by_address_country' => array('value' => true, 'scope' => 'app'), 'qwerty' => array('value' => array(), 'scope' => 'app'), 'languages' => array('value' => array(0 => 'en_US', 1 => 'fr_FR', 2 => 'uk_UA'), 'scope' => 'app')), 'oro_navigation' => array('resolved' => true, 'maxItems' => array('value' => 20, 'scope' => 'app'), 'title_suffix' => array('value' => '', 'scope' => 'app'), 'title_delimiter' => array('value' => '-', 'scope' => 'app'), 'breadcrumb_menu' => array('value' => 'application_menu', 'scope' => 'app'))));
    }

    /**
     * Gets the 'oro_config.form.config_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ConfigBundle\Form\EventListener\ConfigSubscriber A Oro\Bundle\ConfigBundle\Form\EventListener\ConfigSubscriber instance.
     */
    protected function getOroConfig_Form_ConfigSubscriberService()
    {
        return $this->services['oro_config.form.config_subscriber'] = new \Oro\Bundle\ConfigBundle\Form\EventListener\ConfigSubscriber($this->get('oro_config.user'));
    }

    /**
     * Gets the 'oro_config.form.handler.config' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ConfigBundle\Form\Handler\ConfigHandler A Oro\Bundle\ConfigBundle\Form\Handler\ConfigHandler instance.
     */
    protected function getOroConfig_Form_Handler_ConfigService()
    {
        return $this->services['oro_config.form.handler.config'] = new \Oro\Bundle\ConfigBundle\Form\Handler\ConfigHandler($this->get('oro_config.global'));
    }

    /**
     * Gets the 'oro_config.global' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ConfigBundle\Config\ConfigManager A Oro\Bundle\ConfigBundle\Config\ConfigManager instance.
     */
    protected function getOroConfig_GlobalService()
    {
        return $this->services['oro_config.global'] = new \Oro\Bundle\ConfigBundle\Config\ConfigManager($this->get('doctrine.orm.default_entity_manager'), $this->get('oro_config.config_definition_bag'));
    }

    /**
     * Gets the 'oro_config.provider.system_configuration.form_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ConfigBundle\Provider\SystemConfigurationFormProvider A Oro\Bundle\ConfigBundle\Provider\SystemConfigurationFormProvider instance.
     */
    protected function getOroConfig_Provider_SystemConfiguration_FormProviderService()
    {
        return $this->services['oro_config.provider.system_configuration.form_provider'] = new \Oro\Bundle\ConfigBundle\Provider\SystemConfigurationFormProvider(array('groups' => array('platform' => array('title' => 'System configuration', 'icon' => 'icon-hdd'), 'general_setup' => array('title' => 'General setup'), 'localization' => array('title' => 'Localization', 'icon' => 'icon-flag'), 'locale_settings' => array('title' => 'Localization options')), 'fields' => array('oro_locale.locale' => array('type' => 'oro_locale', 'options' => array('label' => 'Locale', 'tooltip' => 'oro.locale.form.tooltip.locale', 'required' => true, 'constraints' => array(0 => array('NotBlank' => NULL))), 'priority' => 70), 'oro_locale.country' => array('type' => 'oro_locale_country', 'options' => array('label' => 'Location', 'tooltip' => 'oro.locale.form.tooltip.location', 'required' => true, 'constraints' => array(0 => array('NotBlank' => NULL))), 'priority' => 60), 'oro_locale.format_address_by_address_country' => array('type' => 'oro_config_checkbox', 'options' => array('label' => 'Format address by address country', 'tooltip' => 'oro.locale.form.tooltip.format_address_by_address_country', 'required' => true), 'priority' => 50), 'oro_locale.language' => array('type' => 'oro_locale', 'options' => array('label' => 'Default Language', 'tooltip' => 'oro.locale.form.tooltip.language', 'required' => true, 'constraints' => array(0 => array('NotBlank' => NULL))), 'priority' => 40), 'oro_locale.languages' => array('type' => 'oro_locale', 'options' => array('label' => 'Supported languages', 'tooltip' => 'oro.locale.form.tooltip.languages', 'required' => true, 'multiple' => true, 'constraints' => array(0 => array('NotBlank' => NULL))), 'priority' => 35), 'oro_locale.timezone' => array('type' => 'oro_locale_timezone', 'options' => array('label' => 'Timezone', 'tooltip' => 'oro.locale.form.tooltip.timezone', 'required' => true, 'constraints' => array(0 => array('NotBlank' => NULL))), 'priority' => 30), 'oro_locale.currency' => array('type' => 'oro_currency', 'options' => array('label' => 'Currency', 'tooltip' => 'oro.locale.form.tooltip.currency', 'required' => true, 'constraints' => array(0 => array('NotBlank' => NULL))), 'priority' => 20)), 'tree' => array('system_configuration' => array('platform' => array('children' => array('general_setup' => array('priority' => 255, 'children' => array('localization' => array('priority' => 254, 'children' => array('locale_settings' => array('priority' => 100, 'children' => array(0 => 'oro_locale.locale', 1 => 'oro_locale.country', 2 => 'oro_locale.format_address_by_address_country', 3 => 'oro_locale.language', 4 => 'oro_locale.languages', 5 => 'oro_locale.timezone', 6 => 'oro_locale.currency'))))))), 'priority' => 255)))), $this->get('form.factory'), $this->get('oro_security.security_facade'));
    }

    /**
     * Gets the 'oro_config.twig.config_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ConfigBundle\Twig\ConfigExtension A Oro\Bundle\ConfigBundle\Twig\ConfigExtension instance.
     */
    protected function getOroConfig_Twig_ConfigExtensionService()
    {
        return $this->services['oro_config.twig.config_extension'] = new \Oro\Bundle\ConfigBundle\Twig\ConfigExtension($this->get('oro_config.global'), array('Oro\\Bundle\\CalendarBundle\\Entity\\CalendarEvent' => array('icon_class' => 'icon-calendar', 'name' => 'oro.calendar.calendarevent.entity_label', 'description' => 'oro.calendar.calendarevent.entity_description'), 'Oro\\Bundle\\EmailBundle\\Entity\\Email' => array('icon_class' => 'icon-envelope', 'name' => 'oro.email.entity_label', 'description' => 'oro.email.entity_description'), 'Oro\\Bundle\\EmailBundle\\Entity\\EmailTemplate' => array('name' => 'oro.email.emailtemplate.entity_label', 'description' => 'oro.email.emailtemplate.entity_description'), 'Oro\\Bundle\\NotificationBundle\\Entity\\EmailNotification' => array('name' => 'oro.notification.emailnotification.entity_label', 'description' => 'oro.notification.emailnotification.entity_description'), 'Oro\\Bundle\\OrganizationBundle\\Entity\\BusinessUnit' => array('name' => 'oro.organization.businessunit.entity_label', 'description' => 'oro.organization.businessunit.entity_description'), 'Oro\\Bundle\\TagBundle\\Entity\\Tag' => array('icon_class' => 'icon-tag', 'name' => 'oro.tag.entity_label', 'description' => 'oro.tag.entity_description'), 'Oro\\Bundle\\UserBundle\\Entity\\User' => array('icon_class' => 'icon-user', 'name' => 'oro.user.entity_label', 'description' => 'oro.user.entity_description'), 'Oro\\Bundle\\UserBundle\\Entity\\Role' => array('icon_class' => 'icon-signal', 'name' => 'oro.user.role.entity_label', 'description' => 'oro.user.role.entity_description'), 'Oro\\Bundle\\UserBundle\\Entity\\Group' => array('icon_class' => 'icon-home', 'name' => 'oro.user.group.entity_label', 'description' => 'oro.user.group.entity_description')));
    }

    /**
     * Gets the 'oro_config.type.config_checkbox' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ConfigBundle\Form\Type\ConfigCheckbox A Oro\Bundle\ConfigBundle\Form\Type\ConfigCheckbox instance.
     */
    protected function getOroConfig_Type_ConfigCheckboxService()
    {
        return $this->services['oro_config.type.config_checkbox'] = new \Oro\Bundle\ConfigBundle\Form\Type\ConfigCheckbox();
    }

    /**
     * Gets the 'oro_config.type.form' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ConfigBundle\Form\Type\FormType A Oro\Bundle\ConfigBundle\Form\Type\FormType instance.
     */
    protected function getOroConfig_Type_FormService()
    {
        return $this->services['oro_config.type.form'] = new \Oro\Bundle\ConfigBundle\Form\Type\FormType($this->get('oro_config.form.config_subscriber'));
    }

    /**
     * Gets the 'oro_config.type.form_field' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ConfigBundle\Form\Type\FormFieldType A Oro\Bundle\ConfigBundle\Form\Type\FormFieldType instance.
     */
    protected function getOroConfig_Type_FormFieldService()
    {
        return $this->services['oro_config.type.form_field'] = new \Oro\Bundle\ConfigBundle\Form\Type\FormFieldType();
    }

    /**
     * Gets the 'oro_config.user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ConfigBundle\Config\UserConfigManager A Oro\Bundle\ConfigBundle\Config\UserConfigManager instance.
     */
    protected function getOroConfig_UserService()
    {
        $this->services['oro_config.user'] = $instance = new \Oro\Bundle\ConfigBundle\Config\UserConfigManager($this->get('doctrine.orm.default_entity_manager'), $this->get('oro_config.config_definition_bag'));

        $instance->setSecurity($this->get('security.context'));

        return $instance;
    }

    /**
     * Gets the 'oro_cron.job_daemon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\CronBundle\Job\Daemon A Oro\Bundle\CronBundle\Job\Daemon instance.
     */
    protected function getOroCron_JobDaemonService()
    {
        return $this->services['oro_cron.job_daemon'] = new \Oro\Bundle\CronBundle\Job\Daemon('/var/www/orocrm-platform/app', 5, 'dev');
    }

    /**
     * Gets the 'oro_cron.job_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\CronBundle\Entity\Manager\JobManager A Oro\Bundle\CronBundle\Entity\Manager\JobManager instance.
     */
    protected function getOroCron_JobManagerService()
    {
        return $this->services['oro_cron.job_manager'] = new \Oro\Bundle\CronBundle\Entity\Manager\JobManager($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_dashboard.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DashboardBundle\Manager A Oro\Bundle\DashboardBundle\Manager instance.
     */
    protected function getOroDashboard_ManagerService()
    {
        return $this->services['oro_dashboard.manager'] = new \Oro\Bundle\DashboardBundle\Manager(array('widgets' => array('my_calendar' => array('label' => 'Today calendar', 'route' => 'oro_calendar_dashboard_my_calendar', 'acl' => 'oro_calendar_view', 'route_parameters' => array('widget' => 'my_calendar')), 'quick_launchpad' => array('items' => array('settings' => array('label' => 'Settings', 'icon' => 'cogs', 'route' => 'oro_config_configuration_system', 'acl' => 'oro_config_system', 'route_parameters' => array())), 'route' => 'oro_dashboard_itemized_widget', 'route_parameters' => array('bundle' => 'OroDashboardBundle', 'name' => 'quickLaunchpad', 'widget' => 'quick_launchpad')), 'recent_emails' => array('label' => 'oro.dashboard.recent_emails.title', 'route' => 'oro_user_dashboard_recent_emails', 'acl' => 'oro_email_view', 'route_parameters' => array('widget' => 'recent_emails'))), 'dashboards' => array('main' => array('widgets' => array('quick_launchpad' => array(), 'my_calendar' => array(), 'recent_emails' => array()), 'label' => 'oro.dashboard.title.main')), 'default_dashboard' => 'main'), $this->get('oro_security.security_facade'));
    }

    /**
     * Gets the 'oro_dataaudit.dataaudit_grid_service' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataAuditBundle\EventListener\AuditGridListener A Oro\Bundle\DataAuditBundle\EventListener\AuditGridListener instance.
     */
    protected function getOroDataaudit_DataauditGridServiceService()
    {
        return $this->services['oro_dataaudit.dataaudit_grid_service'] = new \Oro\Bundle\DataAuditBundle\EventListener\AuditGridListener($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_dataaudit.event_listener.dataaudit_history_grid_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataAuditBundle\EventListener\AuditHistoryGridListener A Oro\Bundle\DataAuditBundle\EventListener\AuditHistoryGridListener instance.
     */
    protected function getOroDataaudit_EventListener_DataauditHistoryGridListenerService()
    {
        return $this->services['oro_dataaudit.event_listener.dataaudit_history_grid_listener'] = new \Oro\Bundle\DataAuditBundle\EventListener\AuditHistoryGridListener($this->get('oro_datagrid.datagrid.request_params'), array(0 => 'objectClass', 1 => 'objectId'));
    }

    /**
     * Gets the 'oro_dataaudit.listener.entity_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataAuditBundle\EventListener\EntitySubscriber A Oro\Bundle\DataAuditBundle\EventListener\EntitySubscriber instance.
     */
    protected function getOroDataaudit_Listener_EntitySubscriberService()
    {
        return $this->services['oro_dataaudit.listener.entity_subscriber'] = new \Oro\Bundle\DataAuditBundle\EventListener\EntitySubscriber($this->get('oro_dataaudit.loggable.loggable_manager'), new \Oro\Bundle\DataAuditBundle\Metadata\ExtendMetadataFactory(new \Oro\Bundle\DataAuditBundle\Metadata\Driver\AnnotationDriver($this->get('annotation_reader'))));
    }

    /**
     * Gets the 'oro_dataaudit.listener.kernel_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataAuditBundle\EventListener\KernelListener A Oro\Bundle\DataAuditBundle\EventListener\KernelListener instance.
     */
    protected function getOroDataaudit_Listener_KernelListenerService()
    {
        return $this->services['oro_dataaudit.listener.kernel_listener'] = new \Oro\Bundle\DataAuditBundle\EventListener\KernelListener($this->get('oro_dataaudit.loggable.loggable_manager'), $this->get('security.context'));
    }

    /**
     * Gets the 'oro_dataaudit.loggable.loggable_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataAuditBundle\Loggable\LoggableManager A Oro\Bundle\DataAuditBundle\Loggable\LoggableManager instance.
     */
    protected function getOroDataaudit_Loggable_LoggableManagerService()
    {
        return $this->services['oro_dataaudit.loggable.loggable_manager'] = new \Oro\Bundle\DataAuditBundle\Loggable\LoggableManager('Oro\\Bundle\\DataAuditBundle\\Entity\\Audit', $this->get('oro_entity_config.provider.dataaudit'));
    }

    /**
     * Gets the 'oro_dataaudit.twig.extension.auditable' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataAuditBundle\Twig\AuditableExtension A Oro\Bundle\DataAuditBundle\Twig\AuditableExtension instance.
     */
    protected function getOroDataaudit_Twig_Extension_AuditableService()
    {
        return $this->services['oro_dataaudit.twig.extension.auditable'] = new \Oro\Bundle\DataAuditBundle\Twig\AuditableExtension($this->get('oro_entity_config.provider.dataaudit'));
    }

    /**
     * Gets the 'oro_datagrid.configuration.provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataGridBundle\Provider\ConfigurationProvider A Oro\Bundle\DataGridBundle\Provider\ConfigurationProvider instance.
     */
    protected function getOroDatagrid_Configuration_ProviderService()
    {
        return $this->services['oro_datagrid.configuration.provider'] = new \Oro\Bundle\DataGridBundle\Provider\ConfigurationProvider(array('custom-entity-grid' => array('options' => array('entityHint' => 'entity'), 'source' => array('acl_resource' => NULL, 'type' => 'orm', 'query' => array('select' => array(0 => 'ce.id'), 'from' => array(0 => array('table' => 'OroEntityConfigBundle:EntityConfigModel', 'alias' => 'ce')))), 'columns' => NULL, 'properties' => array('id' => NULL, 'update_link' => array('type' => 'callback', 'callable' => '@oro_entity.event_listener.custom_entity_grid_subscriber->getLinkProperty', 'route' => 'oro_entity_update', 'params' => array(0 => 'id')), 'view_link' => array('type' => 'callback', 'callable' => '@oro_entity.event_listener.custom_entity_grid_subscriber->getLinkProperty', 'route' => 'oro_entity_view', 'params' => array(0 => 'id')), 'delete_link' => array('type' => 'callback', 'callable' => '@oro_entity.event_listener.custom_entity_grid_subscriber->getLinkProperty', 'route' => 'oro_entity_delete', 'params' => array(0 => 'id'))), 'actions' => array('view' => array('type' => 'navigate', 'label' => 'View', 'icon' => 'book', 'link' => 'view_link', 'rowAction' => true), 'update' => array('type' => 'navigate', 'label' => 'Update', 'icon' => 'edit', 'link' => 'update_link'), 'delete' => array('type' => 'delete', 'label' => 'Delete', 'icon' => 'trash', 'link' => 'delete_link')), 'sorters' => NULL, 'filters' => NULL), 'entity-relation-grid' => array('options' => array('entityHint' => 'entity', 'requireJSModules' => array(0 => 'oro/datagrid/column-form-listener'), 'columnListener' => array('dataField' => 'id', 'columnName' => 'assigned', 'selectors' => array('included' => '#appendRelation', 'excluded' => '#removeRelation'))), 'source' => array('acl_resource' => NULL, 'type' => 'orm', 'query' => array('select' => array(0 => 'ce.id'), 'from' => array(0 => array('table' => 'OroEntityConfigBundle:EntityConfigModel', 'alias' => 'ce')))), 'columns' => array('assigned' => array('frontend_type' => 'boolean', 'label' => 'Assigned', 'editable' => true)), 'properties' => array('id' => NULL), 'sorters' => array('columns' => array('assigned' => array('data_name' => 'assigned')), 'default' => array('assigned' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_DESC')), 'filters' => array('columns' => array('assigned' => array('type' => 'boolean', 'data_name' => 'assigned')))), 'jobs-grid' => array('source' => array('type' => 'orm', 'acl_resource' => 'oro_jobs', 'query' => array('select' => array(0 => 'j'), 'from' => array(0 => array('table' => 'JMSJobQueueBundle:Job', 'alias' => 'j')), 'where' => array('and' => array(0 => 'j.originalJob IS NULL')))), 'columns' => array('command' => array('label' => 'oro.cron.header.command', 'type' => 'twig', 'template' => 'OroCronBundle:Job:Datagrid/command.html.twig', 'frontend_type' => 'html'), 'state' => array('label' => 'oro.cron.header.state', 'type' => 'twig', 'template' => 'OroCronBundle:Job:Datagrid/state.html.twig', 'frontend_type' => 'html'), 'runtime' => array('label' => 'oro.cron.header.runtime'), 'memoryUsageReal' => array('label' => 'oro.cron.header.memory', 'type' => 'twig', 'template' => 'OroCronBundle:Job:Datagrid/memory.html.twig', 'frontend_type' => 'html'), 'createdAt' => array('label' => 'oro.cron.header.created', 'frontend_type' => 'datetime')), 'sorters' => array('columns' => array('command' => array('data_name' => 'j.command'), 'state' => array('data_name' => 'j.state'), 'runtime' => array('data_name' => 'j.runtime'), 'memoryUsageReal' => array('data_name' => 'j.memoryUsageReal'), 'createdAt' => array('data_name' => 'j.createdAt')), 'default' => array('createdAt' => 'DESC')), 'filters' => array('columns' => array('command' => array('type' => 'string', 'data_name' => 'j.command'), 'runtime' => array('type' => 'number', 'data_name' => 'j.runtime'), 'createdAt' => array('type' => 'datetime', 'data_name' => 'j.createdAt'))), 'properties' => array('id' => NULL, 'view_link' => array('type' => 'url', 'route' => 'oro_cron_job_view', 'params' => array(0 => 'id'))), 'actions' => array('view' => array('type' => 'navigate', 'label' => 'oro.cron.header.view', 'link' => 'view_link', 'icon' => 'user', 'acl_recource' => 'oro_jobs', 'rowAction' => true)), 'options' => array('entityHint' => 'job')), 'audit-grid' => array('options' => array('entityHint' => 'audit'), 'source' => array('acl_resource' => 'oro_dataaudit_history', 'type' => 'orm', 'query' => array('select' => array(0 => 'a.id', 1 => 'a.action', 2 => 'a.version', 3 => 'a.objectClass', 4 => 'a.objectName', 5 => 'a.objectId', 6 => 'a.data', 7 => 'a.loggedAt', 8 => 'CONCAT(   CONCAT(       CONCAT(u.firstName, \' \'),       CONCAT(u.lastName, \' \')   ),   CONCAT(\' - \', u.email) ) as author'), 'from' => array(0 => array('table' => 'OroDataAuditBundle:Audit', 'alias' => 'a')), 'join' => array('left' => array('user' => array('join' => 'a.user', 'alias' => 'u'))))), 'columns' => array('action' => array('label' => 'Action'), 'version' => array('label' => 'Version'), 'objectClass' => array('label' => 'Entity type', 'frontend_type' => 'select', 'choices' => '@oro_dataaudit.dataaudit_grid_service->getObjectClassOptions'), 'objectName' => array('label' => 'Entity name'), 'objectId' => array('label' => 'Entity id', 'frontend_type' => 'integer'), 'data' => array('label' => 'Data', 'type' => 'twig', 'template' => 'OroDataAuditBundle:Datagrid:Property/data.html.twig', 'frontend_type' => 'html'), 'author' => array('label' => 'Author'), 'loggedAt' => array('label' => 'Logged at', 'frontend_type' => 'datetime')), 'properties' => NULL, 'sorters' => array('columns' => array('action' => array('data_name' => 'a.action'), 'version' => array('data_name' => 'a.version'), 'objectClass' => array('data_name' => 'a.objectClass'), 'objectName' => array('data_name' => 'a.objectName'), 'objectId' => array('data_name' => 'a.objectId'), 'data' => array('data_name' => 'a.data'), 'author' => array('data_name' => 'author'), 'loggedAt' => array('data_name' => 'a.loggedAt')), 'default' => NULL), 'filters' => array('columns' => array('action' => array('type' => 'choice', 'data_name' => 'a.action', 'options' => array('field_options' => array('choices' => array('update' => 'Updated', 'create' => 'Created', 'remove' => 'Deleted')))), 'version' => array('type' => 'number', 'data_name' => 'a.version', 'enabled' => false), 'objectClass' => array('type' => 'choice', 'data_name' => 'a.objectClass', 'options' => array('field_options' => array('choices' => '@oro_dataaudit.dataaudit_grid_service->getObjectClassOptions'))), 'objectName' => array('type' => 'string', 'data_name' => 'a.objectName'), 'objectId' => array('type' => 'number', 'data_name' => 'a.objectId'), 'data' => array('type' => 'string', 'data_name' => 'a.data'), 'author' => array('type' => 'string', 'data_name' => 'author', 'filter_by_having' => true), 'loggedAt' => array('type' => 'datetime', 'data_name' => 'a.loggedAt', 'enabled' => false)))), 'audit-history-grid' => array('source' => array('acl_resource' => 'oro_dataaudit_history', 'type' => 'orm', 'query' => array('select' => array(0 => 'a.id', 1 => 'a.data as data', 2 => 'a.loggedAt', 3 => 'CONCAT(   CONCAT(       CONCAT(u.firstName, \' \'),       CONCAT(u.lastName, \' \')   ),   CONCAT(\' - \', u.email) ) as author'), 'from' => array(0 => array('table' => 'OroDataAuditBundle:Audit', 'alias' => 'a')), 'join' => array('left' => array('user' => array('join' => 'a.user', 'alias' => 'u'))), 'where' => array('and' => array(0 => 'a.objectClass = :objectClass AND a.objectId = :objectId')))), 'columns' => array('author' => array('label' => 'Author', 'type' => 'field', 'frontend_type' => 'string'), 'loggedAt' => array('label' => 'Logged at', 'type' => 'field', 'frontend_type' => 'datetime'), 'old' => array('label' => 'Old values', 'type' => 'twig', 'template' => 'OroDataAuditBundle:Datagrid:Property/old.html.twig', 'frontend_type' => 'html', 'data_name' => 'data'), 'new' => array('label' => 'New values', 'type' => 'twig', 'template' => 'OroDataAuditBundle:Datagrid:Property/new.html.twig', 'frontend_type' => 'html', 'data_name' => 'data')), 'properties' => NULL, 'sorters' => array('columns' => array('author' => array('data_name' => 'author'), 'loggedAt' => array('data_name' => 'a.loggedAt')), 'default' => array('loggedAt' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_DESC')), 'filters' => NULL), 'email-grid' => array('source' => array('acl_resource' => 'oro_email_view', 'type' => 'orm', 'query' => array('select' => array(0 => 'e', 1 => '@oro_email.datagrid_query_factory->getFromEmailExpression'), 'from' => array(0 => array('table' => 'OroEmailBundle:Email', 'alias' => 'e')), 'join' => array('inner' => array('from_email_address' => array('join' => 'e.fromEmailAddress', 'alias' => 'a'))))), 'columns' => array('fromEmailAddress' => array('type' => 'twig', 'label' => 'oro.email.from_name.label', 'frontend_type' => 'html', 'template' => 'OroEmailBundle:Email:Datagrid/Property/from.html.twig'), 'subject' => array('type' => 'twig', 'label' => 'oro.email.subject.label', 'frontend_type' => 'html', 'template' => 'OroEmailBundle:Email:Datagrid/Property/subject.html.twig'), 'sentAt' => array('label' => 'oro.email.sent_at.label', 'frontend_type' => 'datetime'), 'recipients' => array('type' => 'twig', 'label' => 'oro.email.recipients.label', 'frontend_type' => 'html', 'template' => 'OroEmailBundle:Email:Datagrid/Property/recipients.html.twig')), 'properties' => array('id' => NULL), 'sorters' => array('columns' => array('subject' => array('data_name' => 'e.subject'), 'sentAt' => array('data_name' => 'e.sentAt')), 'default' => array('sentAt' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_DESC')), 'filters' => array('columns' => array('fromEmailAddress' => array('type' => 'string', 'data_name' => 'a.email'), 'subject' => array('type' => 'string', 'data_name' => 'e.subject'), 'sentAt' => array('type' => 'datetime', 'data_name' => 'e.sentAt'))), 'options' => array('entityHint' => 'email')), 'email-templates' => array('source' => array('type' => 'orm', 'acl_resource' => 'oro_email_emailtemplate_index', 'query' => array('select' => array(0 => 't.id', 1 => 't.entityName', 2 => 't.name', 3 => 't.type', 4 => 't.isSystem'), 'from' => array(0 => array('table' => 'Oro\\Bundle\\EmailBundle\\Entity\\EmailTemplate', 'alias' => 't')))), 'columns' => array('entityName' => array('type' => 'twig', 'frontend_type' => 'html', 'label' => 'oro.email.emailtemplate.entity_name.label', 'template' => 'OroNotificationBundle:EmailNotification:Datagrid/Property/entityName.html.twig'), 'name' => array('label' => 'oro.email.emailtemplate.name.label'), 'type' => array('frontend_type' => 'select', 'label' => 'oro.email.emailtemplate.type.label', 'choices' => '@oro_email.emailtemplate.datagrid_helper->getTypeChoices'), 'isSystem' => array('frontend_type' => 'select', 'label' => 'oro.email.emailtemplate.is_system.label', 'choices' => '@oro_email.emailtemplate.datagrid_helper->getSystemChoices')), 'properties' => array('id' => NULL, 'update_link' => array('type' => 'url', 'route' => 'oro_email_emailtemplate_update', 'params' => array(0 => 'id')), 'clone_link' => array('type' => 'url', 'route' => 'oro_email_emailtemplate_clone', 'params' => array(0 => 'id')), 'delete_link' => array('type' => 'url', 'route' => 'oro_api_delete_emailtemplate', 'params' => array(0 => 'id'))), 'filters' => array('columns' => array('entityName' => array('type' => 'choice', 'data_name' => 't.entityName', 'options' => array('translation_domain' => 'config', 'field_options' => array('multiple' => true, 'choices' => '@oro_email.emailtemplate.datagrid_helper->getEntityNameChoices'))), 'name' => array('type' => 'string', 'data_name' => 't.name'), 'type' => array('type' => 'choice', 'data_name' => 't.type', 'options' => array('field_options' => array('choices' => '@oro_email.emailtemplate.datagrid_helper->getTypeChoices'))), 'isSystem' => array('type' => 'boolean', 'data_name' => 't.isSystem'))), 'sorters' => array('columns' => array('name' => array('data_name' => 't.name'), 'type' => array('data_name' => 't.type'), 'isSystem' => array('data_name' => 't.isSystem'))), 'actions' => array('update' => array('type' => 'navigate', 'label' => 'oro.email.datagrid.emailtemplate.action.update', 'link' => 'update_link', 'icon' => 'edit', 'acl_resource' => 'oro_email_emailtemplate_update', 'rowAction' => true), 'clone' => array('type' => 'navigate', 'label' => 'oro.email.datagrid.emailtemplate.action.clone', 'link' => 'clone_link', 'icon' => 'share', 'acl_resource' => 'oro_email_emailtemplate_create'), 'delete' => array('type' => 'delete', 'label' => 'oro.email.datagrid.emailtemplate.action.delete', 'acl_resource' => 'oro_email_emailtemplate_remove', 'icon' => 'trash', 'link' => 'delete_link')), 'action_configuration' => '@oro_email.emailtemplate.datagrid_helper->getActionConfigurationClosure', 'views_list' => '@oro_email.emailtemplate.datagrid_view_list', 'options' => array('entityHint' => 'email template')), 'entityconfig-grid' => array('options' => array('entityHint' => 'entity', 'toolbarOptions' => array('pageSize' => array('default_per_page' => 50))), 'source' => array('acl_resource' => 'oro_entityconfig_manage', 'type' => 'orm', 'query' => array('select' => array(0 => 'ce.id', 1 => 'ce.className', 2 => 'ce.updated', 3 => 'ce.mode'), 'from' => array(0 => array('table' => 'OroEntityConfigBundle:EntityConfigModel', 'alias' => 'ce')), 'where' => array('and' => array(0 => 'ce.mode <> \'Oro\\Bundle\\EntityConfigBundle\\Config\\ConfigModelManager::MODE_HIDDEN\'')))), 'columns' => array('name' => array('label' => 'Name', 'data_name' => 'className', 'frontend_type' => 'select', 'choices' => '@oro_entity_config.event_listener.entityconfig_grid_listener->getChoicesName'), 'module' => array('label' => 'Module', 'data_name' => 'className', 'frontend_type' => 'select', 'choices' => '@oro_entity_config.event_listener.entityconfig_grid_listener->getChoicesModule'), 'updated' => array('label' => 'Update at', 'frontend_type' => 'datetime')), 'properties' => array('id' => NULL, 'update_link' => array('type' => 'url', 'route' => 'oro_entityconfig_update', 'params' => array(0 => 'id')), 'view_link' => array('type' => 'url', 'route' => 'oro_entityconfig_view', 'params' => array(0 => 'id'))), 'actions' => array('view' => array('type' => 'navigate', 'label' => 'View', 'icon' => 'book', 'link' => 'view_link', 'rowAction' => true), 'update' => array('type' => 'navigate', 'label' => 'Update', 'icon' => 'edit', 'link' => 'update_link')), 'sorters' => array('columns' => array('name' => array('data_name' => 'ce.className'), 'module' => array('data_name' => 'ce.className'), 'updated' => array('data_name' => 'ce.updated'))), 'filters' => array('columns' => array('name' => array('type' => 'choice', 'data_name' => 'ce.className', 'options' => array('field_options' => array('multiple' => true, 'choices' => '@oro_entity_config.event_listener.entityconfig_grid_listener->getChoicesName'))), 'module' => array('type' => 'choice', 'data_name' => 'ce.className', 'options' => array('field_options' => array('multiple' => true, 'choices' => '@oro_entity_config.event_listener.entityconfig_grid_listener->getChoicesModule'))), 'updated' => array('type' => 'datetime', 'data_name' => 'ce.updated')))), 'entityfields-grid' => array('options' => array('entityHint' => 'fields', 'toolbarOptions' => array('pageSize' => array('default_per_page' => 50))), 'source' => array('acl_resource' => 'oro_entityconfig_manage', 'type' => 'orm', 'query' => array('select' => array(0 => 'cf.id', 1 => 'ce.className', 2 => 'cf.fieldName', 3 => 'cf.type', 4 => 'cf.mode'), 'from' => array(0 => array('table' => 'OroEntityConfigBundle:FieldConfigModel', 'alias' => 'cf')))), 'columns' => array('fieldName' => array('label' => 'Name', 'frontend_type' => 'string'), 'type' => array('label' => 'Data Type', 'frontend_type' => 'string')), 'properties' => array('update_link' => array('type' => 'url', 'route' => 'oro_entityconfig_field_update', 'params' => array(0 => 'id'))), 'actions' => array('update' => array('type' => 'navigate', 'label' => 'Edit', 'icon' => 'edit', 'link' => 'update_link', 'rowAction' => true)), 'sorters' => array('columns' => array('fieldName' => array('data_name' => 'cf.fieldName'), 'type' => array('data_name' => 'cf.type'))), 'filters' => NULL), 'entity-audit-grid' => array('options' => array('entityHint' => 'history'), 'source' => array('acl_resource' => 'oro_entityconfig_manage', 'type' => 'orm', 'query' => array('select' => array(0 => 'log', 1 => 'CONCAT(   CONCAT(       CONCAT(u.firstName, \' \'),       CONCAT(u.lastName, \' \')   ),   CONCAT(\' - \', u.email) ) as author'), 'from' => array(0 => array('table' => 'OroEntityConfigBundle:ConfigLog', 'alias' => 'log')), 'join' => array('left' => array('user' => array('join' => 'log.user', 'alias' => 'u')), 'inner' => array('diffs' => array('join' => 'log.diffs', 'alias' => 'diff', 'conditionType' => 'WITH'))))), 'columns' => array('author' => array('label' => 'Author', 'type' => 'field', 'frontend_type' => 'string'), 'diffs' => array('label' => 'Diffs', 'type' => 'twig', 'template' => 'OroEntityConfigBundle:Audit:data.html.twig', 'frontend_type' => 'html', 'context' => array('config_manager' => '@oro_entity_config.config_manager')), 'loggedAt' => array('label' => 'Logged at', 'type' => 'field', 'frontend_type' => 'datetime')), 'sorters' => array('columns' => array('author' => array('data_name' => 'author'), 'loggedAt' => array('data_name' => 'log.loggedAt')), 'default' => array('loggedAt' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_DESC'))), 'audit-log-grid' => array('extend' => 'entity-audit-grid', 'source' => array('query' => array('join' => array('inner' => array('diffs' => array('condition' => 'diff.className = :objectClass AND diff.fieldName IS NULL'))))), 'columns' => array('diffs' => array('context' => array('is_entity' => true)))), 'auditfield-log-grid' => array('extend' => 'entity-audit-grid', 'source' => array('query' => array('join' => array('inner' => array('diffs' => array('condition' => 'diff.className = :objectClass AND diff.fieldName = :fieldName'))))), 'columns' => array('diffs' => array('context' => array('is_entity' => false, 'field_name' => NULL)))), 'channels-grid' => array('source' => array('type' => 'orm', 'acl_resource' => 'oro_integration_channel_index', 'query' => array('select' => array(0 => 'c.id', 1 => 'c.name', 2 => 'c.type'), 'from' => array(0 => array('table' => 'Oro\\Bundle\\IntegrationBundle\\Entity\\Channel', 'alias' => 'c')))), 'columns' => array('name' => array('label' => 'oro.integration.channel.name.label'), 'type' => array('label' => 'oro.integration.channel.type.label', 'frontend_type' => 'select', 'choices' => '@oro_integration.manager.types_registry->getAvailableChannelTypesChoiceList')), 'properties' => array('id' => NULL, 'update_link' => array('type' => 'url', 'route' => 'oro_integration_channel_update', 'params' => array(0 => 'id')), 'delete_link' => array('type' => 'url', 'route' => 'oro_api_delete_channel', 'params' => array(0 => 'id'))), 'sorters' => array('columns' => array('name' => array('data_name' => 'c.name'), 'type' => array('data_name' => 'c.type'))), 'filters' => array('columns' => array('name' => array('data_name' => 'c.name', 'type' => 'string'), 'type' => array('data_name' => 'c.type', 'type' => 'choice', 'options' => array('field_options' => array('choices' => '@oro_integration.manager.types_registry->getAvailableChannelTypesChoiceList'))))), 'actions' => array('update' => array('type' => 'navigate', 'link' => 'update_link', 'acl_resource' => 'oro_integration_channel_update', 'icon' => 'edit', 'label' => 'oro.integration.datagrid.action.update', 'rowAction' => true), 'delete' => array('type' => 'delete', 'link' => 'delete_link', 'acl_resource' => 'oro_integration_channel_delete', 'icon' => 'trash', 'label' => 'oro.integration.datagrid.action.delete')), 'options' => array('entityHint' => 'channel')), 'email-notification-grid' => array('options' => array('entityHint' => 'transactional email'), 'source' => array('acl_resource' => 'oro_notification_emailnotification_view', 'type' => 'orm', 'query' => array('select' => array(0 => 'e', 1 => 'event.name as eventName', 2 => 'recipientList.owner as ownerRecipient', 3 => 'recipientList.email as emailRecipient', 4 => 'template.name as templateName'), 'from' => array(0 => array('table' => 'OroNotificationBundle:EmailNotification', 'alias' => 'e')), 'join' => array('left' => array(0 => array('join' => 'e.event', 'alias' => 'event'), 1 => array('join' => 'e.template', 'alias' => 'template'), 2 => array('join' => 'e.recipientList', 'alias' => 'recipientList'), 3 => array('join' => 'recipientList.users', 'alias' => 'recipientUsersList'), 4 => array('join' => 'recipientList.groups', 'alias' => 'recipientGroupsList'))))), 'columns' => array('entityName' => array('label' => 'oro.notification.emailnotification.entity_name.label', 'data_name' => 'entityName', 'type' => 'twig', 'template' => 'OroNotificationBundle:EmailNotification:Datagrid/Property/entityName.html.twig', 'frontend_type' => 'html', 'choices' => '@oro_notification.event_listener.email_notification_service->getEntityNameChoices'), 'eventName' => array('label' => 'oro.notification.emailnotification.event.label', 'type' => 'translatable', 'choices' => '@oro_notification.event_listener.email_notification_service->getEventNameChoices'), 'templateName' => array('label' => 'oro.notification.emailnotification.template.label'), 'recipientUsersList' => array('label' => 'oro.notification.datagrid.recipient.user', 'type' => 'twig', 'template' => 'OroNotificationBundle:EmailNotification:Datagrid/Property/recipientUsersList.html.twig', 'frontend_type' => 'html'), 'recipientGroupsList' => array('label' => 'oro.notification.datagrid.recipient.group', 'type' => 'twig', 'template' => 'OroNotificationBundle:EmailNotification:Datagrid/Property/recipientGroupsList.html.twig', 'choices' => '@oro_notification.event_listener.email_notification_service->getRecipientGroupsChoices', 'frontend_type' => 'html'), 'emailRecipient' => array('label' => 'oro.notification.datagrid.recipient.custom_email', 'frontend_type' => 'string'), 'ownerRecipient' => array('label' => 'oro.notification.datagrid.recipient.owner', 'frontend_type' => 'boolean')), 'properties' => array('id' => NULL, 'update_link' => array('type' => 'url', 'route' => 'oro_notification_emailnotification_update', 'params' => array(0 => 'id')), 'delete_link' => array('type' => 'url', 'route' => 'oro_api_delete_emailnotication', 'params' => array(0 => 'id'))), 'actions' => array('update' => array('type' => 'navigate', 'label' => 'Update', 'acl_resource' => 'oro_notification_emailnotification_update', 'icon' => 'edit', 'link' => 'update_link', 'rowAction' => true), 'delete' => array('type' => 'delete', 'label' => 'Delete', 'acl_resource' => 'oro_notification_emailnotification_remove', 'icon' => 'trash', 'link' => 'delete_link')), 'sorters' => NULL, 'filters' => array('columns' => array('entityName' => array('type' => 'choice', 'data_name' => 'e.entityName', 'options' => array('translation_domain' => 'config', 'field_options' => array('multiple' => true, 'choices' => '@oro_notification.event_listener.email_notification_service->getEntityNameChoices'))), 'eventName' => array('type' => 'choice', 'data_name' => 'eventName', 'options' => array('field_options' => array('multiple' => true, 'choices' => '@oro_notification.event_listener.email_notification_service->getEventNameChoices'))), 'templateName' => array('type' => 'string', 'data_name' => 'template.name'), 'recipientUsersList' => array('type' => 'choice', 'data_name' => 'recipientUsersList', 'options' => array('field_options' => array('multiple' => true, 'choices' => '@oro_notification.event_listener.email_notification_service->getRecipientUsersChoices'))), 'recipientGroupsList' => array('type' => 'choice', 'data_name' => 'recipientGroupsList', 'options' => array('field_options' => array('multiple' => true, 'choices' => '@oro_notification.event_listener.email_notification_service->getRecipientGroupsChoices'))), 'emailRecipient' => array('type' => 'string', 'data_name' => 'emailRecipient'), 'ownerRecipient' => array('type' => 'boolean', 'data_name' => 'ownerRecipient')))), 'business-unit-grid' => array('options' => array('entityHint' => 'business unit'), 'source' => array('acl_resource' => 'oro_business_unit_view', 'type' => 'orm', 'query' => array('select' => array(0 => 'u.id', 1 => 'u.name', 2 => 'u.email', 3 => 'u.phone', 4 => 'u.createdAt', 5 => 'owner.name as ownerName', 6 => 'organization.name as organizationName'), 'from' => array(0 => array('table' => 'OroOrganizationBundle:BusinessUnit', 'alias' => 'u')), 'join' => array('left' => array('organization' => array('join' => 'u.organization', 'alias' => 'organization'), 'owner' => array('join' => 'u.owner', 'alias' => 'owner'))))), 'columns' => array('name' => array('label' => 'oro.organization.businessunit.name.label'), 'email' => array('label' => 'oro.organization.businessunit.email.label'), 'phone' => array('label' => 'oro.organization.businessunit.phone.label'), 'ownerName' => array('label' => 'oro.organization.businessunit.owner.label'), 'organizationName' => array('label' => 'oro.organization.entity_label'), 'createdAt' => array('label' => 'oro.organization.businessunit.created_at.label', 'frontend_type' => 'datetime')), 'properties' => array('id' => NULL, 'update_link' => array('type' => 'url', 'route' => 'oro_business_unit_update', 'params' => array(0 => 'id')), 'view_link' => array('type' => 'url', 'route' => 'oro_business_unit_view', 'params' => array(0 => 'id')), 'delete_link' => array('type' => 'url', 'route' => 'oro_api_delete_businessunit', 'params' => array(0 => 'id'))), 'actions' => array('view' => array('type' => 'navigate', 'label' => 'oro.business_unit.datagrid.action.view', 'link' => 'view_link', 'icon' => 'user', 'acl_resource' => 'oro_business_unit_view', 'rowAction' => true), 'update' => array('type' => 'navigate', 'label' => 'oro.business_unit.datagrid.action.update', 'link' => 'update_link', 'icon' => 'edit', 'acl_resource' => 'oro_business_unit_update'), 'delete' => array('type' => 'delete', 'label' => 'oro.business_unit.datagrid.action.delete', 'link' => 'delete_link', 'icon' => 'trash', 'acl_resource' => 'oro_business_unit_delete')), 'sorters' => array('columns' => array('name' => array('data_name' => 'u.name'), 'email' => array('data_name' => 'u.email'), 'phone' => array('data_name' => 'u.phone'), 'ownerName' => array('data_name' => 'owner.name'), 'organizationName' => array('data_name' => 'organization.name'), 'createdAt' => array('data_name' => 'u.createdAt')), 'default' => array('name' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_ASC')), 'filters' => array('columns' => array('name' => array('type' => 'string', 'data_name' => 'u.name'), 'email' => array('type' => 'string', 'data_name' => 'u.email'), 'phone' => array('type' => 'string', 'data_name' => 'u.phone'), 'ownerName' => array('type' => 'choice', 'data_name' => 'ownerName', 'filter_by_having' => true, 'options' => array('field_options' => array('choices' => '@oro_organization.provider.business_units_grid->getOwnerChoices'))), 'organizationName' => array('type' => 'choice', 'data_name' => 'organizationName', 'filter_by_having' => true, 'options' => array('field_options' => array('choices' => '@oro_organization.provider.business_units_grid->getOrganizationChoices'))), 'createdAt' => array('type' => 'datetime', 'data_name' => 'u.createdAt')))), 'bu-update-users-grid' => array('extend' => 'user-relation-grid', 'source' => array('acl_resource' => 'oro_business_unit_update', 'query' => array('select' => array(0 => '(CASE WHEN (:business_unit_id IS NOT NULL) THEN   CASE WHEN (:business_unit_id MEMBER OF u.businessUnits OR u.id IN (:data_in)) AND u.id NOT IN (:data_not_in)   THEN true ELSE false END ELSE   CASE WHEN u.id IN (:data_in) AND u.id NOT IN (:data_not_in)   THEN true ELSE false END END) as hasCurrentBusinessUnit'))), 'columns' => array('hasCurrentBusinessUnit' => array('label' => 'Has business unit', 'editable' => true, 'frontend_type' => 'boolean'), 'firstName' => array('label' => 'oro.user.first_name.label'), 'lastName' => array('label' => 'oro.user.last_name.label'), 'username' => array('label' => 'oro.user.username.label'), 'email' => array('label' => 'oro.user.email.label')), 'filters' => array('columns' => array('hasCurrentBusinessUnit' => array('type' => 'boolean', 'data_name' => 'hasCurrentBusinessUnit', 'filter_by_having' => true), 'firstName' => array('type' => 'string', 'data_name' => 'u.firstName'), 'lastName' => array('type' => 'string', 'data_name' => 'u.lastName'), 'username' => array('type' => 'string', 'data_name' => 'u.username'), 'email' => array('type' => 'string', 'data_name' => 'u.email'))), 'sorters' => array('columns' => array('hasCurrentBusinessUnit' => array('data_name' => 'hasCurrentBusinessUnit')), 'default' => array('hasCurrentBusinessUnit' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_DESC', 'lastName' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_ASC')), 'options' => array('entityHint' => 'user', 'requireJSModules' => array(0 => 'oro/datagrid/column-form-listener'), 'columnListener' => array('dataField' => 'id', 'columnName' => 'hasCurrentBusinessUnit', 'selectors' => array('included' => '#businessUnitAppendUsers', 'excluded' => '#businessUnitRemoveUsers')))), 'bu-view-users-grid' => array('extend' => 'user-relation-grid', 'options' => array('entityHint' => 'user'), 'source' => array('acl_resource' => 'oro_business_unit_view', 'query' => array('where' => array('and' => array(0 => ':business_unit_id MEMBER OF u.businessUnits')))), 'columns' => array('firstName' => array('label' => 'oro.user.first_name.label'), 'lastName' => array('label' => 'oro.user.last_name.label'), 'username' => array('label' => 'oro.user.username.label'), 'email' => array('label' => 'oro.user.email.label')), 'sorters' => array('default' => array('lastName' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_ASC')), 'filters' => array('columns' => array('firstName' => array('type' => 'string', 'data_name' => 'u.firstName'), 'lastName' => array('type' => 'string', 'data_name' => 'u.lastName'), 'username' => array('type' => 'string', 'data_name' => 'u.username'), 'email' => array('type' => 'string', 'data_name' => 'u.email')))), 'reports-grid' => array('extended_entity_name' => 'Oro\\Bundle\\ReportBundle\\Entity\\Report', 'source' => array('type' => 'orm', 'acl_resource' => 'oro_report_view', 'query' => array('select' => array(0 => 'r.id', 1 => 'r.name', 2 => 'r.entity', 3 => 'type.label as reportType'), 'from' => array(0 => array('table' => 'Oro\\Bundle\\ReportBundle\\Entity\\Report', 'alias' => 'r')), 'join' => array('left' => array(0 => array('join' => 'r.type', 'alias' => 'type'))))), 'properties' => array('id' => NULL, 'view_link' => array('type' => 'url', 'route' => 'oro_report_view', 'params' => array(0 => 'id')), 'update_link' => array('type' => 'url', 'route' => 'oro_report_update', 'params' => array(0 => 'id')), 'delete_link' => array('type' => 'url', 'route' => 'oro_api_delete_report', 'params' => array(0 => 'id'))), 'columns' => array('name' => array('label' => 'oro.report.name.label'), 'entity' => array('label' => 'oro.report.entity.label', 'type' => 'twig', 'template' => 'OroEntityBundle:Datagrid:Property/entity.html.twig', 'frontend_type' => 'html', 'context' => array('entity_provider' => '@oro_report.entity_provider')), 'reportType' => array('label' => 'oro.report.type.label', 'type' => 'translatable', 'choices' => '@oro_report.report_manager->getReportTypeChoices')), 'sorters' => array('columns' => array('name' => array('data_name' => 'r.name')), 'default' => array('name' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_DESC')), 'filters' => array('columns' => array('name' => array('type' => 'string', 'data_name' => 'r.name'), 'reportType' => array('type' => 'choice', 'data_name' => 'r.type', 'options' => array('field_options' => array('choices' => '@oro_report.report_manager->getReportTypeChoices'))))), 'actions' => array('view' => array('type' => 'navigate', 'acl_resource' => 'oro_report_view', 'label' => 'View', 'icon' => 'user', 'link' => 'view_link', 'rowAction' => true), 'update' => array('type' => 'navigate', 'acl_resource' => 'oro_report_update', 'label' => 'Update', 'icon' => 'edit', 'link' => 'update_link'), 'delete' => array('type' => 'delete', 'acl_resource' => 'oro_report_delete', 'label' => 'Delete', 'icon' => 'trash', 'link' => 'delete_link')), 'options' => array('entityHint' => 'report')), 'search-grid' => array('source' => array('type' => 'search'), 'columns' => array('entity' => array('label' => 'Item', 'type' => 'search-result', 'template' => NULL, 'frontend_type' => 'html')), 'properties' => NULL, 'sorters' => NULL, 'filters' => NULL), 'tag-grid' => array('options' => array('entityHint' => 'tag'), 'source' => array('acl_resource' => 'oro_tag_view', 'type' => 'orm', 'query' => array('select' => array(0 => 't.id', 1 => 't.name', 2 => 'COUNT(tt.id) as usage'), 'from' => array(0 => array('table' => 'OroTagBundle:Tag', 'alias' => 't')), 'join' => array('left' => array('tagging' => array('join' => 't.tagging', 'alias' => 'tt'))), 'groupBy' => 't.id')), 'columns' => array('name' => array('label' => 'oro.tag.name.label', 'type' => 'field', 'frontend_type' => 'string'), 'usage' => array('label' => 'oro.tag.datagrid.usage_count', 'type' => 'field', 'frontend_type' => 'integer')), 'properties' => array('id' => NULL, 'update_link' => array('type' => 'url', 'route' => 'oro_tag_update', 'params' => array(0 => 'id')), 'search_link' => array('type' => 'url', 'route' => 'oro_tag_search', 'params' => array(0 => 'id')), 'delete_link' => array('type' => 'url', 'route' => 'oro_api_delete_tag', 'params' => array(0 => 'id'))), 'sorters' => array('columns' => array('name' => array('data_name' => 't.name'), 'usage' => array('data_name' => 'usage')), 'default' => array('name' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_DESC')), 'filters' => array('columns' => array('name' => array('type' => 'string', 'data_name' => 't.name'), 'usage' => array('type' => 'number', 'data_name' => 'usage', 'filter_by_having' => true))), 'actions' => array('search' => array('type' => 'navigate', 'label' => 'Search by tag', 'link' => 'search_link', 'icon' => 'search', 'acl_resource' => 'oro_tag_view', 'rowAction' => true), 'update' => array('type' => 'navigate', 'label' => 'Update', 'link' => 'update_link', 'icon' => 'edit', 'acl_resource' => 'oro_tag_update'), 'delete' => array('type' => 'delete', 'label' => 'Delete', 'link' => 'delete_link', 'icon' => 'trash', 'acl_resource' => 'oro_tag_delete'))), 'tag-results-grid' => array('options' => array('entityHint' => 'result'), 'source' => array('acl_resource' => 'oro_tag_view', 'type' => 'orm', 'query' => array('select' => array(0 => 'tt', 1 => 't'), 'from' => array(0 => array('table' => 'OroTagBundle:Tagging', 'alias' => 'tt')), 'join' => array('left' => array('tagging' => array('join' => 'tt.tag', 'alias' => 't'))), 'groupBy' => 'tt.entityName, tt.recordId', 'where' => array('and' => array(0 => 'tt.tag = :tag')))), 'columns' => array('entity' => array('label' => 'Item', 'type' => 'search-result', 'frontend_type' => 'html'))), 'users-grid' => array('extended_entity_name' => 'Oro\\Bundle\\UserBundle\\Entity\\User', 'options' => array('entityHint' => 'user'), 'source' => array('acl_resource' => 'oro_user_user_view', 'type' => 'orm', 'query' => array('select' => array(0 => 'u.id', 1 => 'u.username', 2 => 'u.email', 3 => 'u.firstName', 4 => 'u.lastName', 5 => 'u.createdAt', 6 => 'u.updatedAt', 7 => 'u.enabled'), 'from' => array(0 => array('table' => 'Oro\\Bundle\\UserBundle\\Entity\\User', 'alias' => 'u')))), 'columns' => array('username' => array('label' => 'oro.user.username.label'), 'email' => array('label' => 'oro.user.email.label'), 'firstName' => array('label' => 'oro.user.first_name.label'), 'lastName' => array('label' => 'oro.user.last_name.label'), 'createdAt' => array('label' => 'oro.user.created_at.label', 'frontend_type' => 'datetime'), 'updatedAt' => array('label' => 'oro.user.updated_at.label', 'frontend_type' => 'datetime'), 'enabled' => array('label' => 'oro.user.enabled.label', 'frontend_type' => 'select', 'choices' => array(0 => 'Inactive', 1 => 'Active'))), 'properties' => array('id' => NULL, 'update_link' => array('type' => 'url', 'route' => 'oro_user_update', 'params' => array(0 => 'id')), 'view_link' => array('type' => 'url', 'route' => 'oro_user_view', 'params' => array(0 => 'id')), 'delete_link' => array('type' => 'url', 'route' => 'oro_api_delete_user', 'params' => array(0 => 'id'))), 'sorters' => array('columns' => array('username' => array('data_name' => 'u.username'), 'email' => array('data_name' => 'u.email'), 'firstName' => array('data_name' => 'u.firstName'), 'lastName' => array('data_name' => 'u.lastName'), 'createdAt' => array('data_name' => 'u.createdAt'), 'updatedAt' => array('data_name' => 'u.updatedAt'), 'enabled' => array('data_name' => 'u.enabled')), 'default' => array('username' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_ASC')), 'filters' => array('columns' => array('username' => array('type' => 'string', 'data_name' => 'u.username'), 'email' => array('type' => 'string', 'data_name' => 'u.email'), 'firstName' => array('type' => 'string', 'data_name' => 'u.firstName'), 'lastName' => array('type' => 'string', 'data_name' => 'u.lastName'), 'createdAt' => array('type' => 'datetime', 'data_name' => 'u.createdAt'), 'updatedAt' => array('type' => 'datetime', 'data_name' => 'u.updatedAt'), 'enabled' => array('type' => 'choice', 'data_name' => 'u.enabled', 'options' => array('field_options' => array('choices' => array(0 => 'Inactive', 1 => 'Active')))))), 'actions' => array('view' => array('type' => 'navigate', 'label' => 'View', 'link' => 'view_link', 'icon' => 'user', 'acl_resource' => 'oro_user_user_view', 'rowAction' => true), 'update' => array('type' => 'navigate', 'label' => 'Update', 'link' => 'update_link', 'icon' => 'edit', 'acl_resource' => 'oro_user_user_update'), 'delete' => array('type' => 'delete', 'label' => 'Delete', 'link' => 'delete_link', 'icon' => 'trash', 'acl_resource' => 'oro_user_user_delete'))), 'groups-grid' => array('options' => array('entityHint' => 'group'), 'source' => array('acl_resource' => 'oro_user_group_view', 'type' => 'orm', 'query' => array('select' => array(0 => 'g.id', 1 => 'g.name'), 'from' => array(0 => array('table' => 'OroUserBundle:Group', 'alias' => 'g')))), 'columns' => array('name' => array('label' => 'oro.user.group.name.label')), 'properties' => array('id' => NULL, 'update_link' => array('type' => 'url', 'route' => 'oro_user_group_update', 'params' => array(0 => 'id')), 'delete_link' => array('type' => 'url', 'route' => 'oro_api_delete_group', 'params' => array(0 => 'id'))), 'actions' => array('update' => array('type' => 'navigate', 'label' => 'Update', 'link' => 'update_link', 'icon' => 'edit', 'acl_resource' => 'oro_user_group_update', 'rowAction' => true), 'delete' => array('type' => 'delete', 'label' => 'Delete', 'link' => 'delete_link', 'icon' => 'trash', 'acl_resource' => 'oro_user_group_remove')), 'sorters' => array('columns' => array('name' => array('data_name' => 'g.name')), 'default' => array('name' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_ASC')), 'filters' => array('columns' => array('name' => array('type' => 'string', 'data_name' => 'g.name')))), 'roles-grid' => array('options' => array('entityHint' => 'role'), 'source' => array('acl_resource' => 'oro_user_role_view', 'type' => 'orm', 'query' => array('select' => array(0 => 'r.id', 1 => 'r.role', 2 => 'r.label'), 'from' => array(0 => array('table' => 'OroUserBundle:Role', 'alias' => 'r')), 'where' => array('and' => array(0 => 'r.role <> \'Oro\\Bundle\\UserBundle\\Entity\\User::ROLE_ANONYMOUS\'')))), 'columns' => array('label' => array('label' => 'oro.user.role.label.label')), 'properties' => array('id' => NULL, 'update_link' => array('type' => 'url', 'route' => 'oro_user_role_update', 'params' => array(0 => 'id')), 'delete_link' => array('type' => 'url', 'route' => 'oro_api_delete_role', 'params' => array(0 => 'id'))), 'actions' => array('update' => array('type' => 'navigate', 'label' => 'Update', 'link' => 'update_link', 'icon' => 'edit', 'acl_resource' => 'oro_user_role_update', 'rowAction' => true), 'delete' => array('type' => 'delete', 'label' => 'Delete', 'link' => 'delete_link', 'icon' => 'trash', 'acl_resource' => 'oro_user_role_remove')), 'sorters' => array('columns' => array('label' => array('data_name' => 'r.label')), 'default' => array('label' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_ASC')), 'filters' => array('columns' => array('label' => array('type' => 'string', 'data_name' => 'r.label')))), 'users-email-grid' => array('extend' => 'email-grid', 'source' => array('query' => array('join' => array('inner' => array('folder' => array('join' => 'e.folder', 'alias' => 'f'), 'origin' => array('join' => 'f.origin', 'alias' => 'o'))), 'where' => array('and' => array(0 => 'o.id = :origin_id'))))), 'user-relation-grid' => array('source' => array('type' => 'orm', 'query' => array('select' => array(0 => 'u.id', 1 => 'u.username', 2 => 'u.email', 3 => 'u.firstName', 4 => 'u.lastName'), 'from' => array(0 => array('table' => 'OroUserBundle:User', 'alias' => 'u')))), 'columns' => array(), 'properties' => array('id' => NULL), 'sorters' => array('columns' => array('username' => array('data_name' => 'u.username'), 'email' => array('data_name' => 'u.email'), 'firstName' => array('data_name' => 'u.firstName'), 'lastName' => array('data_name' => 'u.lastName')), 'default' => array('id' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_ASC')), 'filters' => array()), 'role-users-grid' => array('extend' => 'user-relation-grid', 'source' => array('acl_resource' => 'oro_user_role_update', 'query' => array('select' => array(0 => '(CASE WHEN (:role_id IS NOT NULL) THEN   CASE WHEN (:role_id MEMBER OF u.roles OR u.id IN (:data_in)) AND u.id NOT IN (:data_not_in)   THEN true ELSE false END ELSE   CASE WHEN u.id IN (:data_in) AND u.id NOT IN (:data_not_in)   THEN true ELSE false END END) as has_role'))), 'columns' => array('has_role' => array('label' => 'Has role', 'editable' => true, 'frontend_type' => 'boolean'), 'firstName' => array('label' => 'oro.user.first_name.label'), 'lastName' => array('label' => 'oro.user.last_name.label'), 'username' => array('label' => 'oro.user.username.label'), 'email' => array('label' => 'oro.user.email.label')), 'filters' => array('columns' => array('has_role' => array('type' => 'boolean', 'data_name' => 'has_role', 'filter_by_having' => true), 'firstName' => array('type' => 'string', 'data_name' => 'u.firstName'), 'lastName' => array('type' => 'string', 'data_name' => 'u.lastName'), 'username' => array('type' => 'string', 'data_name' => 'u.username'), 'email' => array('type' => 'string', 'data_name' => 'u.email'))), 'sorters' => array('multiple_sorting' => true, 'columns' => array('has_role' => array('data_name' => 'has_role')), 'default' => array('has_role' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_DESC', 'lastName' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_ASC')), 'options' => array('requireJSModules' => array(0 => 'oro/datagrid/column-form-listener'), 'columnListener' => array('dataField' => 'id', 'columnName' => 'has_role', 'selectors' => array('included' => '#roleAppendUsers', 'excluded' => '#roleRemoveUsers')))), 'group-users-grid' => array('extend' => 'user-relation-grid', 'source' => array('acl_resource' => 'oro_user_group_update', 'query' => array('select' => array(0 => '(CASE WHEN (:group_id IS NOT NULL) THEN   CASE WHEN (:group_id MEMBER OF u.groups OR u.id IN (:data_in)) AND u.id NOT IN (:data_not_in)   THEN true ELSE false END ELSE   CASE WHEN u.id IN (:data_in) AND u.id NOT IN (:data_not_in)   THEN true ELSE false END END) as has_group'))), 'columns' => array('has_group' => array('label' => 'Has group', 'editable' => true, 'frontend_type' => 'boolean'), 'firstName' => array('label' => 'oro.user.first_name.label'), 'lastName' => array('label' => 'oro.user.last_name.label'), 'username' => array('label' => 'oro.user.username.label'), 'email' => array('label' => 'oro.user.email.label')), 'filters' => array('columns' => array('has_group' => array('type' => 'boolean', 'data_name' => 'has_group', 'filter_by_having' => true), 'username' => array('type' => 'string', 'data_name' => 'u.username'), 'email' => array('type' => 'string', 'data_name' => 'u.email'), 'firstName' => array('type' => 'string', 'data_name' => 'u.firstName'), 'lastName' => array('type' => 'string', 'data_name' => 'u.lastName'))), 'sorters' => array('multiple_sorting' => true, 'columns' => array('has_group' => array('data_name' => 'has_group')), 'default' => array('has_group' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_DESC', 'lastName' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_ASC')), 'options' => array('requireJSModules' => array(0 => 'oro/datagrid/column-form-listener'), 'columnListener' => array('dataField' => 'id', 'columnName' => 'has_group', 'selectors' => array('included' => '#groupAppendUsers', 'excluded' => '#groupRemoveUsers')))), 'dashboard-recent-emails-grid' => array('source' => array('type' => 'orm', 'query' => array('select' => array(0 => 'e'), 'from' => array(0 => array('table' => 'OroEmailBundle:Email', 'alias' => 'e')), 'join' => array('inner' => array('folder' => array('join' => 'e.folder', 'alias' => 'f'), 'origin' => array('join' => 'f.origin', 'alias' => 'o'))), 'where' => array('and' => array(0 => 'o.id = :origin_id')))), 'properties' => array('id' => NULL), 'options' => array('toolbarOptions' => array('hide' => true, 'pageSize' => array('items' => array(0 => 10), 'default_per_page' => 10)))), 'dashboard-recent-emails-inbox-grid' => array('extend' => 'dashboard-recent-emails-grid', 'options' => array('entityHint' => 'email'), 'source' => array('query' => array('select' => array(0 => '@oro_email.datagrid_query_factory->getFromEmailExpression'), 'join' => array('inner' => array('from_email_address' => array('join' => 'e.fromEmailAddress', 'alias' => 'a'))), 'where' => array('and' => array(0 => 'f.type = \'Oro\\Bundle\\EmailBundle\\Entity\\EmailFolder::INBOX\'')))), 'columns' => array('receivedAt' => array('label' => 'oro.email.received_at.label', 'frontend_type' => 'datetime'), 'fromEmailAddress' => array('type' => 'twig', 'label' => 'oro.email.from_name.label', 'frontend_type' => 'html', 'template' => 'OroEmailBundle:Email:Datagrid/Property/from.html.twig'), 'subject' => array('type' => 'twig', 'label' => 'oro.email.subject.label', 'frontend_type' => 'html', 'template' => 'OroEmailBundle:Email:Datagrid/Property/subject.html.twig')), 'sorters' => array('default' => array('receivedAt' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_DESC'))), 'dashboard-recent-emails-sent-grid' => array('options' => array('entityHint' => 'email'), 'extend' => 'dashboard-recent-emails-grid', 'source' => array('query' => array('where' => array('and' => array(0 => 'f.type = \'Oro\\Bundle\\EmailBundle\\Entity\\EmailFolder::SENT\'')))), 'columns' => array('sentAt' => array('label' => 'oro.email.sent_at.label', 'frontend_type' => 'datetime'), 'recipients' => array('type' => 'twig', 'label' => 'oro.email.recipients.label', 'frontend_type' => 'html', 'template' => 'OroEmailBundle:Email:Datagrid/Property/recipients.html.twig'), 'subject' => array('type' => 'twig', 'label' => 'oro.email.subject.label', 'frontend_type' => 'html', 'template' => 'OroEmailBundle:Email:Datagrid/Property/subject.html.twig')), 'sorters' => array('default' => array('sentAt' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension::DIRECTION_DESC')))), $this->get('oro_datagrid.provider.resolver'));
    }

    /**
     * Gets the 'oro_datagrid.configuration.provider.chain' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataGridBundle\Provider\ChainConfigurationProvider A Oro\Bundle\DataGridBundle\Provider\ChainConfigurationProvider instance.
     */
    protected function getOroDatagrid_Configuration_Provider_ChainService()
    {
        $this->services['oro_datagrid.configuration.provider.chain'] = $instance = new \Oro\Bundle\DataGridBundle\Provider\ChainConfigurationProvider();

        $instance->addProvider($this->get('oro_report.datagrid.configuration.provider'));
        $instance->addProvider($this->get('oro_datagrid.configuration.provider'));

        return $instance;
    }

    /**
     * Gets the 'oro_datagrid.datagrid.builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataGridBundle\Datagrid\Builder A Oro\Bundle\DataGridBundle\Datagrid\Builder instance.
     */
    protected function getOroDatagrid_Datagrid_BuilderService()
    {
        $this->services['oro_datagrid.datagrid.builder'] = $instance = new \Oro\Bundle\DataGridBundle\Datagrid\Builder('Oro\\Bundle\\DataGridBundle\\Datagrid\\Datagrid', 'Oro\\Bundle\\DataGridBundle\\Extension\\Acceptor', $this->get('event_dispatcher'), $this->get('oro_security.security_facade'));

        $instance->registerDatasource('orm', $this->get('oro_datagrid.datasource.orm'));
        $instance->registerDatasource('search', $this->get('oro_search.datasource.search'));
        $instance->registerExtension($this->get('oro_entity.datagrid.extension'));
        $instance->registerExtension($this->get('oro_datagrid.extension.formatter'));
        $instance->registerExtension($this->get('oro_datagrid.extension.orm_pager'));
        $instance->registerExtension($this->get('oro_datagrid.extension.orm_sorter'));
        $instance->registerExtension($this->get('oro_datagrid.extension.action'));
        $instance->registerExtension($this->get('oro_datagrid.extension.mass_action'));
        $instance->registerExtension($this->get('oro_datagrid.extension.toolbar'));
        $instance->registerExtension($this->get('oro_datagrid.extension.views'));
        $instance->registerExtension($this->get('oro_filter.extension.orm_filter'));
        $instance->registerExtension($this->get('oro_query_designer.grid.extension.orm_datasource'));
        $instance->registerExtension($this->get('oro_search.extension.search_results'));
        $instance->registerExtension($this->get('oro_search.extension.search_pager'));

        return $instance;
    }

    /**
     * Gets the 'oro_datagrid.datagrid.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataGridBundle\Datagrid\Manager A Oro\Bundle\DataGridBundle\Datagrid\Manager instance.
     */
    protected function getOroDatagrid_Datagrid_ManagerService()
    {
        return $this->services['oro_datagrid.datagrid.manager'] = new \Oro\Bundle\DataGridBundle\Datagrid\Manager($this->get('oro_datagrid.configuration.provider.chain'), $this->get('oro_datagrid.datagrid.builder'), $this->get('oro_datagrid.datagrid.request_params'));
    }

    /**
     * Gets the 'oro_datagrid.datagrid.request_params' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataGridBundle\Datagrid\RequestParameters A Oro\Bundle\DataGridBundle\Datagrid\RequestParameters instance.
     */
    protected function getOroDatagrid_Datagrid_RequestParamsService()
    {
        $this->services['oro_datagrid.datagrid.request_params'] = $instance = new \Oro\Bundle\DataGridBundle\Datagrid\RequestParameters();

        if ($this->has('request')) {
            $instance->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }

        return $instance;
    }

    /**
     * Gets the 'oro_datagrid.datasource.orm' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataGridBundle\Datasource\Orm\OrmDatasource A Oro\Bundle\DataGridBundle\Datasource\Orm\OrmDatasource instance.
     */
    protected function getOroDatagrid_Datasource_OrmService()
    {
        return $this->services['oro_datagrid.datasource.orm'] = new \Oro\Bundle\DataGridBundle\Datasource\Orm\OrmDatasource($this->get('doctrine.orm.default_entity_manager'), $this->get('oro_security.acl_helper'));
    }

    /**
     * Gets the 'oro_datagrid.extension.action' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataGridBundle\Extension\Action\ActionExtension A Oro\Bundle\DataGridBundle\Extension\Action\ActionExtension instance.
     */
    protected function getOroDatagrid_Extension_ActionService()
    {
        $this->services['oro_datagrid.extension.action'] = $instance = new \Oro\Bundle\DataGridBundle\Extension\Action\ActionExtension($this, $this->get('oro_security.security_facade'), $this->get('translator.default'));

        $instance->registerAction('navigate', 'oro_datagrid.extension.action.type.navigate');
        $instance->registerAction('ajax', 'oro_datagrid.extension.action.type.ajax');
        $instance->registerAction('delete', 'oro_datagrid.extension.action.type.delete');

        return $instance;
    }

    /**
     * Gets the 'oro_datagrid.extension.action.type.ajax' service.
     *
     * @return Oro\Bundle\DataGridBundle\Extension\Action\Actions\AjaxAction A Oro\Bundle\DataGridBundle\Extension\Action\Actions\AjaxAction instance.
     */
    protected function getOroDatagrid_Extension_Action_Type_AjaxService()
    {
        return new \Oro\Bundle\DataGridBundle\Extension\Action\Actions\AjaxAction();
    }

    /**
     * Gets the 'oro_datagrid.extension.action.type.delete' service.
     *
     * @return Oro\Bundle\DataGridBundle\Extension\Action\Actions\DeleteAction A Oro\Bundle\DataGridBundle\Extension\Action\Actions\DeleteAction instance.
     */
    protected function getOroDatagrid_Extension_Action_Type_DeleteService()
    {
        return new \Oro\Bundle\DataGridBundle\Extension\Action\Actions\DeleteAction();
    }

    /**
     * Gets the 'oro_datagrid.extension.action.type.navigate' service.
     *
     * @return Oro\Bundle\DataGridBundle\Extension\Action\Actions\NavigateAction A Oro\Bundle\DataGridBundle\Extension\Action\Actions\NavigateAction instance.
     */
    protected function getOroDatagrid_Extension_Action_Type_NavigateService()
    {
        return new \Oro\Bundle\DataGridBundle\Extension\Action\Actions\NavigateAction();
    }

    /**
     * Gets the 'oro_datagrid.extension.formatter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataGridBundle\Extension\Formatter\FormatterExtension A Oro\Bundle\DataGridBundle\Extension\Formatter\FormatterExtension instance.
     */
    protected function getOroDatagrid_Extension_FormatterService()
    {
        $this->services['oro_datagrid.extension.formatter'] = $instance = new \Oro\Bundle\DataGridBundle\Extension\Formatter\FormatterExtension($this->get('translator.default'));

        $instance->registerProperty('field', $this->get('oro_datagrid.extension.formatter.field_property'));
        $instance->registerProperty('url', $this->get('oro_datagrid.extension.formatter.property.url_property'));
        $instance->registerProperty('twig', $this->get('oro_datagrid.extension.formatter.property.twig_property'));
        $instance->registerProperty('translatable', $this->get('oro_datagrid.extension.formatter.property.translatable_property'));
        $instance->registerProperty('callback', $this->get('oro_datagrid.extension.formatter.property.callback_property'));
        $instance->registerProperty('localized_number', $this->get('oro_datagrid.extension.formatter.property.localized_number_property'));
        $instance->registerProperty('search-result', $this->get('oro_search.extension.formatter.property.search_result_property'));

        return $instance;
    }

    /**
     * Gets the 'oro_datagrid.extension.formatter.field_property' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataGridBundle\Extension\Formatter\Property\FieldProperty A Oro\Bundle\DataGridBundle\Extension\Formatter\Property\FieldProperty instance.
     */
    protected function getOroDatagrid_Extension_Formatter_FieldPropertyService()
    {
        return $this->services['oro_datagrid.extension.formatter.field_property'] = new \Oro\Bundle\DataGridBundle\Extension\Formatter\Property\FieldProperty($this->get('translator.default'));
    }

    /**
     * Gets the 'oro_datagrid.extension.formatter.property.callback_property' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataGridBundle\Extension\Formatter\Property\CallbackProperty A Oro\Bundle\DataGridBundle\Extension\Formatter\Property\CallbackProperty instance.
     */
    protected function getOroDatagrid_Extension_Formatter_Property_CallbackPropertyService()
    {
        return $this->services['oro_datagrid.extension.formatter.property.callback_property'] = new \Oro\Bundle\DataGridBundle\Extension\Formatter\Property\CallbackProperty();
    }

    /**
     * Gets the 'oro_datagrid.extension.formatter.property.localized_number_property' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataGridBundle\Extension\Formatter\Property\LocalizedNumberProperty A Oro\Bundle\DataGridBundle\Extension\Formatter\Property\LocalizedNumberProperty instance.
     */
    protected function getOroDatagrid_Extension_Formatter_Property_LocalizedNumberPropertyService()
    {
        return $this->services['oro_datagrid.extension.formatter.property.localized_number_property'] = new \Oro\Bundle\DataGridBundle\Extension\Formatter\Property\LocalizedNumberProperty($this->get('translator.default'), $this->get('oro_locale.formatter.number'));
    }

    /**
     * Gets the 'oro_datagrid.extension.formatter.property.translatable_property' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataGridBundle\Extension\Formatter\Property\TranslatableProperty A Oro\Bundle\DataGridBundle\Extension\Formatter\Property\TranslatableProperty instance.
     */
    protected function getOroDatagrid_Extension_Formatter_Property_TranslatablePropertyService()
    {
        return $this->services['oro_datagrid.extension.formatter.property.translatable_property'] = new \Oro\Bundle\DataGridBundle\Extension\Formatter\Property\TranslatableProperty($this->get('translator.default'));
    }

    /**
     * Gets the 'oro_datagrid.extension.formatter.property.twig_property' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataGridBundle\Extension\Formatter\Property\TwigTemplateProperty A Oro\Bundle\DataGridBundle\Extension\Formatter\Property\TwigTemplateProperty instance.
     */
    protected function getOroDatagrid_Extension_Formatter_Property_TwigPropertyService()
    {
        return $this->services['oro_datagrid.extension.formatter.property.twig_property'] = new \Oro\Bundle\DataGridBundle\Extension\Formatter\Property\TwigTemplateProperty($this->get('twig'));
    }

    /**
     * Gets the 'oro_datagrid.extension.formatter.property.url_property' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataGridBundle\Extension\Formatter\Property\UrlProperty A Oro\Bundle\DataGridBundle\Extension\Formatter\Property\UrlProperty instance.
     */
    protected function getOroDatagrid_Extension_Formatter_Property_UrlPropertyService()
    {
        return $this->services['oro_datagrid.extension.formatter.property.url_property'] = new \Oro\Bundle\DataGridBundle\Extension\Formatter\Property\UrlProperty($this->get('router'));
    }

    /**
     * Gets the 'oro_datagrid.extension.mass_action' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataGridBundle\Extension\MassAction\MassActionExtension A Oro\Bundle\DataGridBundle\Extension\MassAction\MassActionExtension instance.
     */
    protected function getOroDatagrid_Extension_MassActionService()
    {
        $this->services['oro_datagrid.extension.mass_action'] = $instance = new \Oro\Bundle\DataGridBundle\Extension\MassAction\MassActionExtension($this, $this->get('oro_security.security_facade'), $this->get('translator.default'));

        $instance->registerAction('ajax', 'oro_datagrid.extension.mass_action.type.ajax');
        $instance->registerAction('delete', 'oro_datagrid.extension.mass_action.type.delete');
        $instance->registerAction('redirect', 'oro_datagrid.extension.mass_action.type.redirect');
        $instance->registerAction('widget', 'oro_datagrid.extension.mass_action.type.widget');
        $instance->registerAction('window', 'oro_datagrid.extension.mass_action.type.window');

        return $instance;
    }

    /**
     * Gets the 'oro_datagrid.extension.mass_action.handler.delete' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataGridBundle\Extension\MassAction\DeleteMassActionHandler A Oro\Bundle\DataGridBundle\Extension\MassAction\DeleteMassActionHandler instance.
     */
    protected function getOroDatagrid_Extension_MassAction_Handler_DeleteService()
    {
        return $this->services['oro_datagrid.extension.mass_action.handler.delete'] = new \Oro\Bundle\DataGridBundle\Extension\MassAction\DeleteMassActionHandler($this->get('doctrine.orm.default_entity_manager'), $this->get('translator.default'));
    }

    /**
     * Gets the 'oro_datagrid.extension.mass_action.type.ajax' service.
     *
     * @return Oro\Bundle\DataGridBundle\Extension\MassAction\Actions\Ajax\AjaxMassAction A Oro\Bundle\DataGridBundle\Extension\MassAction\Actions\Ajax\AjaxMassAction instance.
     */
    protected function getOroDatagrid_Extension_MassAction_Type_AjaxService()
    {
        return new \Oro\Bundle\DataGridBundle\Extension\MassAction\Actions\Ajax\AjaxMassAction();
    }

    /**
     * Gets the 'oro_datagrid.extension.mass_action.type.delete' service.
     *
     * @return Oro\Bundle\DataGridBundle\Extension\MassAction\Actions\Ajax\DeleteMassAction A Oro\Bundle\DataGridBundle\Extension\MassAction\Actions\Ajax\DeleteMassAction instance.
     */
    protected function getOroDatagrid_Extension_MassAction_Type_DeleteService()
    {
        return new \Oro\Bundle\DataGridBundle\Extension\MassAction\Actions\Ajax\DeleteMassAction();
    }

    /**
     * Gets the 'oro_datagrid.extension.mass_action.type.redirect' service.
     *
     * @return Oro\Bundle\DataGridBundle\Extension\MassAction\Actions\Redirect\RedirectMassAction A Oro\Bundle\DataGridBundle\Extension\MassAction\Actions\Redirect\RedirectMassAction instance.
     */
    protected function getOroDatagrid_Extension_MassAction_Type_RedirectService()
    {
        return new \Oro\Bundle\DataGridBundle\Extension\MassAction\Actions\Redirect\RedirectMassAction();
    }

    /**
     * Gets the 'oro_datagrid.extension.mass_action.type.widget' service.
     *
     * @return Oro\Bundle\DataGridBundle\Extension\MassAction\Actions\Widget\WidgetMassAction A Oro\Bundle\DataGridBundle\Extension\MassAction\Actions\Widget\WidgetMassAction instance.
     */
    protected function getOroDatagrid_Extension_MassAction_Type_WidgetService()
    {
        return new \Oro\Bundle\DataGridBundle\Extension\MassAction\Actions\Widget\WidgetMassAction();
    }

    /**
     * Gets the 'oro_datagrid.extension.mass_action.type.window' service.
     *
     * @return Oro\Bundle\DataGridBundle\Extension\MassAction\Actions\Widget\WindowMassAction A Oro\Bundle\DataGridBundle\Extension\MassAction\Actions\Widget\WindowMassAction instance.
     */
    protected function getOroDatagrid_Extension_MassAction_Type_WindowService()
    {
        return new \Oro\Bundle\DataGridBundle\Extension\MassAction\Actions\Widget\WindowMassAction();
    }

    /**
     * Gets the 'oro_datagrid.extension.orm_pager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataGridBundle\Extension\Pager\OrmPagerExtension A Oro\Bundle\DataGridBundle\Extension\Pager\OrmPagerExtension instance.
     */
    protected function getOroDatagrid_Extension_OrmPagerService()
    {
        return $this->services['oro_datagrid.extension.orm_pager'] = new \Oro\Bundle\DataGridBundle\Extension\Pager\OrmPagerExtension($this->get('oro_datagrid.extension.pager.orm.pager'), $this->get('oro_datagrid.datagrid.request_params'));
    }

    /**
     * Gets the 'oro_datagrid.extension.orm_sorter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataGridBundle\Extension\Sorter\OrmSorterExtension A Oro\Bundle\DataGridBundle\Extension\Sorter\OrmSorterExtension instance.
     */
    protected function getOroDatagrid_Extension_OrmSorterService()
    {
        return $this->services['oro_datagrid.extension.orm_sorter'] = new \Oro\Bundle\DataGridBundle\Extension\Sorter\OrmSorterExtension($this->get('oro_datagrid.datagrid.request_params'));
    }

    /**
     * Gets the 'oro_datagrid.extension.pager.orm.pager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataGridBundle\Extension\Pager\Orm\Pager A Oro\Bundle\DataGridBundle\Extension\Pager\Orm\Pager instance.
     */
    protected function getOroDatagrid_Extension_Pager_Orm_PagerService()
    {
        return $this->services['oro_datagrid.extension.pager.orm.pager'] = new \Oro\Bundle\DataGridBundle\Extension\Pager\Orm\Pager($this->get('oro_security.acl_helper'));
    }

    /**
     * Gets the 'oro_datagrid.extension.toolbar' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataGridBundle\Extension\Toolbar\ToolbarExtension A Oro\Bundle\DataGridBundle\Extension\Toolbar\ToolbarExtension instance.
     */
    protected function getOroDatagrid_Extension_ToolbarService()
    {
        return $this->services['oro_datagrid.extension.toolbar'] = new \Oro\Bundle\DataGridBundle\Extension\Toolbar\ToolbarExtension();
    }

    /**
     * Gets the 'oro_datagrid.extension.views' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataGridBundle\Extension\GridViews\GridViewsExtension A Oro\Bundle\DataGridBundle\Extension\GridViews\GridViewsExtension instance.
     */
    protected function getOroDatagrid_Extension_ViewsService()
    {
        return $this->services['oro_datagrid.extension.views'] = new \Oro\Bundle\DataGridBundle\Extension\GridViews\GridViewsExtension($this->get('oro_datagrid.datagrid.request_params'));
    }

    /**
     * Gets the 'oro_datagrid.mass_action.dispatcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataGridBundle\Extension\MassAction\MassActionDispatcher A Oro\Bundle\DataGridBundle\Extension\MassAction\MassActionDispatcher instance.
     */
    protected function getOroDatagrid_MassAction_DispatcherService()
    {
        return $this->services['oro_datagrid.mass_action.dispatcher'] = new \Oro\Bundle\DataGridBundle\Extension\MassAction\MassActionDispatcher($this, $this->get('oro_datagrid.datagrid.manager'), $this->get('oro_datagrid.datagrid.request_params'));
    }

    /**
     * Gets the 'oro_datagrid.mass_action.parameters_parser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataGridBundle\Extension\MassAction\MassActionParametersParser A Oro\Bundle\DataGridBundle\Extension\MassAction\MassActionParametersParser instance.
     */
    protected function getOroDatagrid_MassAction_ParametersParserService()
    {
        return $this->services['oro_datagrid.mass_action.parameters_parser'] = new \Oro\Bundle\DataGridBundle\Extension\MassAction\MassActionParametersParser();
    }

    /**
     * Gets the 'oro_datagrid.provider.resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataGridBundle\Provider\SystemAwareResolver A Oro\Bundle\DataGridBundle\Provider\SystemAwareResolver instance.
     */
    protected function getOroDatagrid_Provider_ResolverService()
    {
        return $this->services['oro_datagrid.provider.resolver'] = new \Oro\Bundle\DataGridBundle\Provider\SystemAwareResolver($this);
    }

    /**
     * Gets the 'oro_datagrid.twig.datagrid' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataGridBundle\Twig\DataGridExtension A Oro\Bundle\DataGridBundle\Twig\DataGridExtension instance.
     */
    protected function getOroDatagrid_Twig_DatagridService()
    {
        return $this->services['oro_datagrid.twig.datagrid'] = new \Oro\Bundle\DataGridBundle\Twig\DataGridExtension($this->get('oro_datagrid.datagrid.manager'), $this->get('router'));
    }

    /**
     * Gets the 'oro_distribution.composer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Composer\Composer A Composer\Composer instance.
     */
    protected function getOroDistribution_ComposerService()
    {
        return $this->services['oro_distribution.composer'] = call_user_func(array('Composer\\Factory', 'create'), $this->get('oro_distribution.composer.io'), '/var/www/orocrm-platform/app/../composer.json');
    }

    /**
     * Gets the 'oro_distribution.package_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DistributionBundle\Manager\PackageManager A Oro\Bundle\DistributionBundle\Manager\PackageManager instance.
     */
    protected function getOroDistribution_PackageManagerService()
    {
        $a = $this->get('oro_distribution.composer');
        $b = $this->get('oro_distribution.composer.io');

        return $this->services['oro_distribution.package_manager'] = new \Oro\Bundle\DistributionBundle\Manager\PackageManager($a, call_user_func(array('Composer\\Installer', 'create'), $b, $a), $b, new \Oro\Bundle\DistributionBundle\Script\Runner($this->get('oro_distribution.composer')->getInstallationManager(), '/var/www/orocrm-platform/app', 'dev'), '/var/www/orocrm-platform/app/../composer.json');
    }

    /**
     * Gets the 'oro_distribution.routing_loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DistributionBundle\Routing\OroAutoLoader A Oro\Bundle\DistributionBundle\Routing\OroAutoLoader instance.
     */
    protected function getOroDistribution_RoutingLoaderService()
    {
        return $this->services['oro_distribution.routing_loader'] = new \Oro\Bundle\DistributionBundle\Routing\OroAutoLoader($this->get('file_locator'), $this->get('kernel'));
    }

    /**
     * Gets the 'oro_email.cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SecurityBundle\Cache\FilesystemCache A Oro\Bundle\SecurityBundle\Cache\FilesystemCache instance.
     */
    protected function getOroEmail_CacheService()
    {
        $this->services['oro_email.cache'] = $instance = new \Oro\Bundle\SecurityBundle\Cache\FilesystemCache('/var/www/orocrm-platform/app/cache/de_/oro_data');

        $instance->setNamespace('oro_email.cache');

        return $instance;
    }

    /**
     * Gets the 'oro_email.datagrid_query_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EmailBundle\Datagrid\EmailQueryFactory A Oro\Bundle\EmailBundle\Datagrid\EmailQueryFactory instance.
     */
    protected function getOroEmail_DatagridQueryFactoryService()
    {
        return $this->services['oro_email.datagrid_query_factory'] = new \Oro\Bundle\EmailBundle\Datagrid\EmailQueryFactory($this->get('doctrine'), 'Oro\\Bundle\\EmailBundle\\Entity\\Email', $this->get('oro_email.email.owner.provider.storage'), $this->get('oro_config.user'));
    }

    /**
     * Gets the 'oro_email.direct_mailer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EmailBundle\Mailer\DirectMailer A Oro\Bundle\EmailBundle\Mailer\DirectMailer instance.
     */
    protected function getOroEmail_DirectMailerService()
    {
        return $this->services['oro_email.direct_mailer'] = new \Oro\Bundle\EmailBundle\Mailer\DirectMailer($this->get('swiftmailer.mailer.default'), $this);
    }

    /**
     * Gets the 'oro_email.email.address.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EmailBundle\Entity\Manager\EmailAddressManager A Oro\Bundle\EmailBundle\Entity\Manager\EmailAddressManager instance.
     */
    protected function getOroEmail_Email_Address_ManagerService()
    {
        return $this->services['oro_email.email.address.manager'] = new \Oro\Bundle\EmailBundle\Entity\Manager\EmailAddressManager('OroEmail\\Cache\\OroEmailBundle\\Entity', '%sProxy');
    }

    /**
     * Gets the 'oro_email.email.cache.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EmailBundle\Cache\EmailCacheManager A Oro\Bundle\EmailBundle\Cache\EmailCacheManager instance.
     */
    protected function getOroEmail_Email_Cache_ManagerService()
    {
        $a = new \Oro\Bundle\EmailBundle\Provider\EmailBodyLoaderSelector();
        $a->addLoader(new \Oro\Bundle\ImapBundle\Provider\ImapEmailBodyLoader($this->get('oro_imap.connector.factory'), $this->get('oro_security.encoder.mcrypt')));

        return $this->services['oro_email.email.cache.manager'] = new \Oro\Bundle\EmailBundle\Cache\EmailCacheManager($a, $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_email.email.entity.builder' service.
     *
     * @return Oro\Bundle\EmailBundle\Builder\EmailEntityBuilder A Oro\Bundle\EmailBundle\Builder\EmailEntityBuilder instance.
     */
    protected function getOroEmail_Email_Entity_BuilderService()
    {
        $a = $this->get('oro_email.email.address.manager');

        return new \Oro\Bundle\EmailBundle\Builder\EmailEntityBuilder(new \Oro\Bundle\EmailBundle\Builder\EmailEntityBatchProcessor($a, $this->get('oro_email.email.owner.provider')), $a);
    }

    /**
     * Gets the 'oro_email.email_renderer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EmailBundle\Provider\EmailRenderer A Oro\Bundle\EmailBundle\Provider\EmailRenderer instance.
     */
    protected function getOroEmail_EmailRendererService()
    {
        $this->services['oro_email.email_renderer'] = $instance = new \Oro\Bundle\EmailBundle\Provider\EmailRenderer($this->get('oro_email.twig.string_loader'), array('strict_variables' => true), $this->get('oro_entity_config.provider.email'), $this->get('oro_email.cache'), 'oro_email.available_in_template_fields', $this->get('security.context'), $this->get('oro_email.twig.email_sandbox'));

        $instance->addExtension($this->get('oro_calendar.twig.dateformat'));
        $instance->addExtension($this->get('oro_locale.twig.date_time'));
        $instance->addExtension($this->get('twig.extension.intl'));

        return $instance;
    }

    /**
     * Gets the 'oro_email.emailtemplate.datagrid_helper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EmailBundle\Datagrid\EmailTemplatesGridHelper A Oro\Bundle\EmailBundle\Datagrid\EmailTemplatesGridHelper instance.
     */
    protected function getOroEmail_Emailtemplate_DatagridHelperService()
    {
        return $this->services['oro_email.emailtemplate.datagrid_helper'] = new \Oro\Bundle\EmailBundle\Datagrid\EmailTemplatesGridHelper(array('Oro\\Bundle\\CalendarBundle\\Entity\\CalendarEvent' => array('icon_class' => 'icon-calendar', 'name' => 'oro.calendar.calendarevent.entity_label', 'description' => 'oro.calendar.calendarevent.entity_description'), 'Oro\\Bundle\\EmailBundle\\Entity\\Email' => array('icon_class' => 'icon-envelope', 'name' => 'oro.email.entity_label', 'description' => 'oro.email.entity_description'), 'Oro\\Bundle\\EmailBundle\\Entity\\EmailTemplate' => array('name' => 'oro.email.emailtemplate.entity_label', 'description' => 'oro.email.emailtemplate.entity_description'), 'Oro\\Bundle\\NotificationBundle\\Entity\\EmailNotification' => array('name' => 'oro.notification.emailnotification.entity_label', 'description' => 'oro.notification.emailnotification.entity_description'), 'Oro\\Bundle\\OrganizationBundle\\Entity\\BusinessUnit' => array('name' => 'oro.organization.businessunit.entity_label', 'description' => 'oro.organization.businessunit.entity_description'), 'Oro\\Bundle\\TagBundle\\Entity\\Tag' => array('icon_class' => 'icon-tag', 'name' => 'oro.tag.entity_label', 'description' => 'oro.tag.entity_description'), 'Oro\\Bundle\\UserBundle\\Entity\\User' => array('icon_class' => 'icon-user', 'name' => 'oro.user.entity_label', 'description' => 'oro.user.entity_description'), 'Oro\\Bundle\\UserBundle\\Entity\\Role' => array('icon_class' => 'icon-signal', 'name' => 'oro.user.role.entity_label', 'description' => 'oro.user.role.entity_description'), 'Oro\\Bundle\\UserBundle\\Entity\\Group' => array('icon_class' => 'icon-home', 'name' => 'oro.user.group.entity_label', 'description' => 'oro.user.group.entity_description')));
    }

    /**
     * Gets the 'oro_email.emailtemplate.datagrid_view_list' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EmailBundle\Datagrid\EmailTemplatesViewList A Oro\Bundle\EmailBundle\Datagrid\EmailTemplatesViewList instance.
     */
    protected function getOroEmail_Emailtemplate_DatagridViewListService()
    {
        return $this->services['oro_email.emailtemplate.datagrid_view_list'] = new \Oro\Bundle\EmailBundle\Datagrid\EmailTemplatesViewList($this->get('translator.default'));
    }

    /**
     * Gets the 'oro_email.entity.cache.clearer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EmailBundle\Cache\EntityCacheClearer A Oro\Bundle\EmailBundle\Cache\EntityCacheClearer instance.
     */
    protected function getOroEmail_Entity_Cache_ClearerService()
    {
        return $this->services['oro_email.entity.cache.clearer'] = new \Oro\Bundle\EmailBundle\Cache\EntityCacheClearer('/var/www/orocrm-platform/app/emails', 'OroEmail\\Cache\\OroEmailBundle\\Entity', '%sProxy');
    }

    /**
     * Gets the 'oro_email.entity.cache.warmer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EmailBundle\Cache\EntityCacheWarmer A Oro\Bundle\EmailBundle\Cache\EntityCacheWarmer instance.
     */
    protected function getOroEmail_Entity_Cache_WarmerService()
    {
        return $this->services['oro_email.entity.cache.warmer'] = new \Oro\Bundle\EmailBundle\Cache\EntityCacheWarmer($this->get('oro_email.email.owner.provider.storage'), '/var/www/orocrm-platform/app/emails', 'OroEmail\\Cache\\OroEmailBundle\\Entity', '%sProxy');
    }

    /**
     * Gets the 'oro_email.form.email' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroEmail_Form_EmailService()
    {
        return $this->services['oro_email.form.email'] = $this->get('form.factory')->createNamed('oro_email_email', 'oro_email_email', NULL);
    }

    /**
     * Gets the 'oro_email.form.emailtemplate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroEmail_Form_EmailtemplateService()
    {
        return $this->services['oro_email.form.emailtemplate'] = $this->get('form.factory')->createNamed('oro_email_emailtemplate', 'oro_email_emailtemplate', NULL);
    }

    /**
     * Gets the 'oro_email.form.emailtemplate.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroEmail_Form_Emailtemplate_ApiService()
    {
        return $this->services['oro_email.form.emailtemplate.api'] = $this->get('form.factory')->createNamed('oro_email_emailtemplate_api', 'oro_email_emailtemplate_api', NULL);
    }

    /**
     * Gets the 'oro_email.form.handler.email' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EmailBundle\Form\Handler\EmailHandler A Oro\Bundle\EmailBundle\Form\Handler\EmailHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_email.form.handler.email' service is requested while the 'request' scope is not active
     */
    protected function getOroEmail_Form_Handler_EmailService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_email.form.handler.email', 'request');
        }

        return $this->services['oro_email.form.handler.email'] = $this->scopedServices['request']['oro_email.form.handler.email'] = new \Oro\Bundle\EmailBundle\Form\Handler\EmailHandler($this->get('oro_email.form.email'), $this->get('request'), $this->get('doctrine.orm.default_entity_manager'), $this->get('translator.default'), $this->get('security.context'), $this->get('oro_email.email.address.manager'), $this->get('oro_email.mailer.processor'), $this->get('logger'), $this->get('oro_locale.formatter.name'));
    }

    /**
     * Gets the 'oro_email.form.handler.emailtemplate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EmailBundle\Form\Handler\EmailTemplateHandler A Oro\Bundle\EmailBundle\Form\Handler\EmailTemplateHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_email.form.handler.emailtemplate' service is requested while the 'request' scope is not active
     */
    protected function getOroEmail_Form_Handler_EmailtemplateService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_email.form.handler.emailtemplate', 'request');
        }

        return $this->services['oro_email.form.handler.emailtemplate'] = $this->scopedServices['request']['oro_email.form.handler.emailtemplate'] = new \Oro\Bundle\EmailBundle\Form\Handler\EmailTemplateHandler($this->get('oro_email.form.emailtemplate'), $this->get('request'), $this->get('doctrine.orm.default_entity_manager'), $this->get('translator.default'));
    }

    /**
     * Gets the 'oro_email.form.handler.emailtemplate.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EmailBundle\Form\Handler\EmailTemplateHandler A Oro\Bundle\EmailBundle\Form\Handler\EmailTemplateHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_email.form.handler.emailtemplate.api' service is requested while the 'request' scope is not active
     */
    protected function getOroEmail_Form_Handler_Emailtemplate_ApiService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_email.form.handler.emailtemplate.api', 'request');
        }

        return $this->services['oro_email.form.handler.emailtemplate.api'] = $this->scopedServices['request']['oro_email.form.handler.emailtemplate.api'] = new \Oro\Bundle\EmailBundle\Form\Handler\EmailTemplateHandler($this->get('oro_email.form.emailtemplate.api'), $this->get('request'), $this->get('doctrine.orm.default_entity_manager'), $this->get('translator.default'));
    }

    /**
     * Gets the 'oro_email.form.subscriber.emailtemplate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EmailBundle\Form\EventListener\BuildTemplateFormSubscriber A Oro\Bundle\EmailBundle\Form\EventListener\BuildTemplateFormSubscriber instance.
     */
    protected function getOroEmail_Form_Subscriber_EmailtemplateService()
    {
        return $this->services['oro_email.form.subscriber.emailtemplate'] = new \Oro\Bundle\EmailBundle\Form\EventListener\BuildTemplateFormSubscriber($this->get('doctrine.orm.default_entity_manager'), $this->get('form.factory'));
    }

    /**
     * Gets the 'oro_email.form.type.email' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EmailBundle\Form\Type\EmailType A Oro\Bundle\EmailBundle\Form\Type\EmailType instance.
     */
    protected function getOroEmail_Form_Type_EmailService()
    {
        return $this->services['oro_email.form.type.email'] = new \Oro\Bundle\EmailBundle\Form\Type\EmailType();
    }

    /**
     * Gets the 'oro_email.form.type.email_address' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EmailBundle\Form\Type\EmailAddressType A Oro\Bundle\EmailBundle\Form\Type\EmailAddressType instance.
     */
    protected function getOroEmail_Form_Type_EmailAddressService()
    {
        return $this->services['oro_email.form.type.email_address'] = new \Oro\Bundle\EmailBundle\Form\Type\EmailAddressType();
    }

    /**
     * Gets the 'oro_email.form.type.emailtemplate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EmailBundle\Form\Type\EmailTemplateType A Oro\Bundle\EmailBundle\Form\Type\EmailTemplateType instance.
     */
    protected function getOroEmail_Form_Type_EmailtemplateService()
    {
        return $this->services['oro_email.form.type.emailtemplate'] = new \Oro\Bundle\EmailBundle\Form\Type\EmailTemplateType(array('Oro\\Bundle\\CalendarBundle\\Entity\\CalendarEvent' => array('icon_class' => 'icon-calendar', 'name' => 'oro.calendar.calendarevent.entity_label', 'description' => 'oro.calendar.calendarevent.entity_description'), 'Oro\\Bundle\\EmailBundle\\Entity\\Email' => array('icon_class' => 'icon-envelope', 'name' => 'oro.email.entity_label', 'description' => 'oro.email.entity_description'), 'Oro\\Bundle\\EmailBundle\\Entity\\EmailTemplate' => array('name' => 'oro.email.emailtemplate.entity_label', 'description' => 'oro.email.emailtemplate.entity_description'), 'Oro\\Bundle\\NotificationBundle\\Entity\\EmailNotification' => array('name' => 'oro.notification.emailnotification.entity_label', 'description' => 'oro.notification.emailnotification.entity_description'), 'Oro\\Bundle\\OrganizationBundle\\Entity\\BusinessUnit' => array('name' => 'oro.organization.businessunit.entity_label', 'description' => 'oro.organization.businessunit.entity_description'), 'Oro\\Bundle\\TagBundle\\Entity\\Tag' => array('icon_class' => 'icon-tag', 'name' => 'oro.tag.entity_label', 'description' => 'oro.tag.entity_description'), 'Oro\\Bundle\\UserBundle\\Entity\\User' => array('icon_class' => 'icon-user', 'name' => 'oro.user.entity_label', 'description' => 'oro.user.entity_description'), 'Oro\\Bundle\\UserBundle\\Entity\\Role' => array('icon_class' => 'icon-signal', 'name' => 'oro.user.role.entity_label', 'description' => 'oro.user.role.entity_description'), 'Oro\\Bundle\\UserBundle\\Entity\\Group' => array('icon_class' => 'icon-home', 'name' => 'oro.user.group.entity_label', 'description' => 'oro.user.group.entity_description')), $this->get('oro_config.user'), $this->get('oro_locale.settings'));
    }

    /**
     * Gets the 'oro_email.form.type.emailtemplate.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EmailBundle\Form\Type\EmailTemplateApiType A Oro\Bundle\EmailBundle\Form\Type\EmailTemplateApiType instance.
     */
    protected function getOroEmail_Form_Type_Emailtemplate_ApiService()
    {
        return $this->services['oro_email.form.type.emailtemplate.api'] = new \Oro\Bundle\EmailBundle\Form\Type\EmailTemplateApiType(array('Oro\\Bundle\\CalendarBundle\\Entity\\CalendarEvent' => array('icon_class' => 'icon-calendar', 'name' => 'oro.calendar.calendarevent.entity_label', 'description' => 'oro.calendar.calendarevent.entity_description'), 'Oro\\Bundle\\EmailBundle\\Entity\\Email' => array('icon_class' => 'icon-envelope', 'name' => 'oro.email.entity_label', 'description' => 'oro.email.entity_description'), 'Oro\\Bundle\\EmailBundle\\Entity\\EmailTemplate' => array('name' => 'oro.email.emailtemplate.entity_label', 'description' => 'oro.email.emailtemplate.entity_description'), 'Oro\\Bundle\\NotificationBundle\\Entity\\EmailNotification' => array('name' => 'oro.notification.emailnotification.entity_label', 'description' => 'oro.notification.emailnotification.entity_description'), 'Oro\\Bundle\\OrganizationBundle\\Entity\\BusinessUnit' => array('name' => 'oro.organization.businessunit.entity_label', 'description' => 'oro.organization.businessunit.entity_description'), 'Oro\\Bundle\\TagBundle\\Entity\\Tag' => array('icon_class' => 'icon-tag', 'name' => 'oro.tag.entity_label', 'description' => 'oro.tag.entity_description'), 'Oro\\Bundle\\UserBundle\\Entity\\User' => array('icon_class' => 'icon-user', 'name' => 'oro.user.entity_label', 'description' => 'oro.user.entity_description'), 'Oro\\Bundle\\UserBundle\\Entity\\Role' => array('icon_class' => 'icon-signal', 'name' => 'oro.user.role.entity_label', 'description' => 'oro.user.role.entity_description'), 'Oro\\Bundle\\UserBundle\\Entity\\Group' => array('icon_class' => 'icon-home', 'name' => 'oro.user.group.entity_label', 'description' => 'oro.user.group.entity_description')));
    }

    /**
     * Gets the 'oro_email.form.type.emailtemplate_select' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EmailBundle\Form\Type\EmailTemplateSelectType A Oro\Bundle\EmailBundle\Form\Type\EmailTemplateSelectType instance.
     */
    protected function getOroEmail_Form_Type_EmailtemplateSelectService()
    {
        return $this->services['oro_email.form.type.emailtemplate_select'] = new \Oro\Bundle\EmailBundle\Form\Type\EmailTemplateSelectType();
    }

    /**
     * Gets the 'oro_email.form.type.emailtemplate_translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EmailBundle\Form\Type\EmailTemplateTranslationType A Oro\Bundle\EmailBundle\Form\Type\EmailTemplateTranslationType instance.
     */
    protected function getOroEmail_Form_Type_EmailtemplateTranslationService()
    {
        return $this->services['oro_email.form.type.emailtemplate_translation'] = new \Oro\Bundle\EmailBundle\Form\Type\EmailTemplateTranslationType();
    }

    /**
     * Gets the 'oro_email.listener.config_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EmailBundle\EventListener\ConfigSubscriber A Oro\Bundle\EmailBundle\EventListener\ConfigSubscriber instance.
     */
    protected function getOroEmail_Listener_ConfigSubscriberService()
    {
        return $this->services['oro_email.listener.config_subscriber'] = new \Oro\Bundle\EmailBundle\EventListener\ConfigSubscriber($this->get('oro_email.cache'), 'oro_email.available_in_template_fields');
    }

    /**
     * Gets the 'oro_email.mailer.processor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EmailBundle\Mailer\Processor A Oro\Bundle\EmailBundle\Mailer\Processor instance.
     */
    protected function getOroEmail_Mailer_ProcessorService()
    {
        $a = $this->get('oro_email.email.address.manager');

        return $this->services['oro_email.mailer.processor'] = new \Oro\Bundle\EmailBundle\Mailer\Processor($this->get('doctrine.orm.default_entity_manager'), new \Oro\Bundle\EmailBundle\Builder\EmailEntityBuilder(new \Oro\Bundle\EmailBundle\Builder\EmailEntityBatchProcessor($a, $this->get('oro_email.email.owner.provider')), $a), $this->get('oro_email.direct_mailer'));
    }

    /**
     * Gets the 'oro_email.manager.email.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EmailBundle\Entity\Manager\EmailApiEntityManager A Oro\Bundle\EmailBundle\Entity\Manager\EmailApiEntityManager instance.
     */
    protected function getOroEmail_Manager_Email_ApiService()
    {
        return $this->services['oro_email.manager.email.api'] = new \Oro\Bundle\EmailBundle\Entity\Manager\EmailApiEntityManager('Oro\\Bundle\\EmailBundle\\Entity\\Email', $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_email.manager.emailtemplate.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager A Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager instance.
     */
    protected function getOroEmail_Manager_Emailtemplate_ApiService()
    {
        return $this->services['oro_email.manager.emailtemplate.api'] = new \Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager('Oro\\Bundle\\EmailBundle\\Entity\\EmailTemplate', $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_email.provider.variable_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EmailBundle\Provider\VariablesProvider A Oro\Bundle\EmailBundle\Provider\VariablesProvider instance.
     */
    protected function getOroEmail_Provider_VariableProviderService()
    {
        return $this->services['oro_email.provider.variable_provider'] = new \Oro\Bundle\EmailBundle\Provider\VariablesProvider($this->get('security.context'), $this->get('oro_entity_config.provider.email'));
    }

    /**
     * Gets the 'oro_email.twig.email_sandbox' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Twig_Extension_Sandbox A Twig_Extension_Sandbox instance.
     */
    protected function getOroEmail_Twig_EmailSandboxService()
    {
        return $this->services['oro_email.twig.email_sandbox'] = new \Twig_Extension_Sandbox($this->get('oro_email.twig.email_security_policy'), true);
    }

    /**
     * Gets the 'oro_email.twig.email_security_policy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Twig_Sandbox_SecurityPolicy A Twig_Sandbox_SecurityPolicy instance.
     */
    protected function getOroEmail_Twig_EmailSecurityPolicyService()
    {
        return $this->services['oro_email.twig.email_security_policy'] = new \Twig_Sandbox_SecurityPolicy(array(0 => 'app', 1 => 'for', 2 => 'if', 3 => 'spaceless'), array(0 => 'default', 1 => 'date', 2 => 'escape', 3 => 'format', 4 => 'length', 5 => 'lower', 6 => 'nl2br', 7 => 'number_format', 8 => 'title', 9 => 'trim', 10 => 'upper', 11 => 'oro_format_date', 12 => 'oro_format_time', 13 => 'oro_format_datetime'), array(), array(), array(0 => 'date', 1 => 'calendar_date_range'));
    }

    /**
     * Gets the 'oro_email.twig.string_loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Twig_Loader_String A Twig_Loader_String instance.
     */
    protected function getOroEmail_Twig_StringLoaderService()
    {
        return $this->services['oro_email.twig.string_loader'] = new \Twig_Loader_String();
    }

    /**
     * Gets the 'oro_email.validator.variables_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EmailBundle\Validator\VariablesValidator A Oro\Bundle\EmailBundle\Validator\VariablesValidator instance.
     */
    protected function getOroEmail_Validator_VariablesValidatorService()
    {
        return $this->services['oro_email.validator.variables_validator'] = new \Oro\Bundle\EmailBundle\Validator\VariablesValidator($this->get('oro_email.email_renderer'), $this->get('security.context'));
    }

    /**
     * Gets the 'oro_email.workflow.action.send_email' service.
     *
     * @return Oro\Bundle\EmailBundle\Workflow\Action\SendEmail A Oro\Bundle\EmailBundle\Workflow\Action\SendEmail instance.
     */
    protected function getOroEmail_Workflow_Action_SendEmailService()
    {
        return new \Oro\Bundle\EmailBundle\Workflow\Action\SendEmail($this->get('oro_workflow.context_accessor'), $this->get('oro_email.mailer.processor'), $this->get('oro_locale.formatter.name'));
    }

    /**
     * Gets the 'oro_entity.datagrid.extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityBundle\Grid\ExtendExtension A Oro\Bundle\EntityBundle\Grid\ExtendExtension instance.
     */
    protected function getOroEntity_Datagrid_ExtensionService()
    {
        return $this->services['oro_entity.datagrid.extension'] = new \Oro\Bundle\EntityBundle\Grid\ExtendExtension($this->get('oro_entity_config.config_manager'));
    }

    /**
     * Gets the 'oro_entity.entity_field_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityBundle\Provider\EntityFieldProvider A Oro\Bundle\EntityBundle\Provider\EntityFieldProvider instance.
     */
    protected function getOroEntity_EntityFieldProviderService()
    {
        return $this->services['oro_entity.entity_field_provider'] = new \Oro\Bundle\EntityBundle\Provider\EntityFieldProvider($this->get('oro_entity_config.provider.entity'), $this->get('oro_entity.orm.entity_class_resolver'), $this->get('doctrine'), $this->get('oro_entity.entity_provider'), $this->get('translator.default'));
    }

    /**
     * Gets the 'oro_entity.entity_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityBundle\Provider\EntityProvider A Oro\Bundle\EntityBundle\Provider\EntityProvider instance.
     */
    protected function getOroEntity_EntityProviderService()
    {
        return $this->services['oro_entity.entity_provider'] = new \Oro\Bundle\EntityBundle\Provider\EntityProvider($this->get('oro_entity_config.provider.entity'), $this->get('oro_entity.orm.entity_class_resolver'), $this->get('translator.default'));
    }

    /**
     * Gets the 'oro_entity.event_listener.custom_entity_grid_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityBundle\EventListener\CustomEntityGridListener A Oro\Bundle\EntityBundle\EventListener\CustomEntityGridListener instance.
     */
    protected function getOroEntity_EventListener_CustomEntityGridSubscriberService()
    {
        $this->services['oro_entity.event_listener.custom_entity_grid_subscriber'] = $instance = new \Oro\Bundle\EntityBundle\EventListener\CustomEntityGridListener($this->get('oro_entity_config.config_manager'), $this->get('oro_datagrid.datagrid.request_params'), $this->get('router'));

        if ($this->has('request')) {
            $instance->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }

        return $instance;
    }

    /**
     * Gets the 'oro_entity.event_listener.relation_entity_grid_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityBundle\EventListener\RelationEntityGridListener A Oro\Bundle\EntityBundle\EventListener\RelationEntityGridListener instance.
     */
    protected function getOroEntity_EventListener_RelationEntityGridSubscriberService()
    {
        $this->services['oro_entity.event_listener.relation_entity_grid_subscriber'] = $instance = new \Oro\Bundle\EntityBundle\EventListener\RelationEntityGridListener($this->get('oro_entity_config.config_manager'), $this->get('oro_datagrid.datagrid.request_params'), $this->get('router'));

        if ($this->has('request')) {
            $instance->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }

        return $instance;
    }

    /**
     * Gets the 'oro_entity.form.handler.entity_select' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityBundle\Form\Handler\EntitySelectHandler A Oro\Bundle\EntityBundle\Form\Handler\EntitySelectHandler instance.
     */
    protected function getOroEntity_Form_Handler_EntitySelectService()
    {
        return $this->services['oro_entity.form.handler.entity_select'] = new \Oro\Bundle\EntityBundle\Form\Handler\EntitySelectHandler($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_entity.form.type.custom_entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityBundle\Form\Type\CustomEntityType A Oro\Bundle\EntityBundle\Form\Type\CustomEntityType instance.
     */
    protected function getOroEntity_Form_Type_CustomEntityService()
    {
        return $this->services['oro_entity.form.type.custom_entity'] = new \Oro\Bundle\EntityBundle\Form\Type\CustomEntityType($this->get('oro_entity_config.config_manager'), $this->get('router'));
    }

    /**
     * Gets the 'oro_entity.form.type.entity_choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityBundle\Form\Type\EntityChoiceType A Oro\Bundle\EntityBundle\Form\Type\EntityChoiceType instance.
     */
    protected function getOroEntity_Form_Type_EntityChoiceService()
    {
        return $this->services['oro_entity.form.type.entity_choice'] = new \Oro\Bundle\EntityBundle\Form\Type\EntityChoiceType($this->get('oro_entity.entity_provider'));
    }

    /**
     * Gets the 'oro_entity.form.type.entity_field_choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityBundle\Form\Type\EntityFieldChoiceType A Oro\Bundle\EntityBundle\Form\Type\EntityFieldChoiceType instance.
     */
    protected function getOroEntity_Form_Type_EntityFieldChoiceService()
    {
        return $this->services['oro_entity.form.type.entity_field_choice'] = new \Oro\Bundle\EntityBundle\Form\Type\EntityFieldChoiceType($this->get('oro_entity.entity_provider'), $this->get('oro_entity.entity_field_provider'), $this->get('translator.default'));
    }

    /**
     * Gets the 'oro_entity.form.type.entity_select' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityBundle\Form\Type\EntitySelectType A Oro\Bundle\EntityBundle\Form\Type\EntitySelectType instance.
     */
    protected function getOroEntity_Form_Type_EntitySelectService()
    {
        return $this->services['oro_entity.form.type.entity_select'] = new \Oro\Bundle\EntityBundle\Form\Type\EntitySelectType($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_entity.form.type.option_select' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityBundle\Form\Type\OptionSelectType A Oro\Bundle\EntityBundle\Form\Type\OptionSelectType instance.
     */
    protected function getOroEntity_Form_Type_OptionSelectService()
    {
        return $this->services['oro_entity.form.type.option_select'] = new \Oro\Bundle\EntityBundle\Form\Type\OptionSelectType($this->get('oro_entity_config.config_manager'));
    }

    /**
     * Gets the 'oro_entity.listener.navigation_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityBundle\EventListener\NavigationListener A Oro\Bundle\EntityBundle\EventListener\NavigationListener instance.
     */
    protected function getOroEntity_Listener_NavigationListenerService()
    {
        return $this->services['oro_entity.listener.navigation_listener'] = new \Oro\Bundle\EntityBundle\EventListener\NavigationListener($this->get('oro_security.security_facade'), $this->get('doctrine.orm.default_entity_manager'), $this->get('oro_entity_config.provider.entity'), $this->get('oro_entity_config.provider.extend'), $this->get('translator.default'));
    }

    /**
     * Gets the 'oro_entity.orm.entity_class_accessor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityBundle\ORM\EntityClassAccessor A Oro\Bundle\EntityBundle\ORM\EntityClassAccessor instance.
     */
    protected function getOroEntity_Orm_EntityClassAccessorService()
    {
        return $this->services['oro_entity.orm.entity_class_accessor'] = new \Oro\Bundle\EntityBundle\ORM\EntityClassAccessor();
    }

    /**
     * Gets the 'oro_entity.orm.entity_class_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityBundle\ORM\EntityClassResolver A Oro\Bundle\EntityBundle\ORM\EntityClassResolver instance.
     */
    protected function getOroEntity_Orm_EntityClassResolverService()
    {
        return $this->services['oro_entity.orm.entity_class_resolver'] = new \Oro\Bundle\EntityBundle\ORM\EntityClassResolver($this->get('doctrine'));
    }

    /**
     * Gets the 'oro_entity.orm.sql_filter_collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityBundle\ORM\Query\FilterCollection A Oro\Bundle\EntityBundle\ORM\Query\FilterCollection instance.
     */
    protected function getOroEntity_Orm_SqlFilterCollectionService()
    {
        return $this->services['oro_entity.orm.sql_filter_collection'] = new \Oro\Bundle\EntityBundle\ORM\Query\FilterCollection($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_entity.owner.entity_config_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityBundle\EventListener\EntityConfigSubscriber A Oro\Bundle\EntityBundle\EventListener\EntityConfigSubscriber instance.
     */
    protected function getOroEntity_Owner_EntityConfigSubscriberService()
    {
        return $this->services['oro_entity.owner.entity_config_subscriber'] = new \Oro\Bundle\EntityBundle\EventListener\EntityConfigSubscriber();
    }

    /**
     * Gets the 'oro_entity_config.cache.cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityConfigBundle\Config\ConfigCache A Oro\Bundle\EntityConfigBundle\Config\ConfigCache instance.
     */
    protected function getOroEntityConfig_Cache_CacheService()
    {
        return $this->services['oro_entity_config.cache.cache'] = new \Oro\Bundle\EntityConfigBundle\Config\ConfigCache($this->get('oro_entity_config.cache.file_cache'), $this->get('oro_entity_config.model.file_cache'));
    }

    /**
     * Gets the 'oro_entity_config.cache.file_cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SecurityBundle\Cache\FilesystemCache A Oro\Bundle\SecurityBundle\Cache\FilesystemCache instance.
     */
    protected function getOroEntityConfig_Cache_FileCacheService()
    {
        $this->services['oro_entity_config.cache.file_cache'] = $instance = new \Oro\Bundle\SecurityBundle\Cache\FilesystemCache('/var/www/orocrm-platform/app/cache/de_/oro_data');

        $instance->setNamespace('oro_entity_config.cache');

        return $instance;
    }

    /**
     * Gets the 'oro_entity_config.config_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityConfigBundle\Config\ConfigManager A Oro\Bundle\EntityConfigBundle\Config\ConfigManager instance.
     */
    protected function getOroEntityConfig_ConfigManagerService()
    {
        $this->services['oro_entity_config.config_manager'] = $instance = new \Oro\Bundle\EntityConfigBundle\Config\ConfigManager(new \Metadata\MetadataFactory(new \Oro\Bundle\EntityConfigBundle\Metadata\Driver\AnnotationDriver($this->get('annotation_reader'))), $this->get('event_dispatcher'), $this->get('oro_entity_config.link.provider_bag'), new \Oro\Bundle\EntityConfigBundle\Config\ConfigModelManager($this->get('oro_entity_config.link.entity_manager')), new \Oro\Bundle\EntityConfigBundle\Audit\AuditManager($this->get('oro_entity_config.link.config_manager'), $this->get('oro_entity_config.link.security_context')), $this);

        $instance->setCache($this->get('oro_entity_config.cache.cache'));

        return $instance;
    }

    /**
     * Gets the 'oro_entity_config.event_listener.audit_log_grid_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataAuditBundle\EventListener\AuditHistoryGridListener A Oro\Bundle\DataAuditBundle\EventListener\AuditHistoryGridListener instance.
     */
    protected function getOroEntityConfig_EventListener_AuditLogGridListenerService()
    {
        return $this->services['oro_entity_config.event_listener.audit_log_grid_listener'] = new \Oro\Bundle\DataAuditBundle\EventListener\AuditHistoryGridListener($this->get('oro_datagrid.datagrid.request_params'), array(0 => 'objectClass', 1 => 'fieldName'));
    }

    /**
     * Gets the 'oro_entity_config.event_listener.entityconfig_grid_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityConfigBundle\EventListener\EntityConfigGridListener A Oro\Bundle\EntityConfigBundle\EventListener\EntityConfigGridListener instance.
     */
    protected function getOroEntityConfig_EventListener_EntityconfigGridListenerService()
    {
        return $this->services['oro_entity_config.event_listener.entityconfig_grid_listener'] = new \Oro\Bundle\EntityConfigBundle\EventListener\EntityConfigGridListener($this->get('oro_entity_config.config_manager'));
    }

    /**
     * Gets the 'oro_entity_config.event_listener.entityfields_grid_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityConfigBundle\EventListener\FieldConfigGridListener A Oro\Bundle\EntityConfigBundle\EventListener\FieldConfigGridListener instance.
     */
    protected function getOroEntityConfig_EventListener_EntityfieldsGridListenerService()
    {
        return $this->services['oro_entity_config.event_listener.entityfields_grid_listener'] = new \Oro\Bundle\EntityConfigBundle\EventListener\FieldConfigGridListener($this->get('oro_entity_config.config_manager'), $this->get('oro_datagrid.datagrid.request_params'));
    }

    /**
     * Gets the 'oro_entity_config.event_listener.option_set_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityConfigBundle\EventListener\OptionSetListener A Oro\Bundle\EntityConfigBundle\EventListener\OptionSetListener instance.
     */
    protected function getOroEntityConfig_EventListener_OptionSetListenerService()
    {
        return $this->services['oro_entity_config.event_listener.option_set_listener'] = new \Oro\Bundle\EntityConfigBundle\EventListener\OptionSetListener();
    }

    /**
     * Gets the 'oro_entity_config.extension.config' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityConfigBundle\Form\Extension\ConfigExtension A Oro\Bundle\EntityConfigBundle\Form\Extension\ConfigExtension instance.
     */
    protected function getOroEntityConfig_Extension_ConfigService()
    {
        return $this->services['oro_entity_config.extension.config'] = new \Oro\Bundle\EntityConfigBundle\Form\Extension\ConfigExtension();
    }

    /**
     * Gets the 'oro_entity_config.link.config_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink A Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink instance.
     */
    protected function getOroEntityConfig_Link_ConfigManagerService()
    {
        return $this->services['oro_entity_config.link.config_manager'] = new \Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink($this, 'oro_entity_config.config_manager', false);
    }

    /**
     * Gets the 'oro_entity_config.link.entity_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink A Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink instance.
     */
    protected function getOroEntityConfig_Link_EntityManagerService()
    {
        return $this->services['oro_entity_config.link.entity_manager'] = new \Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink($this, 'doctrine.orm.default_entity_manager', false);
    }

    /**
     * Gets the 'oro_entity_config.link.provider_bag' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink A Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink instance.
     */
    protected function getOroEntityConfig_Link_ProviderBagService()
    {
        return $this->services['oro_entity_config.link.provider_bag'] = new \Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink($this, 'oro_entity_config.provider_bag', false);
    }

    /**
     * Gets the 'oro_entity_config.link.security_context' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink A Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink instance.
     */
    protected function getOroEntityConfig_Link_SecurityContextService()
    {
        return $this->services['oro_entity_config.link.security_context'] = new \Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink($this, 'security.context', false);
    }

    /**
     * Gets the 'oro_entity_config.model.file_cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SecurityBundle\Cache\FilesystemCache A Oro\Bundle\SecurityBundle\Cache\FilesystemCache instance.
     */
    protected function getOroEntityConfig_Model_FileCacheService()
    {
        $this->services['oro_entity_config.model.file_cache'] = $instance = new \Oro\Bundle\SecurityBundle\Cache\FilesystemCache('/var/www/orocrm-platform/app/cache/de_/oro_data');

        $instance->setNamespace('oro_entity_config.model');

        return $instance;
    }

    /**
     * Gets the 'oro_entity_config.provider.dataaudit' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider A Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider instance.
     */
    protected function getOroEntityConfig_Provider_DataauditService()
    {
        return $this->services['oro_entity_config.provider.dataaudit'] = new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($this->get('oro_entity_config.config_manager'), $this, 'dataaudit', array('entity' => array('items' => array('auditable' => array('options' => array('priority' => 60, 'default_value' => false), 'grid' => array('type' => 'boolean', 'label' => 'Auditable', 'filter_type' => 'boolean', 'required' => true, 'sortable' => true, 'filterable' => true, 'show_filter' => false), 'form' => array('type' => 'choice', 'options' => array('choices' => array(0 => 'No', 1 => 'Yes'), 'empty_value' => false, 'block' => 'other', 'label' => 'Auditable'))))), 'field' => array('items' => array('auditable' => array('options' => array('priority' => 60, 'default_value' => false), 'grid' => array('type' => 'boolean', 'label' => 'Auditable', 'filter_type' => 'boolean', 'required' => true, 'sortable' => true, 'filterable' => false, 'show_filter' => false), 'form' => array('type' => 'choice', 'options' => array('choices' => array(0 => 'No', 1 => 'Yes'), 'empty_value' => false, 'block' => 'other', 'label' => 'Auditable')))))));
    }

    /**
     * Gets the 'oro_entity_config.provider.datagrid' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider A Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider instance.
     */
    protected function getOroEntityConfig_Provider_DatagridService()
    {
        return $this->services['oro_entity_config.provider.datagrid'] = new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($this->get('oro_entity_config.config_manager'), $this, 'datagrid', array('field' => array('items' => array('is_visible' => array('options' => array('default_value' => true, 'allowed_type' => array(0 => 'string', 1 => 'integer', 2 => 'smallint', 3 => 'bigint', 4 => 'boolean', 5 => 'decimal', 6 => 'date', 7 => 'text', 8 => 'float'), 'required_property' => array('config_id' => array('scope' => 'extend'), 'code' => 'owner', 'value' => 'Custom')), 'form' => array('type' => 'choice', 'options' => array('choices' => array(0 => 'No', 1 => 'Yes'), 'empty_value' => false, 'block' => 'other', 'label' => 'Show on grid')))))));
    }

    /**
     * Gets the 'oro_entity_config.provider.email' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider A Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider instance.
     */
    protected function getOroEntityConfig_Provider_EmailService()
    {
        return $this->services['oro_entity_config.provider.email'] = new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($this->get('oro_entity_config.config_manager'), $this, 'email', array('field' => array('items' => array('available_in_template' => array('options' => array('default_value' => false, 'is_bool' => true), 'form' => array('type' => 'choice', 'options' => array('choices' => array(0 => 'No', 1 => 'Yes'), 'empty_value' => false, 'block' => 'other', 'label' => 'Available in email templates')))))));
    }

    /**
     * Gets the 'oro_entity_config.provider.entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider A Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider instance.
     */
    protected function getOroEntityConfig_Provider_EntityService()
    {
        return $this->services['oro_entity_config.provider.entity'] = new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($this->get('oro_entity_config.config_manager'), $this, 'entity', array('entity' => array('form' => array('block_config' => array('entity' => array('title' => 'General', 'priority' => 20))), 'items' => array('icon' => array('options' => array('priority' => 10), 'form' => array('type' => 'oro_icon_select', 'options' => array('block' => 'entity'))), 'label' => array('options' => array('translatable' => true, 'priority' => 20), 'constraints' => array(0 => array('NotBlank' => NULL), 1 => array('Length' => array('min' => 2, 'max' => 50))), 'grid' => array('type' => 'html', 'label' => 'Label', 'filter_type' => 'string', 'required' => true, 'template' => 'OroEntityConfigBundle:Config:propertyLabel.html.twig'), 'form' => array('type' => 'text', 'options' => array('block' => 'entity', 'required' => true))), 'plural_label' => array('options' => array('translatable' => true, 'priority' => 35), 'constraints' => array(0 => array('Length' => array('min' => 2, 'max' => 50))), 'form' => array('type' => 'text', 'options' => array('block' => 'entity', 'required' => true))), 'description' => array('options' => array('translatable' => true, 'priority' => 50), 'constraints' => array(0 => array('Length' => array('max' => 500))), 'form' => array('type' => 'textarea', 'options' => array('block' => 'entity', 'required' => false))))), 'field' => array('form' => array('block_config' => array('entity' => array('title' => 'General', 'priority' => 20))), 'items' => array('label' => array('options' => array('translatable' => true, 'priority' => 10), 'constraints' => array(0 => array('NotBlank' => NULL), 1 => array('Length' => array('min' => 2, 'max' => 50))), 'grid' => array('type' => 'html', 'label' => 'Label', 'filter_type' => 'string', 'required' => true, 'sortable' => true, 'filterable' => false, 'show_filter' => false, 'template' => 'OroEntityConfigBundle:Config:propertyLabel.html.twig'), 'form' => array('type' => 'text', 'options' => array('block' => 'entity', 'required' => true))), 'description' => array('options' => array('translatable' => true, 'priority' => 30), 'constraints' => array(0 => array('Length' => array('max' => 500))), 'form' => array('type' => 'textarea', 'options' => array('block' => 'entity', 'required' => false)))))));
    }

    /**
     * Gets the 'oro_entity_config.provider.extend' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider A Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider instance.
     */
    protected function getOroEntityConfig_Provider_ExtendService()
    {
        return $this->services['oro_entity_config.provider.extend'] = new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($this->get('oro_entity_config.config_manager'), $this, 'extend', array('entity' => array('require_js' => array(0 => 'oro/init-entity-extend-apply', 1 => 'oro/init-entity-extend-relation'), 'grid_action' => array(0 => array('name' => 'Remove', 'route' => 'oro_entityextend_entity_remove', 'type' => 'ajax', 'icon' => 'trash', 'filter' => array('owner' => 'Custom', 'state' => array(0 => 'New', 1 => 'Requires update', 2 => 'Active')), 'args' => array(0 => 'id')), 1 => array('name' => 'Restore', 'route' => 'oro_entityextend_entity_unremove', 'type' => 'ajax', 'icon' => 'backward', 'filter' => array('owner' => 'Custom', 'state' => array(0 => 'Deleted')), 'args' => array(0 => 'id'))), 'layout_action' => array(0 => array('name' => 'Create Entity', 'route' => 'oro_entityextend_entity_create')), 'items' => array('owner' => array('options' => array('priority' => 40, 'auditable' => false, 'default_value' => 'System'), 'grid' => array('type' => 'string', 'label' => 'Type', 'filter_type' => 'choice', 'choices' => array('System' => 'System', 'Custom' => 'Custom'), 'required' => true, 'sortable' => true, 'filterable' => true, 'show_filter' => true), 'form' => array('type' => 'text', 'block' => 'entity', 'options' => array('read_only' => true, 'required' => false, 'label' => 'Type'))), 'is_extend' => array('options' => array('priority' => 27, 'default_value' => false, 'auditable' => false), 'grid' => array('type' => 'boolean', 'label' => 'Is Extend', 'filter_type' => 'boolean', 'required' => true, 'sortable' => true, 'filterable' => true, 'show_filter' => false)), 'state' => array('options' => array('priority' => 25, 'default_value' => 'Active', 'label' => 'Schema status'), 'grid' => array('type' => 'string', 'label' => 'Schema status', 'filter_type' => 'choice', 'choices' => array('system' => '', 'new' => 'New', 'active' => 'Active', 'updated' => 'Requires update', 'deleted' => 'To be deleted'), 'required' => true, 'sortable' => true, 'filterable' => false, 'show_filter' => false)), 'is_deleted' => array('options' => array('default_value' => false, 'auditable' => false), 'grid' => array('show_column' => false, 'renderable' => false, 'query' => array('operator' => '!=', 'value' => true))), 'unique_key' => array('options' => array('auditable' => false, 'serializable' => true)), 'index' => array('options' => array('auditable' => false, 'serializable' => true)), 'upgradeable' => array('options' => array('auditable' => false, 'default_value' => true)), 'relation' => array('options' => array('auditable' => false, 'serializable' => true, 'default_value' => array())), 'schema' => array('options' => array('auditable' => false, 'serializable' => true, 'default_value' => array())))), 'field' => array('grid_action' => array(0 => array('name' => 'Remove', 'route' => 'oro_entityextend_field_remove', 'type' => 'ajax', 'icon' => 'trash', 'filter' => array('owner' => 'Custom', 'state' => array(0 => 'New', 1 => 'Requires update', 2 => 'Active')), 'args' => array(0 => 'id')), 1 => array('name' => 'Restore', 'route' => 'oro_entityextend_field_unremove', 'type' => 'ajax', 'icon' => 'backward', 'filter' => array('owner' => 'Custom', 'state' => array(0 => 'Deleted')), 'args' => array(0 => 'id'))), 'layout_action' => array(0 => array('name' => 'Manage unique keys', 'route' => 'oro_entityextend_entity_unique_key', 'entity_id' => true, 'filter' => array('is_extend' => true, 'upgradeable' => true)), 1 => array('name' => 'Create field', 'route' => 'oro_entityextend_field_create', 'entity_id' => true, 'filter' => array('is_extend' => true)), 2 => array('name' => 'Update schema', 'route' => 'oro_entityextend_update', 'entity_id' => true, 'aClass' => 'btn-danger entity-extend-apply', 'void' => true, 'filter' => array('upgradeable' => true, 'state' => array(0 => 'New', 1 => 'Requires update', 2 => 'Deleted')))), 'items' => array('owner' => array('options' => array('priority' => 20, 'default_value' => 'System', 'auditable' => false), 'grid' => array('type' => 'string', 'label' => 'Type', 'filter_type' => 'string', 'required' => true, 'sortable' => true, 'filterable' => false, 'show_filter' => false)), 'state' => array('options' => array('priority' => 25, 'default_value' => 'Active', 'label' => 'Schema status'), 'grid' => array('type' => 'string', 'label' => 'Schema status', 'filter_type' => 'choice', 'choices' => array('new' => 'New', 'applied' => 'Applied', 'updated' => 'Requires update', 'deleted' => 'To be deleted'), 'required' => true, 'sortable' => true, 'filterable' => false, 'show_filter' => false)), 'is_extend' => array('options' => array('default_value' => false, 'auditable' => false)), 'extend' => array('options' => array('default_value' => false, 'auditable' => false)), 'length' => array('options' => array('default_value' => 255, 'allowed_type' => array(0 => 'string'), 'required_property' => array('config_id' => array('scope' => 'extend'), 'code' => 'owner', 'value' => 'Custom')), 'constraints' => array(0 => array('Regex' => '/^[0-9]*$/'), 1 => array('Range' => array('min' => 1, 'max' => 255))), 'form' => array('type' => 'text', 'options' => array('required' => false, 'label' => 'Length', 'block' => 'entity', 'subblock' => 'properties'))), 'precision' => array('options' => array('default_value' => 2, 'allowed_type' => array(0 => 'decimal'), 'required_property' => array('config_id' => array('scope' => 'extend'), 'code' => 'owner', 'value' => 'Custom')), 'constraints' => array(0 => array('Regex' => '/^[0-9]*$/'), 1 => array('Range' => array('min' => 0))), 'form' => array('type' => 'text', 'options' => array('required' => false, 'label' => 'Precision', 'block' => 'entity', 'subblock' => 'properties'))), 'scale' => array('options' => array('default_value' => 2, 'allowed_type' => array(0 => 'decimal'), 'required_property' => array('config_id' => array('scope' => 'extend'), 'code' => 'owner', 'value' => 'Custom')), 'constraints' => array(0 => array('Regex' => '/^[0-9]*$/'), 1 => array('Range' => array('min' => 0))), 'form' => array('type' => 'text', 'options' => array('required' => false, 'label' => 'Scale', 'block' => 'entity', 'subblock' => 'properties'))), 'is_deleted' => array('options' => array('default_value' => false, 'auditable' => false), 'grid' => array('show_column' => false, 'renderable' => false, 'query' => array('operator' => '!=', 'value' => true))), 'is_inverse' => array('options' => array('default_value' => false, 'auditable' => false)), 'relation' => array('options' => array('allowed_type' => array(0 => 'oneToMany', 1 => 'manyToOne', 2 => 'manyToMany'), 'serializable' => true, 'required_property' => array('config_id' => array('field_name' => NULL, 'scope' => 'extend'), 'code' => 'is_extend', 'value' => true)), 'form' => array('type' => 'oro_entity_relation_type', 'options' => array('block' => 'entity', 'subblock' => 'properties'))), 'schema' => array('options' => array('serializable' => true)), 'target_entity' => array('options' => array('auditable' => false)), 'target_field' => array('options' => array('auditable' => false)), 'target_grid' => array('options' => array('auditable' => false, 'serializable' => true)), 'target_title' => array('options' => array('auditable' => false, 'serializable' => true)), 'target_detailed' => array('options' => array('auditable' => false, 'serializable' => true)), 'set_expanded' => array('options' => array('allowed_type' => array(0 => 'optionSet'), 'create_only' => true), 'form' => array('type' => 'choice', 'options' => array('required' => false, 'choices' => array(0 => 'No', 1 => 'Yes'), 'empty_value' => false, 'label' => 'Expanded', 'attr' => array('class' => 'is-option-set-expanded'), 'block' => 'entity', 'subblock' => 'properties'))), 'set_options' => array('options' => array('allowed_type' => array(0 => 'optionSet'), 'auditable' => false), 'form' => array('type' => 'oro_entity_option_set_collection', 'options' => array('required' => false, 'label' => 'Options', 'block' => 'entity', 'subblock' => 'properties', 'type' => 'oro_entity_option_set', 'tooltip' => 'Deleting an option will remove these values from related records.')))))));
    }

    /**
     * Gets the 'oro_entity_config.provider.form' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider A Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider instance.
     */
    protected function getOroEntityConfig_Provider_FormService()
    {
        return $this->services['oro_entity_config.provider.form'] = new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($this->get('oro_entity_config.config_manager'), $this, 'form', array('field' => array('items' => array('is_enabled' => array('options' => array('default_value' => true, 'required_property' => array('config_id' => array('scope' => 'extend'), 'code' => 'owner', 'value' => 'Custom')), 'form' => array('type' => 'choice', 'options' => array('choices' => array(0 => 'No', 1 => 'Yes'), 'empty_value' => false, 'block' => 'other', 'label' => 'Show on form')))))));
    }

    /**
     * Gets the 'oro_entity_config.provider.ownership' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider A Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider instance.
     */
    protected function getOroEntityConfig_Provider_OwnershipService()
    {
        return $this->services['oro_entity_config.provider.ownership'] = new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($this->get('oro_entity_config.config_manager'), $this, 'ownership', array('entity' => array('items' => array('owner_type' => array('options' => array('required_property' => array('config_id' => array('scope' => 'extend'), 'code' => 'owner', 'value' => 'System'), 'priority' => 100), 'constraints' => array(0 => array('NotBlank' => NULL)), 'grid' => array('type' => 'select', 'label' => 'Ownership Type', 'filter_type' => 'choice', 'required' => true, 'sortable' => true, 'filterable' => true, 'show_filter' => true, 'choices' => 'oro_organization.method.get_ownership_type'), 'form' => array('type' => 'oro_type_choice_ownership_type', 'options' => array('block' => 'other', 'required' => true, 'label' => 'Ownership Type')))))));
    }

    /**
     * Gets the 'oro_entity_config.provider.security' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider A Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider instance.
     */
    protected function getOroEntityConfig_Provider_SecurityService()
    {
        return $this->services['oro_entity_config.provider.security'] = new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($this->get('oro_entity_config.config_manager'), $this, 'security', array('entity' => array('items' => array('type' => array('options' => array('auditable' => false)), 'permissions' => NULL, 'group_name' => NULL))));
    }

    /**
     * Gets the 'oro_entity_config.provider.view' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider A Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider instance.
     */
    protected function getOroEntityConfig_Provider_ViewService()
    {
        return $this->services['oro_entity_config.provider.view'] = new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($this->get('oro_entity_config.config_manager'), $this, 'view', array('field' => array('items' => array('is_displayable' => array('options' => array('default_value' => true, 'required_property' => array('config_id' => array('scope' => 'extend'), 'code' => 'owner', 'value' => 'Custom')), 'form' => array('type' => 'choice', 'options' => array('choices' => array(0 => 'No', 1 => 'Yes'), 'empty_value' => false, 'block' => 'other', 'label' => 'Show on view')))))));
    }

    /**
     * Gets the 'oro_entity_config.provider_bag' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityConfigBundle\Provider\ConfigProviderBag A Oro\Bundle\EntityConfigBundle\Provider\ConfigProviderBag instance.
     */
    protected function getOroEntityConfig_ProviderBagService()
    {
        $a = $this->get('oro_entity_config.config_manager');

        $this->services['oro_entity_config.provider_bag'] = $instance = new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProviderBag();

        $instance->addProvider(new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($a, $this, 'security', array('entity' => array('items' => array('type' => array('options' => array('auditable' => false)), 'permissions' => NULL, 'group_name' => NULL)))));
        $instance->addProvider(new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($a, $this, 'entity', array('entity' => array('form' => array('block_config' => array('entity' => array('title' => 'General', 'priority' => 20))), 'items' => array('icon' => array('options' => array('priority' => 10), 'form' => array('type' => 'oro_icon_select', 'options' => array('block' => 'entity'))), 'label' => array('options' => array('translatable' => true, 'priority' => 20), 'constraints' => array(0 => array('NotBlank' => NULL), 1 => array('Length' => array('min' => 2, 'max' => 50))), 'grid' => array('type' => 'html', 'label' => 'Label', 'filter_type' => 'string', 'required' => true, 'template' => 'OroEntityConfigBundle:Config:propertyLabel.html.twig'), 'form' => array('type' => 'text', 'options' => array('block' => 'entity', 'required' => true))), 'plural_label' => array('options' => array('translatable' => true, 'priority' => 35), 'constraints' => array(0 => array('Length' => array('min' => 2, 'max' => 50))), 'form' => array('type' => 'text', 'options' => array('block' => 'entity', 'required' => true))), 'description' => array('options' => array('translatable' => true, 'priority' => 50), 'constraints' => array(0 => array('Length' => array('max' => 500))), 'form' => array('type' => 'textarea', 'options' => array('block' => 'entity', 'required' => false))))), 'field' => array('form' => array('block_config' => array('entity' => array('title' => 'General', 'priority' => 20))), 'items' => array('label' => array('options' => array('translatable' => true, 'priority' => 10), 'constraints' => array(0 => array('NotBlank' => NULL), 1 => array('Length' => array('min' => 2, 'max' => 50))), 'grid' => array('type' => 'html', 'label' => 'Label', 'filter_type' => 'string', 'required' => true, 'sortable' => true, 'filterable' => false, 'show_filter' => false, 'template' => 'OroEntityConfigBundle:Config:propertyLabel.html.twig'), 'form' => array('type' => 'text', 'options' => array('block' => 'entity', 'required' => true))), 'description' => array('options' => array('translatable' => true, 'priority' => 30), 'constraints' => array(0 => array('Length' => array('max' => 500))), 'form' => array('type' => 'textarea', 'options' => array('block' => 'entity', 'required' => false))))))));
        $instance->addProvider(new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($a, $this, 'datagrid', array('field' => array('items' => array('is_visible' => array('options' => array('default_value' => true, 'allowed_type' => array(0 => 'string', 1 => 'integer', 2 => 'smallint', 3 => 'bigint', 4 => 'boolean', 5 => 'decimal', 6 => 'date', 7 => 'text', 8 => 'float'), 'required_property' => array('config_id' => array('scope' => 'extend'), 'code' => 'owner', 'value' => 'Custom')), 'form' => array('type' => 'choice', 'options' => array('choices' => array(0 => 'No', 1 => 'Yes'), 'empty_value' => false, 'block' => 'other', 'label' => 'Show on grid'))))))));
        $instance->addProvider(new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($a, $this, 'form', array('field' => array('items' => array('is_enabled' => array('options' => array('default_value' => true, 'required_property' => array('config_id' => array('scope' => 'extend'), 'code' => 'owner', 'value' => 'Custom')), 'form' => array('type' => 'choice', 'options' => array('choices' => array(0 => 'No', 1 => 'Yes'), 'empty_value' => false, 'block' => 'other', 'label' => 'Show on form'))))))));
        $instance->addProvider(new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($a, $this, 'view', array('field' => array('items' => array('is_displayable' => array('options' => array('default_value' => true, 'required_property' => array('config_id' => array('scope' => 'extend'), 'code' => 'owner', 'value' => 'Custom')), 'form' => array('type' => 'choice', 'options' => array('choices' => array(0 => 'No', 1 => 'Yes'), 'empty_value' => false, 'block' => 'other', 'label' => 'Show on view'))))))));
        $instance->addProvider(new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($a, $this, 'dataaudit', array('entity' => array('items' => array('auditable' => array('options' => array('priority' => 60, 'default_value' => false), 'grid' => array('type' => 'boolean', 'label' => 'Auditable', 'filter_type' => 'boolean', 'required' => true, 'sortable' => true, 'filterable' => true, 'show_filter' => false), 'form' => array('type' => 'choice', 'options' => array('choices' => array(0 => 'No', 1 => 'Yes'), 'empty_value' => false, 'block' => 'other', 'label' => 'Auditable'))))), 'field' => array('items' => array('auditable' => array('options' => array('priority' => 60, 'default_value' => false), 'grid' => array('type' => 'boolean', 'label' => 'Auditable', 'filter_type' => 'boolean', 'required' => true, 'sortable' => true, 'filterable' => false, 'show_filter' => false), 'form' => array('type' => 'choice', 'options' => array('choices' => array(0 => 'No', 1 => 'Yes'), 'empty_value' => false, 'block' => 'other', 'label' => 'Auditable'))))))));
        $instance->addProvider(new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($a, $this, 'email', array('field' => array('items' => array('available_in_template' => array('options' => array('default_value' => false, 'is_bool' => true), 'form' => array('type' => 'choice', 'options' => array('choices' => array(0 => 'No', 1 => 'Yes'), 'empty_value' => false, 'block' => 'other', 'label' => 'Available in email templates'))))))));
        $instance->addProvider(new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($a, $this, 'extend', array('entity' => array('require_js' => array(0 => 'oro/init-entity-extend-apply', 1 => 'oro/init-entity-extend-relation'), 'grid_action' => array(0 => array('name' => 'Remove', 'route' => 'oro_entityextend_entity_remove', 'type' => 'ajax', 'icon' => 'trash', 'filter' => array('owner' => 'Custom', 'state' => array(0 => 'New', 1 => 'Requires update', 2 => 'Active')), 'args' => array(0 => 'id')), 1 => array('name' => 'Restore', 'route' => 'oro_entityextend_entity_unremove', 'type' => 'ajax', 'icon' => 'backward', 'filter' => array('owner' => 'Custom', 'state' => array(0 => 'Deleted')), 'args' => array(0 => 'id'))), 'layout_action' => array(0 => array('name' => 'Create Entity', 'route' => 'oro_entityextend_entity_create')), 'items' => array('owner' => array('options' => array('priority' => 40, 'auditable' => false, 'default_value' => 'System'), 'grid' => array('type' => 'string', 'label' => 'Type', 'filter_type' => 'choice', 'choices' => array('System' => 'System', 'Custom' => 'Custom'), 'required' => true, 'sortable' => true, 'filterable' => true, 'show_filter' => true), 'form' => array('type' => 'text', 'block' => 'entity', 'options' => array('read_only' => true, 'required' => false, 'label' => 'Type'))), 'is_extend' => array('options' => array('priority' => 27, 'default_value' => false, 'auditable' => false), 'grid' => array('type' => 'boolean', 'label' => 'Is Extend', 'filter_type' => 'boolean', 'required' => true, 'sortable' => true, 'filterable' => true, 'show_filter' => false)), 'state' => array('options' => array('priority' => 25, 'default_value' => 'Active', 'label' => 'Schema status'), 'grid' => array('type' => 'string', 'label' => 'Schema status', 'filter_type' => 'choice', 'choices' => array('system' => '', 'new' => 'New', 'active' => 'Active', 'updated' => 'Requires update', 'deleted' => 'To be deleted'), 'required' => true, 'sortable' => true, 'filterable' => false, 'show_filter' => false)), 'is_deleted' => array('options' => array('default_value' => false, 'auditable' => false), 'grid' => array('show_column' => false, 'renderable' => false, 'query' => array('operator' => '!=', 'value' => true))), 'unique_key' => array('options' => array('auditable' => false, 'serializable' => true)), 'index' => array('options' => array('auditable' => false, 'serializable' => true)), 'upgradeable' => array('options' => array('auditable' => false, 'default_value' => true)), 'relation' => array('options' => array('auditable' => false, 'serializable' => true, 'default_value' => array())), 'schema' => array('options' => array('auditable' => false, 'serializable' => true, 'default_value' => array())))), 'field' => array('grid_action' => array(0 => array('name' => 'Remove', 'route' => 'oro_entityextend_field_remove', 'type' => 'ajax', 'icon' => 'trash', 'filter' => array('owner' => 'Custom', 'state' => array(0 => 'New', 1 => 'Requires update', 2 => 'Active')), 'args' => array(0 => 'id')), 1 => array('name' => 'Restore', 'route' => 'oro_entityextend_field_unremove', 'type' => 'ajax', 'icon' => 'backward', 'filter' => array('owner' => 'Custom', 'state' => array(0 => 'Deleted')), 'args' => array(0 => 'id'))), 'layout_action' => array(0 => array('name' => 'Manage unique keys', 'route' => 'oro_entityextend_entity_unique_key', 'entity_id' => true, 'filter' => array('is_extend' => true, 'upgradeable' => true)), 1 => array('name' => 'Create field', 'route' => 'oro_entityextend_field_create', 'entity_id' => true, 'filter' => array('is_extend' => true)), 2 => array('name' => 'Update schema', 'route' => 'oro_entityextend_update', 'entity_id' => true, 'aClass' => 'btn-danger entity-extend-apply', 'void' => true, 'filter' => array('upgradeable' => true, 'state' => array(0 => 'New', 1 => 'Requires update', 2 => 'Deleted')))), 'items' => array('owner' => array('options' => array('priority' => 20, 'default_value' => 'System', 'auditable' => false), 'grid' => array('type' => 'string', 'label' => 'Type', 'filter_type' => 'string', 'required' => true, 'sortable' => true, 'filterable' => false, 'show_filter' => false)), 'state' => array('options' => array('priority' => 25, 'default_value' => 'Active', 'label' => 'Schema status'), 'grid' => array('type' => 'string', 'label' => 'Schema status', 'filter_type' => 'choice', 'choices' => array('new' => 'New', 'applied' => 'Applied', 'updated' => 'Requires update', 'deleted' => 'To be deleted'), 'required' => true, 'sortable' => true, 'filterable' => false, 'show_filter' => false)), 'is_extend' => array('options' => array('default_value' => false, 'auditable' => false)), 'extend' => array('options' => array('default_value' => false, 'auditable' => false)), 'length' => array('options' => array('default_value' => 255, 'allowed_type' => array(0 => 'string'), 'required_property' => array('config_id' => array('scope' => 'extend'), 'code' => 'owner', 'value' => 'Custom')), 'constraints' => array(0 => array('Regex' => '/^[0-9]*$/'), 1 => array('Range' => array('min' => 1, 'max' => 255))), 'form' => array('type' => 'text', 'options' => array('required' => false, 'label' => 'Length', 'block' => 'entity', 'subblock' => 'properties'))), 'precision' => array('options' => array('default_value' => 2, 'allowed_type' => array(0 => 'decimal'), 'required_property' => array('config_id' => array('scope' => 'extend'), 'code' => 'owner', 'value' => 'Custom')), 'constraints' => array(0 => array('Regex' => '/^[0-9]*$/'), 1 => array('Range' => array('min' => 0))), 'form' => array('type' => 'text', 'options' => array('required' => false, 'label' => 'Precision', 'block' => 'entity', 'subblock' => 'properties'))), 'scale' => array('options' => array('default_value' => 2, 'allowed_type' => array(0 => 'decimal'), 'required_property' => array('config_id' => array('scope' => 'extend'), 'code' => 'owner', 'value' => 'Custom')), 'constraints' => array(0 => array('Regex' => '/^[0-9]*$/'), 1 => array('Range' => array('min' => 0))), 'form' => array('type' => 'text', 'options' => array('required' => false, 'label' => 'Scale', 'block' => 'entity', 'subblock' => 'properties'))), 'is_deleted' => array('options' => array('default_value' => false, 'auditable' => false), 'grid' => array('show_column' => false, 'renderable' => false, 'query' => array('operator' => '!=', 'value' => true))), 'is_inverse' => array('options' => array('default_value' => false, 'auditable' => false)), 'relation' => array('options' => array('allowed_type' => array(0 => 'oneToMany', 1 => 'manyToOne', 2 => 'manyToMany'), 'serializable' => true, 'required_property' => array('config_id' => array('field_name' => NULL, 'scope' => 'extend'), 'code' => 'is_extend', 'value' => true)), 'form' => array('type' => 'oro_entity_relation_type', 'options' => array('block' => 'entity', 'subblock' => 'properties'))), 'schema' => array('options' => array('serializable' => true)), 'target_entity' => array('options' => array('auditable' => false)), 'target_field' => array('options' => array('auditable' => false)), 'target_grid' => array('options' => array('auditable' => false, 'serializable' => true)), 'target_title' => array('options' => array('auditable' => false, 'serializable' => true)), 'target_detailed' => array('options' => array('auditable' => false, 'serializable' => true)), 'set_expanded' => array('options' => array('allowed_type' => array(0 => 'optionSet'), 'create_only' => true), 'form' => array('type' => 'choice', 'options' => array('required' => false, 'choices' => array(0 => 'No', 1 => 'Yes'), 'empty_value' => false, 'label' => 'Expanded', 'attr' => array('class' => 'is-option-set-expanded'), 'block' => 'entity', 'subblock' => 'properties'))), 'set_options' => array('options' => array('allowed_type' => array(0 => 'optionSet'), 'auditable' => false), 'form' => array('type' => 'oro_entity_option_set_collection', 'options' => array('required' => false, 'label' => 'Options', 'block' => 'entity', 'subblock' => 'properties', 'type' => 'oro_entity_option_set', 'tooltip' => 'Deleting an option will remove these values from related records.'))))))));
        $instance->addProvider(new \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider($a, $this, 'ownership', array('entity' => array('items' => array('owner_type' => array('options' => array('required_property' => array('config_id' => array('scope' => 'extend'), 'code' => 'owner', 'value' => 'System'), 'priority' => 100), 'constraints' => array(0 => array('NotBlank' => NULL)), 'grid' => array('type' => 'select', 'label' => 'Ownership Type', 'filter_type' => 'choice', 'required' => true, 'sortable' => true, 'filterable' => true, 'show_filter' => true, 'choices' => 'oro_organization.method.get_ownership_type'), 'form' => array('type' => 'oro_type_choice_ownership_type', 'options' => array('block' => 'other', 'required' => true, 'label' => 'Ownership Type'))))))));

        return $instance;
    }

    /**
     * Gets the 'oro_entity_config.twig.extension.dynamic_fields' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityConfigBundle\Twig\DynamicFieldsExtension A Oro\Bundle\EntityConfigBundle\Twig\DynamicFieldsExtension instance.
     */
    protected function getOroEntityConfig_Twig_Extension_DynamicFieldsService()
    {
        return $this->services['oro_entity_config.twig.extension.dynamic_fields'] = new \Oro\Bundle\EntityConfigBundle\Twig\DynamicFieldsExtension($this->get('oro_entity_config.config_manager'), $this->get('oro_entity_config.provider.extend'), $this->get('oro_entity_config.provider.entity'), $this->get('oro_entity_config.provider.view'), $this->get('oro_locale.formatter.date_time'), $this->get('router'));
    }

    /**
     * Gets the 'oro_entity_config.type.config' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityConfigBundle\Form\Type\ConfigType A Oro\Bundle\EntityConfigBundle\Form\Type\ConfigType instance.
     */
    protected function getOroEntityConfig_Type_ConfigService()
    {
        return $this->services['oro_entity_config.type.config'] = new \Oro\Bundle\EntityConfigBundle\Form\Type\ConfigType($this->get('oro_entity_config.config_manager'), $this->get('translator.default'), $this->get('oro_translation.database_translation.metadata.cache'));
    }

    /**
     * Gets the 'oro_entity_extend.extend.extend_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityExtendBundle\Extend\ExtendManager A Oro\Bundle\EntityExtendBundle\Extend\ExtendManager instance.
     */
    protected function getOroEntityExtend_Extend_ExtendManagerService()
    {
        return $this->services['oro_entity_extend.extend.extend_manager'] = new \Oro\Bundle\EntityExtendBundle\Extend\ExtendManager($this->get('oro_entity_config.provider.extend'));
    }

    /**
     * Gets the 'oro_entity_extend.extension.extend_entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityExtendBundle\Form\Extension\ExtendEntityExtension A Oro\Bundle\EntityExtendBundle\Form\Extension\ExtendEntityExtension instance.
     */
    protected function getOroEntityExtend_Extension_ExtendEntityService()
    {
        return $this->services['oro_entity_extend.extension.extend_entity'] = new \Oro\Bundle\EntityExtendBundle\Form\Extension\ExtendEntityExtension($this->get('oro_entity_extend.extend.extend_manager'), $this->get('oro_entity_config.config_manager'));
    }

    /**
     * Gets the 'oro_entity_extend.listener.config_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityExtendBundle\EventListener\ConfigSubscriber A Oro\Bundle\EntityExtendBundle\EventListener\ConfigSubscriber instance.
     */
    protected function getOroEntityExtend_Listener_ConfigSubscriberService()
    {
        return $this->services['oro_entity_extend.listener.config_subscriber'] = new \Oro\Bundle\EntityExtendBundle\EventListener\ConfigSubscriber($this->get('oro_entity_extend.extend.extend_manager'));
    }

    /**
     * Gets the 'oro_entity_extend.listener.entity_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityExtendBundle\EventListener\DoctrineSubscriber A Oro\Bundle\EntityExtendBundle\EventListener\DoctrineSubscriber instance.
     */
    protected function getOroEntityExtend_Listener_EntitySubscriberService()
    {
        return $this->services['oro_entity_extend.listener.entity_subscriber'] = new \Oro\Bundle\EntityExtendBundle\EventListener\DoctrineSubscriber();
    }

    /**
     * Gets the 'oro_entity_extend.tools.dumper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityExtendBundle\Tools\ExtendConfigDumper A Oro\Bundle\EntityExtendBundle\Tools\ExtendConfigDumper instance.
     */
    protected function getOroEntityExtend_Tools_DumperService()
    {
        return $this->services['oro_entity_extend.tools.dumper'] = new \Oro\Bundle\EntityExtendBundle\Tools\ExtendConfigDumper($this->get('doctrine.orm.default_entity_manager'), '/var/www/orocrm-platform/app/cache/de_');
    }

    /**
     * Gets the 'oro_entity_extend.type.field' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityExtendBundle\Form\Type\FieldType A Oro\Bundle\EntityExtendBundle\Form\Type\FieldType instance.
     */
    protected function getOroEntityExtend_Type_FieldService()
    {
        return $this->services['oro_entity_extend.type.field'] = new \Oro\Bundle\EntityExtendBundle\Form\Type\FieldType($this->get('oro_entity_config.config_manager'));
    }

    /**
     * Gets the 'oro_entity_extend.type.option_set' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityExtendBundle\Form\Type\OptionSetType A Oro\Bundle\EntityExtendBundle\Form\Type\OptionSetType instance.
     */
    protected function getOroEntityExtend_Type_OptionSetService()
    {
        return $this->services['oro_entity_extend.type.option_set'] = new \Oro\Bundle\EntityExtendBundle\Form\Type\OptionSetType();
    }

    /**
     * Gets the 'oro_entity_extend.type.option_set_collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityExtendBundle\Form\Type\OptionSetCollectionType A Oro\Bundle\EntityExtendBundle\Form\Type\OptionSetCollectionType instance.
     */
    protected function getOroEntityExtend_Type_OptionSetCollectionService()
    {
        return $this->services['oro_entity_extend.type.option_set_collection'] = new \Oro\Bundle\EntityExtendBundle\Form\Type\OptionSetCollectionType($this->get('oro_entity_config.config_manager'));
    }

    /**
     * Gets the 'oro_entity_extend.type.relation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityExtendBundle\Form\Type\RelationType A Oro\Bundle\EntityExtendBundle\Form\Type\RelationType instance.
     */
    protected function getOroEntityExtend_Type_RelationService()
    {
        return $this->services['oro_entity_extend.type.relation'] = new \Oro\Bundle\EntityExtendBundle\Form\Type\RelationType($this->get('oro_entity_config.provider.extend'));
    }

    /**
     * Gets the 'oro_filter.boolean_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FilterBundle\Filter\BooleanFilter A Oro\Bundle\FilterBundle\Filter\BooleanFilter instance.
     */
    protected function getOroFilter_BooleanFilterService()
    {
        return $this->services['oro_filter.boolean_filter'] = new \Oro\Bundle\FilterBundle\Filter\BooleanFilter($this->get('form.factory'), $this->get('oro_filter.filter_utility'));
    }

    /**
     * Gets the 'oro_filter.choice_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FilterBundle\Filter\ChoiceFilter A Oro\Bundle\FilterBundle\Filter\ChoiceFilter instance.
     */
    protected function getOroFilter_ChoiceFilterService()
    {
        return $this->services['oro_filter.choice_filter'] = new \Oro\Bundle\FilterBundle\Filter\ChoiceFilter($this->get('form.factory'), $this->get('oro_filter.filter_utility'));
    }

    /**
     * Gets the 'oro_filter.date_range_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FilterBundle\Filter\DateRangeFilter A Oro\Bundle\FilterBundle\Filter\DateRangeFilter instance.
     */
    protected function getOroFilter_DateRangeFilterService()
    {
        return $this->services['oro_filter.date_range_filter'] = new \Oro\Bundle\FilterBundle\Filter\DateRangeFilter($this->get('form.factory'), $this->get('oro_filter.filter_utility'));
    }

    /**
     * Gets the 'oro_filter.datetime_range_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FilterBundle\Filter\DateTimeRangeFilter A Oro\Bundle\FilterBundle\Filter\DateTimeRangeFilter instance.
     */
    protected function getOroFilter_DatetimeRangeFilterService()
    {
        return $this->services['oro_filter.datetime_range_filter'] = new \Oro\Bundle\FilterBundle\Filter\DateTimeRangeFilter($this->get('form.factory'), $this->get('oro_filter.filter_utility'));
    }

    /**
     * Gets the 'oro_filter.entity_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FilterBundle\Filter\EntityFilter A Oro\Bundle\FilterBundle\Filter\EntityFilter instance.
     */
    protected function getOroFilter_EntityFilterService()
    {
        return $this->services['oro_filter.entity_filter'] = new \Oro\Bundle\FilterBundle\Filter\EntityFilter($this->get('form.factory'), $this->get('oro_filter.filter_utility'));
    }

    /**
     * Gets the 'oro_filter.extension.orm_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FilterBundle\Grid\Extension\OrmFilterExtension A Oro\Bundle\FilterBundle\Grid\Extension\OrmFilterExtension instance.
     */
    protected function getOroFilter_Extension_OrmFilterService()
    {
        $this->services['oro_filter.extension.orm_filter'] = $instance = new \Oro\Bundle\FilterBundle\Grid\Extension\OrmFilterExtension($this->get('oro_datagrid.datagrid.request_params'), $this->get('translator.default'));

        $instance->addFilter('string', $this->get('oro_filter.string_filter'));
        $instance->addFilter('selectrow', $this->get('oro_filter.select_row_filter'));
        $instance->addFilter('number', $this->get('oro_filter.number_filter'));
        $instance->addFilter('percent', $this->get('oro_filter.percent_filter'));
        $instance->addFilter('choice', $this->get('oro_filter.choice_filter'));
        $instance->addFilter('entity', $this->get('oro_filter.entity_filter'));
        $instance->addFilter('boolean', $this->get('oro_filter.boolean_filter'));
        $instance->addFilter('date', $this->get('oro_filter.date_range_filter'));
        $instance->addFilter('datetime', $this->get('oro_filter.datetime_range_filter'));

        return $instance;
    }

    /**
     * Gets the 'oro_filter.filter_utility' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FilterBundle\Filter\FilterUtility A Oro\Bundle\FilterBundle\Filter\FilterUtility instance.
     */
    protected function getOroFilter_FilterUtilityService()
    {
        return $this->services['oro_filter.filter_utility'] = new \Oro\Bundle\FilterBundle\Filter\FilterUtility();
    }

    /**
     * Gets the 'oro_filter.form.type.date_range' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FilterBundle\Form\Type\DateRangeType A Oro\Bundle\FilterBundle\Form\Type\DateRangeType instance.
     */
    protected function getOroFilter_Form_Type_DateRangeService()
    {
        return $this->services['oro_filter.form.type.date_range'] = new \Oro\Bundle\FilterBundle\Form\Type\DateRangeType();
    }

    /**
     * Gets the 'oro_filter.form.type.datetime_range' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FilterBundle\Form\Type\DateTimeRangeType A Oro\Bundle\FilterBundle\Form\Type\DateTimeRangeType instance.
     */
    protected function getOroFilter_Form_Type_DatetimeRangeService()
    {
        return $this->services['oro_filter.form.type.datetime_range'] = new \Oro\Bundle\FilterBundle\Form\Type\DateTimeRangeType($this->get('oro_locale.settings'));
    }

    /**
     * Gets the 'oro_filter.form.type.filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FilterBundle\Form\Type\Filter\FilterType A Oro\Bundle\FilterBundle\Form\Type\Filter\FilterType instance.
     */
    protected function getOroFilter_Form_Type_FilterService()
    {
        return $this->services['oro_filter.form.type.filter'] = new \Oro\Bundle\FilterBundle\Form\Type\Filter\FilterType($this->get('translator.default'));
    }

    /**
     * Gets the 'oro_filter.form.type.filter.boolean' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FilterBundle\Form\Type\Filter\BooleanFilterType A Oro\Bundle\FilterBundle\Form\Type\Filter\BooleanFilterType instance.
     */
    protected function getOroFilter_Form_Type_Filter_BooleanService()
    {
        return $this->services['oro_filter.form.type.filter.boolean'] = new \Oro\Bundle\FilterBundle\Form\Type\Filter\BooleanFilterType($this->get('translator.default'));
    }

    /**
     * Gets the 'oro_filter.form.type.filter.choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FilterBundle\Form\Type\Filter\ChoiceFilterType A Oro\Bundle\FilterBundle\Form\Type\Filter\ChoiceFilterType instance.
     */
    protected function getOroFilter_Form_Type_Filter_ChoiceService()
    {
        return $this->services['oro_filter.form.type.filter.choice'] = new \Oro\Bundle\FilterBundle\Form\Type\Filter\ChoiceFilterType($this->get('translator.default'));
    }

    /**
     * Gets the 'oro_filter.form.type.filter.date_range' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FilterBundle\Form\Type\Filter\DateRangeFilterType A Oro\Bundle\FilterBundle\Form\Type\Filter\DateRangeFilterType instance.
     */
    protected function getOroFilter_Form_Type_Filter_DateRangeService()
    {
        return $this->services['oro_filter.form.type.filter.date_range'] = new \Oro\Bundle\FilterBundle\Form\Type\Filter\DateRangeFilterType($this->get('translator.default'));
    }

    /**
     * Gets the 'oro_filter.form.type.filter.datetime_range' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FilterBundle\Form\Type\Filter\DateTimeRangeFilterType A Oro\Bundle\FilterBundle\Form\Type\Filter\DateTimeRangeFilterType instance.
     */
    protected function getOroFilter_Form_Type_Filter_DatetimeRangeService()
    {
        return $this->services['oro_filter.form.type.filter.datetime_range'] = new \Oro\Bundle\FilterBundle\Form\Type\Filter\DateTimeRangeFilterType($this->get('translator.default'));
    }

    /**
     * Gets the 'oro_filter.form.type.filter.entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FilterBundle\Form\Type\Filter\EntityFilterType A Oro\Bundle\FilterBundle\Form\Type\Filter\EntityFilterType instance.
     */
    protected function getOroFilter_Form_Type_Filter_EntityService()
    {
        return $this->services['oro_filter.form.type.filter.entity'] = new \Oro\Bundle\FilterBundle\Form\Type\Filter\EntityFilterType($this->get('translator.default'));
    }

    /**
     * Gets the 'oro_filter.form.type.filter.number' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FilterBundle\Form\Type\Filter\NumberFilterType A Oro\Bundle\FilterBundle\Form\Type\Filter\NumberFilterType instance.
     */
    protected function getOroFilter_Form_Type_Filter_NumberService()
    {
        return $this->services['oro_filter.form.type.filter.number'] = new \Oro\Bundle\FilterBundle\Form\Type\Filter\NumberFilterType($this->get('translator.default'));
    }

    /**
     * Gets the 'oro_filter.form.type.filter.selectrow' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FilterBundle\Form\Type\Filter\SelectRowFilterType A Oro\Bundle\FilterBundle\Form\Type\Filter\SelectRowFilterType instance.
     */
    protected function getOroFilter_Form_Type_Filter_SelectrowService()
    {
        return $this->services['oro_filter.form.type.filter.selectrow'] = new \Oro\Bundle\FilterBundle\Form\Type\Filter\SelectRowFilterType($this->get('translator.default'));
    }

    /**
     * Gets the 'oro_filter.form.type.filter.text' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FilterBundle\Form\Type\Filter\TextFilterType A Oro\Bundle\FilterBundle\Form\Type\Filter\TextFilterType instance.
     */
    protected function getOroFilter_Form_Type_Filter_TextService()
    {
        return $this->services['oro_filter.form.type.filter.text'] = new \Oro\Bundle\FilterBundle\Form\Type\Filter\TextFilterType($this->get('translator.default'));
    }

    /**
     * Gets the 'oro_filter.number_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FilterBundle\Filter\NumberFilter A Oro\Bundle\FilterBundle\Filter\NumberFilter instance.
     */
    protected function getOroFilter_NumberFilterService()
    {
        return $this->services['oro_filter.number_filter'] = new \Oro\Bundle\FilterBundle\Filter\NumberFilter($this->get('form.factory'), $this->get('oro_filter.filter_utility'));
    }

    /**
     * Gets the 'oro_filter.percent_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FilterBundle\Filter\PercentFilter A Oro\Bundle\FilterBundle\Filter\PercentFilter instance.
     */
    protected function getOroFilter_PercentFilterService()
    {
        return $this->services['oro_filter.percent_filter'] = new \Oro\Bundle\FilterBundle\Filter\PercentFilter($this->get('form.factory'), $this->get('oro_filter.filter_utility'));
    }

    /**
     * Gets the 'oro_filter.select_row_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FilterBundle\Filter\SelectRowFilter A Oro\Bundle\FilterBundle\Filter\SelectRowFilter instance.
     */
    protected function getOroFilter_SelectRowFilterService()
    {
        return $this->services['oro_filter.select_row_filter'] = new \Oro\Bundle\FilterBundle\Filter\SelectRowFilter($this->get('form.factory'), $this->get('oro_filter.filter_utility'));
    }

    /**
     * Gets the 'oro_filter.string_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FilterBundle\Filter\StringFilter A Oro\Bundle\FilterBundle\Filter\StringFilter instance.
     */
    protected function getOroFilter_StringFilterService()
    {
        return $this->services['oro_filter.string_filter'] = new \Oro\Bundle\FilterBundle\Filter\StringFilter($this->get('form.factory'), $this->get('oro_filter.filter_utility'));
    }

    /**
     * Gets the 'oro_form.autocomplete.search_registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FormBundle\Autocomplete\SearchRegistry A Oro\Bundle\FormBundle\Autocomplete\SearchRegistry instance.
     */
    protected function getOroForm_Autocomplete_SearchRegistryService()
    {
        $this->services['oro_form.autocomplete.search_registry'] = $instance = new \Oro\Bundle\FormBundle\Autocomplete\SearchRegistry();

        $instance->addSearchHandler('entity_select', $this->get('oro_entity.form.handler.entity_select'));
        $instance->addSearchHandler('tags', $this->get('oro_tag.autocomplete.tag.search_handler'));
        $instance->addSearchHandler('acl_users', $this->get('oro_user.autocomplete.user.search_acl_handler'));
        $instance->addSearchHandler('users', $this->get('oro_user.autocomplete.user.search_handler'));

        return $instance;
    }

    /**
     * Gets the 'oro_form.autocomplete.security' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FormBundle\Autocomplete\Security A Oro\Bundle\FormBundle\Autocomplete\Security instance.
     */
    protected function getOroForm_Autocomplete_SecurityService()
    {
        $this->services['oro_form.autocomplete.security'] = $instance = new \Oro\Bundle\FormBundle\Autocomplete\Security($this->get('oro_security.security_facade'));

        $instance->setAutocompleteAclResource('entity_select', 'oro_search');
        $instance->setAutocompleteAclResource('tags', 'oro_tag_assign_unassign');
        $instance->setAutocompleteAclResource('acl_users', 'oro_user_user_view');
        $instance->setAutocompleteAclResource('users', 'oro_user_user_view');

        return $instance;
    }

    /**
     * Gets the 'oro_form.extension.client_validation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FormBundle\Form\Extension\ClientValidationExtension A Oro\Bundle\FormBundle\Form\Extension\ClientValidationExtension instance.
     */
    protected function getOroForm_Extension_ClientValidationService()
    {
        return $this->services['oro_form.extension.client_validation'] = new \Oro\Bundle\FormBundle\Form\Extension\ClientValidationExtension();
    }

    /**
     * Gets the 'oro_form.extension.constraint_as_option' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FormBundle\Form\Extension\ConstraintAsOptionExtension A Oro\Bundle\FormBundle\Form\Extension\ConstraintAsOptionExtension instance.
     */
    protected function getOroForm_Extension_ConstraintAsOptionService()
    {
        return $this->services['oro_form.extension.constraint_as_option'] = new \Oro\Bundle\FormBundle\Form\Extension\ConstraintAsOptionExtension($this->get('oro_form.validator.constraint_factory'));
    }

    /**
     * Gets the 'oro_form.extension.data_block' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FormBundle\Form\Extension\DataBlockExtension A Oro\Bundle\FormBundle\Form\Extension\DataBlockExtension instance.
     */
    protected function getOroForm_Extension_DataBlockService()
    {
        return $this->services['oro_form.extension.data_block'] = new \Oro\Bundle\FormBundle\Form\Extension\DataBlockExtension();
    }

    /**
     * Gets the 'oro_form.extension.js_validation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FormBundle\Form\Extension\JsValidationExtension A Oro\Bundle\FormBundle\Form\Extension\JsValidationExtension instance.
     */
    protected function getOroForm_Extension_JsValidationService()
    {
        return $this->services['oro_form.extension.js_validation'] = new \Oro\Bundle\FormBundle\Form\Extension\JsValidationExtension($this->get('oro_form.extension.js_validation.constraints_provider'));
    }

    /**
     * Gets the 'oro_form.extension.js_validation.constraints_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FormBundle\Form\Extension\JsValidation\ConstraintsProvider A Oro\Bundle\FormBundle\Form\Extension\JsValidation\ConstraintsProvider instance.
     */
    protected function getOroForm_Extension_JsValidation_ConstraintsProviderService()
    {
        return $this->services['oro_form.extension.js_validation.constraints_provider'] = new \Oro\Bundle\FormBundle\Form\Extension\JsValidation\ConstraintsProvider($this->get('validator.mapping.class_metadata_factory'));
    }

    /**
     * Gets the 'oro_form.extension.js_validation.repeated' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FormBundle\Form\Extension\JsValidation\RepeatedTypeExtension A Oro\Bundle\FormBundle\Form\Extension\JsValidation\RepeatedTypeExtension instance.
     */
    protected function getOroForm_Extension_JsValidation_RepeatedService()
    {
        return $this->services['oro_form.extension.js_validation.repeated'] = new \Oro\Bundle\FormBundle\Form\Extension\JsValidation\RepeatedTypeExtension();
    }

    /**
     * Gets the 'oro_form.importexport.primary_item_collection_normalizer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FormBundle\ImportExport\Serializer\Normalizer\PrimaryItemCollectionNormalizer A Oro\Bundle\FormBundle\ImportExport\Serializer\Normalizer\PrimaryItemCollectionNormalizer instance.
     */
    protected function getOroForm_Importexport_PrimaryItemCollectionNormalizerService()
    {
        return $this->services['oro_form.importexport.primary_item_collection_normalizer'] = new \Oro\Bundle\FormBundle\ImportExport\Serializer\Normalizer\PrimaryItemCollectionNormalizer();
    }

    /**
     * Gets the 'oro_form.twig.form_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FormBundle\Twig\FormExtension A Oro\Bundle\FormBundle\Twig\FormExtension instance.
     */
    protected function getOroForm_Twig_FormExtensionService()
    {
        return $this->services['oro_form.twig.form_extension'] = new \Oro\Bundle\FormBundle\Twig\FormExtension();
    }

    /**
     * Gets the 'oro_form.twig.js_validation_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FormBundle\Twig\JsValidationExtension A Oro\Bundle\FormBundle\Twig\JsValidationExtension instance.
     */
    protected function getOroForm_Twig_JsValidationExtensionService()
    {
        return $this->services['oro_form.twig.js_validation_extension'] = new \Oro\Bundle\FormBundle\Twig\JsValidationExtension();
    }

    /**
     * Gets the 'oro_form.type.collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FormBundle\Form\Type\CollectionType A Oro\Bundle\FormBundle\Form\Type\CollectionType instance.
     */
    protected function getOroForm_Type_CollectionService()
    {
        return $this->services['oro_form.type.collection'] = new \Oro\Bundle\FormBundle\Form\Type\CollectionType();
    }

    /**
     * Gets the 'oro_form.type.date' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FormBundle\Form\Type\OroDateType A Oro\Bundle\FormBundle\Form\Type\OroDateType instance.
     */
    protected function getOroForm_Type_DateService()
    {
        return $this->services['oro_form.type.date'] = new \Oro\Bundle\FormBundle\Form\Type\OroDateType();
    }

    /**
     * Gets the 'oro_form.type.datetime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FormBundle\Form\Type\OroDateTimeType A Oro\Bundle\FormBundle\Form\Type\OroDateTimeType instance.
     */
    protected function getOroForm_Type_DatetimeService()
    {
        return $this->services['oro_form.type.datetime'] = new \Oro\Bundle\FormBundle\Form\Type\OroDateTimeType($this->get('oro_locale.settings'));
    }

    /**
     * Gets the 'oro_form.type.entity_identifier' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FormBundle\Form\Type\EntityIdentifierType A Oro\Bundle\FormBundle\Form\Type\EntityIdentifierType instance.
     */
    protected function getOroForm_Type_EntityIdentifierService()
    {
        return $this->services['oro_form.type.entity_identifier'] = new \Oro\Bundle\FormBundle\Form\Type\EntityIdentifierType($this->get('doctrine'));
    }

    /**
     * Gets the 'oro_form.type.icon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FormBundle\Form\Type\OroIconType A Oro\Bundle\FormBundle\Form\Type\OroIconType instance.
     */
    protected function getOroForm_Type_IconService()
    {
        return $this->services['oro_form.type.icon'] = new \Oro\Bundle\FormBundle\Form\Type\OroIconType();
    }

    /**
     * Gets the 'oro_form.type.jqueryselect2_hidden' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FormBundle\Form\Type\OroJquerySelect2HiddenType A Oro\Bundle\FormBundle\Form\Type\OroJquerySelect2HiddenType instance.
     */
    protected function getOroForm_Type_Jqueryselect2HiddenService()
    {
        return $this->services['oro_form.type.jqueryselect2_hidden'] = new \Oro\Bundle\FormBundle\Form\Type\OroJquerySelect2HiddenType($this->get('doctrine.orm.default_entity_manager'), $this->get('oro_form.autocomplete.search_registry'));
    }

    /**
     * Gets the 'oro_form.type.money' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FormBundle\Form\Type\OroMoneyType A Oro\Bundle\FormBundle\Form\Type\OroMoneyType instance.
     */
    protected function getOroForm_Type_MoneyService()
    {
        return $this->services['oro_form.type.money'] = new \Oro\Bundle\FormBundle\Form\Type\OroMoneyType($this->get('oro_locale.settings'), $this->get('oro_locale.formatter.number'));
    }

    /**
     * Gets the 'oro_form.type.multiple_entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FormBundle\Form\Type\MultipleEntityType A Oro\Bundle\FormBundle\Form\Type\MultipleEntityType instance.
     */
    protected function getOroForm_Type_MultipleEntityService()
    {
        return $this->services['oro_form.type.multiple_entity'] = new \Oro\Bundle\FormBundle\Form\Type\MultipleEntityType($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_form.type.time_interval' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FormBundle\Form\Type\OroTimeIntervalType A Oro\Bundle\FormBundle\Form\Type\OroTimeIntervalType instance.
     */
    protected function getOroForm_Type_TimeIntervalService()
    {
        return $this->services['oro_form.type.time_interval'] = new \Oro\Bundle\FormBundle\Form\Type\OroTimeIntervalType();
    }

    /**
     * Gets the 'oro_form.validator.constraint_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FormBundle\Validator\ConstraintFactory A Oro\Bundle\FormBundle\Validator\ConstraintFactory instance.
     */
    protected function getOroForm_Validator_ConstraintFactoryService()
    {
        return $this->services['oro_form.validator.constraint_factory'] = new \Oro\Bundle\FormBundle\Validator\ConstraintFactory();
    }

    /**
     * Gets the 'oro_help.form.tooltip_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FormBundle\Form\Extension\TooltipFormExtension A Oro\Bundle\FormBundle\Form\Extension\TooltipFormExtension instance.
     */
    protected function getOroHelp_Form_TooltipExtensionService()
    {
        return $this->services['oro_help.form.tooltip_extension'] = new \Oro\Bundle\FormBundle\Form\Extension\TooltipFormExtension();
    }

    /**
     * Gets the 'oro_help.listener.help_link' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\HelpBundle\EventListener\HelpLinkRequestListener A Oro\Bundle\HelpBundle\EventListener\HelpLinkRequestListener instance.
     */
    protected function getOroHelp_Listener_HelpLinkService()
    {
        return $this->services['oro_help.listener.help_link'] = new \Oro\Bundle\HelpBundle\EventListener\HelpLinkRequestListener($this, $this->get('oro_help.model.help_link_provider'));
    }

    /**
     * Gets the 'oro_help.model.help_link_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\HelpBundle\Model\HelpLinkProvider A Oro\Bundle\HelpBundle\Model\HelpLinkProvider instance.
     */
    protected function getOroHelp_Model_HelpLinkProviderService()
    {
        $this->services['oro_help.model.help_link_provider'] = $instance = new \Oro\Bundle\HelpBundle\Model\HelpLinkProvider($this->get('controller_name_converter'), $this);

        $instance->setConfiguration(array('resources' => array(), 'vendors' => array('Oro' => array('prefix' => NULL, 'alias' => 'Platform')), 'routes' => array('oro_default' => array('uri' => 'Platform/OroDashboardBundle')), 'defaults' => array('server' => 'http://help.orocrm.com/', 'prefix' => 'Third_Party')));

        return $instance;
    }

    /**
     * Gets the 'oro_help.twig.extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\HelpBundle\Twig\HelpExtension A Oro\Bundle\HelpBundle\Twig\HelpExtension instance.
     */
    protected function getOroHelp_Twig_ExtensionService()
    {
        return $this->services['oro_help.twig.extension'] = new \Oro\Bundle\HelpBundle\Twig\HelpExtension($this->get('oro_help.model.help_link_provider'));
    }

    /**
     * Gets the 'oro_imap.connector.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ImapBundle\Connector\ImapConnectorFactory A Oro\Bundle\ImapBundle\Connector\ImapConnectorFactory instance.
     */
    protected function getOroImap_Connector_FactoryService()
    {
        return $this->services['oro_imap.connector.factory'] = new \Oro\Bundle\ImapBundle\Connector\ImapConnectorFactory(new \Oro\Bundle\ImapBundle\Connector\ImapServicesFactory(array('' => array(0 => 'Oro\\Bundle\\ImapBundle\\Mail\\Storage\\Imap', 1 => 'Oro\\Bundle\\ImapBundle\\Connector\\Search\\SearchStringManager'), 'X-GM-EXT-1' => array(0 => 'Oro\\Bundle\\ImapBundle\\Mail\\Storage\\GmailImap', 1 => 'Oro\\Bundle\\ImapBundle\\Connector\\Search\\GmailSearchStringManager'))), 'Oro\\Bundle\\ImapBundle\\Connector\\ImapConnector');
    }

    /**
     * Gets the 'oro_imap.email_synchronizer' service.
     *
     * @return Oro\Bundle\ImapBundle\Sync\ImapEmailSynchronizer A Oro\Bundle\ImapBundle\Sync\ImapEmailSynchronizer instance.
     */
    protected function getOroImap_EmailSynchronizerService()
    {
        $a = $this->get('oro_email.email.address.manager');

        return new \Oro\Bundle\ImapBundle\Sync\ImapEmailSynchronizer($this->get('doctrine.orm.default_entity_manager'), new \Oro\Bundle\EmailBundle\Builder\EmailEntityBuilder(new \Oro\Bundle\EmailBundle\Builder\EmailEntityBatchProcessor($a, $this->get('oro_email.email.owner.provider')), $a), $a, $this->get('oro_imap.connector.factory'), $this->get('oro_security.encoder.mcrypt'));
    }

    /**
     * Gets the 'oro_imap.form.type.configuration' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ImapBundle\Form\Type\ConfigurationType A Oro\Bundle\ImapBundle\Form\Type\ConfigurationType instance.
     */
    protected function getOroImap_Form_Type_ConfigurationService()
    {
        return $this->services['oro_imap.form.type.configuration'] = new \Oro\Bundle\ImapBundle\Form\Type\ConfigurationType($this->get('oro_security.encoder.mcrypt'));
    }

    /**
     * Gets the 'oro_importexport.context_registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ImportExportBundle\Context\ContextRegistry A Oro\Bundle\ImportExportBundle\Context\ContextRegistry instance.
     */
    protected function getOroImportexport_ContextRegistryService()
    {
        return $this->services['oro_importexport.context_registry'] = new \Oro\Bundle\ImportExportBundle\Context\ContextRegistry();
    }

    /**
     * Gets the 'oro_importexport.data_converter.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ImportExportBundle\Converter\DefaultDataConverter A Oro\Bundle\ImportExportBundle\Converter\DefaultDataConverter instance.
     */
    protected function getOroImportexport_DataConverter_DefaultService()
    {
        return $this->services['oro_importexport.data_converter.default'] = new \Oro\Bundle\ImportExportBundle\Converter\DefaultDataConverter();
    }

    /**
     * Gets the 'oro_importexport.file.file_system_operator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ImportExportBundle\File\FileSystemOperator A Oro\Bundle\ImportExportBundle\File\FileSystemOperator instance.
     */
    protected function getOroImportexport_File_FileSystemOperatorService()
    {
        return $this->services['oro_importexport.file.file_system_operator'] = new \Oro\Bundle\ImportExportBundle\File\FileSystemOperator('/var/www/orocrm-platform/app/cache/de_', 'import_export');
    }

    /**
     * Gets the 'oro_importexport.form.type.import' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ImportExportBundle\Form\Type\ImportType A Oro\Bundle\ImportExportBundle\Form\Type\ImportType instance.
     */
    protected function getOroImportexport_Form_Type_ImportService()
    {
        return $this->services['oro_importexport.form.type.import'] = new \Oro\Bundle\ImportExportBundle\Form\Type\ImportType($this->get('oro_importexport.processor.registry'));
    }

    /**
     * Gets the 'oro_importexport.job_executor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ImportExportBundle\Job\JobExecutor A Oro\Bundle\ImportExportBundle\Job\JobExecutor instance.
     */
    protected function getOroImportexport_JobExecutorService()
    {
        return $this->services['oro_importexport.job_executor'] = new \Oro\Bundle\ImportExportBundle\Job\JobExecutor($this->get('oro_batch.connectors'), $this->get('oro_batch.job_repository'), $this->get('oro_importexport.context_registry'), $this->get('doctrine'));
    }

    /**
     * Gets the 'oro_importexport.processor.export_delegate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ImportExportBundle\Processor\RegistryDelegateProcessor A Oro\Bundle\ImportExportBundle\Processor\RegistryDelegateProcessor instance.
     */
    protected function getOroImportexport_Processor_ExportDelegateService()
    {
        return $this->services['oro_importexport.processor.export_delegate'] = new \Oro\Bundle\ImportExportBundle\Processor\RegistryDelegateProcessor($this->get('oro_importexport.processor.registry'), 'export', $this->get('oro_importexport.context_registry'));
    }

    /**
     * Gets the 'oro_importexport.processor.import_delegate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ImportExportBundle\Processor\RegistryDelegateProcessor A Oro\Bundle\ImportExportBundle\Processor\RegistryDelegateProcessor instance.
     */
    protected function getOroImportexport_Processor_ImportDelegateService()
    {
        return $this->services['oro_importexport.processor.import_delegate'] = new \Oro\Bundle\ImportExportBundle\Processor\RegistryDelegateProcessor($this->get('oro_importexport.processor.registry'), 'import', $this->get('oro_importexport.context_registry'));
    }

    /**
     * Gets the 'oro_importexport.processor.import_validation_delegate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ImportExportBundle\Processor\RegistryDelegateProcessor A Oro\Bundle\ImportExportBundle\Processor\RegistryDelegateProcessor instance.
     */
    protected function getOroImportexport_Processor_ImportValidationDelegateService()
    {
        return $this->services['oro_importexport.processor.import_validation_delegate'] = new \Oro\Bundle\ImportExportBundle\Processor\RegistryDelegateProcessor($this->get('oro_importexport.processor.registry'), 'import_validation', $this->get('oro_importexport.context_registry'));
    }

    /**
     * Gets the 'oro_importexport.processor.registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ImportExportBundle\Processor\ProcessorRegistry A Oro\Bundle\ImportExportBundle\Processor\ProcessorRegistry instance.
     */
    protected function getOroImportexport_Processor_RegistryService()
    {
        return $this->services['oro_importexport.processor.registry'] = new \Oro\Bundle\ImportExportBundle\Processor\ProcessorRegistry();
    }

    /**
     * Gets the 'oro_importexport.reader.csv' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ImportExportBundle\Reader\CsvFileReader A Oro\Bundle\ImportExportBundle\Reader\CsvFileReader instance.
     */
    protected function getOroImportexport_Reader_CsvService()
    {
        return $this->services['oro_importexport.reader.csv'] = new \Oro\Bundle\ImportExportBundle\Reader\CsvFileReader($this->get('oro_importexport.context_registry'));
    }

    /**
     * Gets the 'oro_importexport.reader.entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ImportExportBundle\Reader\EntityReader A Oro\Bundle\ImportExportBundle\Reader\EntityReader instance.
     */
    protected function getOroImportexport_Reader_EntityService()
    {
        return $this->services['oro_importexport.reader.entity'] = new \Oro\Bundle\ImportExportBundle\Reader\EntityReader($this->get('oro_importexport.context_registry'), $this->get('doctrine'));
    }

    /**
     * Gets the 'oro_importexport.serializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ImportExportBundle\Serializer\Serializer A Oro\Bundle\ImportExportBundle\Serializer\Serializer instance.
     */
    protected function getOroImportexport_SerializerService()
    {
        return $this->services['oro_importexport.serializer'] = new \Oro\Bundle\ImportExportBundle\Serializer\Serializer(array(0 => $this->get('oro_user.importexport.user_normalizer'), 1 => $this->get('oro_address.importexport.typed_address_normalizer'), 2 => $this->get('oro_form.importexport.primary_item_collection_normalizer'), 3 => $this->get('oro_address.importexport.phone_normalizer'), 4 => $this->get('oro_address.importexport.email_normalizer'), 5 => $this->get('oro_address.importexport.address_type_normalizer'), 6 => $this->get('oro_address.importexport.address_normalizer'), 7 => $this->get('oro_importexport.serializer.datetime_normalizer'), 8 => $this->get('oro_importexport.serializer.collection_normalizer')), array(0 => $this->get('oro_importexport.serializer.dummy_encoder')));
    }

    /**
     * Gets the 'oro_importexport.serializer.collection_normalizer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ImportExportBundle\Serializer\Normalizer\CollectionNormalizer A Oro\Bundle\ImportExportBundle\Serializer\Normalizer\CollectionNormalizer instance.
     */
    protected function getOroImportexport_Serializer_CollectionNormalizerService()
    {
        return $this->services['oro_importexport.serializer.collection_normalizer'] = new \Oro\Bundle\ImportExportBundle\Serializer\Normalizer\CollectionNormalizer();
    }

    /**
     * Gets the 'oro_importexport.serializer.datetime_normalizer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ImportExportBundle\Serializer\Normalizer\DateTimeNormalizer A Oro\Bundle\ImportExportBundle\Serializer\Normalizer\DateTimeNormalizer instance.
     */
    protected function getOroImportexport_Serializer_DatetimeNormalizerService()
    {
        return $this->services['oro_importexport.serializer.datetime_normalizer'] = new \Oro\Bundle\ImportExportBundle\Serializer\Normalizer\DateTimeNormalizer();
    }

    /**
     * Gets the 'oro_importexport.serializer.dummy_encoder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ImportExportBundle\Serializer\Encoder\DummyEncoder A Oro\Bundle\ImportExportBundle\Serializer\Encoder\DummyEncoder instance.
     */
    protected function getOroImportexport_Serializer_DummyEncoderService()
    {
        return $this->services['oro_importexport.serializer.dummy_encoder'] = new \Oro\Bundle\ImportExportBundle\Serializer\Encoder\DummyEncoder();
    }

    /**
     * Gets the 'oro_importexport.strategy.import.helper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ImportExportBundle\Strategy\Import\ImportStrategyHelper A Oro\Bundle\ImportExportBundle\Strategy\Import\ImportStrategyHelper instance.
     */
    protected function getOroImportexport_Strategy_Import_HelperService()
    {
        return $this->services['oro_importexport.strategy.import.helper'] = new \Oro\Bundle\ImportExportBundle\Strategy\Import\ImportStrategyHelper($this->get('doctrine'), $this->get('validator'), $this->get('translator.default'));
    }

    /**
     * Gets the 'oro_importexport.writer.csv' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ImportExportBundle\Writer\CsvFileWriter A Oro\Bundle\ImportExportBundle\Writer\CsvFileWriter instance.
     */
    protected function getOroImportexport_Writer_CsvService()
    {
        $this->services['oro_importexport.writer.csv'] = $instance = new \Oro\Bundle\ImportExportBundle\Writer\CsvFileWriter($this->get('oro_importexport.context_registry'));

        $instance->setClearWriter($this->get('oro_importexport.writer.doctrine_clear'));

        return $instance;
    }

    /**
     * Gets the 'oro_importexport.writer.doctrine_clear' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ImportExportBundle\Writer\DoctrineClearWriter A Oro\Bundle\ImportExportBundle\Writer\DoctrineClearWriter instance.
     */
    protected function getOroImportexport_Writer_DoctrineClearService()
    {
        return $this->services['oro_importexport.writer.doctrine_clear'] = new \Oro\Bundle\ImportExportBundle\Writer\DoctrineClearWriter($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_importexport.writer.dummy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ImportExportBundle\Writer\DummyWriter A Oro\Bundle\ImportExportBundle\Writer\DummyWriter instance.
     */
    protected function getOroImportexport_Writer_DummyService()
    {
        return $this->services['oro_importexport.writer.dummy'] = new \Oro\Bundle\ImportExportBundle\Writer\DummyWriter($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_importexport.writer.entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ImportExportBundle\Writer\EntityWriter A Oro\Bundle\ImportExportBundle\Writer\EntityWriter instance.
     */
    protected function getOroImportexport_Writer_EntityService()
    {
        return $this->services['oro_importexport.writer.entity'] = new \Oro\Bundle\ImportExportBundle\Writer\EntityWriter($this->get('doctrine.orm.default_entity_manager'), $this->get('oro_importexport.writer.entity_detach_fixer'));
    }

    /**
     * Gets the 'oro_importexport.writer.entity_detach_fixer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ImportExportBundle\Writer\EntityDetachFixer A Oro\Bundle\ImportExportBundle\Writer\EntityDetachFixer instance.
     */
    protected function getOroImportexport_Writer_EntityDetachFixerService()
    {
        return $this->services['oro_importexport.writer.entity_detach_fixer'] = new \Oro\Bundle\ImportExportBundle\Writer\EntityDetachFixer($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_installer.form.type.configuration' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\InstallerBundle\Form\Type\ConfigurationType A Oro\Bundle\InstallerBundle\Form\Type\ConfigurationType instance.
     */
    protected function getOroInstaller_Form_Type_ConfigurationService()
    {
        return $this->services['oro_installer.form.type.configuration'] = new \Oro\Bundle\InstallerBundle\Form\Type\ConfigurationType();
    }

    /**
     * Gets the 'oro_installer.form.type.configuration.database' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\InstallerBundle\Form\Type\Configuration\DatabaseType A Oro\Bundle\InstallerBundle\Form\Type\Configuration\DatabaseType instance.
     */
    protected function getOroInstaller_Form_Type_Configuration_DatabaseService()
    {
        return $this->services['oro_installer.form.type.configuration.database'] = new \Oro\Bundle\InstallerBundle\Form\Type\Configuration\DatabaseType();
    }

    /**
     * Gets the 'oro_installer.form.type.configuration.mailer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\InstallerBundle\Form\Type\Configuration\MailerType A Oro\Bundle\InstallerBundle\Form\Type\Configuration\MailerType instance.
     */
    protected function getOroInstaller_Form_Type_Configuration_MailerService()
    {
        return $this->services['oro_installer.form.type.configuration.mailer'] = new \Oro\Bundle\InstallerBundle\Form\Type\Configuration\MailerType();
    }

    /**
     * Gets the 'oro_installer.form.type.configuration.system' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\InstallerBundle\Form\Type\Configuration\SystemType A Oro\Bundle\InstallerBundle\Form\Type\Configuration\SystemType instance.
     */
    protected function getOroInstaller_Form_Type_Configuration_SystemService()
    {
        return $this->services['oro_installer.form.type.configuration.system'] = new \Oro\Bundle\InstallerBundle\Form\Type\Configuration\SystemType();
    }

    /**
     * Gets the 'oro_installer.form.type.configuration.websocket' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\InstallerBundle\Form\Type\Configuration\WebsocketType A Oro\Bundle\InstallerBundle\Form\Type\Configuration\WebsocketType instance.
     */
    protected function getOroInstaller_Form_Type_Configuration_WebsocketService()
    {
        return $this->services['oro_installer.form.type.configuration.websocket'] = new \Oro\Bundle\InstallerBundle\Form\Type\Configuration\WebsocketType();
    }

    /**
     * Gets the 'oro_installer.form.type.setup' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\InstallerBundle\Form\Type\SetupType A Oro\Bundle\InstallerBundle\Form\Type\SetupType instance.
     */
    protected function getOroInstaller_Form_Type_SetupService()
    {
        return $this->services['oro_installer.form.type.setup'] = new \Oro\Bundle\InstallerBundle\Form\Type\SetupType('Oro\\Bundle\\UserBundle\\Entity\\User');
    }

    /**
     * Gets the 'oro_installer.scenario' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\InstallerBundle\Process\InstallerScenario A Oro\Bundle\InstallerBundle\Process\InstallerScenario instance.
     */
    protected function getOroInstaller_ScenarioService()
    {
        $this->services['oro_installer.scenario'] = $instance = new \Oro\Bundle\InstallerBundle\Process\InstallerScenario();

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'oro_installer.script_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\InstallerBundle\ScriptManager A Oro\Bundle\InstallerBundle\ScriptManager instance.
     */
    protected function getOroInstaller_ScriptManagerService()
    {
        return $this->services['oro_installer.script_manager'] = new \Oro\Bundle\InstallerBundle\ScriptManager($this->get('kernel'));
    }

    /**
     * Gets the 'oro_installer.yaml_persister' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\InstallerBundle\Persister\YamlPersister A Oro\Bundle\InstallerBundle\Persister\YamlPersister instance.
     */
    protected function getOroInstaller_YamlPersisterService()
    {
        return $this->services['oro_installer.yaml_persister'] = new \Oro\Bundle\InstallerBundle\Persister\YamlPersister('/var/www/orocrm-platform/app/config', 'dev');
    }

    /**
     * Gets the 'oro_integration.channel.manager.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager A Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager instance.
     */
    protected function getOroIntegration_Channel_Manager_ApiService()
    {
        return $this->services['oro_integration.channel.manager.api'] = new \Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager('Oro\\Bundle\\IntegrationBundle\\Entity\\Channel', $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_integration.form.channel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroIntegration_Form_ChannelService()
    {
        return $this->services['oro_integration.form.channel'] = $this->get('form.factory')->createNamed('oro_integration_channel_form', 'oro_integration_channel_form', NULL);
    }

    /**
     * Gets the 'oro_integration.form.handler.channel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\IntegrationBundle\Form\Handler\ChannelHandler A Oro\Bundle\IntegrationBundle\Form\Handler\ChannelHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_integration.form.handler.channel' service is requested while the 'request' scope is not active
     */
    protected function getOroIntegration_Form_Handler_ChannelService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_integration.form.handler.channel', 'request');
        }

        return $this->services['oro_integration.form.handler.channel'] = $this->scopedServices['request']['oro_integration.form.handler.channel'] = new \Oro\Bundle\IntegrationBundle\Form\Handler\ChannelHandler($this->get('request'), $this->get('oro_integration.form.channel'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_integration.form.type.channel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\IntegrationBundle\Form\Type\ChannelType A Oro\Bundle\IntegrationBundle\Form\Type\ChannelType instance.
     */
    protected function getOroIntegration_Form_Type_ChannelService()
    {
        return $this->services['oro_integration.form.type.channel'] = new \Oro\Bundle\IntegrationBundle\Form\Type\ChannelType($this->get('oro_integration.manager.types_registry'));
    }

    /**
     * Gets the 'oro_integration.job_executor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\IntegrationBundle\ImportExport\Job\Executor A Oro\Bundle\IntegrationBundle\ImportExport\Job\Executor instance.
     */
    protected function getOroIntegration_JobExecutorService()
    {
        return $this->services['oro_integration.job_executor'] = new \Oro\Bundle\IntegrationBundle\ImportExport\Job\Executor($this->get('oro_batch.connectors'), $this->get('oro_batch.job_repository'), $this->get('oro_importexport.context_registry'), $this->get('doctrine'));
    }

    /**
     * Gets the 'oro_integration.logger.strategy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\IntegrationBundle\Logger\LoggerStrategy A Oro\Bundle\IntegrationBundle\Logger\LoggerStrategy instance.
     */
    protected function getOroIntegration_Logger_StrategyService()
    {
        return $this->services['oro_integration.logger.strategy'] = new \Oro\Bundle\IntegrationBundle\Logger\LoggerStrategy();
    }

    /**
     * Gets the 'oro_integration.manager.types_registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\IntegrationBundle\Manager\TypesRegistry A Oro\Bundle\IntegrationBundle\Manager\TypesRegistry instance.
     */
    protected function getOroIntegration_Manager_TypesRegistryService()
    {
        $this->services['oro_integration.manager.types_registry'] = $instance = new \Oro\Bundle\IntegrationBundle\Manager\TypesRegistry(array());

        $instance->addChannelType('simple', $this->get('oro_integration.provider.channel_type.simple'));
        $instance->addTransportType('simple', 'simple', $this->get('oro_integration.provider.simple_transport'));

        return $instance;
    }

    /**
     * Gets the 'oro_integration.provider.channel_type.simple' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\IntegrationBundle\Provider\SimpleChannelType A Oro\Bundle\IntegrationBundle\Provider\SimpleChannelType instance.
     */
    protected function getOroIntegration_Provider_ChannelType_SimpleService()
    {
        return $this->services['oro_integration.provider.channel_type.simple'] = new \Oro\Bundle\IntegrationBundle\Provider\SimpleChannelType();
    }

    /**
     * Gets the 'oro_integration.provider.simple_transport' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\IntegrationBundle\Provider\SimpleTransport A Oro\Bundle\IntegrationBundle\Provider\SimpleTransport instance.
     */
    protected function getOroIntegration_Provider_SimpleTransportService()
    {
        return $this->services['oro_integration.provider.simple_transport'] = new \Oro\Bundle\IntegrationBundle\Provider\SimpleTransport();
    }

    /**
     * Gets the 'oro_integration.sync.processor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\IntegrationBundle\Provider\SyncProcessor A Oro\Bundle\IntegrationBundle\Provider\SyncProcessor instance.
     */
    protected function getOroIntegration_Sync_ProcessorService()
    {
        return $this->services['oro_integration.sync.processor'] = new \Oro\Bundle\IntegrationBundle\Provider\SyncProcessor($this->get('doctrine.orm.default_entity_manager'), $this->get('oro_importexport.processor.registry'), $this->get('oro_integration.job_executor'), $this->get('oro_integration.manager.types_registry'), $this->get('oro_integration.logger.strategy'));
    }

    /**
     * Gets the 'oro_integration.writer.persistent_batch_writer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\IntegrationBundle\ImportExport\Writer\PersistentBatchWriter A Oro\Bundle\IntegrationBundle\ImportExport\Writer\PersistentBatchWriter instance.
     */
    protected function getOroIntegration_Writer_PersistentBatchWriterService()
    {
        return $this->services['oro_integration.writer.persistent_batch_writer'] = new \Oro\Bundle\IntegrationBundle\ImportExport\Writer\PersistentBatchWriter($this->get('doctrine.orm.default_entity_manager'), $this->get('oro_importexport.writer.entity_detach_fixer'));
    }

    /**
     * Gets the 'oro_locale.cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SecurityBundle\Cache\FilesystemCache A Oro\Bundle\SecurityBundle\Cache\FilesystemCache instance.
     */
    protected function getOroLocale_CacheService()
    {
        $this->services['oro_locale.cache'] = $instance = new \Oro\Bundle\SecurityBundle\Cache\FilesystemCache('/var/www/orocrm-platform/app/cache/de_/oro_data');

        $instance->setNamespace('oro_locale.cache');

        return $instance;
    }

    /**
     * Gets the 'oro_locale.calendar' service.
     *
     * @return Oro\Bundle\LocaleBundle\Model\Calendar A Oro\Bundle\LocaleBundle\Model\Calendar instance.
     */
    protected function getOroLocale_CalendarService()
    {
        return new \Oro\Bundle\LocaleBundle\Model\Calendar();
    }

    /**
     * Gets the 'oro_locale.calendar_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\LocaleBundle\Model\CalendarFactory A Oro\Bundle\LocaleBundle\Model\CalendarFactory instance.
     */
    protected function getOroLocale_CalendarFactoryService()
    {
        return $this->services['oro_locale.calendar_factory'] = new \Oro\Bundle\LocaleBundle\Model\CalendarFactory($this);
    }

    /**
     * Gets the 'oro_locale.form.type.country' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\LocaleBundle\Form\Type\CountryType A Oro\Bundle\LocaleBundle\Form\Type\CountryType instance.
     */
    protected function getOroLocale_Form_Type_CountryService()
    {
        return $this->services['oro_locale.form.type.country'] = new \Oro\Bundle\LocaleBundle\Form\Type\CountryType();
    }

    /**
     * Gets the 'oro_locale.form.type.currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\LocaleBundle\Form\Type\CurrencyType A Oro\Bundle\LocaleBundle\Form\Type\CurrencyType instance.
     */
    protected function getOroLocale_Form_Type_CurrencyService()
    {
        return $this->services['oro_locale.form.type.currency'] = new \Oro\Bundle\LocaleBundle\Form\Type\CurrencyType();
    }

    /**
     * Gets the 'oro_locale.form.type.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\LocaleBundle\Form\Type\LocaleType A Oro\Bundle\LocaleBundle\Form\Type\LocaleType instance.
     */
    protected function getOroLocale_Form_Type_LocaleService()
    {
        return $this->services['oro_locale.form.type.locale'] = new \Oro\Bundle\LocaleBundle\Form\Type\LocaleType();
    }

    /**
     * Gets the 'oro_locale.form.type.name_format' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\LocaleBundle\Form\Type\NameFormatType A Oro\Bundle\LocaleBundle\Form\Type\NameFormatType instance.
     */
    protected function getOroLocale_Form_Type_NameFormatService()
    {
        return $this->services['oro_locale.form.type.name_format'] = new \Oro\Bundle\LocaleBundle\Form\Type\NameFormatType($this->get('oro_locale.formatter.name'));
    }

    /**
     * Gets the 'oro_locale.form.type.timezone' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\LocaleBundle\Form\Type\TimezoneType A Oro\Bundle\LocaleBundle\Form\Type\TimezoneType instance.
     */
    protected function getOroLocale_Form_Type_TimezoneService()
    {
        return $this->services['oro_locale.form.type.timezone'] = new \Oro\Bundle\LocaleBundle\Form\Type\TimezoneType($this->get('oro_locale.cache'));
    }

    /**
     * Gets the 'oro_locale.format_converter.date_time.intl' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\LocaleBundle\Converter\IntlDateTimeFormatConverter A Oro\Bundle\LocaleBundle\Converter\IntlDateTimeFormatConverter instance.
     */
    protected function getOroLocale_FormatConverter_DateTime_IntlService()
    {
        return $this->services['oro_locale.format_converter.date_time.intl'] = new \Oro\Bundle\LocaleBundle\Converter\IntlDateTimeFormatConverter($this->get('oro_locale.formatter.date_time'));
    }

    /**
     * Gets the 'oro_locale.format_converter.date_time.moment' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\LocaleBundle\Converter\MomentDateTimeFormatConverter A Oro\Bundle\LocaleBundle\Converter\MomentDateTimeFormatConverter instance.
     */
    protected function getOroLocale_FormatConverter_DateTime_MomentService()
    {
        return $this->services['oro_locale.format_converter.date_time.moment'] = new \Oro\Bundle\LocaleBundle\Converter\MomentDateTimeFormatConverter($this->get('oro_locale.formatter.date_time'));
    }

    /**
     * Gets the 'oro_locale.format_converter.date_time.registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\LocaleBundle\Converter\DateTimeFormatConverterRegistry A Oro\Bundle\LocaleBundle\Converter\DateTimeFormatConverterRegistry instance.
     */
    protected function getOroLocale_FormatConverter_DateTime_RegistryService()
    {
        $a = $this->get('oro_locale.formatter.date_time');

        $this->services['oro_locale.format_converter.date_time.registry'] = $instance = new \Oro\Bundle\LocaleBundle\Converter\DateTimeFormatConverterRegistry();

        $instance->addFormatConverter('jquery_ui', new \Oro\Bundle\UIBundle\Converter\JqueryUiDateTimeFormatConverter($a));
        $instance->addFormatConverter('fullcalendar', new \Oro\Bundle\CalendarBundle\Converter\FullCalendarDateTimeFormatConverter($a));
        $instance->addFormatConverter('intl', new \Oro\Bundle\LocaleBundle\Converter\IntlDateTimeFormatConverter($a));
        $instance->addFormatConverter('moment', new \Oro\Bundle\LocaleBundle\Converter\MomentDateTimeFormatConverter($a));

        return $instance;
    }

    /**
     * Gets the 'oro_locale.formatter.address' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\LocaleBundle\Formatter\AddressFormatter A Oro\Bundle\LocaleBundle\Formatter\AddressFormatter instance.
     */
    protected function getOroLocale_Formatter_AddressService()
    {
        return $this->services['oro_locale.formatter.address'] = new \Oro\Bundle\LocaleBundle\Formatter\AddressFormatter($this->get('oro_locale.settings'), $this->get('oro_locale.formatter.name'));
    }

    /**
     * Gets the 'oro_locale.formatter.date_time' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\LocaleBundle\Formatter\DateTimeFormatter A Oro\Bundle\LocaleBundle\Formatter\DateTimeFormatter instance.
     */
    protected function getOroLocale_Formatter_DateTimeService()
    {
        return $this->services['oro_locale.formatter.date_time'] = new \Oro\Bundle\LocaleBundle\Formatter\DateTimeFormatter($this->get('oro_locale.settings'));
    }

    /**
     * Gets the 'oro_locale.formatter.name' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\LocaleBundle\Formatter\NameFormatter A Oro\Bundle\LocaleBundle\Formatter\NameFormatter instance.
     */
    protected function getOroLocale_Formatter_NameService()
    {
        return $this->services['oro_locale.formatter.name'] = new \Oro\Bundle\LocaleBundle\Formatter\NameFormatter($this->get('oro_locale.settings'));
    }

    /**
     * Gets the 'oro_locale.formatter.number' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\LocaleBundle\Formatter\NumberFormatter A Oro\Bundle\LocaleBundle\Formatter\NumberFormatter instance.
     */
    protected function getOroLocale_Formatter_NumberService()
    {
        return $this->services['oro_locale.formatter.number'] = new \Oro\Bundle\LocaleBundle\Formatter\NumberFormatter($this->get('oro_locale.settings'));
    }

    /**
     * Gets the 'oro_locale.locale_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\LocaleBundle\EventListener\LocaleListener A Oro\Bundle\LocaleBundle\EventListener\LocaleListener instance.
     */
    protected function getOroLocale_LocaleListenerService()
    {
        $this->services['oro_locale.locale_listener'] = $instance = new \Oro\Bundle\LocaleBundle\EventListener\LocaleListener($this->get('oro_locale.settings'), NULL);

        if ($this->has('request')) {
            $instance->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }

        return $instance;
    }

    /**
     * Gets the 'oro_locale.settings' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\LocaleBundle\Model\LocaleSettings A Oro\Bundle\LocaleBundle\Model\LocaleSettings instance.
     */
    protected function getOroLocale_SettingsService()
    {
        $this->services['oro_locale.settings'] = $instance = new \Oro\Bundle\LocaleBundle\Model\LocaleSettings($this->get('oro_config.global'), $this->get('oro_locale.calendar_factory'));

        $instance->addNameFormats(array('en' => '%prefix% %first_name% %middle_name% %last_name% %suffix%', 'en_US' => '%prefix% %first_name% %middle_name% %last_name% %suffix%', 'ru' => '%last_name% %first_name% %middle_name%', 'ru_RU' => '%last_name% %first_name% %middle_name%'));
        $instance->addAddressFormats(array('AD' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %REGION%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'region'), 'region_name_type' => 'parish', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'AE' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'AG' => array('require' => array(0 => 'street'), 'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'AM' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code%\\n%city%\\n%region%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%postal_code%\\n%city%\\n%region%\\n%country%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'AR' => array('format' => '%name%\\n%organization%\\n%STREET%\\n%POSTAL_CODE% %CITY%\\n%region%\\n%country%', 'region_name_type' => 'region', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'AS' => array('format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %REGION% %COUNTRY% %postal_code%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'zip_name_type' => 'zip', 'region_name_type' => 'region', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'AT' => array('format' => '%organization%\\n%name%\\n%street%\\n%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'AU' => array('format' => '%organization%\\n%name%\\n%street%\\n%CITY% %REGION% %COUNTRY% %postal_code%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'region_name_type' => 'region', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'AX' => array('format' => '%organization%\\n%name%\\n%street%\\nAX-%postal_code% %city%\\n%country%\\nÅLAND', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'postprefix' => 'AX-', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'AZ' => array('format' => '%name%\\n%organization%\\n%street%\\nAZ %postal_code% %city%\\n%country%', 'postprefix' => 'AZ ', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'BA' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'BB' => array('region_name_type' => 'parish', 'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'BD' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% - %postal_code%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'BE' => array('format' => '%organization%\\n%name%\\n%street%\\n%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'BF' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'BG' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'BH' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'BL' => array('format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'BM' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'BN' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'BR' => array('format' => '%organization%\\n%name%\\n%street%\\n%CITY%-%REGION%\\n%COUNTRY%\\n%postal_code%', 'require' => array(0 => 'street', 1 => 'region', 2 => 'city', 3 => 'postal_code'), 'region_name_type' => 'region', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'BS' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%, %region%\\n%country%', 'region_name_type' => 'island', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'BY' => array('format' => '%country%\\n%region%\\n%postal_code% %city% %street%\\n%organization%\\n%name%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'CA' => array('format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %REGION%, %COUNTRY% %POSTAL_CODE%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'CC' => array('format' => '%organization%\\n%name%\\n%street%\\n%CITY% %REGION% %COUNTRY% %postal_code%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'CD' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'CH' => array('format' => '%organization%\\n%name%\\n%street%\\nCH-%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'postprefix' => 'CH-', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'CI' => array('format' => '%name%\\n%organization% %street% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'CK' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'CL' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%region%\\n%country%', 'region_name_type' => 'region', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'CN' => array('format' => '%postal_code%\\n%COUNTRY%\\n%REGION%%city%\\n%street%\\n%organization%\\n%name%', 'latin_format' => '%name%\\n%organization%\\n%street%, %city%\\n%REGION%, %COUNTRY% %postal_code%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'has_disputed' => true, 'format_charset' => 'GB2312', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL), 'CO' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%, %region%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'CR' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'CS' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'CV' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%region%\\n%country%', 'region_name_type' => 'island', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'CX' => array('format' => '%organization%\\n%name%\\n%street%\\n%CITY% %REGION% %COUNTRY% %postal_code%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'CY' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'CZ' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'DE' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'DK' => array('format' => '%organization%\\n%name%\\n%street%\\n%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'DO' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'DZ' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'EC' => array('format' => '%name%\\n%organization%\\n%street%\\n%POSTAL_CODE%\\n%CITY%\\n%COUNTRY%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'EE' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'EG' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%region%\\n%country%\\n%postal_code%', 'direction' => 'rtl', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'ES' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %CITY% %REGION%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'ET' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'FI' => array('format' => '%organization%\\n%name%\\n%street%\\nFI-%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'postprefix' => 'FI-', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'FK' => array('format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\n%POSTAL_CODE%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'FM' => array('format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %COUNTRY% %REGION% %postal_code%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'zip_name_type' => 'zip', 'region_name_type' => 'region', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'FO' => array('format' => '%name%\\n%organization%\\n%street%\\nFO%postal_code% %city%\\n%country%', 'postprefix' => 'FO', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'FR' => array('format' => '%organization%\\n%name%\\n%street%\\n%postal_code% %CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'GB' => array('format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%region%\\n%country%\\n%POSTAL_CODE%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'region_name_type' => 'county', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'GE' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'GF' => array('format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'GG' => array('format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\nGUERNSEY\\n%POSTAL_CODE%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'GI' => array('format' => '%name%\\n%organization%\\n%street%\\n%country%', 'require' => array(0 => 'street'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'GL' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'GN' => array('format' => '%name%\\n%organization%\\n%postal_code% %street% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'GP' => array('format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'GR' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'GS' => array('format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\n%POSTAL_CODE%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'GT' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code%- %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'GU' => array('format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %REGION% %COUNTRY% %postal_code%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'zip_name_type' => 'zip', 'region_name_type' => 'region', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'GW' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'HK' => array('format' => '%REGION%\\n%street%\\n%organization%\\n%name%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%REGION%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'region'), 'region_name_type' => 'area', 'format_charset' => 'Big5', 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false), 'HM' => array('format' => '%organization%\\n%name%\\n%street%\\n%CITY% %REGION% %COUNTRY% %postal_code%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'HN' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%, %region%\\n%country%\\n%postal_code%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'HR' => array('format' => '%name%\\n%organization%\\n%street%\\nHR-%postal_code% %city%\\n%country%', 'postprefix' => 'HR-', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'HT' => array('format' => '%name%\\n%organization%\\n%street%\\nHT%postal_code% %city%\\n%country%', 'postprefix' => 'HT', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'HU' => array('format' => '%NAME%\\n%ORGANIZATION%\\n%CITY%\\n%STREET%\\n%COUNTRY%\\n%postal_code%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'ID' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%region%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'IE' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%region%\\n%country%', 'region_name_type' => 'county', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'IL' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%', 'direction' => 'rtl', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'IM' => array('format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\n%POSTAL_CODE%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'IN' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%region%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'region_name_type' => 'region', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'IO' => array('format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\n%POSTAL_CODE%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'IQ' => array('format' => '%organization%\\n%name%\\n%street%\\n%CITY%, %REGION%\\n%COUNTRY%\\n%postal_code%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'IS' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'IT' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %CITY% %REGION%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'JE' => array('format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\nJERSEY\\n%POSTAL_CODE%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'JM' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%region%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region'), 'region_name_type' => 'parish', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'JO' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'JP' => array('format' => '〒%postal_code%\\n%REGION%%city%\\n%street%\\n%organization%\\n%name%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%city%, %REGION%\\n%COUNTRY%\\n%postal_code%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'region_name_type' => 'prefecture', 'format_charset' => 'ISO-2022-JP', 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false), 'KE' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%\\n%postal_code%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'KG' => array('format' => '%postal_code% %country% %city% %street%\\n%organization%\\n%name%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'KH' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'KI' => array('format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%REGION%\\n%CITY%\\n%COUNTRY%', 'region_name_type' => 'island', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'KN' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%, %region%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region'), 'region_name_type' => 'island', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'KR' => array('format' => '%country%\\n%region% %city%\\n%street%\\n%organization%\\n%name%\\nSEOUL %POSTAL_CODE%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%region%\\n%country%\\nSEOUL %POSTAL_CODE%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'region_name_type' => 'do_si', 'format_charset' => 'EUC-KR', 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false), 'KW' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'KY' => array('format' => '%name%\\n%organization%\\n%street%\\n%region%\\n%country%', 'require' => array(0 => 'street', 1 => 'region'), 'region_name_type' => 'island', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'KZ' => array('format' => '%postal_code%\\n%country%\\n%region%\\n%city%\\n%street%\\n%organization%\\n%name%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'LA' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'LB' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'LI' => array('format' => '%organization%\\n%name%\\n%street%\\nFL-%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'postprefix' => 'FL-', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'LK' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%\\n%postal_code%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'LR' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'LS' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'LT' => array('format' => '%organization%\\n%name%\\n%street%\\nLT-%postal_code% %city%\\n%country%', 'postprefix' => 'LT-', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'LU' => array('format' => '%organization%\\n%name%\\n%street%\\nL-%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'postprefix' => 'L-', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'LV' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% %country%, %postal_code%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MA' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MC' => array('format' => '%name%\\n%organization%\\n%street%\\nMC-%postal_code% %city%\\n%country%', 'postprefix' => 'MC-', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MD' => array('format' => '%name%\\n%organization%\\n%street%\\nMD-%postal_code% %city%\\n%country%', 'postprefix' => 'MD-', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'ME' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MF' => array('format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MG' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MH' => array('format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %COUNTRY% %REGION% %postal_code%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'zip_name_type' => 'zip', 'region_name_type' => 'region', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MK' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MN' => array('format' => '%name%\\n%organization%\\n%street%\\n%region% %city%\\n%country%\\n%postal_code%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MO' => array('format' => '%street%\\n%organization%\\n%name%', 'latin_format' => '%name%\\n%organization%\\n%street%', 'require' => array(0 => 'street'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MP' => array('format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %COUNTRY% %REGION% %postal_code%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'zip_name_type' => 'zip', 'region_name_type' => 'region', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MQ' => array('format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MT' => array('format' => '%name%\\n%organization%\\n%street%\\n%CITY% %POSTAL_CODE%\\n%COUNTRY%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MU' => array('format' => '%name%\\n%organization%\\n%street%\\n%POSTAL_CODE%\\n%CITY%\\n%COUNTRY%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MV' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MW' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MX' => array('format' => '%name%\\n%organization%\\n%street%\\n%POSTAL_CODE% %CITY%, %REGION%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'region_name_type' => 'region', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MY' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %CITY%, %REGION%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'region_name_type' => 'region', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'MZ' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'NC' => array('format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'NE' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'NF' => array('format' => '%organization%\\n%name%\\n%street%\\n%CITY% %REGION% %postal_code%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'NG' => array('format' => '%name%\\n%organization%\\n%street%\\n%CITY% %postal_code%\\n%REGION%\\n%COUNTRY%', 'region_name_type' => 'region', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'NI' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code%\\n%CITY%, %REGION%\\n%COUNTRY%', 'region_name_type' => 'department', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'NL' => array('format' => '%organization%\\n%name%\\n%street%\\n%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'NO' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'NP' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'NR' => array('format' => '%name%\\n%organization%\\n%street%\\n%region%\\n%country%', 'require' => array(0 => 'street', 1 => 'region'), 'region_name_type' => 'district', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'NZ' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'OM' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code%\\n%city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'PA' => array('format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%REGION%\\n%COUNTRY%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'PF' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %CITY% %REGION%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'region_name_type' => 'island', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'PG' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code% %region%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'PH' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%region%\\n%country%', 'require' => array(0 => 'street', 1 => 'city'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'PK' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%-%postal_code%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'PL' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'PM' => array('format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'PN' => array('format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\n%POSTAL_CODE%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'PR' => array('format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% PR %postal_code%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'zip_name_type' => 'zip', 'postprefix' => 'PR', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'region_name_type' => 'province', 'direction' => 'ltr', 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'PT' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'PW' => array('format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %COUNTRY% %REGION% %postal_code%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'zip_name_type' => 'zip', 'region_name_type' => 'region', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'PY' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'RE' => array('format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'RO' => array('format' => '%name%\\n%organization%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'RS' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'RU' => array('format' => '%postal_code% %COUNTRY% %CITY%\\n%STREET%\\n%organization%\\n%name%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'SA' => array('format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'SC' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%REGION%\\n%COUNTRY%', 'region_name_type' => 'island', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'SE' => array('format' => '%organization%\\n%name%\\n%street%\\nSE-%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'postprefix' => 'SE-', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'SG' => array('format' => '%name%\\n%organization%\\n%street%\\nSINGAPORE %postal_code%', 'require' => array(0 => 'street', 1 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'SH' => array('format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\n%POSTAL_CODE%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'SI' => array('format' => '%name%\\n%organization%\\n%street%\\nSI- %postal_code% %city%\\n%country%', 'postprefix' => 'SI-', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'SJ' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'SK' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'SM' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'SN' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'SO' => array('format' => '%name%\\n%organization%\\n%STREET%\\n%CITY%, %REGION% %COUNTRY% %postal_code%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'SR' => array('format' => '%name%\\n%organization%\\n%STREET%\\n%city% %REGION%\\n%COUNTRY%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'ST' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'SV' => array('format' => '%name%\\n%organization%\\n%street%\\n%POSTAL_CODE%-%CITY%\\n%REGION%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'SZ' => array('format' => '%name%\\n%organization%\\n%STREET%\\n%CITY%\\n%COUNTRY%\\n%POSTAL_CODE%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'TC' => array('format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\n%POSTAL_CODE%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'TH' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%REGION% %COUNTRY% %postal_code%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%REGION% %COUNTRY% %postal_code%', 'format_charset' => 'TIS-620', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false), 'TJ' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'TM' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'TN' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'TR' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%/%region%\\n%country%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'TV' => array('format' => '%name%\\n%organization%\\n%STREET%\\n%CITY%\\n%REGION%\\n%COUNTRY%', 'region_name_type' => 'island', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'TW' => array('format' => '%postal_code%\\n%country%\\n%region%%city%\\n%street%\\n%organization%\\n%name%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%city%, %region% %country% %postal_code%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'region_name_type' => 'county', 'format_charset' => 'Big5', 'zip_name_type' => 'postal', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false), 'UA' => array('format' => '%postal_code% %country% %city%\\n%street%\\n%organization%\\n%name%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'UM' => array('format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %REGION% %COUNTRY% %postal_code%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region'), 'zip_name_type' => 'zip', 'region_name_type' => 'region', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'US' => array('format' => '%name%\\n%organization%\\n%street%\\n%CITY% %REGION_CODE% %COUNTRY_ISO2% %postal_code%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'zip_name_type' => 'zip', 'region_name_type' => 'region', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'UY' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %CITY% %REGION%\\n%COUNTRY%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'UZ' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %CITY%\\n%REGION%\\n%COUNTRY%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'VA' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'VE' => array('format' => '%name%\\n%organization%\\n%street%\\n%CITY% %postal_code%, %REGION%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'VG' => array('require' => array(0 => 'street'), 'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'VI' => array('format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %REGION% %COUNTRY% %postal_code%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'region', 3 => 'postal_code'), 'zip_name_type' => 'zip', 'region_name_type' => 'region', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'VN' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%region%\\n%country%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%region%\\n%country%', 'require' => array(0 => 'street', 1 => 'city'), 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'WF' => array('format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'YE' => array('require' => array(0 => 'street', 1 => 'city'), 'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'YT' => array('format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'ZA' => array('format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%\\n%postal_code%', 'require' => array(0 => 'street', 1 => 'city', 2 => 'postal_code'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8'), 'ZM' => array('format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%', 'require' => array(0 => 'street', 1 => 'city'), 'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%', 'zip_name_type' => 'postal', 'region_name_type' => 'province', 'direction' => 'ltr', 'postprefix' => NULL, 'has_disputed' => false, 'format_charset' => 'UTF-8')));
        $instance->addLocaleData(array('AD' => array('default_locale' => 'ca', 'currency_code' => 'EUR', 'phone_prefix' => '376'), 'AE' => array('default_locale' => 'ar_AE', 'currency_code' => 'AED', 'phone_prefix' => '971'), 'AF' => array('default_locale' => 'fa_AF', 'currency_code' => 'AFN', 'phone_prefix' => '93'), 'AG' => array('default_locale' => 'en_AG', 'currency_code' => 'XCD', 'phone_prefix' => '+1-268'), 'AI' => array('default_locale' => 'en', 'currency_code' => 'XCD', 'phone_prefix' => '+1-264'), 'AL' => array('default_locale' => 'sq', 'currency_code' => 'ALL', 'phone_prefix' => '355'), 'AM' => array('default_locale' => 'hy', 'currency_code' => 'AMD', 'phone_prefix' => '374'), 'AO' => array('default_locale' => 'pt_AO', 'currency_code' => 'AOA', 'phone_prefix' => '244'), 'AR' => array('default_locale' => 'es_AR', 'currency_code' => 'ARS', 'phone_prefix' => '54'), 'AS' => array('default_locale' => 'en_AS', 'currency_code' => 'USD', 'phone_prefix' => '+1-684'), 'AT' => array('default_locale' => 'de_AT', 'currency_code' => 'EUR', 'phone_prefix' => '43'), 'AU' => array('default_locale' => 'en_AU', 'currency_code' => 'AUD', 'phone_prefix' => '61'), 'AW' => array('default_locale' => 'nl_AW', 'currency_code' => 'AWG', 'phone_prefix' => '297'), 'AX' => array('default_locale' => 'sv_AX', 'currency_code' => 'EUR', 'phone_prefix' => '+358-18'), 'AZ' => array('default_locale' => 'az', 'currency_code' => 'AZN', 'phone_prefix' => '994'), 'BA' => array('default_locale' => 'bs', 'currency_code' => 'BAM', 'phone_prefix' => '387'), 'BB' => array('default_locale' => 'en_BB', 'currency_code' => 'BBD', 'phone_prefix' => '+1-246'), 'BD' => array('default_locale' => 'bn_BD', 'currency_code' => 'BDT', 'phone_prefix' => '880'), 'BE' => array('default_locale' => 'nl_BE', 'currency_code' => 'EUR', 'phone_prefix' => '32'), 'BF' => array('default_locale' => 'fr_BF', 'currency_code' => 'XOF', 'phone_prefix' => '226'), 'BG' => array('default_locale' => 'bg', 'currency_code' => 'BGN', 'phone_prefix' => '359'), 'BH' => array('default_locale' => 'ar_BH', 'currency_code' => 'BHD', 'phone_prefix' => '973'), 'BI' => array('default_locale' => 'fr_BI', 'currency_code' => 'BIF', 'phone_prefix' => '257'), 'BJ' => array('default_locale' => 'fr_BJ', 'currency_code' => 'XOF', 'phone_prefix' => '229'), 'BL' => array('default_locale' => 'fr', 'currency_code' => 'EUR', 'phone_prefix' => '590'), 'BM' => array('default_locale' => 'en_BM', 'currency_code' => 'BMD', 'phone_prefix' => '+1-441'), 'BN' => array('default_locale' => 'ms_BN', 'currency_code' => 'BND', 'phone_prefix' => '673'), 'BO' => array('default_locale' => 'es_BO', 'currency_code' => 'BOB', 'phone_prefix' => '591'), 'BQ' => array('default_locale' => 'nl', 'currency_code' => 'USD', 'phone_prefix' => '599'), 'BR' => array('default_locale' => 'pt_BR', 'currency_code' => 'BRL', 'phone_prefix' => '55'), 'BS' => array('default_locale' => 'en_BS', 'currency_code' => 'BSD', 'phone_prefix' => '+1-242'), 'BT' => array('default_locale' => 'dz', 'currency_code' => 'BTN', 'phone_prefix' => '975'), 'BW' => array('default_locale' => 'en_BW', 'currency_code' => 'BWP', 'phone_prefix' => '267'), 'BY' => array('default_locale' => 'be', 'currency_code' => 'BYR', 'phone_prefix' => '375'), 'BZ' => array('default_locale' => 'en_BZ', 'currency_code' => 'BZD', 'phone_prefix' => '501'), 'CA' => array('default_locale' => 'en_CA', 'currency_code' => 'CAD', 'phone_prefix' => '1'), 'CC' => array('default_locale' => 'ms', 'currency_code' => 'AUD', 'phone_prefix' => '61'), 'CD' => array('default_locale' => 'fr_CD', 'currency_code' => 'CDF', 'phone_prefix' => '243'), 'CF' => array('default_locale' => 'fr_CF', 'currency_code' => 'XAF', 'phone_prefix' => '236'), 'CG' => array('default_locale' => 'fr_CG', 'currency_code' => 'XAF', 'phone_prefix' => '242'), 'CH' => array('default_locale' => 'de_CH', 'currency_code' => 'CHF', 'phone_prefix' => '41'), 'CI' => array('default_locale' => 'fr_CI', 'currency_code' => 'XOF', 'phone_prefix' => '225'), 'CK' => array('default_locale' => 'en', 'currency_code' => 'NZD', 'phone_prefix' => '682'), 'CL' => array('default_locale' => 'es_CL', 'currency_code' => 'CLP', 'phone_prefix' => '56'), 'CM' => array('default_locale' => 'en_CM', 'currency_code' => 'XAF', 'phone_prefix' => '237'), 'CN' => array('default_locale' => 'zh_CN', 'currency_code' => 'CNY', 'phone_prefix' => '86'), 'CO' => array('default_locale' => 'es_CO', 'currency_code' => 'COP', 'phone_prefix' => '57'), 'CR' => array('default_locale' => 'es_CR', 'currency_code' => 'CRC', 'phone_prefix' => '506'), 'CU' => array('default_locale' => 'es_CU', 'currency_code' => 'CUP', 'phone_prefix' => '53'), 'CV' => array('default_locale' => 'pt_CV', 'currency_code' => 'CVE', 'phone_prefix' => '238'), 'CW' => array('default_locale' => 'nl', 'currency_code' => 'ANG', 'phone_prefix' => '599'), 'CX' => array('default_locale' => 'en', 'currency_code' => 'AUD', 'phone_prefix' => '61'), 'CY' => array('default_locale' => 'el_CY', 'currency_code' => 'EUR', 'phone_prefix' => '357'), 'CZ' => array('default_locale' => 'cs', 'currency_code' => 'CZK', 'phone_prefix' => '420'), 'DE' => array('default_locale' => 'de', 'currency_code' => 'EUR', 'phone_prefix' => '49'), 'DJ' => array('default_locale' => 'fr_DJ', 'currency_code' => 'DJF', 'phone_prefix' => '253'), 'DK' => array('default_locale' => 'da_DK', 'currency_code' => 'DKK', 'phone_prefix' => '45'), 'DM' => array('default_locale' => 'en_DM', 'currency_code' => 'XCD', 'phone_prefix' => '+1-767'), 'DO' => array('default_locale' => 'es_DO', 'currency_code' => 'DOP', 'phone_prefix' => '+1-809'), 'DZ' => array('default_locale' => 'ar_DZ', 'currency_code' => 'DZD', 'phone_prefix' => '213'), 'EC' => array('default_locale' => 'es_EC', 'currency_code' => 'USD', 'phone_prefix' => '593'), 'EE' => array('default_locale' => 'et', 'currency_code' => 'EUR', 'phone_prefix' => '372'), 'EG' => array('default_locale' => 'ar_EG', 'currency_code' => 'EGP', 'phone_prefix' => '20'), 'EH' => array('default_locale' => 'ar', 'currency_code' => 'MAD', 'phone_prefix' => '212'), 'ER' => array('default_locale' => 'ti_ER', 'currency_code' => 'ERN', 'phone_prefix' => '291'), 'ES' => array('default_locale' => 'es_ES', 'currency_code' => 'EUR', 'phone_prefix' => '34'), 'ET' => array('default_locale' => 'am', 'currency_code' => 'ETB', 'phone_prefix' => '251'), 'FI' => array('default_locale' => 'fi_FI', 'currency_code' => 'EUR', 'phone_prefix' => '358'), 'FJ' => array('default_locale' => 'en_FJ', 'currency_code' => 'FJD', 'phone_prefix' => '679'), 'FK' => array('default_locale' => 'en', 'currency_code' => 'FKP', 'phone_prefix' => '500'), 'FM' => array('default_locale' => 'en_FM', 'currency_code' => 'USD', 'phone_prefix' => '691'), 'FO' => array('default_locale' => 'fo', 'currency_code' => 'DKK', 'phone_prefix' => '298'), 'FR' => array('default_locale' => 'fr_FR', 'currency_code' => 'EUR', 'phone_prefix' => '33'), 'GA' => array('default_locale' => 'fr_GA', 'currency_code' => 'XAF', 'phone_prefix' => '241'), 'GB' => array('default_locale' => 'en_GB', 'currency_code' => 'GBP', 'phone_prefix' => '44'), 'GD' => array('default_locale' => 'en_GD', 'currency_code' => 'XCD', 'phone_prefix' => '+1-473'), 'GE' => array('default_locale' => 'ka', 'currency_code' => 'GEL', 'phone_prefix' => '995'), 'GF' => array('default_locale' => 'fr_GF', 'currency_code' => 'EUR', 'phone_prefix' => '594'), 'GG' => array('default_locale' => 'en', 'currency_code' => 'GBP', 'phone_prefix' => '+44-1481'), 'GH' => array('default_locale' => 'en_GH', 'currency_code' => 'GHS', 'phone_prefix' => '233'), 'GI' => array('default_locale' => 'en_GI', 'currency_code' => 'GIP', 'phone_prefix' => '350'), 'GL' => array('default_locale' => 'kl', 'currency_code' => 'DKK', 'phone_prefix' => '299'), 'GM' => array('default_locale' => 'en_GM', 'currency_code' => 'GMD', 'phone_prefix' => '220'), 'GN' => array('default_locale' => 'fr_GN', 'currency_code' => 'GNF', 'phone_prefix' => '224'), 'GP' => array('default_locale' => 'fr_GP', 'currency_code' => 'EUR', 'phone_prefix' => '590'), 'GQ' => array('default_locale' => 'es_GQ', 'currency_code' => 'XAF', 'phone_prefix' => '240'), 'GR' => array('default_locale' => 'el_GR', 'currency_code' => 'EUR', 'phone_prefix' => '30'), 'GS' => array('default_locale' => 'en', 'currency_code' => 'GBP'), 'GT' => array('default_locale' => 'es_GT', 'currency_code' => 'GTQ', 'phone_prefix' => '502'), 'GU' => array('default_locale' => 'en_GU', 'currency_code' => 'USD', 'phone_prefix' => '+1-671'), 'GW' => array('default_locale' => 'pt_GW', 'currency_code' => 'XOF', 'phone_prefix' => '245'), 'GY' => array('default_locale' => 'en_GY', 'currency_code' => 'GYD', 'phone_prefix' => '592'), 'HK' => array('default_locale' => 'zh_HK', 'currency_code' => 'HKD', 'phone_prefix' => '852'), 'HN' => array('default_locale' => 'es_HN', 'currency_code' => 'HNL', 'phone_prefix' => '504'), 'HR' => array('default_locale' => 'hr_HR', 'currency_code' => 'HRK', 'phone_prefix' => '385'), 'HT' => array('default_locale' => 'fr', 'currency_code' => 'HTG', 'phone_prefix' => '509'), 'HU' => array('default_locale' => 'hu_HU', 'currency_code' => 'HUF', 'phone_prefix' => '36'), 'ID' => array('default_locale' => 'id', 'currency_code' => 'IDR', 'phone_prefix' => '62'), 'IE' => array('default_locale' => 'en_IE', 'currency_code' => 'EUR', 'phone_prefix' => '353'), 'IL' => array('default_locale' => 'he', 'currency_code' => 'ILS', 'phone_prefix' => '972'), 'IM' => array('default_locale' => 'en', 'currency_code' => 'GBP', 'phone_prefix' => '+44-1624'), 'IN' => array('default_locale' => 'en_IN', 'currency_code' => 'INR', 'phone_prefix' => '91'), 'IO' => array('default_locale' => 'en', 'currency_code' => 'USD', 'phone_prefix' => '246'), 'IQ' => array('default_locale' => 'ar_IQ', 'currency_code' => 'IQD', 'phone_prefix' => '964'), 'IR' => array('default_locale' => 'fa_IR', 'currency_code' => 'IRR', 'phone_prefix' => '98'), 'IS' => array('default_locale' => 'is', 'currency_code' => 'ISK', 'phone_prefix' => '354'), 'IT' => array('default_locale' => 'it_IT', 'currency_code' => 'EUR', 'phone_prefix' => '39'), 'JE' => array('default_locale' => 'en', 'currency_code' => 'GBP', 'phone_prefix' => '+44-1534'), 'JM' => array('default_locale' => 'en_JM', 'currency_code' => 'JMD', 'phone_prefix' => '+1-876'), 'JO' => array('default_locale' => 'ar_JO', 'currency_code' => 'JOD', 'phone_prefix' => '962'), 'JP' => array('default_locale' => 'ja', 'currency_code' => 'JPY', 'phone_prefix' => '81'), 'KE' => array('default_locale' => 'en_KE', 'currency_code' => 'KES', 'phone_prefix' => '254'), 'KG' => array('default_locale' => 'ru', 'currency_code' => 'KGS', 'phone_prefix' => '996'), 'KH' => array('default_locale' => 'km', 'currency_code' => 'KHR', 'phone_prefix' => '855'), 'KI' => array('default_locale' => 'en_KI', 'currency_code' => 'AUD', 'phone_prefix' => '686'), 'KM' => array('default_locale' => 'ar', 'currency_code' => 'KMF', 'phone_prefix' => '269'), 'KN' => array('default_locale' => 'en_KN', 'currency_code' => 'XCD', 'phone_prefix' => '+1-869'), 'KP' => array('default_locale' => 'ko_KP', 'currency_code' => 'KPW', 'phone_prefix' => '850'), 'KR' => array('default_locale' => 'ko_KR', 'currency_code' => 'KRW', 'phone_prefix' => '82'), 'XK' => array('default_locale' => 'sq', 'currency_code' => 'EUR'), 'KW' => array('default_locale' => 'ar_KW', 'currency_code' => 'KWD', 'phone_prefix' => '965'), 'KY' => array('default_locale' => 'en_KY', 'currency_code' => 'KYD', 'phone_prefix' => '+1-345'), 'KZ' => array('default_locale' => 'kk', 'currency_code' => 'KZT', 'phone_prefix' => '7'), 'LA' => array('default_locale' => 'lo', 'currency_code' => 'LAK', 'phone_prefix' => '856'), 'LB' => array('default_locale' => 'ar_LB', 'currency_code' => 'LBP', 'phone_prefix' => '961'), 'LC' => array('default_locale' => 'en_LC', 'currency_code' => 'XCD', 'phone_prefix' => '+1-758'), 'LI' => array('default_locale' => 'de_LI', 'currency_code' => 'CHF', 'phone_prefix' => '423'), 'LK' => array('default_locale' => 'si', 'currency_code' => 'LKR', 'phone_prefix' => '94'), 'LR' => array('default_locale' => 'en_LR', 'currency_code' => 'LRD', 'phone_prefix' => '231'), 'LS' => array('default_locale' => 'en_LS', 'currency_code' => 'LSL', 'phone_prefix' => '266'), 'LT' => array('default_locale' => 'lt', 'currency_code' => 'LTL', 'phone_prefix' => '370'), 'LU' => array('default_locale' => 'fr', 'currency_code' => 'EUR', 'phone_prefix' => '352'), 'LV' => array('default_locale' => 'lv', 'currency_code' => 'LVL', 'phone_prefix' => '371'), 'LY' => array('default_locale' => 'ar_LY', 'currency_code' => 'LYD', 'phone_prefix' => '218'), 'MA' => array('default_locale' => 'ar_MA', 'currency_code' => 'MAD', 'phone_prefix' => '212'), 'MC' => array('default_locale' => 'fr_MC', 'currency_code' => 'EUR', 'phone_prefix' => '377'), 'MD' => array('default_locale' => 'ro', 'currency_code' => 'MDL', 'phone_prefix' => '373'), 'ME' => array('default_locale' => 'sr', 'currency_code' => 'EUR', 'phone_prefix' => '382'), 'MF' => array('default_locale' => 'fr', 'currency_code' => 'EUR', 'phone_prefix' => '590'), 'MG' => array('default_locale' => 'fr_MG', 'currency_code' => 'MGA', 'phone_prefix' => '261'), 'MH' => array('default_locale' => 'en', 'currency_code' => 'USD', 'phone_prefix' => '692'), 'MK' => array('default_locale' => 'mk', 'currency_code' => 'MKD', 'phone_prefix' => '389'), 'ML' => array('default_locale' => 'fr_ML', 'currency_code' => 'XOF', 'phone_prefix' => '223'), 'MM' => array('default_locale' => 'my', 'currency_code' => 'MMK', 'phone_prefix' => '95'), 'MN' => array('default_locale' => 'mn', 'currency_code' => 'MNT', 'phone_prefix' => '976'), 'MO' => array('default_locale' => 'zh', 'currency_code' => 'MOP', 'phone_prefix' => '853'), 'MP' => array('default_locale' => 'fil', 'currency_code' => 'USD', 'phone_prefix' => '+1-670'), 'MQ' => array('default_locale' => 'fr_MQ', 'currency_code' => 'EUR', 'phone_prefix' => '596'), 'MR' => array('default_locale' => 'ar_MR', 'currency_code' => 'MRO', 'phone_prefix' => '222'), 'MS' => array('default_locale' => 'en', 'currency_code' => 'XCD', 'phone_prefix' => '+1-664'), 'MT' => array('default_locale' => 'mt', 'currency_code' => 'EUR', 'phone_prefix' => '356'), 'MU' => array('default_locale' => 'en_MU', 'currency_code' => 'MUR', 'phone_prefix' => '230'), 'MV' => array('default_locale' => 'en', 'currency_code' => 'MVR', 'phone_prefix' => '960'), 'MW' => array('default_locale' => 'en', 'currency_code' => 'MWK', 'phone_prefix' => '265'), 'MX' => array('default_locale' => 'es_MX', 'currency_code' => 'MXN', 'phone_prefix' => '52'), 'MY' => array('default_locale' => 'ms_MY', 'currency_code' => 'MYR', 'phone_prefix' => '60'), 'MZ' => array('default_locale' => 'pt_MZ', 'currency_code' => 'MZN', 'phone_prefix' => '258'), 'NA' => array('default_locale' => 'en_NA', 'currency_code' => 'NAD', 'phone_prefix' => '264'), 'NC' => array('default_locale' => 'fr_NC', 'currency_code' => 'XPF', 'phone_prefix' => '687'), 'NE' => array('default_locale' => 'fr_NE', 'currency_code' => 'XOF', 'phone_prefix' => '227'), 'NF' => array('default_locale' => 'en', 'currency_code' => 'AUD', 'phone_prefix' => '672'), 'NG' => array('default_locale' => 'en_NG', 'currency_code' => 'NGN', 'phone_prefix' => '234'), 'NI' => array('default_locale' => 'es_NI', 'currency_code' => 'NIO', 'phone_prefix' => '505'), 'NL' => array('default_locale' => 'nl_NL', 'currency_code' => 'EUR', 'phone_prefix' => '31'), 'NO' => array('default_locale' => 'no', 'currency_code' => 'NOK', 'phone_prefix' => '47'), 'NP' => array('default_locale' => 'ne', 'currency_code' => 'NPR', 'phone_prefix' => '977'), 'NR' => array('default_locale' => 'en', 'currency_code' => 'AUD', 'phone_prefix' => '674'), 'NU' => array('default_locale' => 'en', 'currency_code' => 'NZD', 'phone_prefix' => '683'), 'NZ' => array('default_locale' => 'en_NZ', 'currency_code' => 'NZD', 'phone_prefix' => '64'), 'OM' => array('default_locale' => 'ar_OM', 'currency_code' => 'OMR', 'phone_prefix' => '968'), 'PA' => array('default_locale' => 'es_PA', 'currency_code' => 'PAB', 'phone_prefix' => '507'), 'PE' => array('default_locale' => 'es_PE', 'currency_code' => 'PEN', 'phone_prefix' => '51'), 'PF' => array('default_locale' => 'fr_PF', 'currency_code' => 'XPF', 'phone_prefix' => '689'), 'PG' => array('default_locale' => 'en_PG', 'currency_code' => 'PGK', 'phone_prefix' => '675'), 'PH' => array('default_locale' => 'tl', 'currency_code' => 'PHP', 'phone_prefix' => '63'), 'PK' => array('default_locale' => 'ur_PK', 'currency_code' => 'PKR', 'phone_prefix' => '92'), 'PL' => array('default_locale' => 'pl', 'currency_code' => 'PLN', 'phone_prefix' => '48'), 'PM' => array('default_locale' => 'fr', 'currency_code' => 'EUR', 'phone_prefix' => '508'), 'PN' => array('default_locale' => 'en', 'currency_code' => 'NZD', 'phone_prefix' => '870'), 'PR' => array('default_locale' => 'en_PR', 'currency_code' => 'USD', 'phone_prefix' => '+1-787'), 'PS' => array('default_locale' => 'ar_PS', 'currency_code' => 'ILS', 'phone_prefix' => '970'), 'PT' => array('default_locale' => 'pt_PT', 'currency_code' => 'EUR', 'phone_prefix' => '351'), 'PW' => array('default_locale' => 'en', 'currency_code' => 'USD', 'phone_prefix' => '680'), 'PY' => array('default_locale' => 'es_PY', 'currency_code' => 'PYG', 'phone_prefix' => '595'), 'QA' => array('default_locale' => 'ar_QA', 'currency_code' => 'QAR', 'phone_prefix' => '974'), 'RE' => array('default_locale' => 'fr_RE', 'currency_code' => 'EUR', 'phone_prefix' => '262'), 'RO' => array('default_locale' => 'ro', 'currency_code' => 'RON', 'phone_prefix' => '40'), 'RS' => array('default_locale' => 'sr', 'currency_code' => 'RSD', 'phone_prefix' => '381'), 'RU' => array('default_locale' => 'ru', 'currency_code' => 'RUB', 'phone_prefix' => '7'), 'RW' => array('default_locale' => 'rw', 'currency_code' => 'RWF', 'phone_prefix' => '250'), 'SA' => array('default_locale' => 'ar_SA', 'currency_code' => 'SAR', 'phone_prefix' => '966'), 'SB' => array('default_locale' => 'en_SB', 'currency_code' => 'SBD', 'phone_prefix' => '677'), 'SC' => array('default_locale' => 'en_SC', 'currency_code' => 'SCR', 'phone_prefix' => '248'), 'SD' => array('default_locale' => 'ar_SD', 'currency_code' => 'SDG', 'phone_prefix' => '249'), 'SS' => array('default_locale' => 'en', 'currency_code' => 'SSP', 'phone_prefix' => '211'), 'SE' => array('default_locale' => 'sv_SE', 'currency_code' => 'SEK', 'phone_prefix' => '46'), 'SG' => array('default_locale' => 'en', 'currency_code' => 'SGD', 'phone_prefix' => '65'), 'SH' => array('default_locale' => 'en', 'currency_code' => 'SHP', 'phone_prefix' => '290'), 'SI' => array('default_locale' => 'sl', 'currency_code' => 'EUR', 'phone_prefix' => '386'), 'SJ' => array('default_locale' => 'no', 'currency_code' => 'NOK', 'phone_prefix' => '47'), 'SK' => array('default_locale' => 'sk', 'currency_code' => 'EUR', 'phone_prefix' => '421'), 'SL' => array('default_locale' => 'en_SL', 'currency_code' => 'SLL', 'phone_prefix' => '232'), 'SM' => array('default_locale' => 'it_SM', 'currency_code' => 'EUR', 'phone_prefix' => '378'), 'SN' => array('default_locale' => 'fr_SN', 'currency_code' => 'XOF', 'phone_prefix' => '221'), 'SO' => array('default_locale' => 'so_SO', 'currency_code' => 'SOS', 'phone_prefix' => '252'), 'SR' => array('default_locale' => 'nl_SR', 'currency_code' => 'SRD', 'phone_prefix' => '597'), 'ST' => array('default_locale' => 'pt_ST', 'currency_code' => 'STD', 'phone_prefix' => '239'), 'SV' => array('default_locale' => 'es_SV', 'currency_code' => 'USD', 'phone_prefix' => '503'), 'SX' => array('default_locale' => 'nl', 'currency_code' => 'ANG', 'phone_prefix' => '599'), 'SY' => array('default_locale' => 'ar_SY', 'currency_code' => 'SYP', 'phone_prefix' => '963'), 'SZ' => array('default_locale' => 'en_SZ', 'currency_code' => 'SZL', 'phone_prefix' => '268'), 'TC' => array('default_locale' => 'en_TC', 'currency_code' => 'USD', 'phone_prefix' => '+1-649'), 'TD' => array('default_locale' => 'fr_TD', 'currency_code' => 'XAF', 'phone_prefix' => '235'), 'TF' => array('default_locale' => 'fr', 'currency_code' => 'EUR'), 'TG' => array('default_locale' => 'fr_TG', 'currency_code' => 'XOF', 'phone_prefix' => '228'), 'TH' => array('default_locale' => 'th', 'currency_code' => 'THB', 'phone_prefix' => '66'), 'TJ' => array('default_locale' => 'fr', 'currency_code' => 'TJS', 'phone_prefix' => '992'), 'TK' => array('default_locale' => 'en', 'currency_code' => 'NZD', 'phone_prefix' => '690'), 'TL' => array('default_locale' => 'pt', 'currency_code' => 'USD', 'phone_prefix' => '670'), 'TM' => array('default_locale' => 'ru', 'currency_code' => 'TMT', 'phone_prefix' => '993'), 'TN' => array('default_locale' => 'ar_TN', 'currency_code' => 'TND', 'phone_prefix' => '216'), 'TO' => array('default_locale' => 'to', 'currency_code' => 'TOP', 'phone_prefix' => '676'), 'TR' => array('default_locale' => 'tr_TR', 'currency_code' => 'TRY', 'phone_prefix' => '90'), 'TT' => array('default_locale' => 'en_TT', 'currency_code' => 'TTD', 'phone_prefix' => '+1-868'), 'TV' => array('default_locale' => 'en', 'currency_code' => 'AUD', 'phone_prefix' => '688'), 'TW' => array('default_locale' => 'zh_TW', 'currency_code' => 'TWD', 'phone_prefix' => '886'), 'TZ' => array('default_locale' => 'sw_TZ', 'currency_code' => 'TZS', 'phone_prefix' => '255'), 'UA' => array('default_locale' => 'uk', 'currency_code' => 'UAH', 'phone_prefix' => '380'), 'UG' => array('default_locale' => 'en_UG', 'currency_code' => 'UGX', 'phone_prefix' => '256'), 'UM' => array('default_locale' => 'en_UM', 'currency_code' => 'USD', 'phone_prefix' => '1'), 'US' => array('default_locale' => 'en_US', 'currency_code' => 'USD', 'phone_prefix' => '1'), 'UY' => array('default_locale' => 'es_UY', 'currency_code' => 'UYU', 'phone_prefix' => '598'), 'UZ' => array('default_locale' => 'uz', 'currency_code' => 'UZS', 'phone_prefix' => '998'), 'VA' => array('default_locale' => 'it', 'currency_code' => 'EUR', 'phone_prefix' => '379'), 'VC' => array('default_locale' => 'en_VC', 'currency_code' => 'XCD', 'phone_prefix' => '+1-784'), 'VE' => array('default_locale' => 'es_VE', 'currency_code' => 'VEF', 'phone_prefix' => '58'), 'VG' => array('default_locale' => 'en_VG', 'currency_code' => 'USD', 'phone_prefix' => '+1-284'), 'VI' => array('default_locale' => 'en_VI', 'currency_code' => 'USD', 'phone_prefix' => '+1-340'), 'VN' => array('default_locale' => 'vi', 'currency_code' => 'VND', 'phone_prefix' => '84'), 'VU' => array('default_locale' => 'fr', 'currency_code' => 'VUV', 'phone_prefix' => '678'), 'WF' => array('default_locale' => 'fr', 'currency_code' => 'XPF', 'phone_prefix' => '681'), 'WS' => array('default_locale' => 'en', 'currency_code' => 'WST', 'phone_prefix' => '685'), 'YE' => array('default_locale' => 'ar_YE', 'currency_code' => 'YER', 'phone_prefix' => '967'), 'YT' => array('default_locale' => 'fr_YT', 'currency_code' => 'EUR', 'phone_prefix' => '262'), 'ZA' => array('default_locale' => 'zu', 'currency_code' => 'ZAR', 'phone_prefix' => '27'), 'ZM' => array('default_locale' => 'en_ZM', 'currency_code' => 'ZMK', 'phone_prefix' => '260'), 'ZW' => array('default_locale' => 'en_ZW', 'currency_code' => 'ZWL', 'phone_prefix' => '263'), 'CS' => array('default_locale' => 'sr', 'currency_code' => 'RSD', 'phone_prefix' => '381'), 'AN' => array('default_locale' => 'nl', 'currency_code' => 'ANG', 'phone_prefix' => '599')));
        $instance->addCurrencyData(array('AED' => array('symbol' => 'د.إ.‏'), 'AFN' => array('symbol' => '؋'), 'ALL' => array('symbol' => 'Lek'), 'AMD' => array('symbol' => 'դր.'), 'ANG' => array('symbol' => 'ANG'), 'AOA' => array('symbol' => 'Kz'), 'ARS' => array('symbol' => '$'), 'AUD' => array('symbol' => 'AU$'), 'AWG' => array('symbol' => 'Afl.'), 'AZN' => array('symbol' => 'man.'), 'BAM' => array('symbol' => 'KM'), 'BBD' => array('symbol' => '$'), 'BDT' => array('symbol' => '৳'), 'BGN' => array('symbol' => 'лв.'), 'BHD' => array('symbol' => 'د.ب.‏'), 'BIF' => array('symbol' => 'FBu'), 'BMD' => array('symbol' => '$'), 'BND' => array('symbol' => '$'), 'BOB' => array('symbol' => 'Bs'), 'BRL' => array('symbol' => 'R$'), 'BSD' => array('symbol' => 'BSD'), 'BTN' => array('symbol' => 'BTN'), 'BWP' => array('symbol' => 'P'), 'BYR' => array('symbol' => 'BYR'), 'BZD' => array('symbol' => '$'), 'CAD' => array('symbol' => '$'), 'CDF' => array('symbol' => 'FrCD'), 'CHF' => array('symbol' => 'CHF'), 'CLP' => array('symbol' => '$'), 'CNY' => array('symbol' => '￥'), 'COP' => array('symbol' => '$'), 'CRC' => array('symbol' => '₡'), 'CUP' => array('symbol' => 'CUP'), 'CVE' => array('symbol' => 'CVE'), 'CZK' => array('symbol' => 'Kč'), 'DJF' => array('symbol' => 'Fdj'), 'DKK' => array('symbol' => 'kr'), 'DOP' => array('symbol' => '$'), 'DZD' => array('symbol' => 'د.ج.‏'), 'EGP' => array('symbol' => 'ج.م.‏'), 'ERN' => array('symbol' => 'Nfk'), 'ETB' => array('symbol' => 'ብር'), 'EUR' => array('symbol' => '€'), 'FJD' => array('symbol' => 'FJD'), 'FKP' => array('symbol' => 'FKP'), 'GBP' => array('symbol' => '£'), 'GEL' => array('symbol' => 'GEL'), 'GHS' => array('symbol' => 'GHS'), 'GIP' => array('symbol' => 'GIP'), 'GMD' => array('symbol' => 'GMD'), 'GNF' => array('symbol' => 'FG'), 'GTQ' => array('symbol' => 'Q'), 'GYD' => array('symbol' => 'GYD'), 'HKD' => array('symbol' => '$'), 'HNL' => array('symbol' => 'L'), 'HRK' => array('symbol' => 'kn'), 'HTG' => array('symbol' => 'HTG'), 'HUF' => array('symbol' => 'Ft'), 'IDR' => array('symbol' => 'Rp'), 'ILS' => array('symbol' => '₪'), 'INR' => array('symbol' => '₹'), 'IQD' => array('symbol' => 'د.ع.‏'), 'IRR' => array('symbol' => '﷼'), 'ISK' => array('symbol' => 'kr'), 'JMD' => array('symbol' => '$'), 'JOD' => array('symbol' => 'د.أ.‏'), 'JPY' => array('symbol' => '￥'), 'KES' => array('symbol' => 'KES'), 'KGS' => array('symbol' => 'KGS'), 'KHR' => array('symbol' => '៛'), 'KMF' => array('symbol' => 'ف.ج.ق.‏'), 'KPW' => array('symbol' => 'KPW'), 'KRW' => array('symbol' => '₩'), 'KWD' => array('symbol' => 'د.ك.‏'), 'KYD' => array('symbol' => 'KYD'), 'KZT' => array('symbol' => 'тңг.'), 'LAK' => array('symbol' => 'LAK'), 'LBP' => array('symbol' => 'ل.ل.‏'), 'LKR' => array('symbol' => 'රු.'), 'LRD' => array('symbol' => 'LRD'), 'LSL' => array('symbol' => 'LSL'), 'LTL' => array('symbol' => 'Lt'), 'LVL' => array('symbol' => 'Ls'), 'LYD' => array('symbol' => 'د.ل.‏'), 'MAD' => array('symbol' => 'د.م.‏'), 'MDL' => array('symbol' => 'MDL'), 'MGA' => array('symbol' => 'MGA'), 'MKD' => array('symbol' => 'MKD'), 'MMK' => array('symbol' => 'K'), 'MNT' => array('symbol' => 'MNT'), 'MOP' => array('symbol' => 'MOP'), 'MRO' => array('symbol' => 'أ.م.‏'), 'MUR' => array('symbol' => 'MUR'), 'MVR' => array('symbol' => 'Rf.'), 'MWK' => array('symbol' => 'MWK'), 'MXN' => array('symbol' => '$'), 'MYR' => array('symbol' => 'RM'), 'MZN' => array('symbol' => 'MTn'), 'NAD' => array('symbol' => '$'), 'NGN' => array('symbol' => 'NGN'), 'NIO' => array('symbol' => 'C$'), 'NOK' => array('symbol' => 'kr'), 'NPR' => array('symbol' => 'नेरू '), 'NZD' => array('symbol' => 'NZ$'), 'OMR' => array('symbol' => 'ر.ع.‏'), 'PAB' => array('symbol' => 'B/.'), 'PEN' => array('symbol' => 'S/.'), 'PGK' => array('symbol' => 'PGK'), 'PHP' => array('symbol' => '₱'), 'PKR' => array('symbol' => 'PKRs'), 'PLN' => array('symbol' => 'zł'), 'PYG' => array('symbol' => '₲'), 'QAR' => array('symbol' => 'ر.ق.‏'), 'RON' => array('symbol' => 'RON'), 'RSD' => array('symbol' => 'дин.'), 'RUB' => array('symbol' => 'руб.'), 'RWF' => array('symbol' => 'RF'), 'SAR' => array('symbol' => 'ر.س.‏'), 'SBD' => array('symbol' => 'SBD'), 'SCR' => array('symbol' => 'SCR'), 'SDG' => array('symbol' => 'SDG'), 'SEK' => array('symbol' => 'kr'), 'SGD' => array('symbol' => 'SGD'), 'SHP' => array('symbol' => 'SHP'), 'SLL' => array('symbol' => 'SLL'), 'SOS' => array('symbol' => 'SOS'), 'SRD' => array('symbol' => 'SRD'), 'SSP' => array('symbol' => 'SSP'), 'STD' => array('symbol' => 'Db'), 'SYP' => array('symbol' => 'ل.س.‏'), 'SZL' => array('symbol' => 'SZL'), 'THB' => array('symbol' => '฿'), 'TJS' => array('symbol' => 'TJS'), 'TMT' => array('symbol' => 'TMT'), 'TND' => array('symbol' => 'د.ت.‏'), 'TOP' => array('symbol' => 'T$'), 'TRY' => array('symbol' => 'TL'), 'TTD' => array('symbol' => '$'), 'TWD' => array('symbol' => 'NT$'), 'TZS' => array('symbol' => 'TSh'), 'UAH' => array('symbol' => '₴'), 'UGX' => array('symbol' => 'UGX'), 'USD' => array('symbol' => '$'), 'UYU' => array('symbol' => '$'), 'UZS' => array('symbol' => 'UZS'), 'VEF' => array('symbol' => 'Bs.F.'), 'VND' => array('symbol' => '₫'), 'VUV' => array('symbol' => 'VUV'), 'WST' => array('symbol' => 'WST'), 'XAF' => array('symbol' => 'FCFA'), 'XCD' => array('symbol' => 'EC$'), 'XOF' => array('symbol' => 'CFA'), 'XPF' => array('symbol' => 'FCFP'), 'YER' => array('symbol' => 'ر.ي.‏'), 'ZAR' => array('symbol' => 'R'), 'ZMK' => array('symbol' => 'ZMK'), 'ZWL' => array('symbol' => 'ZWL')));

        return $instance;
    }

    /**
     * Gets the 'oro_locale.twig.address' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\LocaleBundle\Twig\AddressExtension A Oro\Bundle\LocaleBundle\Twig\AddressExtension instance.
     */
    protected function getOroLocale_Twig_AddressService()
    {
        return $this->services['oro_locale.twig.address'] = new \Oro\Bundle\LocaleBundle\Twig\AddressExtension($this->get('oro_locale.formatter.address'));
    }

    /**
     * Gets the 'oro_locale.twig.calendar' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\LocaleBundle\Twig\CalendarExtension A Oro\Bundle\LocaleBundle\Twig\CalendarExtension instance.
     */
    protected function getOroLocale_Twig_CalendarService()
    {
        return $this->services['oro_locale.twig.calendar'] = new \Oro\Bundle\LocaleBundle\Twig\CalendarExtension($this->get('oro_locale.settings'));
    }

    /**
     * Gets the 'oro_locale.twig.date_format' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\LocaleBundle\Twig\DateFormatExtension A Oro\Bundle\LocaleBundle\Twig\DateFormatExtension instance.
     */
    protected function getOroLocale_Twig_DateFormatService()
    {
        return $this->services['oro_locale.twig.date_format'] = new \Oro\Bundle\LocaleBundle\Twig\DateFormatExtension($this->get('oro_locale.format_converter.date_time.registry'));
    }

    /**
     * Gets the 'oro_locale.twig.date_time' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\LocaleBundle\Twig\DateTimeExtension A Oro\Bundle\LocaleBundle\Twig\DateTimeExtension instance.
     */
    protected function getOroLocale_Twig_DateTimeService()
    {
        return $this->services['oro_locale.twig.date_time'] = new \Oro\Bundle\LocaleBundle\Twig\DateTimeExtension($this->get('oro_locale.formatter.date_time'));
    }

    /**
     * Gets the 'oro_locale.twig.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\LocaleBundle\Twig\LocaleExtension A Oro\Bundle\LocaleBundle\Twig\LocaleExtension instance.
     */
    protected function getOroLocale_Twig_LocaleService()
    {
        return $this->services['oro_locale.twig.locale'] = new \Oro\Bundle\LocaleBundle\Twig\LocaleExtension($this->get('oro_locale.settings'));
    }

    /**
     * Gets the 'oro_locale.twig.name' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\LocaleBundle\Twig\NameExtension A Oro\Bundle\LocaleBundle\Twig\NameExtension instance.
     */
    protected function getOroLocale_Twig_NameService()
    {
        return $this->services['oro_locale.twig.name'] = new \Oro\Bundle\LocaleBundle\Twig\NameExtension($this->get('oro_locale.formatter.name'));
    }

    /**
     * Gets the 'oro_locale.twig.number' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\LocaleBundle\Twig\NumberExtension A Oro\Bundle\LocaleBundle\Twig\NumberExtension instance.
     */
    protected function getOroLocale_Twig_NumberService()
    {
        return $this->services['oro_locale.twig.number'] = new \Oro\Bundle\LocaleBundle\Twig\NumberExtension($this->get('oro_locale.formatter.number'));
    }

    /**
     * Gets the 'oro_measure.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\MeasureBundle\Manager\MeasureManager A Oro\Bundle\MeasureBundle\Manager\MeasureManager instance.
     */
    protected function getOroMeasure_ManagerService()
    {
        $this->services['oro_measure.manager'] = $instance = new \Oro\Bundle\MeasureBundle\Manager\MeasureManager();

        $instance->setMeasureConfig(array('Area' => array('standard' => 'SQUARE_METER', 'units' => array('ACRE' => array('convert' => array(0 => array('mul' => 4046.856422)), 'symbol' => 'A'), 'ARE' => array('convert' => array(0 => array('mul' => 100)), 'symbol' => 'a'), 'ARPENT' => array('convert' => array(0 => array('mul' => 3418.89)), 'symbol' => 'arpent'), 'CENTIARE' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'ca'), 'HECTARE' => array('convert' => array(0 => array('mul' => 10000)), 'symbol' => 'ha'), 'SQUARE_CENTIMETER' => array('convert' => array(0 => array('mul' => 0.0001)), 'symbol' => 'cm²'), 'SQUARE_DECIMETER' => array('convert' => array(0 => array('mul' => 0.01)), 'symbol' => 'dm²'), 'SQUARE_DEKAMETER' => array('convert' => array(0 => array('mul' => 100)), 'symbol' => 'dam²'), 'SQUARE_FOOT' => array('convert' => array(0 => array('mul' => 0.09290304)), 'symbol' => 'ft²'), 'SQUARE_FURLONG' => array('convert' => array(0 => array('mul' => 40468.726)), 'symbol' => 'fur²'), 'SQUARE_HECTOMETER' => array('convert' => array(0 => array('mul' => 10000)), 'symbol' => 'hm²'), 'SQUARE_INCH' => array('convert' => array(0 => array('mul' => 0.00064516)), 'symbol' => 'in²'), 'SQUARE_KILOMETER' => array('convert' => array(0 => array('mul' => 1000000)), 'symbol' => 'km²'), 'SQUARE_METER' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'm²'), 'SQUARE_MIL' => array('convert' => array(0 => array('mul' => 6.4516E-10)), 'symbol' => 'sq mil'), 'SQUARE_MILE' => array('convert' => array(0 => array('mul' => 2589988.110336)), 'symbol' => 'mi²'), 'SQUARE_MILLIMETER' => array('convert' => array(0 => array('mul' => 1.0E-6)), 'symbol' => 'mm²'), 'SQUARE_YARD' => array('convert' => array(0 => array('mul' => 0.83612736)), 'symbol' => 'yd²'))), 'Binary' => array('standard' => 'BYTE', 'units' => array('BIT' => array('convert' => array(0 => array('mul' => 0.125)), 'symbol' => 'b'), 'BYTE' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'B'), 'KILOBYTE' => array('convert' => array(0 => array('mul' => 1024)), 'symbol' => 'kB'), 'MEGABYTE' => array('convert' => array(0 => array('mul' => 1048576)), 'symbol' => 'MB'), 'GIGABYTE' => array('convert' => array(0 => array('mul' => 1073741824)), 'symbol' => 'GB'), 'TERABYTE' => array('convert' => array(0 => array('mul' => 1099511627776)), 'symbol' => 'TB'))), 'Frequency' => array('standard' => 'HERTZ', 'units' => array('GIGAHERTZ' => array('convert' => array(0 => array('mul' => 1000000000)), 'symbol' => 'GHz'), 'KILOHERTZ' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 'kHz'), 'MEGAHERTZ' => array('convert' => array(0 => array('mul' => 1000000)), 'symbol' => 'MHz'), 'TERAHERTZ' => array('convert' => array(0 => array('mul' => 1000000000000)), 'symbol' => 'THz'), 'HERTZ' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'Hz'))), 'Length' => array('standard' => 'METER', 'units' => array('CENTIMETER' => array('convert' => array(0 => array('mul' => 0.01)), 'symbol' => 'cm'), 'CHAIN' => array('convert' => array(0 => array('mul' => 20.1168)), 'symbol' => 'ch'), 'DECIMETER' => array('convert' => array(0 => array('mul' => 0.1)), 'symbol' => 'dm'), 'DEKAMETER' => array('convert' => array(0 => array('mul' => 10)), 'symbol' => 'dam'), 'FEET' => array('convert' => array(0 => array('mul' => 0.3048)), 'symbol' => 'ft'), 'FURLONG' => array('convert' => array(0 => array('mul' => 201.168)), 'symbol' => 'fur'), 'INCH' => array('convert' => array(0 => array('mul' => 0.0254)), 'symbol' => 'in'), 'HECTOMETER' => array('convert' => array(0 => array('mul' => 100)), 'symbol' => 'hm'), 'KILOMETER' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 'km'), 'METER' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'm'), 'MIL' => array('convert' => array(0 => array('mul' => 2.54E-5)), 'symbol' => 'mil'), 'MILE' => array('convert' => array(0 => array('mul' => 1609.344)), 'symbol' => 'mi'), 'MILLIMETER' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'mm'), 'YARD' => array('convert' => array(0 => array('mul' => 0.9144)), 'symbol' => 'yd'))), 'Power' => array('standard' => 'WATT', 'units' => array('GIGAWATT' => array('convert' => array(0 => array('mul' => 1000000000)), 'symbol' => 'GW'), 'KILOWATT' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 'kW'), 'MEGAWATT' => array('convert' => array(0 => array('mul' => 1000000)), 'symbol' => 'MW'), 'TERAWATT' => array('convert' => array(0 => array('mul' => 1000000000000)), 'symbol' => 'TW'), 'WATT' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'W'))), 'Speed' => array('standard' => 'METER_PER_SECOND', 'units' => array('FOOT_PER_SECOND' => array('convert' => array(0 => array('mul' => 0.3048)), 'symbol' => 'ftdivs'), 'FOOT_PER_HOUR' => array('convert' => array(0 => array('mul' => 0.3048), 1 => array('div' => 3600)), 'symbol' => 'ftdivh'), 'KILOMETER_PER_HOUR' => array('convert' => array(0 => array('mul' => 1000), 1 => array('div' => 3600)), 'symbol' => 'kmdivh'), 'METER_PER_HOUR' => array('convert' => array(0 => array('mul' => 1), 1 => array('div' => 3600)), 'symbol' => 'mdivh'), 'METER_PER_MINUTE' => array('convert' => array(0 => array('div' => 60)), 'symbol' => 'mdivm'), 'METER_PER_SECOND' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'mdivs'), 'MILE_PER_HOUR' => array('convert' => array(0 => array('mul' => 1609.344), 1 => array('div' => 3600)), 'symbol' => 'midivh'), 'YARD_PER_HOUR' => array('convert' => array(0 => array('mul' => '0.9144\''), 1 => array('div' => 3600)), 'symbol' => 'yddivh'))), 'Temperature' => array('standard' => 'KELVIN', 'units' => array('CELSIUS' => array('convert' => array(0 => array('add' => 273.15)), 'symbol' => '°C'), 'FAHRENHEIT' => array('convert' => array(0 => array('sub' => 32), 1 => array('div' => 1.8), 2 => array('add' => 273.15)), 'symbol' => '°F'), 'KELVIN' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => '°K'), 'RANKINE' => array('convert' => array(0 => array('div' => 1.8)), 'symbol' => '°R'), 'REAUMUR' => array('convert' => array(0 => array('mul' => 1.25), 1 => array('add' => 273.15)), 'symbol' => '°r'))), 'Volume' => array('standard' => 'CUBIC_METER', 'units' => array('BARREL' => array('convert' => array(0 => array('mul' => 0.16365924)), 'symbol' => 'bbl'), 'CENTILITER' => array('convert' => array(0 => array('mul' => 1.0E-5)), 'symbol' => 'cl'), 'CUBIC_CENTIMETER' => array('convert' => array(0 => array('mul' => 1.0E-6)), 'symbol' => 'cl³'), 'CUBIC_DECIMETER' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'dl³'), 'CUBIC_FOOT' => array('convert' => array(0 => array('mul' => 6.54119159), 1 => array('div' => 231)), 'symbol' => 'ft³'), 'CUBIC_INCH' => array('convert' => array(0 => array('mul' => 0.0037854118), 1 => array('div' => 231)), 'symbol' => 'in³'), 'CUBIC_METER' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'm³'), 'CUBIC_MILLIMETER' => array('convert' => array(0 => array('mul' => 1.0E-9)), 'symbol' => 'mm³'), 'CUBIC_YARD' => array('convert' => array(0 => array('mul' => 0.764554861)), 'symbol' => 'yd³'), 'DECILITER' => array('convert' => array(0 => array('mul' => 0.0001)), 'symbol' => 'dl'), 'GALLON' => array('convert' => array(0 => array('mul' => 0.00454609)), 'symbol' => 'gal'), 'LITER' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'l'), 'MILLILITER' => array('convert' => array(0 => array('mul' => 1.0E-6)), 'symbol' => 'ml'), 'OUNCE' => array('convert' => array(0 => array('mul' => 0.00454609), 1 => array('div' => 160)), 'symbol' => 'oz'), 'PINT' => array('convert' => array(0 => array('mul' => 0.00454609), 1 => array('div' => 8)), 'symbol' => 'pt'))), 'Weight' => array('standard' => 'KILOGRAM', 'units' => array('DENIER' => array('convert' => array(0 => array('mul' => 0.001275)), 'symbol' => 'denier'), 'GRAIN' => array('convert' => array(0 => array('mul' => 6.479891E-5)), 'symbol' => 'gr'), 'GRAM' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'g'), 'KILOGRAM' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'kg'), 'LIVRE' => array('convert' => array(0 => array('mul' => 0.4895)), 'symbol' => 'livre'), 'MARC' => array('convert' => array(0 => array('mul' => 0.24475)), 'symbol' => 'marc'), 'MILLIGRAM' => array('convert' => array(0 => array('mul' => 1.0E-6)), 'symbol' => 'mg'), 'ONCE' => array('convert' => array(0 => array('mul' => 0.03059)), 'symbol' => 'once'), 'OUNCE' => array('convert' => array(0 => array('mul' => 0.45359237), 1 => array('div' => 16)), 'symbol' => 'oz'), 'POUND' => array('convert' => array(0 => array('mul' => 0.45359237)), 'symbol' => 'lb'), 'TON' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 't')))));

        return $instance;
    }

    /**
     * Gets the 'oro_measure.measure_converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\MeasureBundle\Convert\MeasureConverter A Oro\Bundle\MeasureBundle\Convert\MeasureConverter instance.
     */
    protected function getOroMeasure_MeasureConverterService()
    {
        return $this->services['oro_measure.measure_converter'] = new \Oro\Bundle\MeasureBundle\Convert\MeasureConverter(array('measures_config' => array('Area' => array('standard' => 'SQUARE_METER', 'units' => array('ACRE' => array('convert' => array(0 => array('mul' => 4046.856422)), 'symbol' => 'A'), 'ARE' => array('convert' => array(0 => array('mul' => 100)), 'symbol' => 'a'), 'ARPENT' => array('convert' => array(0 => array('mul' => 3418.89)), 'symbol' => 'arpent'), 'CENTIARE' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'ca'), 'HECTARE' => array('convert' => array(0 => array('mul' => 10000)), 'symbol' => 'ha'), 'SQUARE_CENTIMETER' => array('convert' => array(0 => array('mul' => 0.0001)), 'symbol' => 'cm²'), 'SQUARE_DECIMETER' => array('convert' => array(0 => array('mul' => 0.01)), 'symbol' => 'dm²'), 'SQUARE_DEKAMETER' => array('convert' => array(0 => array('mul' => 100)), 'symbol' => 'dam²'), 'SQUARE_FOOT' => array('convert' => array(0 => array('mul' => 0.09290304)), 'symbol' => 'ft²'), 'SQUARE_FURLONG' => array('convert' => array(0 => array('mul' => 40468.726)), 'symbol' => 'fur²'), 'SQUARE_HECTOMETER' => array('convert' => array(0 => array('mul' => 10000)), 'symbol' => 'hm²'), 'SQUARE_INCH' => array('convert' => array(0 => array('mul' => 0.00064516)), 'symbol' => 'in²'), 'SQUARE_KILOMETER' => array('convert' => array(0 => array('mul' => 1000000)), 'symbol' => 'km²'), 'SQUARE_METER' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'm²'), 'SQUARE_MIL' => array('convert' => array(0 => array('mul' => 6.4516E-10)), 'symbol' => 'sq mil'), 'SQUARE_MILE' => array('convert' => array(0 => array('mul' => 2589988.110336)), 'symbol' => 'mi²'), 'SQUARE_MILLIMETER' => array('convert' => array(0 => array('mul' => 1.0E-6)), 'symbol' => 'mm²'), 'SQUARE_YARD' => array('convert' => array(0 => array('mul' => 0.83612736)), 'symbol' => 'yd²'))), 'Binary' => array('standard' => 'BYTE', 'units' => array('BIT' => array('convert' => array(0 => array('mul' => 0.125)), 'symbol' => 'b'), 'BYTE' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'B'), 'KILOBYTE' => array('convert' => array(0 => array('mul' => 1024)), 'symbol' => 'kB'), 'MEGABYTE' => array('convert' => array(0 => array('mul' => 1048576)), 'symbol' => 'MB'), 'GIGABYTE' => array('convert' => array(0 => array('mul' => 1073741824)), 'symbol' => 'GB'), 'TERABYTE' => array('convert' => array(0 => array('mul' => 1099511627776)), 'symbol' => 'TB'))), 'Frequency' => array('standard' => 'HERTZ', 'units' => array('GIGAHERTZ' => array('convert' => array(0 => array('mul' => 1000000000)), 'symbol' => 'GHz'), 'KILOHERTZ' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 'kHz'), 'MEGAHERTZ' => array('convert' => array(0 => array('mul' => 1000000)), 'symbol' => 'MHz'), 'TERAHERTZ' => array('convert' => array(0 => array('mul' => 1000000000000)), 'symbol' => 'THz'), 'HERTZ' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'Hz'))), 'Length' => array('standard' => 'METER', 'units' => array('CENTIMETER' => array('convert' => array(0 => array('mul' => 0.01)), 'symbol' => 'cm'), 'CHAIN' => array('convert' => array(0 => array('mul' => 20.1168)), 'symbol' => 'ch'), 'DECIMETER' => array('convert' => array(0 => array('mul' => 0.1)), 'symbol' => 'dm'), 'DEKAMETER' => array('convert' => array(0 => array('mul' => 10)), 'symbol' => 'dam'), 'FEET' => array('convert' => array(0 => array('mul' => 0.3048)), 'symbol' => 'ft'), 'FURLONG' => array('convert' => array(0 => array('mul' => 201.168)), 'symbol' => 'fur'), 'INCH' => array('convert' => array(0 => array('mul' => 0.0254)), 'symbol' => 'in'), 'HECTOMETER' => array('convert' => array(0 => array('mul' => 100)), 'symbol' => 'hm'), 'KILOMETER' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 'km'), 'METER' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'm'), 'MIL' => array('convert' => array(0 => array('mul' => 2.54E-5)), 'symbol' => 'mil'), 'MILE' => array('convert' => array(0 => array('mul' => 1609.344)), 'symbol' => 'mi'), 'MILLIMETER' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'mm'), 'YARD' => array('convert' => array(0 => array('mul' => 0.9144)), 'symbol' => 'yd'))), 'Power' => array('standard' => 'WATT', 'units' => array('GIGAWATT' => array('convert' => array(0 => array('mul' => 1000000000)), 'symbol' => 'GW'), 'KILOWATT' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 'kW'), 'MEGAWATT' => array('convert' => array(0 => array('mul' => 1000000)), 'symbol' => 'MW'), 'TERAWATT' => array('convert' => array(0 => array('mul' => 1000000000000)), 'symbol' => 'TW'), 'WATT' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'W'))), 'Speed' => array('standard' => 'METER_PER_SECOND', 'units' => array('FOOT_PER_SECOND' => array('convert' => array(0 => array('mul' => 0.3048)), 'symbol' => 'ftdivs'), 'FOOT_PER_HOUR' => array('convert' => array(0 => array('mul' => 0.3048), 1 => array('div' => 3600)), 'symbol' => 'ftdivh'), 'KILOMETER_PER_HOUR' => array('convert' => array(0 => array('mul' => 1000), 1 => array('div' => 3600)), 'symbol' => 'kmdivh'), 'METER_PER_HOUR' => array('convert' => array(0 => array('mul' => 1), 1 => array('div' => 3600)), 'symbol' => 'mdivh'), 'METER_PER_MINUTE' => array('convert' => array(0 => array('div' => 60)), 'symbol' => 'mdivm'), 'METER_PER_SECOND' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'mdivs'), 'MILE_PER_HOUR' => array('convert' => array(0 => array('mul' => 1609.344), 1 => array('div' => 3600)), 'symbol' => 'midivh'), 'YARD_PER_HOUR' => array('convert' => array(0 => array('mul' => '0.9144\''), 1 => array('div' => 3600)), 'symbol' => 'yddivh'))), 'Temperature' => array('standard' => 'KELVIN', 'units' => array('CELSIUS' => array('convert' => array(0 => array('add' => 273.15)), 'symbol' => '°C'), 'FAHRENHEIT' => array('convert' => array(0 => array('sub' => 32), 1 => array('div' => 1.8), 2 => array('add' => 273.15)), 'symbol' => '°F'), 'KELVIN' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => '°K'), 'RANKINE' => array('convert' => array(0 => array('div' => 1.8)), 'symbol' => '°R'), 'REAUMUR' => array('convert' => array(0 => array('mul' => 1.25), 1 => array('add' => 273.15)), 'symbol' => '°r'))), 'Volume' => array('standard' => 'CUBIC_METER', 'units' => array('BARREL' => array('convert' => array(0 => array('mul' => 0.16365924)), 'symbol' => 'bbl'), 'CENTILITER' => array('convert' => array(0 => array('mul' => 1.0E-5)), 'symbol' => 'cl'), 'CUBIC_CENTIMETER' => array('convert' => array(0 => array('mul' => 1.0E-6)), 'symbol' => 'cl³'), 'CUBIC_DECIMETER' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'dl³'), 'CUBIC_FOOT' => array('convert' => array(0 => array('mul' => 6.54119159), 1 => array('div' => 231)), 'symbol' => 'ft³'), 'CUBIC_INCH' => array('convert' => array(0 => array('mul' => 0.0037854118), 1 => array('div' => 231)), 'symbol' => 'in³'), 'CUBIC_METER' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'm³'), 'CUBIC_MILLIMETER' => array('convert' => array(0 => array('mul' => 1.0E-9)), 'symbol' => 'mm³'), 'CUBIC_YARD' => array('convert' => array(0 => array('mul' => 0.764554861)), 'symbol' => 'yd³'), 'DECILITER' => array('convert' => array(0 => array('mul' => 0.0001)), 'symbol' => 'dl'), 'GALLON' => array('convert' => array(0 => array('mul' => 0.00454609)), 'symbol' => 'gal'), 'LITER' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'l'), 'MILLILITER' => array('convert' => array(0 => array('mul' => 1.0E-6)), 'symbol' => 'ml'), 'OUNCE' => array('convert' => array(0 => array('mul' => 0.00454609), 1 => array('div' => 160)), 'symbol' => 'oz'), 'PINT' => array('convert' => array(0 => array('mul' => 0.00454609), 1 => array('div' => 8)), 'symbol' => 'pt'))), 'Weight' => array('standard' => 'KILOGRAM', 'units' => array('DENIER' => array('convert' => array(0 => array('mul' => 0.001275)), 'symbol' => 'denier'), 'GRAIN' => array('convert' => array(0 => array('mul' => 6.479891E-5)), 'symbol' => 'gr'), 'GRAM' => array('convert' => array(0 => array('mul' => 0.001)), 'symbol' => 'g'), 'KILOGRAM' => array('convert' => array(0 => array('mul' => 1)), 'symbol' => 'kg'), 'LIVRE' => array('convert' => array(0 => array('mul' => 0.4895)), 'symbol' => 'livre'), 'MARC' => array('convert' => array(0 => array('mul' => 0.24475)), 'symbol' => 'marc'), 'MILLIGRAM' => array('convert' => array(0 => array('mul' => 1.0E-6)), 'symbol' => 'mg'), 'ONCE' => array('convert' => array(0 => array('mul' => 0.03059)), 'symbol' => 'once'), 'OUNCE' => array('convert' => array(0 => array('mul' => 0.45359237), 1 => array('div' => 16)), 'symbol' => 'oz'), 'POUND' => array('convert' => array(0 => array('mul' => 0.45359237)), 'symbol' => 'lb'), 'TON' => array('convert' => array(0 => array('mul' => 1000)), 'symbol' => 't'))))));
    }

    /**
     * Gets the 'oro_menu.builder_chain' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Provider\BuilderChainProvider A Oro\Bundle\NavigationBundle\Provider\BuilderChainProvider instance.
     */
    protected function getOroMenu_BuilderChainService()
    {
        $this->services['oro_menu.builder_chain'] = $instance = new \Oro\Bundle\NavigationBundle\Provider\BuilderChainProvider($this->get('oro_menu.factory'), $this->get('event_dispatcher'));

        $instance->addBuilder($this->get('oro_user.user_menu'), 'usermenu');
        $instance->addBuilder($this->get('oro_menu.configuration_builder'));
        $instance->addBuilder($this->get('oro_navigation.pinbar_menu.builder'), 'pinbar');
        $instance->addBuilder($this->get('oro_navigation.favorites_menu.builder'), 'favorite');
        $instance->addBuilder($this->get('oro_navigation.history_menu.builder'), 'history');
        $instance->addBuilder($this->get('oro_navigation.mostviewed_menu.builder'), 'mostviewed');

        return $instance;
    }

    /**
     * Gets the 'oro_menu.cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SecurityBundle\Cache\FilesystemCache A Oro\Bundle\SecurityBundle\Cache\FilesystemCache instance.
     */
    protected function getOroMenu_CacheService()
    {
        $this->services['oro_menu.cache'] = $instance = new \Oro\Bundle\SecurityBundle\Cache\FilesystemCache('/var/www/orocrm-platform/app/cache/de_/oro_data');

        $instance->setNamespace('oro_menu.cache');

        return $instance;
    }

    /**
     * Gets the 'oro_menu.configuration_builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Menu\ConfigurationBuilder A Oro\Bundle\NavigationBundle\Menu\ConfigurationBuilder instance.
     */
    protected function getOroMenu_ConfigurationBuilderService()
    {
        $this->services['oro_menu.configuration_builder'] = $instance = new \Oro\Bundle\NavigationBundle\Menu\ConfigurationBuilder();

        $instance->setConfiguration(array('templates' => array('application_menu' => array('template' => 'OroNavigationBundle:Menu:application_menu.html.twig', 'allow_safe_labels' => true, 'currentClass' => 'active', 'ancestorClass' => 'active', 'rootClass' => 'nav nav-multilevel oroplatform-menu'), 'dots_menu' => array('template' => 'OroNavigationBundle:Menu:dots_menu.html.twig'), 'shortcuts' => array('template' => 'OroNavigationBundle:Menu:shortcuts.html.twig'), 'navbar' => array('template' => 'OroNavigationBundle:Menu:navbar.html.twig'), 'dropdown' => array('template' => 'OroNavigationBundle:Menu:dropdown.html.twig'), 'horizontal_tabs' => array('template' => 'OroNavigationBundle:Menu:horizontal_tabs.html.twig'), 'pinbar' => array('template' => 'OroNavigationBundle:Menu:pinbar.html.twig'), 'favorite' => array('template' => 'OroNavigationBundle:Menu:favorites.html.twig'), 'mostviewed' => array('template' => 'OroNavigationBundle:Menu:mostviewed.html.twig', 'rootClass' => 'extra-list'), 'history' => array('template' => 'OroNavigationBundle:Menu:history.html.twig', 'currentAsLink' => false, 'rootClass' => 'extra-list')), 'items' => array('oro_calendar_view_default' => array('label' => 'My Calendar', 'route' => 'oro_calendar_view_default', 'extras' => array('position' => 20), 'translateParameters' => array(), 'routeParameters' => array()), 'system_configuration' => array('label' => 'Configuration', 'route' => 'oro_config_configuration_system', 'extras' => array('description' => 'System configuration'), 'translateParameters' => array(), 'routeParameters' => array()), 'oro_cron_job' => array('label' => 'Job Queue', 'route' => 'oro_cron_job_index', 'extras' => array('description' => 'Cron job queue', 'routes' => array(0 => 'oro_cron_job_*')), 'translateParameters' => array(), 'routeParameters' => array()), 'oro_cron_job_shortcut' => array('label' => 'Jobs List', 'route' => 'oro_cron_job_index', 'extras' => array('description' => 'List of cron jobs'), 'translateParameters' => array(), 'routeParameters' => array()), 'audit_list' => array('label' => 'Data Audit', 'route' => 'oro_dataaudit_index', 'extras' => array('routes' => array(0 => 'oro_dataaudit_*'), 'description' => 'Data Audit'), 'translateParameters' => array(), 'routeParameters' => array()), 'emails' => array('label' => 'oro.email.entity_plural_label', 'uri' => '#', 'translateParameters' => array(), 'routeParameters' => array(), 'extras' => array()), 'oro_email_emailtemplate_list' => array('label' => 'oro.email.emailtemplate.entity_plural_label', 'route' => 'oro_email_emailtemplate_index', 'extras' => array('routes' => array(0 => 'oro_email_emailtemplate_*'), 'description' => 'List of email templates'), 'translateParameters' => array(), 'routeParameters' => array()), 'entities_list' => array('label' => 'Entities', 'route' => 'oro_entityconfig_index', 'extras' => array('routes' => array(0 => 'oro_entityconfig*', 1 => 'oro_entityextend*'), 'description' => 'List of entities'), 'translateParameters' => array(), 'routeParameters' => array()), 'channels_list' => array('label' => 'oro.integration.channel.entity_plural_label', 'route' => 'oro_integration_channel_index', 'extras' => array('routes' => 'oro_integration_channel_*'), 'translateParameters' => array(), 'routeParameters' => array()), 'oro_notification_emailnotification_list' => array('label' => 'oro.notification.emailnotification.entity_plural_label', 'route' => 'oro_notification_emailnotification_index', 'extras' => array('routes' => array(0 => 'oro_notification_emailnotification_*'), 'description' => 'List of email notifications'), 'translateParameters' => array(), 'routeParameters' => array()), 'oro_business_unit_list' => array('label' => 'oro.organization.businessunit.entity_plural_label', 'route' => 'oro_business_unit_index', 'extras' => array('routes' => array(0 => 'oro_business_unit_*'), 'description' => 'List of business units'), 'translateParameters' => array(), 'routeParameters' => array()), 'reports_tab' => array('label' => 'oro.report.entity_plural_label', 'uri' => '#', 'extras' => array('position' => 30), 'translateParameters' => array(), 'routeParameters' => array()), 'manage_reports' => array('label' => 'Manage Reports', 'route' => 'oro_report_index', 'extras' => array('position' => 10), 'translateParameters' => array(), 'routeParameters' => array()), 'oro_tag_list' => array('label' => 'oro.tag.entity_plural_label', 'route' => 'oro_tag_index', 'extras' => array('routes' => array(0 => 'oro_tag_*'), 'description' => 'Tags list'), 'translateParameters' => array(), 'routeParameters' => array()), 'shortcut_new_tag' => array('label' => 'Create new tag', 'route' => 'oro_tag_create', 'extras' => array('description' => 'Create new tag'), 'translateParameters' => array(), 'routeParameters' => array()), 'system_tab' => array('label' => 'System', 'uri' => '#', 'translateParameters' => array(), 'routeParameters' => array(), 'extras' => array()), 'users_management' => array('label' => 'Users Management', 'uri' => '#', 'translateParameters' => array(), 'routeParameters' => array(), 'extras' => array()), 'user_list' => array('label' => 'oro.user.entity_plural_label', 'route' => 'oro_user_index', 'extras' => array('routes' => array(0 => '/^oro_user_(?!role\\w+|group\\w+|security\\w+|reset\\w+)\\w+$/'), 'description' => 'List of system users'), 'translateParameters' => array(), 'routeParameters' => array()), 'user_create' => array('label' => 'Create User', 'route' => 'oro_user_create', 'translateParameters' => array(), 'routeParameters' => array(), 'extras' => array()), 'user_roles' => array('label' => 'oro.user.role.entity_plural_label', 'route' => 'oro_user_role_index', 'extras' => array('routes' => array(0 => 'oro_user_role_*'), 'description' => 'List of system roles'), 'translateParameters' => array(), 'routeParameters' => array()), 'user_groups' => array('label' => 'oro.user.group.entity_plural_label', 'route' => 'oro_user_group_index', 'extras' => array('routes' => array(0 => 'oro_user_group_*'), 'description' => 'List of system groups'), 'translateParameters' => array(), 'routeParameters' => array()), 'shortcut_new_user' => array('label' => 'Create new user', 'route' => 'oro_user_create', 'extras' => array('description' => 'Create new user instance', 'isCustomAction' => true), 'translateParameters' => array(), 'routeParameters' => array()), 'shortcut_list_users' => array('label' => 'Show users list', 'route' => 'oro_user_index', 'extras' => array('description' => 'List of all system users', 'isCustomAction' => true), 'translateParameters' => array(), 'routeParameters' => array()), 'shortcut_new_role' => array('label' => 'Create new role', 'route' => 'oro_user_role_create', 'extras' => array('description' => 'Create new role instance'), 'translateParameters' => array(), 'routeParameters' => array()), 'shortcut_new_group' => array('label' => 'Create new group', 'route' => 'oro_user_group_create', 'extras' => array('description' => 'Create new group instance'), 'translateParameters' => array(), 'routeParameters' => array()), 'oro_user_profile_view' => array('label' => 'My User', 'route' => 'oro_user_profile_view', 'extras' => array('position' => 10), 'translateParameters' => array(), 'routeParameters' => array()), 'pinbar' => array('label' => 'Pinbar', 'uri' => '#', 'extras' => array('icon' => 'icon-folder-close', 'maxItems' => 10), 'translateParameters' => array(), 'routeParameters' => array()), 'history' => array('label' => 'History', 'uri' => '#', 'extras' => array('icon' => 'icon-time', 'activeIfFirstIsEmpty' => true), 'translateParameters' => array(), 'routeParameters' => array()), 'favorite' => array('label' => 'Favorites', 'uri' => '#', 'extras' => array('icon' => 'icon-star-empty'), 'translateParameters' => array(), 'routeParameters' => array()), 'mostviewed' => array('label' => 'Most Viewed', 'uri' => '#', 'extras' => array('icon' => 'icon-flag'), 'translateParameters' => array(), 'routeParameters' => array())), 'tree' => array('application_menu' => array('type' => 'application_menu', 'children' => array('system_tab' => array('children' => array('system_configuration' => array('merge_strategy' => 'append', 'children' => array()), 'oro_cron_job' => array('merge_strategy' => 'append', 'children' => array()), 'audit_list' => array('merge_strategy' => 'append', 'children' => array()), 'emails' => array('children' => array('oro_email_emailtemplate_list' => array('merge_strategy' => 'append', 'children' => array()), 'oro_notification_emailnotification_list' => array('merge_strategy' => 'append', 'children' => array())), 'merge_strategy' => 'append'), 'entities_list' => array('merge_strategy' => 'append', 'children' => array()), 'channels_list' => array('merge_strategy' => 'append', 'children' => array()), 'users_management' => array('children' => array('oro_business_unit_list' => array('merge_strategy' => 'append', 'children' => array()), 'user_list' => array('merge_strategy' => 'append', 'children' => array()), 'user_roles' => array('merge_strategy' => 'append', 'children' => array()), 'user_groups' => array('merge_strategy' => 'append', 'children' => array())), 'merge_strategy' => 'append'), 'oro_tag_list' => array('merge_strategy' => 'append', 'children' => array())), 'merge_strategy' => 'append'), 'reports_tab' => array('children' => array('manage_reports' => array('merge_strategy' => 'append', 'children' => array())), 'merge_strategy' => 'append')), 'extras' => array()), 'dots_menu' => array('type' => 'dots_menu', 'children' => array('pinbar' => array('merge_strategy' => 'append', 'children' => array()), 'history' => array('merge_strategy' => 'append', 'children' => array()), 'favorite' => array('merge_strategy' => 'append', 'children' => array()), 'mostviewed' => array('merge_strategy' => 'append', 'children' => array())), 'extras' => array()), 'shortcuts' => array('type' => 'shortcuts', 'children' => array('oro_cron_job_shortcut' => array('merge_strategy' => 'append', 'children' => array()), 'shortcut_new_tag' => array('merge_strategy' => 'append', 'children' => array()), 'shortcut_new_user' => array('merge_strategy' => 'append', 'children' => array()), 'shortcut_list_users' => array('merge_strategy' => 'append', 'children' => array()), 'shortcut_new_role' => array('merge_strategy' => 'append', 'children' => array()), 'shortcut_new_group' => array('merge_strategy' => 'append', 'children' => array())), 'extras' => array()), 'usermenu' => array('children' => array('oro_calendar_view_default' => array('merge_strategy' => 'append', 'children' => array()), 'oro_user_profile_view' => array('merge_strategy' => 'append', 'children' => array())), 'extras' => array())), 'settings' => array('resolved' => true, 'maxItems' => array('value' => 20, 'scope' => 'app'), 'title_suffix' => array('value' => '', 'scope' => 'app'), 'title_delimiter' => array('value' => '-', 'scope' => 'app'), 'breadcrumb_menu' => array('value' => 'application_menu', 'scope' => 'app'))));

        return $instance;
    }

    /**
     * Gets the 'oro_menu.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Knp\Menu\MenuFactory A Knp\Menu\MenuFactory instance.
     */
    protected function getOroMenu_FactoryService()
    {
        $this->services['oro_menu.factory'] = $instance = new \Knp\Menu\MenuFactory();

        $instance->addExtension($this->get('oro_menu_acl_extension'));

        return $instance;
    }

    /**
     * Gets the 'oro_menu.twig.extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Twig\MenuExtension A Oro\Bundle\NavigationBundle\Twig\MenuExtension instance.
     */
    protected function getOroMenu_Twig_ExtensionService()
    {
        $this->services['oro_menu.twig.extension'] = $instance = new \Oro\Bundle\NavigationBundle\Twig\MenuExtension($this->get('knp_menu.helper'), $this->get('oro_menu.builder_chain'), $this->get('oro_navigation.breadcrumb_manager'));

        $instance->setMenuConfiguration(array('templates' => array('application_menu' => array('template' => 'OroNavigationBundle:Menu:application_menu.html.twig', 'allow_safe_labels' => true, 'currentClass' => 'active', 'ancestorClass' => 'active', 'rootClass' => 'nav nav-multilevel oroplatform-menu'), 'dots_menu' => array('template' => 'OroNavigationBundle:Menu:dots_menu.html.twig'), 'shortcuts' => array('template' => 'OroNavigationBundle:Menu:shortcuts.html.twig'), 'navbar' => array('template' => 'OroNavigationBundle:Menu:navbar.html.twig'), 'dropdown' => array('template' => 'OroNavigationBundle:Menu:dropdown.html.twig'), 'horizontal_tabs' => array('template' => 'OroNavigationBundle:Menu:horizontal_tabs.html.twig'), 'pinbar' => array('template' => 'OroNavigationBundle:Menu:pinbar.html.twig'), 'favorite' => array('template' => 'OroNavigationBundle:Menu:favorites.html.twig'), 'mostviewed' => array('template' => 'OroNavigationBundle:Menu:mostviewed.html.twig', 'rootClass' => 'extra-list'), 'history' => array('template' => 'OroNavigationBundle:Menu:history.html.twig', 'currentAsLink' => false, 'rootClass' => 'extra-list')), 'items' => array('oro_calendar_view_default' => array('label' => 'My Calendar', 'route' => 'oro_calendar_view_default', 'extras' => array('position' => 20), 'translateParameters' => array(), 'routeParameters' => array()), 'system_configuration' => array('label' => 'Configuration', 'route' => 'oro_config_configuration_system', 'extras' => array('description' => 'System configuration'), 'translateParameters' => array(), 'routeParameters' => array()), 'oro_cron_job' => array('label' => 'Job Queue', 'route' => 'oro_cron_job_index', 'extras' => array('description' => 'Cron job queue', 'routes' => array(0 => 'oro_cron_job_*')), 'translateParameters' => array(), 'routeParameters' => array()), 'oro_cron_job_shortcut' => array('label' => 'Jobs List', 'route' => 'oro_cron_job_index', 'extras' => array('description' => 'List of cron jobs'), 'translateParameters' => array(), 'routeParameters' => array()), 'audit_list' => array('label' => 'Data Audit', 'route' => 'oro_dataaudit_index', 'extras' => array('routes' => array(0 => 'oro_dataaudit_*'), 'description' => 'Data Audit'), 'translateParameters' => array(), 'routeParameters' => array()), 'emails' => array('label' => 'oro.email.entity_plural_label', 'uri' => '#', 'translateParameters' => array(), 'routeParameters' => array(), 'extras' => array()), 'oro_email_emailtemplate_list' => array('label' => 'oro.email.emailtemplate.entity_plural_label', 'route' => 'oro_email_emailtemplate_index', 'extras' => array('routes' => array(0 => 'oro_email_emailtemplate_*'), 'description' => 'List of email templates'), 'translateParameters' => array(), 'routeParameters' => array()), 'entities_list' => array('label' => 'Entities', 'route' => 'oro_entityconfig_index', 'extras' => array('routes' => array(0 => 'oro_entityconfig*', 1 => 'oro_entityextend*'), 'description' => 'List of entities'), 'translateParameters' => array(), 'routeParameters' => array()), 'channels_list' => array('label' => 'oro.integration.channel.entity_plural_label', 'route' => 'oro_integration_channel_index', 'extras' => array('routes' => 'oro_integration_channel_*'), 'translateParameters' => array(), 'routeParameters' => array()), 'oro_notification_emailnotification_list' => array('label' => 'oro.notification.emailnotification.entity_plural_label', 'route' => 'oro_notification_emailnotification_index', 'extras' => array('routes' => array(0 => 'oro_notification_emailnotification_*'), 'description' => 'List of email notifications'), 'translateParameters' => array(), 'routeParameters' => array()), 'oro_business_unit_list' => array('label' => 'oro.organization.businessunit.entity_plural_label', 'route' => 'oro_business_unit_index', 'extras' => array('routes' => array(0 => 'oro_business_unit_*'), 'description' => 'List of business units'), 'translateParameters' => array(), 'routeParameters' => array()), 'reports_tab' => array('label' => 'oro.report.entity_plural_label', 'uri' => '#', 'extras' => array('position' => 30), 'translateParameters' => array(), 'routeParameters' => array()), 'manage_reports' => array('label' => 'Manage Reports', 'route' => 'oro_report_index', 'extras' => array('position' => 10), 'translateParameters' => array(), 'routeParameters' => array()), 'oro_tag_list' => array('label' => 'oro.tag.entity_plural_label', 'route' => 'oro_tag_index', 'extras' => array('routes' => array(0 => 'oro_tag_*'), 'description' => 'Tags list'), 'translateParameters' => array(), 'routeParameters' => array()), 'shortcut_new_tag' => array('label' => 'Create new tag', 'route' => 'oro_tag_create', 'extras' => array('description' => 'Create new tag'), 'translateParameters' => array(), 'routeParameters' => array()), 'system_tab' => array('label' => 'System', 'uri' => '#', 'translateParameters' => array(), 'routeParameters' => array(), 'extras' => array()), 'users_management' => array('label' => 'Users Management', 'uri' => '#', 'translateParameters' => array(), 'routeParameters' => array(), 'extras' => array()), 'user_list' => array('label' => 'oro.user.entity_plural_label', 'route' => 'oro_user_index', 'extras' => array('routes' => array(0 => '/^oro_user_(?!role\\w+|group\\w+|security\\w+|reset\\w+)\\w+$/'), 'description' => 'List of system users'), 'translateParameters' => array(), 'routeParameters' => array()), 'user_create' => array('label' => 'Create User', 'route' => 'oro_user_create', 'translateParameters' => array(), 'routeParameters' => array(), 'extras' => array()), 'user_roles' => array('label' => 'oro.user.role.entity_plural_label', 'route' => 'oro_user_role_index', 'extras' => array('routes' => array(0 => 'oro_user_role_*'), 'description' => 'List of system roles'), 'translateParameters' => array(), 'routeParameters' => array()), 'user_groups' => array('label' => 'oro.user.group.entity_plural_label', 'route' => 'oro_user_group_index', 'extras' => array('routes' => array(0 => 'oro_user_group_*'), 'description' => 'List of system groups'), 'translateParameters' => array(), 'routeParameters' => array()), 'shortcut_new_user' => array('label' => 'Create new user', 'route' => 'oro_user_create', 'extras' => array('description' => 'Create new user instance', 'isCustomAction' => true), 'translateParameters' => array(), 'routeParameters' => array()), 'shortcut_list_users' => array('label' => 'Show users list', 'route' => 'oro_user_index', 'extras' => array('description' => 'List of all system users', 'isCustomAction' => true), 'translateParameters' => array(), 'routeParameters' => array()), 'shortcut_new_role' => array('label' => 'Create new role', 'route' => 'oro_user_role_create', 'extras' => array('description' => 'Create new role instance'), 'translateParameters' => array(), 'routeParameters' => array()), 'shortcut_new_group' => array('label' => 'Create new group', 'route' => 'oro_user_group_create', 'extras' => array('description' => 'Create new group instance'), 'translateParameters' => array(), 'routeParameters' => array()), 'oro_user_profile_view' => array('label' => 'My User', 'route' => 'oro_user_profile_view', 'extras' => array('position' => 10), 'translateParameters' => array(), 'routeParameters' => array()), 'pinbar' => array('label' => 'Pinbar', 'uri' => '#', 'extras' => array('icon' => 'icon-folder-close', 'maxItems' => 10), 'translateParameters' => array(), 'routeParameters' => array()), 'history' => array('label' => 'History', 'uri' => '#', 'extras' => array('icon' => 'icon-time', 'activeIfFirstIsEmpty' => true), 'translateParameters' => array(), 'routeParameters' => array()), 'favorite' => array('label' => 'Favorites', 'uri' => '#', 'extras' => array('icon' => 'icon-star-empty'), 'translateParameters' => array(), 'routeParameters' => array()), 'mostviewed' => array('label' => 'Most Viewed', 'uri' => '#', 'extras' => array('icon' => 'icon-flag'), 'translateParameters' => array(), 'routeParameters' => array())), 'tree' => array('application_menu' => array('type' => 'application_menu', 'children' => array('system_tab' => array('children' => array('system_configuration' => array('merge_strategy' => 'append', 'children' => array()), 'oro_cron_job' => array('merge_strategy' => 'append', 'children' => array()), 'audit_list' => array('merge_strategy' => 'append', 'children' => array()), 'emails' => array('children' => array('oro_email_emailtemplate_list' => array('merge_strategy' => 'append', 'children' => array()), 'oro_notification_emailnotification_list' => array('merge_strategy' => 'append', 'children' => array())), 'merge_strategy' => 'append'), 'entities_list' => array('merge_strategy' => 'append', 'children' => array()), 'channels_list' => array('merge_strategy' => 'append', 'children' => array()), 'users_management' => array('children' => array('oro_business_unit_list' => array('merge_strategy' => 'append', 'children' => array()), 'user_list' => array('merge_strategy' => 'append', 'children' => array()), 'user_roles' => array('merge_strategy' => 'append', 'children' => array()), 'user_groups' => array('merge_strategy' => 'append', 'children' => array())), 'merge_strategy' => 'append'), 'oro_tag_list' => array('merge_strategy' => 'append', 'children' => array())), 'merge_strategy' => 'append'), 'reports_tab' => array('children' => array('manage_reports' => array('merge_strategy' => 'append', 'children' => array())), 'merge_strategy' => 'append')), 'extras' => array()), 'dots_menu' => array('type' => 'dots_menu', 'children' => array('pinbar' => array('merge_strategy' => 'append', 'children' => array()), 'history' => array('merge_strategy' => 'append', 'children' => array()), 'favorite' => array('merge_strategy' => 'append', 'children' => array()), 'mostviewed' => array('merge_strategy' => 'append', 'children' => array())), 'extras' => array()), 'shortcuts' => array('type' => 'shortcuts', 'children' => array('oro_cron_job_shortcut' => array('merge_strategy' => 'append', 'children' => array()), 'shortcut_new_tag' => array('merge_strategy' => 'append', 'children' => array()), 'shortcut_new_user' => array('merge_strategy' => 'append', 'children' => array()), 'shortcut_list_users' => array('merge_strategy' => 'append', 'children' => array()), 'shortcut_new_role' => array('merge_strategy' => 'append', 'children' => array()), 'shortcut_new_group' => array('merge_strategy' => 'append', 'children' => array())), 'extras' => array()), 'usermenu' => array('children' => array('oro_calendar_view_default' => array('merge_strategy' => 'append', 'children' => array()), 'oro_user_profile_view' => array('merge_strategy' => 'append', 'children' => array())), 'extras' => array())), 'settings' => array('resolved' => true, 'maxItems' => array('value' => 20, 'scope' => 'app'), 'title_suffix' => array('value' => '', 'scope' => 'app'), 'title_delimiter' => array('value' => '-', 'scope' => 'app'), 'breadcrumb_menu' => array('value' => 'application_menu', 'scope' => 'app'))));

        return $instance;
    }

    /**
     * Gets the 'oro_menu_acl_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Menu\AclAwareMenuFactoryExtension A Oro\Bundle\NavigationBundle\Menu\AclAwareMenuFactoryExtension instance.
     */
    protected function getOroMenuAclExtensionService()
    {
        $this->services['oro_menu_acl_extension'] = $instance = new \Oro\Bundle\NavigationBundle\Menu\AclAwareMenuFactoryExtension($this->get('router'), $this->get('oro_security.security_facade'));

        $instance->setCache($this->get('oro_menu.cache'));

        return $instance;
    }

    /**
     * Gets the 'oro_navigation.breadcrumb_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Menu\BreadcrumbManager A Oro\Bundle\NavigationBundle\Menu\BreadcrumbManager instance.
     */
    protected function getOroNavigation_BreadcrumbManagerService()
    {
        return $this->services['oro_navigation.breadcrumb_manager'] = new \Oro\Bundle\NavigationBundle\Menu\BreadcrumbManager($this->get('oro_menu.builder_chain'), $this->get('knp_menu.matcher'), $this->get('router'));
    }

    /**
     * Gets the 'oro_navigation.content.datagrid_tag_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Content\DataGridTagListener A Oro\Bundle\NavigationBundle\Content\DataGridTagListener instance.
     */
    protected function getOroNavigation_Content_DatagridTagListenerService()
    {
        return $this->services['oro_navigation.content.datagrid_tag_listener'] = new \Oro\Bundle\NavigationBundle\Content\DataGridTagListener($this->get('oro_navigation.content.tag_generator_chain'));
    }

    /**
     * Gets the 'oro_navigation.content.doctrine_tag_generator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Content\DoctrineTagGenerator A Oro\Bundle\NavigationBundle\Content\DoctrineTagGenerator instance.
     */
    protected function getOroNavigation_Content_DoctrineTagGeneratorService()
    {
        return $this->services['oro_navigation.content.doctrine_tag_generator'] = new \Oro\Bundle\NavigationBundle\Content\DoctrineTagGenerator($this->get('doctrine.orm.default_entity_manager'), $this->get('oro_entity.orm.entity_class_resolver'));
    }

    /**
     * Gets the 'oro_navigation.content.security.context.linksss' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink A Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink instance.
     */
    protected function getOroNavigation_Content_Security_Context_LinksssService()
    {
        return $this->services['oro_navigation.content.security.context.linksss'] = new \Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink($this, 'security.context', false);
    }

    /**
     * Gets the 'oro_navigation.content.simple_tag_generator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Content\SimpleTagGenerator A Oro\Bundle\NavigationBundle\Content\SimpleTagGenerator instance.
     */
    protected function getOroNavigation_Content_SimpleTagGeneratorService()
    {
        return $this->services['oro_navigation.content.simple_tag_generator'] = new \Oro\Bundle\NavigationBundle\Content\SimpleTagGenerator();
    }

    /**
     * Gets the 'oro_navigation.content.tag_generator_chain' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Content\TagGeneratorChain A Oro\Bundle\NavigationBundle\Content\TagGeneratorChain instance.
     */
    protected function getOroNavigation_Content_TagGeneratorChainService()
    {
        return $this->services['oro_navigation.content.tag_generator_chain'] = new \Oro\Bundle\NavigationBundle\Content\TagGeneratorChain(array(0 => $this->get('oro_navigation.content.doctrine_tag_generator'), 1 => $this->get('oro_navigation.content.simple_tag_generator')));
    }

    /**
     * Gets the 'oro_navigation.content.tag_generator_chain.link' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink A Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink instance.
     */
    protected function getOroNavigation_Content_TagGeneratorChain_LinkService()
    {
        return $this->services['oro_navigation.content.tag_generator_chain.link'] = new \Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink($this, 'oro_navigation.content.tag_generator_chain', false);
    }

    /**
     * Gets the 'oro_navigation.content.topic_sender' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Content\TopicSender A Oro\Bundle\NavigationBundle\Content\TopicSender instance.
     */
    protected function getOroNavigation_Content_TopicSenderService()
    {
        return $this->services['oro_navigation.content.topic_sender'] = new \Oro\Bundle\NavigationBundle\Content\TopicSender($this->get('oro_wamp.publisher'), $this->get('oro_navigation.content.tag_generator_chain.link'), $this->get('oro_navigation.content.security.context.linksss'));
    }

    /**
     * Gets the 'oro_navigation.event.doctrine_tag_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Event\DoctrineTagEventSubscriber A Oro\Bundle\NavigationBundle\Event\DoctrineTagEventSubscriber instance.
     */
    protected function getOroNavigation_Event_DoctrineTagSubscriberService()
    {
        $this->services['oro_navigation.event.doctrine_tag_subscriber'] = $instance = new \Oro\Bundle\NavigationBundle\Event\DoctrineTagEventSubscriber($this->get('oro_navigation.content.topic_sender'), NULL);

        $instance->markSkipped('Oro\\Bundle\\DataAuditBundle\\Entity\\Audit');
        $instance->markSkipped('Oro\\Bundle\\DataAuditBundle\\Entity\\AuditData');
        $instance->markSkipped('Oro\\Bundle\\NavigationBundle\\Entity\\NavigationHistoryItem');
        $instance->markSkipped('Oro\\Bundle\\SearchBundle\\Entity\\Item');
        $instance->markSkipped('Oro\\Bundle\\SearchBundle\\Entity\\IndexText');
        $instance->markSkipped('Oro\\Bundle\\SearchBundle\\Entity\\IndexInteger');
        $instance->markSkipped('Oro\\Bundle\\SearchBundle\\Entity\\IndexDecimal');
        $instance->markSkipped('Oro\\Bundle\\SearchBundle\\Entity\\IndexDatetime');
        $instance->markSkipped('Oro\\Bundle\\NavigationBundle\\Entity\\PageState');

        return $instance;
    }

    /**
     * Gets the 'oro_navigation.favorites_menu.builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Menu\NavigationItemBuilder A Oro\Bundle\NavigationBundle\Menu\NavigationItemBuilder instance.
     */
    protected function getOroNavigation_FavoritesMenu_BuilderService()
    {
        return $this->services['oro_navigation.favorites_menu.builder'] = new \Oro\Bundle\NavigationBundle\Menu\NavigationItemBuilder($this->get('security.context'), $this->get('doctrine.orm.default_entity_manager'), $this->get('oro_navigation.item.factory'));
    }

    /**
     * Gets the 'oro_navigation.form.handler.pagestate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Form\Handler\PageStateHandler A Oro\Bundle\NavigationBundle\Form\Handler\PageStateHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_navigation.form.handler.pagestate' service is requested while the 'request' scope is not active
     */
    protected function getOroNavigation_Form_Handler_PagestateService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_navigation.form.handler.pagestate', 'request');
        }

        return $this->services['oro_navigation.form.handler.pagestate'] = $this->scopedServices['request']['oro_navigation.form.handler.pagestate'] = new \Oro\Bundle\NavigationBundle\Form\Handler\PageStateHandler($this->get('oro_navigation.form.pagestate'), $this->get('request'), $this->get('doctrine.orm.default_entity_manager'), $this->get('security.context'));
    }

    /**
     * Gets the 'oro_navigation.form.pagestate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroNavigation_Form_PagestateService()
    {
        return $this->services['oro_navigation.form.pagestate'] = $this->get('form.factory')->createNamed('pagestate', 'pagestate', NULL);
    }

    /**
     * Gets the 'oro_navigation.form.type.pagestate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Form\Type\PageStateType A Oro\Bundle\NavigationBundle\Form\Type\PageStateType instance.
     */
    protected function getOroNavigation_Form_Type_PagestateService()
    {
        return $this->services['oro_navigation.form.type.pagestate'] = new \Oro\Bundle\NavigationBundle\Form\Type\PageStateType();
    }

    /**
     * Gets the 'oro_navigation.history_menu.builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Menu\NavigationHistoryBuilder A Oro\Bundle\NavigationBundle\Menu\NavigationHistoryBuilder instance.
     */
    protected function getOroNavigation_HistoryMenu_BuilderService()
    {
        $this->services['oro_navigation.history_menu.builder'] = $instance = new \Oro\Bundle\NavigationBundle\Menu\NavigationHistoryBuilder($this->get('security.context'), $this->get('doctrine.orm.default_entity_manager'), $this->get('oro_navigation.item.factory'));

        $instance->setMatcher($this->get('knp_menu.matcher'));
        $instance->setOptions($this->get('oro_config.user'));

        return $instance;
    }

    /**
     * Gets the 'oro_navigation.item.builder.favorite' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Entity\Builder\NavigationItemBuilder A Oro\Bundle\NavigationBundle\Entity\Builder\NavigationItemBuilder instance.
     */
    protected function getOroNavigation_Item_Builder_FavoriteService()
    {
        return $this->services['oro_navigation.item.builder.favorite'] = new \Oro\Bundle\NavigationBundle\Entity\Builder\NavigationItemBuilder($this->get('doctrine.orm.default_entity_manager'), 'favorite');
    }

    /**
     * Gets the 'oro_navigation.item.builder.history' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Entity\Builder\HistoryItemBuilder A Oro\Bundle\NavigationBundle\Entity\Builder\HistoryItemBuilder instance.
     */
    protected function getOroNavigation_Item_Builder_HistoryService()
    {
        return $this->services['oro_navigation.item.builder.history'] = new \Oro\Bundle\NavigationBundle\Entity\Builder\HistoryItemBuilder($this->get('doctrine.orm.default_entity_manager'), 'history');
    }

    /**
     * Gets the 'oro_navigation.item.builder.mostviewed' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Entity\Builder\HistoryItemBuilder A Oro\Bundle\NavigationBundle\Entity\Builder\HistoryItemBuilder instance.
     */
    protected function getOroNavigation_Item_Builder_MostviewedService()
    {
        return $this->services['oro_navigation.item.builder.mostviewed'] = new \Oro\Bundle\NavigationBundle\Entity\Builder\HistoryItemBuilder($this->get('doctrine.orm.default_entity_manager'), 'mostviewed');
    }

    /**
     * Gets the 'oro_navigation.item.builder.pinbar' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Entity\Builder\PinbarTabBuilder A Oro\Bundle\NavigationBundle\Entity\Builder\PinbarTabBuilder instance.
     */
    protected function getOroNavigation_Item_Builder_PinbarService()
    {
        return $this->services['oro_navigation.item.builder.pinbar'] = new \Oro\Bundle\NavigationBundle\Entity\Builder\PinbarTabBuilder($this->get('doctrine.orm.default_entity_manager'), 'pinbar');
    }

    /**
     * Gets the 'oro_navigation.item.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Entity\Builder\ItemFactory A Oro\Bundle\NavigationBundle\Entity\Builder\ItemFactory instance.
     */
    protected function getOroNavigation_Item_FactoryService()
    {
        $this->services['oro_navigation.item.factory'] = $instance = new \Oro\Bundle\NavigationBundle\Entity\Builder\ItemFactory();

        $instance->addBuilder($this->get('oro_navigation.item.builder.pinbar'));
        $instance->addBuilder($this->get('oro_navigation.item.builder.favorite'));
        $instance->addBuilder($this->get('oro_navigation.item.builder.history'));
        $instance->addBuilder($this->get('oro_navigation.item.builder.mostviewed'));

        return $instance;
    }

    /**
     * Gets the 'oro_navigation.item.pinbar.post_persist_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Entity\Listener\PinbarPostPersist A Oro\Bundle\NavigationBundle\Entity\Listener\PinbarPostPersist instance.
     */
    protected function getOroNavigation_Item_Pinbar_PostPersistListenerService()
    {
        return $this->services['oro_navigation.item.pinbar.post_persist_listener'] = new \Oro\Bundle\NavigationBundle\Entity\Listener\PinbarPostPersist();
    }

    /**
     * Gets the 'oro_navigation.mostviewed_menu.builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Menu\NavigationMostviewedBuilder A Oro\Bundle\NavigationBundle\Menu\NavigationMostviewedBuilder instance.
     */
    protected function getOroNavigation_MostviewedMenu_BuilderService()
    {
        $this->services['oro_navigation.mostviewed_menu.builder'] = $instance = new \Oro\Bundle\NavigationBundle\Menu\NavigationMostviewedBuilder($this->get('security.context'), $this->get('doctrine.orm.default_entity_manager'), $this->get('oro_navigation.item.factory'));

        $instance->setOptions($this->get('oro_config.user'));

        return $instance;
    }

    /**
     * Gets the 'oro_navigation.pinbar_menu.builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Menu\NavigationItemBuilder A Oro\Bundle\NavigationBundle\Menu\NavigationItemBuilder instance.
     */
    protected function getOroNavigation_PinbarMenu_BuilderService()
    {
        return $this->services['oro_navigation.pinbar_menu.builder'] = new \Oro\Bundle\NavigationBundle\Menu\NavigationItemBuilder($this->get('security.context'), $this->get('doctrine.orm.default_entity_manager'), $this->get('oro_navigation.item.factory'));
    }

    /**
     * Gets the 'oro_navigation.title_annotations_reader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Title\TitleReader\AnnotationsReader A Oro\Bundle\NavigationBundle\Title\TitleReader\AnnotationsReader instance.
     */
    protected function getOroNavigation_TitleAnnotationsReaderService()
    {
        return $this->services['oro_navigation.title_annotations_reader'] = new \Oro\Bundle\NavigationBundle\Title\TitleReader\AnnotationsReader($this->get('kernel'), $this->get('annotation_reader'));
    }

    /**
     * Gets the 'oro_navigation.title_config_reader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Title\TitleReader\ConfigReader A Oro\Bundle\NavigationBundle\Title\TitleReader\ConfigReader instance.
     */
    protected function getOroNavigation_TitleConfigReaderService()
    {
        $this->services['oro_navigation.title_config_reader'] = $instance = new \Oro\Bundle\NavigationBundle\Title\TitleReader\ConfigReader();

        $instance->setConfigData(array('oro_default' => 'Dashboard', 'oro_ui_index' => 'Dashboard', 'oro_ui_1column' => 'Dashboard | One Column', 'oro_ui_grid_without_bar_page' => 'Dashboard | Grid', 'oro_ui_grid_page' => 'Dashboard | Grid', 'oro_ui_1column_menu' => 'Dashboard | Menu', 'oro_ui_1column_toolbar' => 'Dashboard | One Column Toolbar', 'oro_ui_2columns_left' => 'Dashboard | Two Columns Toolbar Left', 'oro_ui_2columns_right' => 'Dashboard | Two Columns Toolbar Right', 'oro_ui_3columns' => 'Dashboard | Three Columns', 'oro_ui_forgot_password' => 'Forgot Password', 'oro_ui_login' => 'Login', 'oro_ui_registration' => 'Registration', 'oro_ui_404' => '404 Not Found', 'oro_ui_503' => '503 Error', 'oro_ui_form_elements' => 'Form Elements', 'oro_ui_messages' => 'Dashboard | Messages', 'oro_ui_buttons' => 'Dashboard | Buttons', 'oro_ui_tables' => 'Dashboard | Tables', 'oro_ui_general_elements' => 'Dashboard | Elements', 'oro_ui_dialog_styled' => 'Dashboard | Dialog', 'oro_ui_record_edit' => 'Dashboard | Edit', 'oro_entity_index' => '%entityName% - Entities - System', 'oro_entity_view' => '%recordName% - %entityName% - Entities - System', 'oro_entity_update' => '%entityName% - Entities - System', 'oro_calendar_view_default' => 'My Calendar - %username%', 'oro_calendar_view' => '%calendarname% - Calendars - %username%', 'oro_config_configuration_system' => NULL, 'oro_cron_job_index' => NULL, 'oro_cron_job_view' => 'Job %command% (ID: %id%)', 'oro_dashboard_index' => '%name%', 'oro_dataaudit_index' => NULL, 'oro_email_view' => '%subject% - Email', 'oro_email_emailtemplate_index' => NULL, 'oro_email_emailtemplate_update' => 'Template %name% - Edit', 'oro_email_emailtemplate_create' => 'Create Email Template', 'oro_email_emailtemplate_clone' => 'Clone Email Template', 'oro_entityconfig_index' => NULL, 'oro_entityconfig_view' => '%entityName%', 'oro_entityconfig_update' => '%entityName%', 'oro_entityconfig_field_update' => '%fieldName% - %entityName%', 'oro_entityextend_entity_create' => 'New Entity', 'oro_entityextend_field_create' => 'New Field - %entityName%', 'oro_entityextend_field_update' => '%fieldName% - New Field - %entityName%', 'oro_integration_channel_index' => NULL, 'oro_integration_channel_update' => '%channel.name%', 'oro_integration_channel_create' => 'Create Channel', 'oro_notification_emailnotification_index' => NULL, 'oro_notification_emailnotification_update' => 'Notification Rule #%id% - Edit', 'oro_notification_emailnotification_create' => 'Add Notification Rule', 'oro_business_unit_index' => NULL, 'oro_business_unit_update' => '%business_unit.name% - Edit', 'oro_business_unit_create' => 'Create Business Unit', 'oro_business_unit_view' => '%business_unit.name%', 'oro_report_index' => NULL, 'oro_report_view' => '%report.name% - %report.group% - Reports', 'oro_report_create' => 'Create Report - Reports', 'oro_report_update' => '%report.name% - Edit - Reports', 'oro_search_results' => '%keyword% - Search Results', 'oro_tag_index' => NULL, 'oro_tag_update' => '%tag.name% Tag - Edit', 'oro_tag_create' => 'Create Tag', 'oro_tag_search' => 'Records tagged as "%tag.name%"', 'oro_user_index' => NULL, 'oro_user_view' => '%username%', 'oro_user_update' => '%username% - Edit', 'oro_user_create' => 'Create User', 'oro_user_profile_view' => '%username%', 'oro_user_profile_update' => '%username% - Edit', 'oro_user_role_index' => NULL, 'oro_user_role_update' => '%role% - Edit', 'oro_user_role_create' => 'Create Role', 'oro_user_security_login' => 'Login', 'oro_user_status_list' => 'User Status', 'oro_user_status_create' => 'Add Status', 'oro_user_reset_reset' => 'Password Reset', 'oro_user_reset_request' => 'Forgot Password', 'oro_user_reset_check_email' => 'Password Reset - Check Email', 'oro_user_group_index' => NULL, 'oro_user_group_create' => 'Create Group', 'oro_user_group_update' => '%group% - Edit', 'oro_workflow_step_edit' => '%workflow_data% - %entity% - %section%', 'oro_shortcut_actionslist' => 'Shortcut Actions List', 'oro_pinbar_help' => 'How To Use Pinbar'));

        return $instance;
    }

    /**
     * Gets the 'oro_navigation.title_service' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Provider\TitleService A Oro\Bundle\NavigationBundle\Provider\TitleService instance.
     */
    protected function getOroNavigation_TitleServiceService()
    {
        $this->services['oro_navigation.title_service'] = $instance = new \Oro\Bundle\NavigationBundle\Provider\TitleService($this->get('oro_navigation.title_annotations_reader'), $this->get('oro_navigation.title_config_reader'), $this->get('translator.default'), $this->get('doctrine.orm.default_entity_manager'), $this->get('jms_serializer'), $this->get('oro_config.user'), $this->get('oro_navigation.breadcrumb_manager'));

        $instance->setTitles(array('oro_default' => 'Dashboard', 'oro_ui_index' => 'Dashboard', 'oro_ui_1column' => 'Dashboard | One Column', 'oro_ui_grid_without_bar_page' => 'Dashboard | Grid', 'oro_ui_grid_page' => 'Dashboard | Grid', 'oro_ui_1column_menu' => 'Dashboard | Menu', 'oro_ui_1column_toolbar' => 'Dashboard | One Column Toolbar', 'oro_ui_2columns_left' => 'Dashboard | Two Columns Toolbar Left', 'oro_ui_2columns_right' => 'Dashboard | Two Columns Toolbar Right', 'oro_ui_3columns' => 'Dashboard | Three Columns', 'oro_ui_forgot_password' => 'Forgot Password', 'oro_ui_login' => 'Login', 'oro_ui_registration' => 'Registration', 'oro_ui_404' => '404 Not Found', 'oro_ui_503' => '503 Error', 'oro_ui_form_elements' => 'Form Elements', 'oro_ui_messages' => 'Dashboard | Messages', 'oro_ui_buttons' => 'Dashboard | Buttons', 'oro_ui_tables' => 'Dashboard | Tables', 'oro_ui_general_elements' => 'Dashboard | Elements', 'oro_ui_dialog_styled' => 'Dashboard | Dialog', 'oro_ui_record_edit' => 'Dashboard | Edit', 'oro_entity_index' => '%entityName% - Entities - System', 'oro_entity_view' => '%recordName% - %entityName% - Entities - System', 'oro_entity_update' => '%entityName% - Entities - System', 'oro_calendar_view_default' => 'My Calendar - %username%', 'oro_calendar_view' => '%calendarname% - Calendars - %username%', 'oro_config_configuration_system' => NULL, 'oro_cron_job_index' => NULL, 'oro_cron_job_view' => 'Job %command% (ID: %id%)', 'oro_dashboard_index' => '%name%', 'oro_dataaudit_index' => NULL, 'oro_email_view' => '%subject% - Email', 'oro_email_emailtemplate_index' => NULL, 'oro_email_emailtemplate_update' => 'Template %name% - Edit', 'oro_email_emailtemplate_create' => 'Create Email Template', 'oro_email_emailtemplate_clone' => 'Clone Email Template', 'oro_entityconfig_index' => NULL, 'oro_entityconfig_view' => '%entityName%', 'oro_entityconfig_update' => '%entityName%', 'oro_entityconfig_field_update' => '%fieldName% - %entityName%', 'oro_entityextend_entity_create' => 'New Entity', 'oro_entityextend_field_create' => 'New Field - %entityName%', 'oro_entityextend_field_update' => '%fieldName% - New Field - %entityName%', 'oro_integration_channel_index' => NULL, 'oro_integration_channel_update' => '%channel.name%', 'oro_integration_channel_create' => 'Create Channel', 'oro_notification_emailnotification_index' => NULL, 'oro_notification_emailnotification_update' => 'Notification Rule #%id% - Edit', 'oro_notification_emailnotification_create' => 'Add Notification Rule', 'oro_business_unit_index' => NULL, 'oro_business_unit_update' => '%business_unit.name% - Edit', 'oro_business_unit_create' => 'Create Business Unit', 'oro_business_unit_view' => '%business_unit.name%', 'oro_report_index' => NULL, 'oro_report_view' => '%report.name% - %report.group% - Reports', 'oro_report_create' => 'Create Report - Reports', 'oro_report_update' => '%report.name% - Edit - Reports', 'oro_search_results' => '%keyword% - Search Results', 'oro_tag_index' => NULL, 'oro_tag_update' => '%tag.name% Tag - Edit', 'oro_tag_create' => 'Create Tag', 'oro_tag_search' => 'Records tagged as "%tag.name%"', 'oro_user_index' => NULL, 'oro_user_view' => '%username%', 'oro_user_update' => '%username% - Edit', 'oro_user_create' => 'Create User', 'oro_user_profile_view' => '%username%', 'oro_user_profile_update' => '%username% - Edit', 'oro_user_role_index' => NULL, 'oro_user_role_update' => '%role% - Edit', 'oro_user_role_create' => 'Create Role', 'oro_user_security_login' => 'Login', 'oro_user_status_list' => 'User Status', 'oro_user_status_create' => 'Add Status', 'oro_user_reset_reset' => 'Password Reset', 'oro_user_reset_request' => 'Forgot Password', 'oro_user_reset_check_email' => 'Password Reset - Check Email', 'oro_user_group_index' => NULL, 'oro_user_group_create' => 'Create Group', 'oro_user_group_update' => '%group% - Edit', 'oro_workflow_step_edit' => '%workflow_data% - %entity% - %section%', 'oro_shortcut_actionslist' => 'Shortcut Actions List', 'oro_pinbar_help' => 'How To Use Pinbar'));

        return $instance;
    }

    /**
     * Gets the 'oro_navigation.title_service.twig.extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Twig\TitleExtension A Oro\Bundle\NavigationBundle\Twig\TitleExtension instance.
     */
    protected function getOroNavigation_TitleService_Twig_ExtensionService()
    {
        return $this->services['oro_navigation.title_service.twig.extension'] = new \Oro\Bundle\NavigationBundle\Twig\TitleExtension($this->get('oro_navigation.title_service'));
    }

    /**
     * Gets the 'oro_navigation.translation.extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Title\TranslationExtractor A Oro\Bundle\NavigationBundle\Title\TranslationExtractor instance.
     */
    protected function getOroNavigation_Translation_ExtractorService()
    {
        return $this->services['oro_navigation.translation.extractor'] = new \Oro\Bundle\NavigationBundle\Title\TranslationExtractor($this->get('oro_navigation.title_service'), $this->get('router'));
    }

    /**
     * Gets the 'oro_navigation.twig.content_tags' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Twig\ContentTagsExtension A Oro\Bundle\NavigationBundle\Twig\ContentTagsExtension instance.
     */
    protected function getOroNavigation_Twig_ContentTagsService()
    {
        return $this->services['oro_navigation.twig.content_tags'] = new \Oro\Bundle\NavigationBundle\Twig\ContentTagsExtension($this->get('oro_navigation.content.tag_generator_chain'));
    }

    /**
     * Gets the 'oro_navigation.twig.hash_nav_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NavigationBundle\Twig\HashNavExtension A Oro\Bundle\NavigationBundle\Twig\HashNavExtension instance.
     */
    protected function getOroNavigation_Twig_HashNavExtensionService()
    {
        return $this->services['oro_navigation.twig.hash_nav_extension'] = new \Oro\Bundle\NavigationBundle\Twig\HashNavExtension();
    }

    /**
     * Gets the 'oro_notification.docrine.event.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NotificationBundle\Provider\DoctrineListener A Oro\Bundle\NotificationBundle\Provider\DoctrineListener instance.
     */
    protected function getOroNotification_Docrine_Event_ListenerService()
    {
        $this->services['oro_notification.docrine.event.listener'] = $instance = new \Oro\Bundle\NotificationBundle\Provider\DoctrineListener();

        $instance->setEventDispatcher($this->get('event_dispatcher'));

        return $instance;
    }

    /**
     * Gets the 'oro_notification.email_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NotificationBundle\Event\Handler\EmailNotificationHandler A Oro\Bundle\NotificationBundle\Event\Handler\EmailNotificationHandler instance.
     */
    protected function getOroNotification_EmailHandlerService()
    {
        return $this->services['oro_notification.email_handler'] = new \Oro\Bundle\NotificationBundle\Event\Handler\EmailNotificationHandler($this->get('oro_notification.email_processor'), $this->get('doctrine.orm.default_entity_manager'), $this->get('oro_entity_config.provider.ownership'));
    }

    /**
     * Gets the 'oro_notification.email_notification.manager.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager A Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager instance.
     */
    protected function getOroNotification_EmailNotification_Manager_ApiService()
    {
        return $this->services['oro_notification.email_notification.manager.api'] = new \Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager('Oro\\Bundle\\NotificationBundle\\Entity\\EmailNotification', $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_notification.email_processor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NotificationBundle\Processor\EmailNotificationProcessor A Oro\Bundle\NotificationBundle\Processor\EmailNotificationProcessor instance.
     */
    protected function getOroNotification_EmailProcessorService()
    {
        $this->services['oro_notification.email_processor'] = $instance = new \Oro\Bundle\NotificationBundle\Processor\EmailNotificationProcessor($this->get('oro_email.email_renderer'), $this->get('swiftmailer.mailer.db_spool_mailer'), $this->get('doctrine.orm.default_entity_manager'), 'welmag@ukr.net', $this->get('logger'), $this->get('oro_locale.settings'));

        $instance->setEnv('prod');
        $instance->setMessageLimit(100);

        return $instance;
    }

    /**
     * Gets the 'oro_notification.event_listener.email_notification_service' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NotificationBundle\Provider\EmailNotificationGridHelper A Oro\Bundle\NotificationBundle\Provider\EmailNotificationGridHelper instance.
     */
    protected function getOroNotification_EventListener_EmailNotificationServiceService()
    {
        return $this->services['oro_notification.event_listener.email_notification_service'] = new \Oro\Bundle\NotificationBundle\Provider\EmailNotificationGridHelper($this->get('doctrine.orm.default_entity_manager'), array('Oro\\Bundle\\CalendarBundle\\Entity\\CalendarEvent' => array('icon_class' => 'icon-calendar', 'name' => 'oro.calendar.calendarevent.entity_label', 'description' => 'oro.calendar.calendarevent.entity_description'), 'Oro\\Bundle\\EmailBundle\\Entity\\Email' => array('icon_class' => 'icon-envelope', 'name' => 'oro.email.entity_label', 'description' => 'oro.email.entity_description'), 'Oro\\Bundle\\EmailBundle\\Entity\\EmailTemplate' => array('name' => 'oro.email.emailtemplate.entity_label', 'description' => 'oro.email.emailtemplate.entity_description'), 'Oro\\Bundle\\NotificationBundle\\Entity\\EmailNotification' => array('name' => 'oro.notification.emailnotification.entity_label', 'description' => 'oro.notification.emailnotification.entity_description'), 'Oro\\Bundle\\OrganizationBundle\\Entity\\BusinessUnit' => array('name' => 'oro.organization.businessunit.entity_label', 'description' => 'oro.organization.businessunit.entity_description'), 'Oro\\Bundle\\TagBundle\\Entity\\Tag' => array('icon_class' => 'icon-tag', 'name' => 'oro.tag.entity_label', 'description' => 'oro.tag.entity_description'), 'Oro\\Bundle\\UserBundle\\Entity\\User' => array('icon_class' => 'icon-user', 'name' => 'oro.user.entity_label', 'description' => 'oro.user.entity_description'), 'Oro\\Bundle\\UserBundle\\Entity\\Role' => array('icon_class' => 'icon-signal', 'name' => 'oro.user.role.entity_label', 'description' => 'oro.user.role.entity_description'), 'Oro\\Bundle\\UserBundle\\Entity\\Group' => array('icon_class' => 'icon-home', 'name' => 'oro.user.group.entity_label', 'description' => 'oro.user.group.entity_description')));
    }

    /**
     * Gets the 'oro_notification.form.email_notification' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroNotification_Form_EmailNotificationService()
    {
        return $this->services['oro_notification.form.email_notification'] = $this->get('form.factory')->createNamed('emailnotification', 'emailnotification', NULL);
    }

    /**
     * Gets the 'oro_notification.form.email_notification.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroNotification_Form_EmailNotification_ApiService()
    {
        return $this->services['oro_notification.form.email_notification.api'] = $this->get('form.factory')->createNamed('emailnotification_api', 'emailnotification_api', NULL);
    }

    /**
     * Gets the 'oro_notification.form.handler.email_notification' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NotificationBundle\Form\Handler\EmailNotificationHandler A Oro\Bundle\NotificationBundle\Form\Handler\EmailNotificationHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_notification.form.handler.email_notification' service is requested while the 'request' scope is not active
     */
    protected function getOroNotification_Form_Handler_EmailNotificationService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_notification.form.handler.email_notification', 'request');
        }

        return $this->services['oro_notification.form.handler.email_notification'] = $this->scopedServices['request']['oro_notification.form.handler.email_notification'] = new \Oro\Bundle\NotificationBundle\Form\Handler\EmailNotificationHandler($this->get('oro_notification.form.email_notification'), $this->get('request'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_notification.form.handler.email_notification.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NotificationBundle\Form\Handler\EmailNotificationHandler A Oro\Bundle\NotificationBundle\Form\Handler\EmailNotificationHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_notification.form.handler.email_notification.api' service is requested while the 'request' scope is not active
     */
    protected function getOroNotification_Form_Handler_EmailNotification_ApiService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_notification.form.handler.email_notification.api', 'request');
        }

        return $this->services['oro_notification.form.handler.email_notification.api'] = $this->scopedServices['request']['oro_notification.form.handler.email_notification.api'] = new \Oro\Bundle\NotificationBundle\Form\Handler\EmailNotificationHandler($this->get('oro_notification.form.email_notification.api'), $this->get('request'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_notification.form.type.email_notification' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NotificationBundle\Form\Type\EmailNotificationType A Oro\Bundle\NotificationBundle\Form\Type\EmailNotificationType instance.
     */
    protected function getOroNotification_Form_Type_EmailNotificationService()
    {
        return $this->services['oro_notification.form.type.email_notification'] = new \Oro\Bundle\NotificationBundle\Form\Type\EmailNotificationType(array('Oro\\Bundle\\CalendarBundle\\Entity\\CalendarEvent' => array('icon_class' => 'icon-calendar', 'name' => 'oro.calendar.calendarevent.entity_label', 'description' => 'oro.calendar.calendarevent.entity_description'), 'Oro\\Bundle\\EmailBundle\\Entity\\Email' => array('icon_class' => 'icon-envelope', 'name' => 'oro.email.entity_label', 'description' => 'oro.email.entity_description'), 'Oro\\Bundle\\EmailBundle\\Entity\\EmailTemplate' => array('name' => 'oro.email.emailtemplate.entity_label', 'description' => 'oro.email.emailtemplate.entity_description'), 'Oro\\Bundle\\NotificationBundle\\Entity\\EmailNotification' => array('name' => 'oro.notification.emailnotification.entity_label', 'description' => 'oro.notification.emailnotification.entity_description'), 'Oro\\Bundle\\OrganizationBundle\\Entity\\BusinessUnit' => array('name' => 'oro.organization.businessunit.entity_label', 'description' => 'oro.organization.businessunit.entity_description'), 'Oro\\Bundle\\TagBundle\\Entity\\Tag' => array('icon_class' => 'icon-tag', 'name' => 'oro.tag.entity_label', 'description' => 'oro.tag.entity_description'), 'Oro\\Bundle\\UserBundle\\Entity\\User' => array('icon_class' => 'icon-user', 'name' => 'oro.user.entity_label', 'description' => 'oro.user.entity_description'), 'Oro\\Bundle\\UserBundle\\Entity\\Role' => array('icon_class' => 'icon-signal', 'name' => 'oro.user.role.entity_label', 'description' => 'oro.user.role.entity_description'), 'Oro\\Bundle\\UserBundle\\Entity\\Group' => array('icon_class' => 'icon-home', 'name' => 'oro.user.group.entity_label', 'description' => 'oro.user.group.entity_description')), $this->get('oro_email.form.subscriber.emailtemplate'), $this->get('oro_entity_config.provider.ownership'));
    }

    /**
     * Gets the 'oro_notification.form.type.email_notification.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NotificationBundle\Form\Type\EmailNotificationApiType A Oro\Bundle\NotificationBundle\Form\Type\EmailNotificationApiType instance.
     */
    protected function getOroNotification_Form_Type_EmailNotification_ApiService()
    {
        return $this->services['oro_notification.form.type.email_notification.api'] = new \Oro\Bundle\NotificationBundle\Form\Type\EmailNotificationApiType(array('Oro\\Bundle\\CalendarBundle\\Entity\\CalendarEvent' => array('icon_class' => 'icon-calendar', 'name' => 'oro.calendar.calendarevent.entity_label', 'description' => 'oro.calendar.calendarevent.entity_description'), 'Oro\\Bundle\\EmailBundle\\Entity\\Email' => array('icon_class' => 'icon-envelope', 'name' => 'oro.email.entity_label', 'description' => 'oro.email.entity_description'), 'Oro\\Bundle\\EmailBundle\\Entity\\EmailTemplate' => array('name' => 'oro.email.emailtemplate.entity_label', 'description' => 'oro.email.emailtemplate.entity_description'), 'Oro\\Bundle\\NotificationBundle\\Entity\\EmailNotification' => array('name' => 'oro.notification.emailnotification.entity_label', 'description' => 'oro.notification.emailnotification.entity_description'), 'Oro\\Bundle\\OrganizationBundle\\Entity\\BusinessUnit' => array('name' => 'oro.organization.businessunit.entity_label', 'description' => 'oro.organization.businessunit.entity_description'), 'Oro\\Bundle\\TagBundle\\Entity\\Tag' => array('icon_class' => 'icon-tag', 'name' => 'oro.tag.entity_label', 'description' => 'oro.tag.entity_description'), 'Oro\\Bundle\\UserBundle\\Entity\\User' => array('icon_class' => 'icon-user', 'name' => 'oro.user.entity_label', 'description' => 'oro.user.entity_description'), 'Oro\\Bundle\\UserBundle\\Entity\\Role' => array('icon_class' => 'icon-signal', 'name' => 'oro.user.role.entity_label', 'description' => 'oro.user.role.entity_description'), 'Oro\\Bundle\\UserBundle\\Entity\\Group' => array('icon_class' => 'icon-home', 'name' => 'oro.user.group.entity_label', 'description' => 'oro.user.group.entity_description')), $this->get('oro_email.form.subscriber.emailtemplate'));
    }

    /**
     * Gets the 'oro_notification.form.type.recipient_list' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NotificationBundle\Form\Type\RecipientListType A Oro\Bundle\NotificationBundle\Form\Type\RecipientListType instance.
     */
    protected function getOroNotification_Form_Type_RecipientListService()
    {
        return $this->services['oro_notification.form.type.recipient_list'] = new \Oro\Bundle\NotificationBundle\Form\Type\RecipientListType($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_notification.locale_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NotificationBundle\EventListener\LocaleListener A Oro\Bundle\NotificationBundle\EventListener\LocaleListener instance.
     */
    protected function getOroNotification_LocaleListenerService()
    {
        $this->services['oro_notification.locale_listener'] = $instance = new \Oro\Bundle\NotificationBundle\EventListener\LocaleListener($this->get('stof_doctrine_extensions.listener.translatable'), NULL);

        if ($this->has('request')) {
            $instance->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }

        return $instance;
    }

    /**
     * Gets the 'oro_notification.mailer.spool_db' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NotificationBundle\Provider\Mailer\DbSpool A Oro\Bundle\NotificationBundle\Provider\Mailer\DbSpool instance.
     */
    protected function getOroNotification_Mailer_SpoolDbService()
    {
        return $this->services['oro_notification.mailer.spool_db'] = new \Oro\Bundle\NotificationBundle\Provider\Mailer\DbSpool($this->get('doctrine.orm.default_entity_manager'), 'Oro\\Bundle\\NotificationBundle\\Entity\\SpoolItem');
    }

    /**
     * Gets the 'oro_notification.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\NotificationBundle\Provider\NotificationManager A Oro\Bundle\NotificationBundle\Provider\NotificationManager instance.
     */
    protected function getOroNotification_ManagerService()
    {
        $this->services['oro_notification.manager'] = $instance = new \Oro\Bundle\NotificationBundle\Provider\NotificationManager($this->get('doctrine.orm.default_entity_manager'), 'Oro\\Bundle\\NotificationBundle\\Entity\\EmailNotification');

        $instance->addHandler($this->get('oro_notification.email_handler'));

        return $instance;
    }

    /**
     * Gets the 'oro_organization.business_unit.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\OrganizationBundle\Event\BusinessUnitListener A Oro\Bundle\OrganizationBundle\Event\BusinessUnitListener instance.
     */
    protected function getOroOrganization_BusinessUnit_ListenerService()
    {
        return $this->services['oro_organization.business_unit.listener'] = new \Oro\Bundle\OrganizationBundle\Event\BusinessUnitListener();
    }

    /**
     * Gets the 'oro_organization.business_unit.manager.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager A Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager instance.
     */
    protected function getOroOrganization_BusinessUnit_Manager_ApiService()
    {
        return $this->services['oro_organization.business_unit.manager.api'] = new \Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager('Oro\\Bundle\\OrganizationBundle\\Entity\\BusinessUnit', $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_organization.business_unit_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\OrganizationBundle\Entity\Manager\BusinessUnitManager A Oro\Bundle\OrganizationBundle\Entity\Manager\BusinessUnitManager instance.
     */
    protected function getOroOrganization_BusinessUnitManagerService()
    {
        return $this->services['oro_organization.business_unit_manager'] = new \Oro\Bundle\OrganizationBundle\Entity\Manager\BusinessUnitManager($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_organization.entity_ownership.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\OrganizationBundle\Event\RecordOwnerDataListener A Oro\Bundle\OrganizationBundle\Event\RecordOwnerDataListener instance.
     */
    protected function getOroOrganization_EntityOwnership_ListenerService()
    {
        return $this->services['oro_organization.entity_ownership.listener'] = new \Oro\Bundle\OrganizationBundle\Event\RecordOwnerDataListener($this, $this->get('oro_entity_config.provider.ownership'));
    }

    /**
     * Gets the 'oro_organization.event_listener.bu_update_grid_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataGridBundle\EventListener\BaseOrmRelationDatagridListener A Oro\Bundle\DataGridBundle\EventListener\BaseOrmRelationDatagridListener instance.
     */
    protected function getOroOrganization_EventListener_BuUpdateGridListenerService()
    {
        return $this->services['oro_organization.event_listener.bu_update_grid_listener'] = new \Oro\Bundle\DataGridBundle\EventListener\BaseOrmRelationDatagridListener('business_unit_id', $this->get('oro_datagrid.datagrid.request_params'));
    }

    /**
     * Gets the 'oro_organization.event_listener.bu_view_grid_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataGridBundle\EventListener\BaseOrmRelationDatagridListener A Oro\Bundle\DataGridBundle\EventListener\BaseOrmRelationDatagridListener instance.
     */
    protected function getOroOrganization_EventListener_BuViewGridListenerService()
    {
        return $this->services['oro_organization.event_listener.bu_view_grid_listener'] = new \Oro\Bundle\DataGridBundle\EventListener\BaseOrmRelationDatagridListener('business_unit_id', $this->get('oro_datagrid.datagrid.request_params'), false);
    }

    /**
     * Gets the 'oro_organization.form.business_unit' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroOrganization_Form_BusinessUnitService()
    {
        return $this->services['oro_organization.form.business_unit'] = $this->get('form.factory')->createNamed('oro_business_unit_form', 'oro_business_unit');
    }

    /**
     * Gets the 'oro_organization.form.business_unit.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroOrganization_Form_BusinessUnit_ApiService()
    {
        return $this->services['oro_organization.form.business_unit.api'] = $this->get('form.factory')->createNamed('business_unit', 'business_unit', NULL);
    }

    /**
     * Gets the 'oro_organization.form.extension.owner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\OrganizationBundle\Form\Extension\OwnerFormExtension A Oro\Bundle\OrganizationBundle\Form\Extension\OwnerFormExtension instance.
     */
    protected function getOroOrganization_Form_Extension_OwnerService()
    {
        return $this->services['oro_organization.form.extension.owner'] = new \Oro\Bundle\OrganizationBundle\Form\Extension\OwnerFormExtension($this->get('security.context'), $this->get('doctrine'), $this->get('oro_security.owner.ownership_metadata_provider'), $this->get('oro_organization.business_unit_manager'), $this->get('oro_security.security_facade'), $this->get('translator.default'), $this->get('security.acl.voter.basic_permissions', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('oro_security.ownership_tree_provider'));
    }

    /**
     * Gets the 'oro_organization.form.handler.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\OrganizationBundle\Form\Handler\BusinessUnitHandler A Oro\Bundle\OrganizationBundle\Form\Handler\BusinessUnitHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_organization.form.handler.api' service is requested while the 'request' scope is not active
     */
    protected function getOroOrganization_Form_Handler_ApiService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_organization.form.handler.api', 'request');
        }

        return $this->services['oro_organization.form.handler.api'] = $this->scopedServices['request']['oro_organization.form.handler.api'] = new \Oro\Bundle\OrganizationBundle\Form\Handler\BusinessUnitHandler($this->get('oro_organization.form.business_unit.api'), $this->get('request'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_organization.form.handler.business_unit' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\OrganizationBundle\Form\Handler\BusinessUnitHandler A Oro\Bundle\OrganizationBundle\Form\Handler\BusinessUnitHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_organization.form.handler.business_unit' service is requested while the 'request' scope is not active
     */
    protected function getOroOrganization_Form_Handler_BusinessUnitService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_organization.form.handler.business_unit', 'request');
        }

        return $this->services['oro_organization.form.handler.business_unit'] = $this->scopedServices['request']['oro_organization.form.handler.business_unit'] = new \Oro\Bundle\OrganizationBundle\Form\Handler\BusinessUnitHandler($this->get('oro_organization.form.business_unit'), $this->get('request'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_organization.form.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\OrganizationBundle\Event\FormListener A Oro\Bundle\OrganizationBundle\Event\FormListener instance.
     */
    protected function getOroOrganization_Form_ListenerService()
    {
        return $this->services['oro_organization.form.listener'] = new \Oro\Bundle\OrganizationBundle\Event\FormListener($this->get('oro_entity_config.config_manager'));
    }

    /**
     * Gets the 'oro_organization.form.transformer.business_unit_select' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\OrganizationBundle\Form\Transformer\BusinessUnitTransformer A Oro\Bundle\OrganizationBundle\Form\Transformer\BusinessUnitTransformer instance.
     */
    protected function getOroOrganization_Form_Transformer_BusinessUnitSelectService()
    {
        return $this->services['oro_organization.form.transformer.business_unit_select'] = new \Oro\Bundle\OrganizationBundle\Form\Transformer\BusinessUnitTransformer($this->get('oro_organization.business_unit_manager'));
    }

    /**
     * Gets the 'oro_organization.form.type.business_unit' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\OrganizationBundle\Form\Type\BusinessUnitType A Oro\Bundle\OrganizationBundle\Form\Type\BusinessUnitType instance.
     */
    protected function getOroOrganization_Form_Type_BusinessUnitService()
    {
        return $this->services['oro_organization.form.type.business_unit'] = new \Oro\Bundle\OrganizationBundle\Form\Type\BusinessUnitType();
    }

    /**
     * Gets the 'oro_organization.form.type.business_unit.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\OrganizationBundle\Form\Type\BusinessUnitApiType A Oro\Bundle\OrganizationBundle\Form\Type\BusinessUnitApiType instance.
     */
    protected function getOroOrganization_Form_Type_BusinessUnit_ApiService()
    {
        return $this->services['oro_organization.form.type.business_unit.api'] = new \Oro\Bundle\OrganizationBundle\Form\Type\BusinessUnitApiType();
    }

    /**
     * Gets the 'oro_organization.form.type.business_unit_select' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\OrganizationBundle\Form\Type\BusinessUnitSelectType A Oro\Bundle\OrganizationBundle\Form\Type\BusinessUnitSelectType instance.
     */
    protected function getOroOrganization_Form_Type_BusinessUnitSelectService()
    {
        return $this->services['oro_organization.form.type.business_unit_select'] = new \Oro\Bundle\OrganizationBundle\Form\Type\BusinessUnitSelectType();
    }

    /**
     * Gets the 'oro_organization.form.type.business_unit_tree_select_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\OrganizationBundle\Form\Type\BusinessUnitTreeSelectType A Oro\Bundle\OrganizationBundle\Form\Type\BusinessUnitTreeSelectType instance.
     */
    protected function getOroOrganization_Form_Type_BusinessUnitTreeSelectTypeService()
    {
        return $this->services['oro_organization.form.type.business_unit_tree_select_type'] = new \Oro\Bundle\OrganizationBundle\Form\Type\BusinessUnitTreeSelectType($this->get('oro_organization.form.transformer.business_unit_select'));
    }

    /**
     * Gets the 'oro_organization.form.type.ownership_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\OrganizationBundle\Form\Type\OwnershipType A Oro\Bundle\OrganizationBundle\Form\Type\OwnershipType instance.
     */
    protected function getOroOrganization_Form_Type_OwnershipTypeService()
    {
        return $this->services['oro_organization.form.type.ownership_type'] = new \Oro\Bundle\OrganizationBundle\Form\Type\OwnershipType($this->get('translator.default'));
    }

    /**
     * Gets the 'oro_organization.method.get_ownership_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceMethod A Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceMethod instance.
     */
    protected function getOroOrganization_Method_GetOwnershipTypeService()
    {
        $this->services['oro_organization.method.get_ownership_type'] = $instance = new \Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceMethod();

        $instance->setMethod('getOwnershipsArray');
        $instance->setService($this->get('oro_organization.form.type.ownership_type'));

        return $instance;
    }

    /**
     * Gets the 'oro_organization.organization.manager.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager A Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager instance.
     */
    protected function getOroOrganization_Organization_Manager_ApiService()
    {
        return $this->services['oro_organization.organization.manager.api'] = new \Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager('Oro\\Bundle\\OrganizationBundle\\Entity\\Organization', $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_organization.provider.business_units_grid' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\OrganizationBundle\Provider\BusinessUnitGridService A Oro\Bundle\OrganizationBundle\Provider\BusinessUnitGridService instance.
     */
    protected function getOroOrganization_Provider_BusinessUnitsGridService()
    {
        return $this->services['oro_organization.provider.business_units_grid'] = new \Oro\Bundle\OrganizationBundle\Provider\BusinessUnitGridService($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_organization.twig.business_units' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\OrganizationBundle\Twig\BusinessUnitExtension A Oro\Bundle\OrganizationBundle\Twig\BusinessUnitExtension instance.
     */
    protected function getOroOrganization_Twig_BusinessUnitsService()
    {
        return $this->services['oro_organization.twig.business_units'] = new \Oro\Bundle\OrganizationBundle\Twig\BusinessUnitExtension($this->get('oro_organization.business_unit_manager'));
    }

    /**
     * Gets the 'oro_organization.twig.get_owner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\OrganizationBundle\Twig\OwnerTypeExtension A Oro\Bundle\OrganizationBundle\Twig\OwnerTypeExtension instance.
     */
    protected function getOroOrganization_Twig_GetOwnerService()
    {
        return $this->services['oro_organization.twig.get_owner'] = new \Oro\Bundle\OrganizationBundle\Twig\OwnerTypeExtension($this->get('oro_entity_config.provider.ownership'));
    }

    /**
     * Gets the 'oro_platform.maintenance' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\PlatformBundle\Maintenance\Mode A Oro\Bundle\PlatformBundle\Maintenance\Mode instance.
     */
    protected function getOroPlatform_MaintenanceService()
    {
        return $this->services['oro_platform.maintenance'] = new \Oro\Bundle\PlatformBundle\Maintenance\Mode($this->get('lexik_maintenance.driver.factory'), $this->get('event_dispatcher'));
    }

    /**
     * Gets the 'oro_query_designer.config.resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\QueryDesignerBundle\QueryDesigner\ConfigurationResolver A Oro\Bundle\QueryDesignerBundle\QueryDesigner\ConfigurationResolver instance.
     */
    protected function getOroQueryDesigner_Config_ResolverService()
    {
        return $this->services['oro_query_designer.config.resolver'] = new \Oro\Bundle\QueryDesignerBundle\QueryDesigner\ConfigurationResolver($this->get('oro_entity.orm.entity_class_resolver'), $this);
    }

    /**
     * Gets the 'oro_query_designer.form.type.function_choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\QueryDesignerBundle\Form\Type\FunctionChoiceType A Oro\Bundle\QueryDesignerBundle\Form\Type\FunctionChoiceType instance.
     */
    protected function getOroQueryDesigner_Form_Type_FunctionChoiceService()
    {
        return $this->services['oro_query_designer.form.type.function_choice'] = new \Oro\Bundle\QueryDesignerBundle\Form\Type\FunctionChoiceType();
    }

    /**
     * Gets the 'oro_query_designer.form.type.query_designer_column' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\QueryDesignerBundle\Form\Type\ColumnType A Oro\Bundle\QueryDesignerBundle\Form\Type\ColumnType instance.
     */
    protected function getOroQueryDesigner_Form_Type_QueryDesignerColumnService()
    {
        return $this->services['oro_query_designer.form.type.query_designer_column'] = new \Oro\Bundle\QueryDesignerBundle\Form\Type\ColumnType();
    }

    /**
     * Gets the 'oro_query_designer.form.type.query_designer_filter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\QueryDesignerBundle\Form\Type\FilterType A Oro\Bundle\QueryDesignerBundle\Form\Type\FilterType instance.
     */
    protected function getOroQueryDesigner_Form_Type_QueryDesignerFilterService()
    {
        return $this->services['oro_query_designer.form.type.query_designer_filter'] = new \Oro\Bundle\QueryDesignerBundle\Form\Type\FilterType();
    }

    /**
     * Gets the 'oro_query_designer.form.type.query_designer_grouping' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\QueryDesignerBundle\Form\Type\GroupingType A Oro\Bundle\QueryDesignerBundle\Form\Type\GroupingType instance.
     */
    protected function getOroQueryDesigner_Form_Type_QueryDesignerGroupingService()
    {
        return $this->services['oro_query_designer.form.type.query_designer_grouping'] = new \Oro\Bundle\QueryDesignerBundle\Form\Type\GroupingType();
    }

    /**
     * Gets the 'oro_query_designer.form.type.sorting_choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\QueryDesignerBundle\Form\Type\SortingChoiceType A Oro\Bundle\QueryDesignerBundle\Form\Type\SortingChoiceType instance.
     */
    protected function getOroQueryDesigner_Form_Type_SortingChoiceService()
    {
        return $this->services['oro_query_designer.form.type.sorting_choice'] = new \Oro\Bundle\QueryDesignerBundle\Form\Type\SortingChoiceType();
    }

    /**
     * Gets the 'oro_query_designer.grid.extension.orm_datasource' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\QueryDesignerBundle\Grid\Extension\OrmDatasourceExtension A Oro\Bundle\QueryDesignerBundle\Grid\Extension\OrmDatasourceExtension instance.
     */
    protected function getOroQueryDesigner_Grid_Extension_OrmDatasourceService()
    {
        return $this->services['oro_query_designer.grid.extension.orm_datasource'] = new \Oro\Bundle\QueryDesignerBundle\Grid\Extension\OrmDatasourceExtension($this->get('oro_query_designer.query_designer.manager'));
    }

    /**
     * Gets the 'oro_query_designer.query_designer.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\QueryDesignerBundle\QueryDesigner\Manager A Oro\Bundle\QueryDesignerBundle\QueryDesigner\Manager instance.
     */
    protected function getOroQueryDesigner_QueryDesigner_ManagerService()
    {
        $this->services['oro_query_designer.query_designer.manager'] = $instance = new \Oro\Bundle\QueryDesignerBundle\QueryDesigner\Manager(array('filters' => array('string' => array('applicable' => array(0 => array('type' => 'string'), 1 => array('type' => 'text')), 'type' => 'string', 'query_type' => array(0 => 'all')), 'number' => array('applicable' => array(0 => array('type' => 'integer'), 1 => array('type' => 'smallint'), 2 => array('type' => 'bigint'), 3 => array('type' => 'decimal'), 4 => array('type' => 'float')), 'type' => 'number', 'query_type' => array(0 => 'all')), 'date' => array('applicable' => array(0 => array('type' => 'date')), 'type' => 'date', 'query_type' => array(0 => 'all')), 'datetime' => array('applicable' => array(0 => array('type' => 'datetime')), 'type' => 'datetime', 'query_type' => array(0 => 'all')), 'boolean' => array('applicable' => array(0 => array('type' => 'boolean')), 'type' => 'boolean', 'query_type' => array(0 => 'all'))), 'grouping' => array('exclude' => array(0 => array('type' => 'text'), 1 => array('type' => 'array'), 2 => array('type' => 'object'))), 'aggregates' => array('identifier' => array('applicable' => array(0 => array('identifier' => true)), 'functions' => array(0 => array('name' => 'Count', 'return_type' => 'integer', 'expr' => 'COUNT($column)', 'name_label' => 'oro.query_designer.aggregates.identifier.Count.name', 'hint_label' => 'oro.query_designer.aggregates.identifier.Count.hint')), 'query_type' => array(0 => 'report')), 'string' => array('applicable' => array(0 => array('type' => 'string')), 'functions' => array(0 => array('name' => 'Count', 'return_type' => 'integer', 'expr' => 'COUNT($column)', 'name_label' => 'oro.query_designer.aggregates.string.Count.name', 'hint_label' => 'oro.query_designer.aggregates.string.Count.hint')), 'query_type' => array(0 => 'report')), 'number' => array('applicable' => array(0 => array('type' => 'integer'), 1 => array('type' => 'smallint'), 2 => array('type' => 'bigint'), 3 => array('type' => 'decimal'), 4 => array('type' => 'float')), 'functions' => array(0 => array('name' => 'Count', 'return_type' => 'integer', 'expr' => 'COUNT($column)', 'name_label' => 'oro.query_designer.aggregates.number.Count.name', 'hint_label' => 'oro.query_designer.aggregates.number.Count.hint'), 1 => array('name' => 'Sum', 'expr' => 'SUM(CASE WHEN ($column IS NOT NULL) THEN $column ELSE 0 END)', 'name_label' => 'oro.query_designer.aggregates.number.Sum.name', 'hint_label' => 'oro.query_designer.aggregates.number.Sum.hint'), 2 => array('name' => 'Avg', 'expr' => 'AVG(CASE WHEN ($column IS NOT NULL) THEN $column ELSE 0 END)', 'name_label' => 'oro.query_designer.aggregates.number.Avg.name', 'hint_label' => 'oro.query_designer.aggregates.number.Avg.hint'), 3 => array('name' => 'Min', 'expr' => 'MIN($column)', 'name_label' => 'oro.query_designer.aggregates.number.Min.name', 'hint_label' => 'oro.query_designer.aggregates.number.Min.hint'), 4 => array('name' => 'Max', 'expr' => 'MAX($column)', 'name_label' => 'oro.query_designer.aggregates.number.Max.name', 'hint_label' => 'oro.query_designer.aggregates.number.Max.hint')), 'query_type' => array(0 => 'report'))), 'converters' => array()), $this->get('oro_query_designer.config.resolver'), $this->get('translator.default'));

        $instance->addFilter('string', $this->get('oro_filter.string_filter'));
        $instance->addFilter('selectrow', $this->get('oro_filter.select_row_filter'));
        $instance->addFilter('number', $this->get('oro_filter.number_filter'));
        $instance->addFilter('percent', $this->get('oro_filter.percent_filter'));
        $instance->addFilter('choice', $this->get('oro_filter.choice_filter'));
        $instance->addFilter('entity', $this->get('oro_filter.entity_filter'));
        $instance->addFilter('boolean', $this->get('oro_filter.boolean_filter'));
        $instance->addFilter('date', $this->get('oro_filter.date_range_filter'));
        $instance->addFilter('datetime', $this->get('oro_filter.datetime_range_filter'));

        return $instance;
    }

    /**
     * Gets the 'oro_report.datagrid.configuration.provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ReportBundle\Grid\ReportDatagridConfigurationProvider A Oro\Bundle\ReportBundle\Grid\ReportDatagridConfigurationProvider instance.
     */
    protected function getOroReport_Datagrid_Configuration_ProviderService()
    {
        return $this->services['oro_report.datagrid.configuration.provider'] = new \Oro\Bundle\ReportBundle\Grid\ReportDatagridConfigurationProvider($this->get('oro_query_designer.query_designer.manager'), $this->get('doctrine'));
    }

    /**
     * Gets the 'oro_report.entity_field_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityBundle\Provider\EntityFieldProvider A Oro\Bundle\EntityBundle\Provider\EntityFieldProvider instance.
     */
    protected function getOroReport_EntityFieldProviderService()
    {
        return $this->services['oro_report.entity_field_provider'] = new \Oro\Bundle\EntityBundle\Provider\EntityFieldProvider($this->get('oro_entity_config.provider.entity'), $this->get('oro_entity.orm.entity_class_resolver'), $this->get('doctrine'), $this->get('oro_entity.entity_provider'), $this->get('translator.default'));
    }

    /**
     * Gets the 'oro_report.form.handler.report' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ReportBundle\Form\Handler\ReportHandler A Oro\Bundle\ReportBundle\Form\Handler\ReportHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_report.form.handler.report' service is requested while the 'request' scope is not active
     */
    protected function getOroReport_Form_Handler_ReportService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_report.form.handler.report', 'request');
        }

        return $this->services['oro_report.form.handler.report'] = $this->scopedServices['request']['oro_report.form.handler.report'] = new \Oro\Bundle\ReportBundle\Form\Handler\ReportHandler($this->get('oro_report.form.report'), $this->get('request'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_report.form.report' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroReport_Form_ReportService()
    {
        return $this->services['oro_report.form.report'] = $this->get('form.factory')->createNamed('oro_report_form', 'oro_report');
    }

    /**
     * Gets the 'oro_report.form.type.entity_choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ReportBundle\Form\Type\ReportEntityChoiceType A Oro\Bundle\ReportBundle\Form\Type\ReportEntityChoiceType instance.
     */
    protected function getOroReport_Form_Type_EntityChoiceService()
    {
        return $this->services['oro_report.form.type.entity_choice'] = new \Oro\Bundle\ReportBundle\Form\Type\ReportEntityChoiceType($this->get('oro_entity.entity_provider'));
    }

    /**
     * Gets the 'oro_report.form.type.entity_field_choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ReportBundle\Form\Type\ReportEntityFieldChoiceType A Oro\Bundle\ReportBundle\Form\Type\ReportEntityFieldChoiceType instance.
     */
    protected function getOroReport_Form_Type_EntityFieldChoiceService()
    {
        return $this->services['oro_report.form.type.entity_field_choice'] = new \Oro\Bundle\ReportBundle\Form\Type\ReportEntityFieldChoiceType($this->get('oro_entity.entity_provider'), $this->get('oro_report.entity_field_provider'), $this->get('translator.default'));
    }

    /**
     * Gets the 'oro_report.form.type.report' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ReportBundle\Form\Type\ReportType A Oro\Bundle\ReportBundle\Form\Type\ReportType instance.
     */
    protected function getOroReport_Form_Type_ReportService()
    {
        return $this->services['oro_report.form.type.report'] = new \Oro\Bundle\ReportBundle\Form\Type\ReportType();
    }

    /**
     * Gets the 'oro_report.listener.navigation_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ReportBundle\EventListener\NavigationListener A Oro\Bundle\ReportBundle\EventListener\NavigationListener instance.
     */
    protected function getOroReport_Listener_NavigationListenerService()
    {
        return $this->services['oro_report.listener.navigation_listener'] = new \Oro\Bundle\ReportBundle\EventListener\NavigationListener($this->get('doctrine.orm.default_entity_manager'), $this->get('oro_entity_config.provider.entity'), $this->get('oro_security.security_facade'));
    }

    /**
     * Gets the 'oro_report.report.manager.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager A Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager instance.
     */
    protected function getOroReport_Report_Manager_ApiService()
    {
        return $this->services['oro_report.report.manager.api'] = new \Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager('Oro\\Bundle\\ReportBundle\\Entity\\Report', $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_report.report_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ReportBundle\Entity\Manager\ReportManager A Oro\Bundle\ReportBundle\Entity\Manager\ReportManager instance.
     */
    protected function getOroReport_ReportManagerService()
    {
        return $this->services['oro_report.report_manager'] = new \Oro\Bundle\ReportBundle\Entity\Manager\ReportManager($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_requirejs.cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SecurityBundle\Cache\FilesystemCache A Oro\Bundle\SecurityBundle\Cache\FilesystemCache instance.
     */
    protected function getOroRequirejs_CacheService()
    {
        $this->services['oro_requirejs.cache'] = $instance = new \Oro\Bundle\SecurityBundle\Cache\FilesystemCache('/var/www/orocrm-platform/app/cache/de_/oro_data');

        $instance->setNamespace('oro_requirejs.cache');

        return $instance;
    }

    /**
     * Gets the 'oro_requirejs.twig.requirejs_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\RequireJSBundle\Twig\OroRequireJSExtension A Oro\Bundle\RequireJSBundle\Twig\OroRequireJSExtension instance.
     */
    protected function getOroRequirejs_Twig_RequirejsExtensionService()
    {
        return $this->services['oro_requirejs.twig.requirejs_extension'] = new \Oro\Bundle\RequireJSBundle\Twig\OroRequireJSExtension($this);
    }

    /**
     * Gets the 'oro_requirejs_config_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\RequireJSBundle\Provider\Config A Oro\Bundle\RequireJSBundle\Provider\Config instance.
     */
    protected function getOroRequirejsConfigProviderService()
    {
        $this->services['oro_requirejs_config_provider'] = $instance = new \Oro\Bundle\RequireJSBundle\Provider\Config($this, $this->get('templating'), 'OroRequireJSBundle::require_config.js.twig');

        $instance->setCache($this->get('oro_requirejs.cache'));

        return $instance;
    }

    /**
     * Gets the 'oro_search.datasource.search' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SearchBundle\Extension\SearchDatasource A Oro\Bundle\SearchBundle\Extension\SearchDatasource instance.
     */
    protected function getOroSearch_Datasource_SearchService()
    {
        return $this->services['oro_search.datasource.search'] = new \Oro\Bundle\SearchBundle\Extension\SearchDatasource($this->get('doctrine.orm.default_entity_manager'), $this->get('oro_security.acl_helper'));
    }

    /**
     * Gets the 'oro_search.event_listener.search_results_grid_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SearchBundle\EventListener\SearchResultsGridListener A Oro\Bundle\SearchBundle\EventListener\SearchResultsGridListener instance.
     */
    protected function getOroSearch_EventListener_SearchResultsGridListenerService()
    {
        return $this->services['oro_search.event_listener.search_results_grid_listener'] = new \Oro\Bundle\SearchBundle\EventListener\SearchResultsGridListener($this->get('oro_datagrid.datagrid.request_params'), $this->get('oro_search.index'));
    }

    /**
     * Gets the 'oro_search.extension.formatter.property.search_result_property' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SearchBundle\Extension\SearchResultProperty A Oro\Bundle\SearchBundle\Extension\SearchResultProperty instance.
     */
    protected function getOroSearch_Extension_Formatter_Property_SearchResultPropertyService()
    {
        return $this->services['oro_search.extension.formatter.property.search_result_property'] = new \Oro\Bundle\SearchBundle\Extension\SearchResultProperty($this->get('twig'), array('Oro\\Bundle\\EmailBundle\\Entity\\Email' => array('alias' => 'oro_email', 'label' => 'Emails', 'search_template' => 'OroEmailBundle:Email:searchResult.html.twig', 'route' => array('name' => 'oro_email_view', 'parameters' => array('id' => 'id')), 'title_fields' => array(0 => 'subject'), 'fields' => array(0 => array('name' => 'subject', 'target_type' => 'text', 'target_fields' => array(0 => 'subject')))), 'Oro\\Bundle\\TagBundle\\Entity\\Tag' => array('alias' => 'oro_tag', 'title_fields' => array(0 => 'name'), 'search_template' => 'OroTagBundle:Search:result.html.twig', 'route' => array('name' => 'oro_tag_search', 'parameters' => array('id' => 'id')), 'fields' => array(0 => array('name' => 'name', 'target_type' => 'text', 'target_fields' => array(0 => 'name')))), 'Oro\\Bundle\\UserBundle\\Entity\\User' => array('alias' => 'oro_user', 'title_fields' => array(0 => 'username'), 'route' => array('name' => 'oro_user_view', 'parameters' => array('id' => 'id')), 'search_template' => 'OroUserBundle:Search:result.html.twig', 'fields' => array(0 => array('name' => 'username', 'target_type' => 'text', 'target_fields' => array(0 => 'username')), 1 => array('name' => 'email', 'target_type' => 'text', 'target_fields' => array(0 => 'email')), 2 => array('name' => 'namePrefix', 'target_type' => 'text', 'target_fields' => array(0 => 'namePrefix')), 3 => array('name' => 'firstName', 'target_type' => 'text', 'target_fields' => array(0 => 'firstName')), 4 => array('name' => 'middleName', 'target_type' => 'text', 'target_fields' => array(0 => 'middleName')), 5 => array('name' => 'lastName', 'target_type' => 'text', 'target_fields' => array(0 => 'lastName')), 6 => array('name' => 'nameSuffix', 'target_type' => 'text', 'target_fields' => array(0 => 'nameSuffix')), 7 => array('name' => 'birthday', 'target_type' => 'birthday', 'target_fields' => array(0 => 'birthday'))))));
    }

    /**
     * Gets the 'oro_search.extension.pager.orm.pager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SearchBundle\Extension\Pager\IndexerPager A Oro\Bundle\SearchBundle\Extension\Pager\IndexerPager instance.
     */
    protected function getOroSearch_Extension_Pager_Orm_PagerService()
    {
        return $this->services['oro_search.extension.pager.orm.pager'] = new \Oro\Bundle\SearchBundle\Extension\Pager\IndexerPager();
    }

    /**
     * Gets the 'oro_search.extension.search_pager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SearchBundle\Extension\Pager\SearchPagerExtension A Oro\Bundle\SearchBundle\Extension\Pager\SearchPagerExtension instance.
     */
    protected function getOroSearch_Extension_SearchPagerService()
    {
        return $this->services['oro_search.extension.search_pager'] = new \Oro\Bundle\SearchBundle\Extension\Pager\SearchPagerExtension($this->get('oro_search.extension.pager.orm.pager'), $this->get('oro_datagrid.datagrid.request_params'));
    }

    /**
     * Gets the 'oro_search.extension.search_results' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SearchBundle\Extension\SearchResultsExtension A Oro\Bundle\SearchBundle\Extension\SearchResultsExtension instance.
     */
    protected function getOroSearch_Extension_SearchResultsService()
    {
        return $this->services['oro_search.extension.search_results'] = new \Oro\Bundle\SearchBundle\Extension\SearchResultsExtension($this->get('oro_datagrid.datagrid.request_params'), $this->get('oro_search.formatter.result_formatter'), $this->get('doctrine.orm.default_entity_manager'), $this->get('oro_search.mapper'), $this->get('event_dispatcher'));
    }

    /**
     * Gets the 'oro_search.formatter.result_formatter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SearchBundle\Formatter\ResultFormatter A Oro\Bundle\SearchBundle\Formatter\ResultFormatter instance.
     */
    protected function getOroSearch_Formatter_ResultFormatterService()
    {
        return $this->services['oro_search.formatter.result_formatter'] = new \Oro\Bundle\SearchBundle\Formatter\ResultFormatter($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_search.index' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SearchBundle\Engine\Indexer A Oro\Bundle\SearchBundle\Engine\Indexer instance.
     */
    protected function getOroSearch_IndexService()
    {
        return $this->services['oro_search.index'] = new \Oro\Bundle\SearchBundle\Engine\Indexer($this->get('doctrine.orm.default_entity_manager'), $this->get('oro_search.search.engine'), $this->get('oro_search.mapper'), new \Oro\Bundle\SearchBundle\Security\SecurityProvider($this->get('oro_security.security_facade'), $this->get('oro_security.entity_security_metadata_provider')));
    }

    /**
     * Gets the 'oro_search.index_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SearchBundle\EventListener\IndexListener A Oro\Bundle\SearchBundle\EventListener\IndexListener instance.
     */
    protected function getOroSearch_IndexListenerService()
    {
        return $this->services['oro_search.index_listener'] = new \Oro\Bundle\SearchBundle\EventListener\IndexListener($this, true, array('Oro\\Bundle\\EmailBundle\\Entity\\Email' => array('alias' => 'oro_email', 'label' => 'Emails', 'search_template' => 'OroEmailBundle:Email:searchResult.html.twig', 'route' => array('name' => 'oro_email_view', 'parameters' => array('id' => 'id')), 'title_fields' => array(0 => 'subject'), 'fields' => array(0 => array('name' => 'subject', 'target_type' => 'text', 'target_fields' => array(0 => 'subject')))), 'Oro\\Bundle\\TagBundle\\Entity\\Tag' => array('alias' => 'oro_tag', 'title_fields' => array(0 => 'name'), 'search_template' => 'OroTagBundle:Search:result.html.twig', 'route' => array('name' => 'oro_tag_search', 'parameters' => array('id' => 'id')), 'fields' => array(0 => array('name' => 'name', 'target_type' => 'text', 'target_fields' => array(0 => 'name')))), 'Oro\\Bundle\\UserBundle\\Entity\\User' => array('alias' => 'oro_user', 'title_fields' => array(0 => 'username'), 'route' => array('name' => 'oro_user_view', 'parameters' => array('id' => 'id')), 'search_template' => 'OroUserBundle:Search:result.html.twig', 'fields' => array(0 => array('name' => 'username', 'target_type' => 'text', 'target_fields' => array(0 => 'username')), 1 => array('name' => 'email', 'target_type' => 'text', 'target_fields' => array(0 => 'email')), 2 => array('name' => 'namePrefix', 'target_type' => 'text', 'target_fields' => array(0 => 'namePrefix')), 3 => array('name' => 'firstName', 'target_type' => 'text', 'target_fields' => array(0 => 'firstName')), 4 => array('name' => 'middleName', 'target_type' => 'text', 'target_fields' => array(0 => 'middleName')), 5 => array('name' => 'lastName', 'target_type' => 'text', 'target_fields' => array(0 => 'lastName')), 6 => array('name' => 'nameSuffix', 'target_type' => 'text', 'target_fields' => array(0 => 'nameSuffix')), 7 => array('name' => 'birthday', 'target_type' => 'birthday', 'target_fields' => array(0 => 'birthday'))))));
    }

    /**
     * Gets the 'oro_search.mapper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SearchBundle\Engine\ObjectMapper A Oro\Bundle\SearchBundle\Engine\ObjectMapper instance.
     */
    protected function getOroSearch_MapperService()
    {
        return $this->services['oro_search.mapper'] = new \Oro\Bundle\SearchBundle\Engine\ObjectMapper($this, array('Oro\\Bundle\\EmailBundle\\Entity\\Email' => array('alias' => 'oro_email', 'label' => 'Emails', 'search_template' => 'OroEmailBundle:Email:searchResult.html.twig', 'route' => array('name' => 'oro_email_view', 'parameters' => array('id' => 'id')), 'title_fields' => array(0 => 'subject'), 'fields' => array(0 => array('name' => 'subject', 'target_type' => 'text', 'target_fields' => array(0 => 'subject')))), 'Oro\\Bundle\\TagBundle\\Entity\\Tag' => array('alias' => 'oro_tag', 'title_fields' => array(0 => 'name'), 'search_template' => 'OroTagBundle:Search:result.html.twig', 'route' => array('name' => 'oro_tag_search', 'parameters' => array('id' => 'id')), 'fields' => array(0 => array('name' => 'name', 'target_type' => 'text', 'target_fields' => array(0 => 'name')))), 'Oro\\Bundle\\UserBundle\\Entity\\User' => array('alias' => 'oro_user', 'title_fields' => array(0 => 'username'), 'route' => array('name' => 'oro_user_view', 'parameters' => array('id' => 'id')), 'search_template' => 'OroUserBundle:Search:result.html.twig', 'fields' => array(0 => array('name' => 'username', 'target_type' => 'text', 'target_fields' => array(0 => 'username')), 1 => array('name' => 'email', 'target_type' => 'text', 'target_fields' => array(0 => 'email')), 2 => array('name' => 'namePrefix', 'target_type' => 'text', 'target_fields' => array(0 => 'namePrefix')), 3 => array('name' => 'firstName', 'target_type' => 'text', 'target_fields' => array(0 => 'firstName')), 4 => array('name' => 'middleName', 'target_type' => 'text', 'target_fields' => array(0 => 'middleName')), 5 => array('name' => 'lastName', 'target_type' => 'text', 'target_fields' => array(0 => 'lastName')), 6 => array('name' => 'nameSuffix', 'target_type' => 'text', 'target_fields' => array(0 => 'nameSuffix')), 7 => array('name' => 'birthday', 'target_type' => 'birthday', 'target_fields' => array(0 => 'birthday'))))));
    }

    /**
     * Gets the 'oro_search.prepare_result_item.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SearchBundle\EventListener\PrepareResultItemListener A Oro\Bundle\SearchBundle\EventListener\PrepareResultItemListener instance.
     */
    protected function getOroSearch_PrepareResultItem_ListenerService()
    {
        return $this->services['oro_search.prepare_result_item.listener'] = new \Oro\Bundle\SearchBundle\EventListener\PrepareResultItemListener($this->get('router'), $this->get('oro_search.mapper'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_search.provider.result_statistics_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SearchBundle\Provider\ResultStatisticsProvider A Oro\Bundle\SearchBundle\Provider\ResultStatisticsProvider instance.
     */
    protected function getOroSearch_Provider_ResultStatisticsProviderService()
    {
        return $this->services['oro_search.provider.result_statistics_provider'] = new \Oro\Bundle\SearchBundle\Provider\ResultStatisticsProvider($this->get('oro_search.index'));
    }

    /**
     * Gets the 'oro_search.search.engine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SearchBundle\Engine\Orm A Oro\Bundle\SearchBundle\Engine\Orm instance.
     */
    protected function getOroSearch_Search_EngineService()
    {
        return $this->services['oro_search.search.engine'] = new \Oro\Bundle\SearchBundle\Engine\Orm($this->get('doctrine.orm.default_entity_manager'), $this->get('event_dispatcher'), $this, $this->get('oro_search.mapper'), false);
    }

    /**
     * Gets the 'oro_search.twig.search_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SearchBundle\Twig\OroSearchExtension A Oro\Bundle\SearchBundle\Twig\OroSearchExtension instance.
     */
    protected function getOroSearch_Twig_SearchExtensionService()
    {
        return $this->services['oro_search.twig.search_extension'] = new \Oro\Bundle\SearchBundle\Twig\OroSearchExtension();
    }

    /**
     * Gets the 'oro_security.acl.annotation_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SecurityBundle\Metadata\AclAnnotationProvider A Oro\Bundle\SecurityBundle\Metadata\AclAnnotationProvider instance.
     */
    protected function getOroSecurity_Acl_AnnotationProviderService()
    {
        $a = new \Oro\Bundle\SecurityBundle\Cache\FilesystemCache('/var/www/orocrm-platform/app/cache/de_/oro_data');
        $a->setNamespace('oro_acl_annotations.cache');

        $this->services['oro_security.acl.annotation_provider'] = $instance = new \Oro\Bundle\SecurityBundle\Metadata\AclAnnotationProvider($a);

        $instance->addLoader(new \Oro\Bundle\SecurityBundle\Annotation\Loader\AclAnnotationLoader(array('FrameworkBundle' => 'Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle', 'SecurityBundle' => 'Symfony\\Bundle\\SecurityBundle\\SecurityBundle', 'TwigBundle' => 'Symfony\\Bundle\\TwigBundle\\TwigBundle', 'MonologBundle' => 'Symfony\\Bundle\\MonologBundle\\MonologBundle', 'SwiftmailerBundle' => 'Symfony\\Bundle\\SwiftmailerBundle\\SwiftmailerBundle', 'AsseticBundle' => 'Symfony\\Bundle\\AsseticBundle\\AsseticBundle', 'DoctrineBundle' => 'Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle', 'DoctrineFixturesBundle' => 'Doctrine\\Bundle\\FixturesBundle\\DoctrineFixturesBundle', 'SensioFrameworkExtraBundle' => 'Sensio\\Bundle\\FrameworkExtraBundle\\SensioFrameworkExtraBundle', 'JMSSerializerBundle' => 'JMS\\SerializerBundle\\JMSSerializerBundle', 'KnpPaginatorBundle' => 'Knp\\Bundle\\PaginatorBundle\\KnpPaginatorBundle', 'KnpMenuBundle' => 'Knp\\Bundle\\MenuBundle\\KnpMenuBundle', 'FOSRestBundle' => 'FOS\\RestBundle\\FOSRestBundle', 'FOSJsRoutingBundle' => 'FOS\\JsRoutingBundle\\FOSJsRoutingBundle', 'NelmioApiDocBundle' => 'Nelmio\\ApiDocBundle\\NelmioApiDocBundle', 'BeSimpleSoapBundle' => 'BeSimple\\SoapBundle\\BeSimpleSoapBundle', 'StofDoctrineExtensionsBundle' => 'Stof\\DoctrineExtensionsBundle\\StofDoctrineExtensionsBundle', 'EscapeWSSEAuthenticationBundle' => 'Escape\\WSSEAuthenticationBundle\\EscapeWSSEAuthenticationBundle', 'LiipImagineBundle' => 'Liip\\ImagineBundle\\LiipImagineBundle', 'GenemuFormBundle' => 'Genemu\\Bundle\\FormBundle\\GenemuFormBundle', 'A2lixTranslationFormBundle' => 'A2lix\\TranslationFormBundle\\A2lixTranslationFormBundle', 'LexikMaintenanceBundle' => 'Lexik\\Bundle\\MaintenanceBundle\\LexikMaintenanceBundle', 'OroSecurityBundle' => 'Oro\\Bundle\\SecurityBundle\\OroSecurityBundle', 'OroUIBundle' => 'Oro\\Bundle\\UIBundle\\OroUIBundle', 'OroEntityBundle' => 'Oro\\Bundle\\EntityBundle\\OroEntityBundle', 'JDareClankBundle' => 'JDare\\ClankBundle\\JDareClankBundle', 'JMSJobQueueBundle' => 'JMS\\JobQueueBundle\\JMSJobQueueBundle', 'OroAddressBundle' => 'Oro\\Bundle\\AddressBundle\\OroAddressBundle', 'OroAsseticBundle' => 'Oro\\Bundle\\AsseticBundle\\OroAsseticBundle', 'OroBatchBundle' => 'Oro\\Bundle\\BatchBundle\\OroBatchBundle', 'OroBusinessEntitiesBundle' => 'Oro\\Bundle\\BusinessEntitiesBundle\\OroBusinessEntitiesBundle', 'OroCalendarBundle' => 'Oro\\Bundle\\CalendarBundle\\OroCalendarBundle', 'OroConfigBundle' => 'Oro\\Bundle\\ConfigBundle\\OroConfigBundle', 'OroCronBundle' => 'Oro\\Bundle\\CronBundle\\OroCronBundle', 'OroDashboardBundle' => 'Oro\\Bundle\\DashboardBundle\\OroDashboardBundle', 'OroDataAuditBundle' => 'Oro\\Bundle\\DataAuditBundle\\OroDataAuditBundle', 'OroDataGridBundle' => 'Oro\\Bundle\\DataGridBundle\\OroDataGridBundle', 'OroDistributionBundle' => 'Oro\\Bundle\\DistributionBundle\\OroDistributionBundle', 'OroEmailBundle' => 'Oro\\Bundle\\EmailBundle\\OroEmailBundle', 'OroEntityConfigBundle' => 'Oro\\Bundle\\EntityConfigBundle\\OroEntityConfigBundle', 'OroEntityExtendBundle' => 'Oro\\Bundle\\EntityExtendBundle\\OroEntityExtendBundle', 'OroFilterBundle' => 'Oro\\Bundle\\FilterBundle\\OroFilterBundle', 'OroFormBundle' => 'Oro\\Bundle\\FormBundle\\OroFormBundle', 'OroHelpBundle' => 'Oro\\Bundle\\HelpBundle\\OroHelpBundle', 'OroImapBundle' => 'Oro\\Bundle\\ImapBundle\\OroImapBundle', 'OroImportExportBundle' => 'Oro\\Bundle\\ImportExportBundle\\OroImportExportBundle', 'OroInstallerBundle' => 'Oro\\Bundle\\InstallerBundle\\OroInstallerBundle', 'OroIntegrationBundle' => 'Oro\\Bundle\\IntegrationBundle\\OroIntegrationBundle', 'OroLocaleBundle' => 'Oro\\Bundle\\LocaleBundle\\OroLocaleBundle', 'OroMeasureBundle' => 'Oro\\Bundle\\MeasureBundle\\OroMeasureBundle', 'OroNotificationBundle' => 'Oro\\Bundle\\NotificationBundle\\OroNotificationBundle', 'OroOrganizationBundle' => 'Oro\\Bundle\\OrganizationBundle\\OroOrganizationBundle', 'OroPlatformBundle' => 'Oro\\Bundle\\PlatformBundle\\OroPlatformBundle', 'OroQueryDesignerBundle' => 'Oro\\Bundle\\QueryDesignerBundle\\OroQueryDesignerBundle', 'OroReportBundle' => 'Oro\\Bundle\\ReportBundle\\OroReportBundle', 'OroRequireJSBundle' => 'Oro\\Bundle\\RequireJSBundle\\OroRequireJSBundle', 'OroSearchBundle' => 'Oro\\Bundle\\SearchBundle\\OroSearchBundle', 'OroSegmentationTreeBundle' => 'Oro\\Bundle\\SegmentationTreeBundle\\OroSegmentationTreeBundle', 'OroSidebarBundle' => 'Oro\\Bundle\\SidebarBundle\\OroSidebarBundle', 'OroSoapBundle' => 'Oro\\Bundle\\SoapBundle\\OroSoapBundle', 'OroSyncBundle' => 'Oro\\Bundle\\SyncBundle\\OroSyncBundle', 'OroTagBundle' => 'Oro\\Bundle\\TagBundle\\OroTagBundle', 'OroThemeBundle' => 'Oro\\Bundle\\ThemeBundle\\OroThemeBundle', 'OroTranslationBundle' => 'Oro\\Bundle\\TranslationBundle\\OroTranslationBundle', 'OroUserBundle' => 'Oro\\Bundle\\UserBundle\\OroUserBundle', 'OroWindowsBundle' => 'Oro\\Bundle\\WindowsBundle\\OroWindowsBundle', 'OroWorkflowBundle' => 'Oro\\Bundle\\WorkflowBundle\\OroWorkflowBundle', 'SyliusFlowBundle' => 'Sylius\\Bundle\\FlowBundle\\SyliusFlowBundle', 'OroNavigationBundle' => 'Oro\\Bundle\\NavigationBundle\\OroNavigationBundle', 'WebProfilerBundle' => 'Symfony\\Bundle\\WebProfilerBundle\\WebProfilerBundle', 'SensioDistributionBundle' => 'Sensio\\Bundle\\DistributionBundle\\SensioDistributionBundle', 'SensioGeneratorBundle' => 'Sensio\\Bundle\\GeneratorBundle\\SensioGeneratorBundle'), array(0 => 'Controller'), $this->get('annotation_reader')));
        $instance->addLoader(new \Oro\Bundle\SecurityBundle\Annotation\Loader\AclYamlConfigLoader(array('FrameworkBundle' => 'Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle', 'SecurityBundle' => 'Symfony\\Bundle\\SecurityBundle\\SecurityBundle', 'TwigBundle' => 'Symfony\\Bundle\\TwigBundle\\TwigBundle', 'MonologBundle' => 'Symfony\\Bundle\\MonologBundle\\MonologBundle', 'SwiftmailerBundle' => 'Symfony\\Bundle\\SwiftmailerBundle\\SwiftmailerBundle', 'AsseticBundle' => 'Symfony\\Bundle\\AsseticBundle\\AsseticBundle', 'DoctrineBundle' => 'Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle', 'DoctrineFixturesBundle' => 'Doctrine\\Bundle\\FixturesBundle\\DoctrineFixturesBundle', 'SensioFrameworkExtraBundle' => 'Sensio\\Bundle\\FrameworkExtraBundle\\SensioFrameworkExtraBundle', 'JMSSerializerBundle' => 'JMS\\SerializerBundle\\JMSSerializerBundle', 'KnpPaginatorBundle' => 'Knp\\Bundle\\PaginatorBundle\\KnpPaginatorBundle', 'KnpMenuBundle' => 'Knp\\Bundle\\MenuBundle\\KnpMenuBundle', 'FOSRestBundle' => 'FOS\\RestBundle\\FOSRestBundle', 'FOSJsRoutingBundle' => 'FOS\\JsRoutingBundle\\FOSJsRoutingBundle', 'NelmioApiDocBundle' => 'Nelmio\\ApiDocBundle\\NelmioApiDocBundle', 'BeSimpleSoapBundle' => 'BeSimple\\SoapBundle\\BeSimpleSoapBundle', 'StofDoctrineExtensionsBundle' => 'Stof\\DoctrineExtensionsBundle\\StofDoctrineExtensionsBundle', 'EscapeWSSEAuthenticationBundle' => 'Escape\\WSSEAuthenticationBundle\\EscapeWSSEAuthenticationBundle', 'LiipImagineBundle' => 'Liip\\ImagineBundle\\LiipImagineBundle', 'GenemuFormBundle' => 'Genemu\\Bundle\\FormBundle\\GenemuFormBundle', 'A2lixTranslationFormBundle' => 'A2lix\\TranslationFormBundle\\A2lixTranslationFormBundle', 'LexikMaintenanceBundle' => 'Lexik\\Bundle\\MaintenanceBundle\\LexikMaintenanceBundle', 'OroSecurityBundle' => 'Oro\\Bundle\\SecurityBundle\\OroSecurityBundle', 'OroUIBundle' => 'Oro\\Bundle\\UIBundle\\OroUIBundle', 'OroEntityBundle' => 'Oro\\Bundle\\EntityBundle\\OroEntityBundle', 'JDareClankBundle' => 'JDare\\ClankBundle\\JDareClankBundle', 'JMSJobQueueBundle' => 'JMS\\JobQueueBundle\\JMSJobQueueBundle', 'OroAddressBundle' => 'Oro\\Bundle\\AddressBundle\\OroAddressBundle', 'OroAsseticBundle' => 'Oro\\Bundle\\AsseticBundle\\OroAsseticBundle', 'OroBatchBundle' => 'Oro\\Bundle\\BatchBundle\\OroBatchBundle', 'OroBusinessEntitiesBundle' => 'Oro\\Bundle\\BusinessEntitiesBundle\\OroBusinessEntitiesBundle', 'OroCalendarBundle' => 'Oro\\Bundle\\CalendarBundle\\OroCalendarBundle', 'OroConfigBundle' => 'Oro\\Bundle\\ConfigBundle\\OroConfigBundle', 'OroCronBundle' => 'Oro\\Bundle\\CronBundle\\OroCronBundle', 'OroDashboardBundle' => 'Oro\\Bundle\\DashboardBundle\\OroDashboardBundle', 'OroDataAuditBundle' => 'Oro\\Bundle\\DataAuditBundle\\OroDataAuditBundle', 'OroDataGridBundle' => 'Oro\\Bundle\\DataGridBundle\\OroDataGridBundle', 'OroDistributionBundle' => 'Oro\\Bundle\\DistributionBundle\\OroDistributionBundle', 'OroEmailBundle' => 'Oro\\Bundle\\EmailBundle\\OroEmailBundle', 'OroEntityConfigBundle' => 'Oro\\Bundle\\EntityConfigBundle\\OroEntityConfigBundle', 'OroEntityExtendBundle' => 'Oro\\Bundle\\EntityExtendBundle\\OroEntityExtendBundle', 'OroFilterBundle' => 'Oro\\Bundle\\FilterBundle\\OroFilterBundle', 'OroFormBundle' => 'Oro\\Bundle\\FormBundle\\OroFormBundle', 'OroHelpBundle' => 'Oro\\Bundle\\HelpBundle\\OroHelpBundle', 'OroImapBundle' => 'Oro\\Bundle\\ImapBundle\\OroImapBundle', 'OroImportExportBundle' => 'Oro\\Bundle\\ImportExportBundle\\OroImportExportBundle', 'OroInstallerBundle' => 'Oro\\Bundle\\InstallerBundle\\OroInstallerBundle', 'OroIntegrationBundle' => 'Oro\\Bundle\\IntegrationBundle\\OroIntegrationBundle', 'OroLocaleBundle' => 'Oro\\Bundle\\LocaleBundle\\OroLocaleBundle', 'OroMeasureBundle' => 'Oro\\Bundle\\MeasureBundle\\OroMeasureBundle', 'OroNotificationBundle' => 'Oro\\Bundle\\NotificationBundle\\OroNotificationBundle', 'OroOrganizationBundle' => 'Oro\\Bundle\\OrganizationBundle\\OroOrganizationBundle', 'OroPlatformBundle' => 'Oro\\Bundle\\PlatformBundle\\OroPlatformBundle', 'OroQueryDesignerBundle' => 'Oro\\Bundle\\QueryDesignerBundle\\OroQueryDesignerBundle', 'OroReportBundle' => 'Oro\\Bundle\\ReportBundle\\OroReportBundle', 'OroRequireJSBundle' => 'Oro\\Bundle\\RequireJSBundle\\OroRequireJSBundle', 'OroSearchBundle' => 'Oro\\Bundle\\SearchBundle\\OroSearchBundle', 'OroSegmentationTreeBundle' => 'Oro\\Bundle\\SegmentationTreeBundle\\OroSegmentationTreeBundle', 'OroSidebarBundle' => 'Oro\\Bundle\\SidebarBundle\\OroSidebarBundle', 'OroSoapBundle' => 'Oro\\Bundle\\SoapBundle\\OroSoapBundle', 'OroSyncBundle' => 'Oro\\Bundle\\SyncBundle\\OroSyncBundle', 'OroTagBundle' => 'Oro\\Bundle\\TagBundle\\OroTagBundle', 'OroThemeBundle' => 'Oro\\Bundle\\ThemeBundle\\OroThemeBundle', 'OroTranslationBundle' => 'Oro\\Bundle\\TranslationBundle\\OroTranslationBundle', 'OroUserBundle' => 'Oro\\Bundle\\UserBundle\\OroUserBundle', 'OroWindowsBundle' => 'Oro\\Bundle\\WindowsBundle\\OroWindowsBundle', 'OroWorkflowBundle' => 'Oro\\Bundle\\WorkflowBundle\\OroWorkflowBundle', 'SyliusFlowBundle' => 'Sylius\\Bundle\\FlowBundle\\SyliusFlowBundle', 'OroNavigationBundle' => 'Oro\\Bundle\\NavigationBundle\\OroNavigationBundle', 'WebProfilerBundle' => 'Symfony\\Bundle\\WebProfilerBundle\\WebProfilerBundle', 'SensioDistributionBundle' => 'Sensio\\Bundle\\DistributionBundle\\SensioDistributionBundle', 'SensioGeneratorBundle' => 'Sensio\\Bundle\\GeneratorBundle\\SensioGeneratorBundle')));

        return $instance;
    }

    /**
     * Gets the 'oro_security.acl.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SecurityBundle\Acl\Persistence\AclManager A Oro\Bundle\SecurityBundle\Acl\Persistence\AclManager instance.
     */
    protected function getOroSecurity_Acl_ManagerService()
    {
        return $this->services['oro_security.acl.manager'] = new \Oro\Bundle\SecurityBundle\Acl\Persistence\AclManager($this->get('oro_security.acl.object_identity_factory'), $this->get('oro_security.acl.extension_selector'), $this->get('security.acl.provider', ContainerInterface::NULL_ON_INVALID_REFERENCE), new \Oro\Bundle\SecurityBundle\Acl\Persistence\AceManipulationHelper());
    }

    /**
     * Gets the 'oro_security.acl.object_identity_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SecurityBundle\Acl\Domain\ObjectIdentityFactory A Oro\Bundle\SecurityBundle\Acl\Domain\ObjectIdentityFactory instance.
     */
    protected function getOroSecurity_Acl_ObjectIdentityFactoryService()
    {
        return $this->services['oro_security.acl.object_identity_factory'] = new \Oro\Bundle\SecurityBundle\Acl\Domain\ObjectIdentityFactory($this->get('oro_security.acl.extension_selector'));
    }

    /**
     * Gets the 'oro_security.acl.privilege_repository' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SecurityBundle\Acl\Persistence\AclPrivilegeRepository A Oro\Bundle\SecurityBundle\Acl\Persistence\AclPrivilegeRepository instance.
     */
    protected function getOroSecurity_Acl_PrivilegeRepositoryService()
    {
        return $this->services['oro_security.acl.privilege_repository'] = new \Oro\Bundle\SecurityBundle\Acl\Persistence\AclPrivilegeRepository($this->get('oro_security.acl.manager'), $this->get('translator.default'));
    }

    /**
     * Gets the 'oro_security.acl.sid_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SecurityBundle\Acl\Persistence\AclSidManager A Oro\Bundle\SecurityBundle\Acl\Persistence\AclSidManager instance.
     */
    protected function getOroSecurity_Acl_SidManagerService()
    {
        return $this->services['oro_security.acl.sid_manager'] = new \Oro\Bundle\SecurityBundle\Acl\Persistence\AclSidManager($this->get('security.acl.provider', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'oro_security.acl.voter_link' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink A Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink instance.
     */
    protected function getOroSecurity_Acl_VoterLinkService()
    {
        return $this->services['oro_security.acl.voter_link'] = new \Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink($this, 'security.acl.voter.basic_permissions', true);
    }

    /**
     * Gets the 'oro_security.acl_helper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SecurityBundle\ORM\Walker\AclHelper A Oro\Bundle\SecurityBundle\ORM\Walker\AclHelper instance.
     */
    protected function getOroSecurity_AclHelperService()
    {
        return $this->services['oro_security.acl_helper'] = new \Oro\Bundle\SecurityBundle\ORM\Walker\AclHelper(new \Oro\Bundle\SecurityBundle\ORM\Walker\OwnershipConditionDataBuilder($this->get('oro_entity_config.link.security_context'), $this->get('oro_security.acl.object_id_accessor'), $this->get('oro_security.entity_security_metadata_provider'), $this->get('oro_security.owner.ownership_metadata_provider'), $this->get('oro_security.ownership_tree_provider'), $this->get('security.acl.voter.basic_permissions', ContainerInterface::NULL_ON_INVALID_REFERENCE)));
    }

    /**
     * Gets the 'oro_security.encoder.mcrypt' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SecurityBundle\Encoder\Mcrypt A Oro\Bundle\SecurityBundle\Encoder\Mcrypt instance.
     */
    protected function getOroSecurity_Encoder_McryptService()
    {
        return $this->services['oro_security.encoder.mcrypt'] = new \Oro\Bundle\SecurityBundle\Encoder\Mcrypt('ThisTokenIsNotSoSecretChangeIt');
    }

    /**
     * Gets the 'oro_security.entity_security_config_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SecurityBundle\EventListener\EntitySecurityMetadataConfigSubscriber A Oro\Bundle\SecurityBundle\EventListener\EntitySecurityMetadataConfigSubscriber instance.
     */
    protected function getOroSecurity_EntitySecurityConfigSubscriberService()
    {
        return $this->services['oro_security.entity_security_config_subscriber'] = new \Oro\Bundle\SecurityBundle\EventListener\EntitySecurityMetadataConfigSubscriber($this->get('oro_security.entity_security_metadata_provider'));
    }

    /**
     * Gets the 'oro_security.form.type.object_label_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SecurityBundle\Form\Type\ObjectLabelType A Oro\Bundle\SecurityBundle\Form\Type\ObjectLabelType instance.
     */
    protected function getOroSecurity_Form_Type_ObjectLabelTypeService()
    {
        return $this->services['oro_security.form.type.object_label_type'] = new \Oro\Bundle\SecurityBundle\Form\Type\ObjectLabelType();
    }

    /**
     * Gets the 'oro_security.form.type.oro_acl_access_level_selector' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SecurityBundle\Form\Type\AclAccessLevelSelectorType A Oro\Bundle\SecurityBundle\Form\Type\AclAccessLevelSelectorType instance.
     */
    protected function getOroSecurity_Form_Type_OroAclAccessLevelSelectorService()
    {
        return $this->services['oro_security.form.type.oro_acl_access_level_selector'] = new \Oro\Bundle\SecurityBundle\Form\Type\AclAccessLevelSelectorType();
    }

    /**
     * Gets the 'oro_security.link.ownership_tree_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink A Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink instance.
     */
    protected function getOroSecurity_Link_OwnershipTreeProviderService()
    {
        return $this->services['oro_security.link.ownership_tree_provider'] = new \Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink($this, 'oro_security.ownership_tree_provider', false);
    }

    /**
     * Gets the 'oro_security.link.sid_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink A Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink instance.
     */
    protected function getOroSecurity_Link_SidManagerService()
    {
        return $this->services['oro_security.link.sid_manager'] = new \Oro\Bundle\EntityConfigBundle\DependencyInjection\Utils\ServiceLink($this, 'oro_security.acl.sid_manager', false);
    }

    /**
     * Gets the 'oro_security.listener.controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SecurityBundle\EventListener\ControllerListener A Oro\Bundle\SecurityBundle\EventListener\ControllerListener instance.
     */
    protected function getOroSecurity_Listener_ControllerService()
    {
        return $this->services['oro_security.listener.controller'] = new \Oro\Bundle\SecurityBundle\EventListener\ControllerListener($this->get('oro_security.security_facade'), $this->get('monolog.logger.security'));
    }

    /**
     * Gets the 'oro_security.owner.entity_owner_accessor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SecurityBundle\Owner\EntityOwnerAccessor A Oro\Bundle\SecurityBundle\Owner\EntityOwnerAccessor instance.
     */
    protected function getOroSecurity_Owner_EntityOwnerAccessorService()
    {
        return $this->services['oro_security.owner.entity_owner_accessor'] = new \Oro\Bundle\SecurityBundle\Owner\EntityOwnerAccessor($this->get('oro_entity.orm.entity_class_accessor'), $this->get('oro_security.owner.ownership_metadata_provider'));
    }

    /**
     * Gets the 'oro_security.owner.ownership_config_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SecurityBundle\EventListener\OwnershipConfigSubscriber A Oro\Bundle\SecurityBundle\EventListener\OwnershipConfigSubscriber instance.
     */
    protected function getOroSecurity_Owner_OwnershipConfigSubscriberService()
    {
        return $this->services['oro_security.owner.ownership_config_subscriber'] = new \Oro\Bundle\SecurityBundle\EventListener\OwnershipConfigSubscriber($this->get('oro_security.owner.ownership_metadata_provider'));
    }

    /**
     * Gets the 'oro_security.owner.ownership_metadata_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SecurityBundle\Owner\Metadata\OwnershipMetadataProvider A Oro\Bundle\SecurityBundle\Owner\Metadata\OwnershipMetadataProvider instance.
     */
    protected function getOroSecurity_Owner_OwnershipMetadataProviderService()
    {
        $a = new \Oro\Bundle\SecurityBundle\Cache\FilesystemCache('/var/www/orocrm-platform/app/cache/de_/oro_data');
        $a->setNamespace('oro_acl_entity_ownership.cache');

        return $this->services['oro_security.owner.ownership_metadata_provider'] = new \Oro\Bundle\SecurityBundle\Owner\Metadata\OwnershipMetadataProvider(array('organization' => 'OroOrganizationBundle:Organization', 'business_unit' => 'OroOrganizationBundle:BusinessUnit', 'user' => 'OroUserBundle:User'), $this->get('oro_entity_config.provider.ownership'), $this->get('oro_entity.orm.entity_class_resolver'), $a);
    }

    /**
     * Gets the 'oro_security.ownership_tree_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SecurityBundle\Owner\OwnerTreeProvider A Oro\Bundle\SecurityBundle\Owner\OwnerTreeProvider instance.
     */
    protected function getOroSecurity_OwnershipTreeProviderService()
    {
        $a = new \Oro\Bundle\SecurityBundle\Cache\FilesystemCache('/var/www/orocrm-platform/app/cache/de_/oro_data');
        $a->setNamespace('oro_acl_owner_tree.cache');

        return $this->services['oro_security.ownership_tree_provider'] = new \Oro\Bundle\SecurityBundle\Owner\OwnerTreeProvider($this->get('doctrine.orm.default_entity_manager'), $a);
    }

    /**
     * Gets the 'oro_security.ownership_tree_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SecurityBundle\EventListener\OwnerTreeListener A Oro\Bundle\SecurityBundle\EventListener\OwnerTreeListener instance.
     */
    protected function getOroSecurity_OwnershipTreeSubscriberService()
    {
        return $this->services['oro_security.ownership_tree_subscriber'] = new \Oro\Bundle\SecurityBundle\EventListener\OwnerTreeListener($this->get('oro_security.link.ownership_tree_provider'));
    }

    /**
     * Gets the 'oro_security.security_facade' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SecurityBundle\SecurityFacade A Oro\Bundle\SecurityBundle\SecurityFacade instance.
     */
    protected function getOroSecurity_SecurityFacadeService()
    {
        return $this->services['oro_security.security_facade'] = new \Oro\Bundle\SecurityBundle\SecurityFacade($this->get('security.context'), $this->get('oro_security.acl.annotation_provider'), $this->get('oro_security.acl.object_identity_factory'), $this->get('monolog.logger.security'));
    }

    /**
     * Gets the 'oro_security.twig.security_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SecurityBundle\Twig\OroSecurityExtension A Oro\Bundle\SecurityBundle\Twig\OroSecurityExtension instance.
     */
    protected function getOroSecurity_Twig_SecurityExtensionService()
    {
        return $this->services['oro_security.twig.security_extension'] = new \Oro\Bundle\SecurityBundle\Twig\OroSecurityExtension($this->get('oro_security.security_facade'));
    }

    /**
     * Gets the 'oro_sidebar.twig.extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SidebarBundle\Twig\SidebarExtension A Oro\Bundle\SidebarBundle\Twig\SidebarExtension instance.
     */
    protected function getOroSidebar_Twig_ExtensionService()
    {
        return $this->services['oro_sidebar.twig.extension'] = new \Oro\Bundle\SidebarBundle\Twig\SidebarExtension($this->get('oro_sidebar.widget_definition.registry'), $this);
    }

    /**
     * Gets the 'oro_sidebar.widget_definition.registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SidebarBundle\Model\WidgetDefinitionRegistry A Oro\Bundle\SidebarBundle\Model\WidgetDefinitionRegistry instance.
     */
    protected function getOroSidebar_WidgetDefinition_RegistryService()
    {
        return $this->services['oro_sidebar.widget_definition.registry'] = new \Oro\Bundle\SidebarBundle\Model\WidgetDefinitionRegistry(array('hello_world' => array('title' => 'Welcome Oro', 'icon' => 'bundles/orosidebar/sidebar_widgets/hello_world/img/icon.ico', 'module' => 'oro/sidebar/widget/hello-world', 'placement' => 'both', 'settings' => array('content' => 'Welcome to OroCRM!<br/>OroCRM is an easy-to-use, open source CRM with built-in marketing tools for your ecommerce business. learn more at <a href="http://orocrm.com">orocrm.com</a>'))));
    }

    /**
     * Gets the 'oro_tag.autocomplete.tag.search_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\FormBundle\Autocomplete\SearchHandler A Oro\Bundle\FormBundle\Autocomplete\SearchHandler instance.
     */
    protected function getOroTag_Autocomplete_Tag_SearchHandlerService()
    {
        $this->services['oro_tag.autocomplete.tag.search_handler'] = $instance = new \Oro\Bundle\FormBundle\Autocomplete\SearchHandler('Oro\\Bundle\\TagBundle\\Entity\\Tag', array(0 => 'name'));

        $instance->initSearchIndexer($this->get('oro_search.index'), array('Oro\\Bundle\\EmailBundle\\Entity\\Email' => array('alias' => 'oro_email', 'label' => 'Emails', 'search_template' => 'OroEmailBundle:Email:searchResult.html.twig', 'route' => array('name' => 'oro_email_view', 'parameters' => array('id' => 'id')), 'title_fields' => array(0 => 'subject'), 'fields' => array(0 => array('name' => 'subject', 'target_type' => 'text', 'target_fields' => array(0 => 'subject')))), 'Oro\\Bundle\\TagBundle\\Entity\\Tag' => array('alias' => 'oro_tag', 'title_fields' => array(0 => 'name'), 'search_template' => 'OroTagBundle:Search:result.html.twig', 'route' => array('name' => 'oro_tag_search', 'parameters' => array('id' => 'id')), 'fields' => array(0 => array('name' => 'name', 'target_type' => 'text', 'target_fields' => array(0 => 'name')))), 'Oro\\Bundle\\UserBundle\\Entity\\User' => array('alias' => 'oro_user', 'title_fields' => array(0 => 'username'), 'route' => array('name' => 'oro_user_view', 'parameters' => array('id' => 'id')), 'search_template' => 'OroUserBundle:Search:result.html.twig', 'fields' => array(0 => array('name' => 'username', 'target_type' => 'text', 'target_fields' => array(0 => 'username')), 1 => array('name' => 'email', 'target_type' => 'text', 'target_fields' => array(0 => 'email')), 2 => array('name' => 'namePrefix', 'target_type' => 'text', 'target_fields' => array(0 => 'namePrefix')), 3 => array('name' => 'firstName', 'target_type' => 'text', 'target_fields' => array(0 => 'firstName')), 4 => array('name' => 'middleName', 'target_type' => 'text', 'target_fields' => array(0 => 'middleName')), 5 => array('name' => 'lastName', 'target_type' => 'text', 'target_fields' => array(0 => 'lastName')), 6 => array('name' => 'nameSuffix', 'target_type' => 'text', 'target_fields' => array(0 => 'nameSuffix')), 7 => array('name' => 'birthday', 'target_type' => 'birthday', 'target_fields' => array(0 => 'birthday'))))));
        $instance->initDoctrinePropertiesByManagerRegistry($this->get('doctrine'));

        return $instance;
    }

    /**
     * Gets the 'oro_tag.docrine.event.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\TagBundle\EventListener\TagListener A Oro\Bundle\TagBundle\EventListener\TagListener instance.
     */
    protected function getOroTag_Docrine_Event_ListenerService()
    {
        $this->services['oro_tag.docrine.event.listener'] = $instance = new \Oro\Bundle\TagBundle\EventListener\TagListener();

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'oro_tag.event_listener.search_results_grid_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\TagBundle\EventListener\TagSearchResultsGridListener A Oro\Bundle\TagBundle\EventListener\TagSearchResultsGridListener instance.
     */
    protected function getOroTag_EventListener_SearchResultsGridListenerService()
    {
        return $this->services['oro_tag.event_listener.search_results_grid_listener'] = new \Oro\Bundle\TagBundle\EventListener\TagSearchResultsGridListener($this->get('oro_datagrid.datagrid.request_params'));
    }

    /**
     * Gets the 'oro_tag.form.handler.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\TagBundle\Form\Handler\TagHandler A Oro\Bundle\TagBundle\Form\Handler\TagHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_tag.form.handler.api' service is requested while the 'request' scope is not active
     */
    protected function getOroTag_Form_Handler_ApiService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_tag.form.handler.api', 'request');
        }

        return $this->services['oro_tag.form.handler.api'] = $this->scopedServices['request']['oro_tag.form.handler.api'] = new \Oro\Bundle\TagBundle\Form\Handler\TagHandler($this->get('oro_tag.form.type.tag.api'), $this->get('request'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_tag.form.handler.tag' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\TagBundle\Form\Handler\TagHandler A Oro\Bundle\TagBundle\Form\Handler\TagHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_tag.form.handler.tag' service is requested while the 'request' scope is not active
     */
    protected function getOroTag_Form_Handler_TagService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_tag.form.handler.tag', 'request');
        }

        return $this->services['oro_tag.form.handler.tag'] = $this->scopedServices['request']['oro_tag.form.handler.tag'] = new \Oro\Bundle\TagBundle\Form\Handler\TagHandler($this->get('oro_tag.form.tag'), $this->get('request'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_tag.form.subscriber.tag_select' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\TagBundle\Form\EventSubscriber\TagSubscriber A Oro\Bundle\TagBundle\Form\EventSubscriber\TagSubscriber instance.
     */
    protected function getOroTag_Form_Subscriber_TagSelectService()
    {
        return $this->services['oro_tag.form.subscriber.tag_select'] = new \Oro\Bundle\TagBundle\Form\EventSubscriber\TagSubscriber($this->get('oro_tag.tag.manager'), $this->get('oro_tag.form.transformer.tag_select'));
    }

    /**
     * Gets the 'oro_tag.form.tag' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroTag_Form_TagService()
    {
        return $this->services['oro_tag.form.tag'] = $this->get('form.factory')->createNamed('oro_tag_tag_form', 'oro_tag_tag');
    }

    /**
     * Gets the 'oro_tag.form.tag.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroTag_Form_Tag_ApiService()
    {
        return $this->services['oro_tag.form.tag.api'] = $this->get('form.factory')->createNamed('oro_tag_tag_form', 'oro_tag_tag', NULL);
    }

    /**
     * Gets the 'oro_tag.form.transformer.tag_select' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\TagBundle\Form\Transformer\TagTransformer A Oro\Bundle\TagBundle\Form\Transformer\TagTransformer instance.
     */
    protected function getOroTag_Form_Transformer_TagSelectService()
    {
        return $this->services['oro_tag.form.transformer.tag_select'] = new \Oro\Bundle\TagBundle\Form\Transformer\TagTransformer($this->get('oro_tag.tag.manager'));
    }

    /**
     * Gets the 'oro_tag.form.type.tag' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\TagBundle\Form\Type\TagType A Oro\Bundle\TagBundle\Form\Type\TagType instance.
     */
    protected function getOroTag_Form_Type_TagService()
    {
        return $this->services['oro_tag.form.type.tag'] = new \Oro\Bundle\TagBundle\Form\Type\TagType();
    }

    /**
     * Gets the 'oro_tag.form.type.tag.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\TagBundle\Form\Type\TagApiType A Oro\Bundle\TagBundle\Form\Type\TagApiType instance.
     */
    protected function getOroTag_Form_Type_Tag_ApiService()
    {
        return $this->services['oro_tag.form.type.tag.api'] = new \Oro\Bundle\TagBundle\Form\Type\TagApiType();
    }

    /**
     * Gets the 'oro_tag.form.type.tag_autocomplete' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\TagBundle\Form\Type\TagAutocompleteType A Oro\Bundle\TagBundle\Form\Type\TagAutocompleteType instance.
     */
    protected function getOroTag_Form_Type_TagAutocompleteService()
    {
        return $this->services['oro_tag.form.type.tag_autocomplete'] = new \Oro\Bundle\TagBundle\Form\Type\TagAutocompleteType();
    }

    /**
     * Gets the 'oro_tag.form.type.tag_select' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\TagBundle\Form\Type\TagSelectType A Oro\Bundle\TagBundle\Form\Type\TagSelectType instance.
     */
    protected function getOroTag_Form_Type_TagSelectService()
    {
        return $this->services['oro_tag.form.type.tag_select'] = new \Oro\Bundle\TagBundle\Form\Type\TagSelectType($this->get('oro_tag.form.subscriber.tag_select'), $this->get('oro_tag.form.transformer.tag_select'));
    }

    /**
     * Gets the 'oro_tag.provider.search_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\TagBundle\Provider\SearchProvider A Oro\Bundle\TagBundle\Provider\SearchProvider instance.
     */
    protected function getOroTag_Provider_SearchProviderService()
    {
        return $this->services['oro_tag.provider.search_provider'] = new \Oro\Bundle\TagBundle\Provider\SearchProvider($this->get('doctrine.orm.default_entity_manager'), $this->get('oro_search.mapper'));
    }

    /**
     * Gets the 'oro_tag.tag.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\TagBundle\Entity\TagManager A Oro\Bundle\TagBundle\Entity\TagManager instance.
     */
    protected function getOroTag_Tag_ManagerService()
    {
        return $this->services['oro_tag.tag.manager'] = new \Oro\Bundle\TagBundle\Entity\TagManager($this->get('doctrine.orm.default_entity_manager'), 'Oro\\Bundle\\TagBundle\\Entity\\Tag', 'Oro\\Bundle\\TagBundle\\Entity\\Tagging', $this->get('oro_search.mapper'), $this->get('security.context'), $this->get('oro_security.security_facade'), $this->get('router'));
    }

    /**
     * Gets the 'oro_tag.tag.manager.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager A Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager instance.
     */
    protected function getOroTag_Tag_Manager_ApiService()
    {
        return $this->services['oro_tag.tag.manager.api'] = new \Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager('Oro\\Bundle\\TagBundle\\Entity\\Tag', $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_tag.twig.tag.extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\TagBundle\Twig\TagExtension A Oro\Bundle\TagBundle\Twig\TagExtension instance.
     */
    protected function getOroTag_Twig_Tag_ExtensionService()
    {
        return $this->services['oro_tag.twig.tag.extension'] = new \Oro\Bundle\TagBundle\Twig\TagExtension($this->get('oro_tag.tag.manager'));
    }

    /**
     * Gets the 'oro_theme.event_listener.load_css' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ThemeBundle\EventListener\LoadCssEventListener A Oro\Bundle\ThemeBundle\EventListener\LoadCssEventListener instance.
     */
    protected function getOroTheme_EventListener_LoadCssService()
    {
        return $this->services['oro_theme.event_listener.load_css'] = new \Oro\Bundle\ThemeBundle\EventListener\LoadCssEventListener($this->get('oro_theme.registry'));
    }

    /**
     * Gets the 'oro_theme.registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ThemeBundle\Model\ThemeRegistry A Oro\Bundle\ThemeBundle\Model\ThemeRegistry instance.
     */
    protected function getOroTheme_RegistryService()
    {
        $this->services['oro_theme.registry'] = $instance = new \Oro\Bundle\ThemeBundle\Model\ThemeRegistry(array('demo' => array('label' => 'Demo Theme', 'icon' => 'bundles/oroui/themes/demo/images/favicon.ico', 'styles' => array(0 => 'bundles/oroui/themes/demo/css/less/main.less', 1 => 'bundles/oroui/themes/demo/css/style.css')), 'oro' => array('label' => 'Oro Theme', 'icon' => 'bundles/oroui/themes/oro/images/favicon.ico', 'styles' => array(0 => 'bundles/oroui/themes/oro/css/style.css'))));

        $instance->setActiveTheme('oro');

        return $instance;
    }

    /**
     * Gets the 'oro_theme.twig.extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\ThemeBundle\Twig\ThemeExtension A Oro\Bundle\ThemeBundle\Twig\ThemeExtension instance.
     */
    protected function getOroTheme_Twig_ExtensionService()
    {
        return $this->services['oro_theme.twig.extension'] = new \Oro\Bundle\ThemeBundle\Twig\ThemeExtension($this->get('oro_theme.registry'));
    }

    /**
     * Gets the 'oro_translation.controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\TranslationBundle\Controller\Controller A Oro\Bundle\TranslationBundle\Controller\Controller instance.
     */
    protected function getOroTranslation_ControllerService()
    {
        return $this->services['oro_translation.controller'] = new \Oro\Bundle\TranslationBundle\Controller\Controller($this->get('translator.default'), $this->get('templating'), 'OroTranslationBundle:Translation:translation.js.twig', array('domains' => array(0 => 'jsmessages', 1 => 'validators'), 'debug' => true));
    }

    /**
     * Gets the 'oro_translation.database_translation.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\TranslationBundle\Translation\OrmTranslationLoader A Oro\Bundle\TranslationBundle\Translation\OrmTranslationLoader instance.
     */
    protected function getOroTranslation_DatabaseTranslation_LoaderService()
    {
        return $this->services['oro_translation.database_translation.loader'] = new \Oro\Bundle\TranslationBundle\Translation\OrmTranslationLoader($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_translation.database_translation.metadata.cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\TranslationBundle\Translation\OrmTranslationMetadataCache A Oro\Bundle\TranslationBundle\Translation\OrmTranslationMetadataCache instance.
     */
    protected function getOroTranslation_DatabaseTranslation_Metadata_CacheService()
    {
        $a = new \Oro\Bundle\SecurityBundle\Cache\FilesystemCache('/var/www/orocrm-platform/app/cache/de_/oro_data');
        $a->setNamespace('oro_database_translation_metadata.cache');

        return $this->services['oro_translation.database_translation.metadata.cache'] = new \Oro\Bundle\TranslationBundle\Translation\OrmTranslationMetadataCache($a);
    }

    /**
     * Gets the 'oro_translation.extractor.php_code_extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\TranslationBundle\Extractor\PhpCodeExtractor A Oro\Bundle\TranslationBundle\Extractor\PhpCodeExtractor instance.
     */
    protected function getOroTranslation_Extractor_PhpCodeExtractorService()
    {
        return $this->services['oro_translation.extractor.php_code_extractor'] = new \Oro\Bundle\TranslationBundle\Extractor\PhpCodeExtractor($this);
    }

    /**
     * Gets the 'oro_translation.form.type.jqueryselect2_translatable_entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type A Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type instance.
     */
    protected function getOroTranslation_Form_Type_Jqueryselect2TranslatableEntityService()
    {
        return $this->services['oro_translation.form.type.jqueryselect2_translatable_entity'] = new \Genemu\Bundle\FormBundle\Form\JQuery\Type\Select2Type('translatable_entity');
    }

    /**
     * Gets the 'oro_translation.form.type.translatable_entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\TranslationBundle\Form\Type\TranslatableEntityType A Oro\Bundle\TranslationBundle\Form\Type\TranslatableEntityType instance.
     */
    protected function getOroTranslation_Form_Type_TranslatableEntityService()
    {
        return $this->services['oro_translation.form.type.translatable_entity'] = new \Oro\Bundle\TranslationBundle\Form\Type\TranslatableEntityType($this->get('doctrine'));
    }

    /**
     * Gets the 'oro_translation.listener.request' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\TranslationBundle\EventListener\RequestListener A Oro\Bundle\TranslationBundle\EventListener\RequestListener instance.
     */
    protected function getOroTranslation_Listener_RequestService()
    {
        return $this->services['oro_translation.listener.request'] = new \Oro\Bundle\TranslationBundle\EventListener\RequestListener($this->get('translator.default'), $this->get('oro_translation.database_translation.metadata.cache'));
    }

    /**
     * Gets the 'oro_ui.format_converter.date_time.jquery_ui' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UIBundle\Converter\JqueryUiDateTimeFormatConverter A Oro\Bundle\UIBundle\Converter\JqueryUiDateTimeFormatConverter instance.
     */
    protected function getOroUi_FormatConverter_DateTime_JqueryUiService()
    {
        return $this->services['oro_ui.format_converter.date_time.jquery_ui'] = new \Oro\Bundle\UIBundle\Converter\JqueryUiDateTimeFormatConverter($this->get('oro_locale.formatter.date_time'));
    }

    /**
     * Gets the 'oro_ui.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UIBundle\Route\Router A Oro\Bundle\UIBundle\Route\Router instance.
     * 
     * @throws InactiveScopeException when the 'oro_ui.router' service is requested while the 'request' scope is not active
     */
    protected function getOroUi_RouterService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_ui.router', 'request');
        }

        return $this->services['oro_ui.router'] = $this->scopedServices['request']['oro_ui.router'] = new \Oro\Bundle\UIBundle\Route\Router($this->get('request'), $this->get('router'));
    }

    /**
     * Gets the 'oro_ui.twig.ceil_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UIBundle\Twig\CeilExtension A Oro\Bundle\UIBundle\Twig\CeilExtension instance.
     */
    protected function getOroUi_Twig_CeilExtensionService()
    {
        return $this->services['oro_ui.twig.ceil_extension'] = new \Oro\Bundle\UIBundle\Twig\CeilExtension();
    }

    /**
     * Gets the 'oro_ui.twig.date_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UIBundle\Twig\DateExtension A Oro\Bundle\UIBundle\Twig\DateExtension instance.
     */
    protected function getOroUi_Twig_DateExtensionService()
    {
        return $this->services['oro_ui.twig.date_extension'] = new \Oro\Bundle\UIBundle\Twig\DateExtension($this->get('translator.default'));
    }

    /**
     * Gets the 'oro_ui.twig.form_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UIBundle\Twig\FormExtension A Oro\Bundle\UIBundle\Twig\FormExtension instance.
     */
    protected function getOroUi_Twig_FormExtensionService()
    {
        return $this->services['oro_ui.twig.form_extension'] = new \Oro\Bundle\UIBundle\Twig\FormExtension($this->get('event_dispatcher'));
    }

    /**
     * Gets the 'oro_ui.twig.mobile_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UIBundle\Twig\MobileExtension A Oro\Bundle\UIBundle\Twig\MobileExtension instance.
     */
    protected function getOroUi_Twig_MobileExtensionService()
    {
        return $this->services['oro_ui.twig.mobile_extension'] = new \Oro\Bundle\UIBundle\Twig\MobileExtension($this);
    }

    /**
     * Gets the 'oro_ui.twig.skype_button_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UIBundle\Twig\SkypeButtonExtension A Oro\Bundle\UIBundle\Twig\SkypeButtonExtension instance.
     */
    protected function getOroUi_Twig_SkypeButtonExtensionService()
    {
        return $this->services['oro_ui.twig.skype_button_extension'] = new \Oro\Bundle\UIBundle\Twig\SkypeButtonExtension();
    }

    /**
     * Gets the 'oro_ui.twig.ui_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UIBundle\Twig\UiExtension A Oro\Bundle\UIBundle\Twig\UiExtension instance.
     */
    protected function getOroUi_Twig_UiExtensionService()
    {
        return $this->services['oro_ui.twig.ui_extension'] = new \Oro\Bundle\UIBundle\Twig\UiExtension(array('header_logo' => array('label' => 'Header Logo', 'items' => array(0 => array('order' => 100, 'template' => 'OroUIBundle:Default:logo.html.twig', 'name' => 'logo'))), 'user_menu' => array('label' => 'Profile menu', 'items' => array(0 => array('order' => 100, 'template' => 'OroUserBundle:Menu:menuProfile.html.twig', 'name' => 'menu_user'), 1 => array('order' => 200, 'template' => 'OroUIBundle:Default:help.html.twig', 'name' => 'help'))), 'form_buttons' => array('label' => 'Profile menu', 'items' => array(0 => array('order' => 100, 'template' => 'OroUIBundle:Form:buttons.html.twig', 'name' => 'add_update_delete'))), 'head_style' => array('label' => 'Head styles', 'items' => array(0 => array('order' => 100, 'template' => 'OroAsseticBundle:Assets:oro_css.html.twig', 'name' => 'assets_css'))), 'head_script' => array('label' => 'Head scripts'), 'requirejs_config_extend' => array('items' => array(0 => array('order' => 10, 'template' => 'OroUIBundle::requirejs.config.js.twig', 'name' => 'ui_requirejs_config'), 1 => array('order' => 100, 'template' => 'OroNavigationBundle:Js:requirejs.config.js.twig', 'name' => 'routing_requirejs_config'), 2 => array('order' => 100, 'template' => 'OroTranslationBundle::requirejs.config.js.twig', 'name' => 'translation_requirejs_config')), 'lable' => 'RequireJS Configuration Run Time Extend'), 'change_history_block' => array('label' => 'Change history block', 'items' => array(0 => array('template' => 'OroDataAuditBundle::change_history_link.html.twig', 'name' => 'change_history_link'))), 'scripts_before' => array('items' => array(0 => array('order' => 20, 'template' => 'OroFilterBundle:Filter:container.js.twig', 'name' => 'filter_container'), 1 => array('order' => 20, 'template' => 'OroDataGridBundle:js:toolbar.html.twig', 'name' => 'template_datagrid_toolbar'), 2 => array('order' => 30, 'template' => 'OroDataGridBundle:js:pagination.html.twig', 'name' => 'template_datagrid_toolbar_pagination'), 3 => array('order' => 40, 'template' => 'OroDataGridBundle:js:pagination-input.html.twig', 'name' => 'template_datagrid_toolbar_pagination_input'), 4 => array('order' => 50, 'template' => 'OroDataGridBundle:js:page-size.html.twig', 'name' => 'template_datagrid_toolbar_page_size'), 5 => array('order' => 100, 'template' => 'OroNavigationBundle:Js:dot.menu.js.twig', 'name' => 'dot_menu_js'), 6 => array('order' => 200, 'template' => 'OroNavigationBundle:Js:pinbar.js.twig', 'name' => 'pinbar_js')), 'label' => 'Scripts Before'), 'scripts_after' => array('items' => array(0 => array('order' => 200, 'template' => 'OroWindowsBundle:Include:javascript.html.twig', 'name' => 'window_bundle_js'), 1 => array('order' => 220, 'template' => 'OroSyncBundle::maintenance_js.html.twig', 'name' => 'maintenance_js'), 2 => array('order' => 310, 'template' => 'OroSyncBundle::sync_js.html.twig', 'name' => 'sync_js'), 3 => array('order' => 500, 'template' => 'OroLocaleBundle::locale_settings.html.twig', 'name' => 'locale_settings')), 'label' => 'Scripts After'), 'footer_inner' => array('items' => array(0 => array('order' => 100, 'template' => 'OroPlatformBundle::application_version.html.twig', 'name' => 'application_version'))), 'navbar' => array('items' => array(0 => array('order' => 100, 'template' => 'OroNavigationBundle:Shortcut:shortcuts.html.twig', 'name' => 'shortcuts'), 1 => array('order' => 200, 'action' => 'OroSearchBundle:Search:searchBar', 'name' => 'search')), 'label' => 'Navigation Bar'), 'right_panel' => array('items' => array(0 => array('order' => 200, 'template' => 'OroSidebarBundle::sidebar.html.twig', 'name' => 'sidebar'))), 'left_panel' => array('items' => array(0 => array('order' => 200, 'template' => 'OroSidebarBundle::sidebar.html.twig', 'name' => 'sidebar'))), 'view_navButtons_before' => array('label' => 'Entity Workflow Buttons', 'items' => array(0 => array('order' => 100, 'template' => 'OroWorkflowBundle:Widget:entityButtons.html.twig', 'name' => 'workflow_buttons_entity'))), 'hash_nav' => array('label' => 'Hash Navigation', 'items' => array(0 => array('order' => 100, 'template' => 'OroNavigationBundle:HashNav:script.js.twig', 'name' => 'hashNavigation'))), 'application_menu' => array('label' => 'Application Menu', 'items' => array(0 => array('order' => 100, 'template' => 'OroNavigationBundle:ApplicationMenu:applicationMenu.html.twig', 'name' => 'application_menu'))), 'before_navigation' => array('label' => 'Top Navigation Before', 'items' => array(0 => array('order' => 100, 'template' => 'OroNavigationBundle:ApplicationMenu:dotsMenu.html.twig', 'name' => 'dots_menu'))), 'after_navigation' => array('label' => 'Top Navigation After'), 'pin_button' => array('label' => 'Pinbar buttons', 'items' => array(0 => array('order' => 100, 'template' => 'OroNavigationBundle:ApplicationMenu:pinButton.html.twig', 'name' => 'pin_button'))), 'breadcrumb' => array('label' => 'Breadcrumbs', 'items' => array(0 => array('order' => 100, 'template' => 'OroNavigationBundle:ApplicationMenu:breabcrumbs.html.twig', 'name' => 'breadcrumbs')))), 'block-wrap');
    }

    /**
     * Gets the 'oro_ui.twig.widget_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UIBundle\Twig\WidgetExtension A Oro\Bundle\UIBundle\Twig\WidgetExtension instance.
     */
    protected function getOroUi_Twig_WidgetExtensionService()
    {
        return $this->services['oro_ui.twig.widget_extension'] = new \Oro\Bundle\UIBundle\Twig\WidgetExtension();
    }

    /**
     * Gets the 'oro_ui.view.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UIBundle\EventListener\TemplateListener A Oro\Bundle\UIBundle\EventListener\TemplateListener instance.
     */
    protected function getOroUi_View_ListenerService()
    {
        return $this->services['oro_ui.view.listener'] = new \Oro\Bundle\UIBundle\EventListener\TemplateListener($this);
    }

    /**
     * Gets the 'oro_user.autocomplete.user.search_acl_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Autocomplete\UserAclHandler A Oro\Bundle\UserBundle\Autocomplete\UserAclHandler instance.
     */
    protected function getOroUser_Autocomplete_User_SearchAclHandlerService()
    {
        $this->services['oro_user.autocomplete.user.search_acl_handler'] = $instance = new \Oro\Bundle\UserBundle\Autocomplete\UserAclHandler($this->get('doctrine.orm.default_entity_manager'), $this->get('liip_imagine.cache.manager'), 'Oro\\Bundle\\UserBundle\\Entity\\User', array(0 => 'id', 1 => 'username', 2 => 'namePrefix', 3 => 'firstName', 4 => 'middleName', 5 => 'lastName', 6 => 'nameSuffix', 7 => 'email'), $this->get('oro_entity_config.link.security_context'), $this->get('oro_security.ownership_tree_provider'), $this->get('security.acl.voter.basic_permissions', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        $instance->setNameFormatter($this->get('oro_locale.formatter.name'));

        return $instance;
    }

    /**
     * Gets the 'oro_user.autocomplete.user.search_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Autocomplete\UserSearchHandler A Oro\Bundle\UserBundle\Autocomplete\UserSearchHandler instance.
     */
    protected function getOroUser_Autocomplete_User_SearchHandlerService()
    {
        $this->services['oro_user.autocomplete.user.search_handler'] = $instance = new \Oro\Bundle\UserBundle\Autocomplete\UserSearchHandler($this->get('liip_imagine.cache.manager'), 'Oro\\Bundle\\UserBundle\\Entity\\User', array(0 => 'username', 1 => 'namePrefix', 2 => 'firstName', 3 => 'middleName', 4 => 'lastName', 5 => 'nameSuffix', 6 => 'email'));

        $instance->initSearchIndexer($this->get('oro_search.index'), array('Oro\\Bundle\\EmailBundle\\Entity\\Email' => array('alias' => 'oro_email', 'label' => 'Emails', 'search_template' => 'OroEmailBundle:Email:searchResult.html.twig', 'route' => array('name' => 'oro_email_view', 'parameters' => array('id' => 'id')), 'title_fields' => array(0 => 'subject'), 'fields' => array(0 => array('name' => 'subject', 'target_type' => 'text', 'target_fields' => array(0 => 'subject')))), 'Oro\\Bundle\\TagBundle\\Entity\\Tag' => array('alias' => 'oro_tag', 'title_fields' => array(0 => 'name'), 'search_template' => 'OroTagBundle:Search:result.html.twig', 'route' => array('name' => 'oro_tag_search', 'parameters' => array('id' => 'id')), 'fields' => array(0 => array('name' => 'name', 'target_type' => 'text', 'target_fields' => array(0 => 'name')))), 'Oro\\Bundle\\UserBundle\\Entity\\User' => array('alias' => 'oro_user', 'title_fields' => array(0 => 'username'), 'route' => array('name' => 'oro_user_view', 'parameters' => array('id' => 'id')), 'search_template' => 'OroUserBundle:Search:result.html.twig', 'fields' => array(0 => array('name' => 'username', 'target_type' => 'text', 'target_fields' => array(0 => 'username')), 1 => array('name' => 'email', 'target_type' => 'text', 'target_fields' => array(0 => 'email')), 2 => array('name' => 'namePrefix', 'target_type' => 'text', 'target_fields' => array(0 => 'namePrefix')), 3 => array('name' => 'firstName', 'target_type' => 'text', 'target_fields' => array(0 => 'firstName')), 4 => array('name' => 'middleName', 'target_type' => 'text', 'target_fields' => array(0 => 'middleName')), 5 => array('name' => 'lastName', 'target_type' => 'text', 'target_fields' => array(0 => 'lastName')), 6 => array('name' => 'nameSuffix', 'target_type' => 'text', 'target_fields' => array(0 => 'nameSuffix')), 7 => array('name' => 'birthday', 'target_type' => 'birthday', 'target_fields' => array(0 => 'birthday'))))));
        $instance->initDoctrinePropertiesByManagerRegistry($this->get('doctrine'));
        $instance->setNameFormatter($this->get('oro_locale.formatter.name'));

        return $instance;
    }

    /**
     * Gets the 'oro_user.cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SecurityBundle\Cache\FilesystemCache A Oro\Bundle\SecurityBundle\Cache\FilesystemCache instance.
     */
    protected function getOroUser_CacheService()
    {
        $this->services['oro_user.cache'] = $instance = new \Oro\Bundle\SecurityBundle\Cache\FilesystemCache('/var/www/orocrm-platform/app/cache/de_/oro_data');

        $instance->setNamespace('oro_user.cache');

        return $instance;
    }

    /**
     * Gets the 'oro_user.change_password.subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Form\EventListener\ChangePasswordSubscriber A Oro\Bundle\UserBundle\Form\EventListener\ChangePasswordSubscriber instance.
     */
    protected function getOroUser_ChangePassword_SubscriberService()
    {
        return $this->services['oro_user.change_password.subscriber'] = new \Oro\Bundle\UserBundle\Form\EventListener\ChangePasswordSubscriber($this->get('form.factory'), $this->get('security.context'));
    }

    /**
     * Gets the 'oro_user.email.owner.provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Entity\Provider\EmailOwnerProvider A Oro\Bundle\UserBundle\Entity\Provider\EmailOwnerProvider instance.
     */
    protected function getOroUser_Email_Owner_ProviderService()
    {
        return $this->services['oro_user.email.owner.provider'] = new \Oro\Bundle\UserBundle\Entity\Provider\EmailOwnerProvider();
    }

    /**
     * Gets the 'oro_user.entity_with_image.subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Entity\EventListener\UploadedImageSubscriber A Oro\Bundle\UserBundle\Entity\EventListener\UploadedImageSubscriber instance.
     */
    protected function getOroUser_EntityWithImage_SubscriberService()
    {
        return $this->services['oro_user.entity_with_image.subscriber'] = new \Oro\Bundle\UserBundle\Entity\EventListener\UploadedImageSubscriber('/var/www/orocrm-platform/app');
    }

    /**
     * Gets the 'oro_user.event_listener.group_users_grid_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataGridBundle\EventListener\BaseOrmRelationDatagridListener A Oro\Bundle\DataGridBundle\EventListener\BaseOrmRelationDatagridListener instance.
     */
    protected function getOroUser_EventListener_GroupUsersGridListenerService()
    {
        return $this->services['oro_user.event_listener.group_users_grid_listener'] = new \Oro\Bundle\DataGridBundle\EventListener\BaseOrmRelationDatagridListener('group_id', $this->get('oro_datagrid.datagrid.request_params'));
    }

    /**
     * Gets the 'oro_user.event_listener.role_users_grid_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\DataGridBundle\EventListener\BaseOrmRelationDatagridListener A Oro\Bundle\DataGridBundle\EventListener\BaseOrmRelationDatagridListener instance.
     */
    protected function getOroUser_EventListener_RoleUsersGridListenerService()
    {
        return $this->services['oro_user.event_listener.role_users_grid_listener'] = new \Oro\Bundle\DataGridBundle\EventListener\BaseOrmRelationDatagridListener('role_id', $this->get('oro_datagrid.datagrid.request_params'));
    }

    /**
     * Gets the 'oro_user.event_listener.user_email_grid_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\EventListener\UserEmailGridListener A Oro\Bundle\UserBundle\EventListener\UserEmailGridListener instance.
     */
    protected function getOroUser_EventListener_UserEmailGridListenerService()
    {
        $a = $this->get('doctrine.orm.default_entity_manager');
        $b = $this->get('oro_email.email.address.manager');

        $this->services['oro_user.event_listener.user_email_grid_listener'] = $instance = new \Oro\Bundle\UserBundle\EventListener\UserEmailGridListener($a, $this->get('oro_datagrid.datagrid.request_params'), $this->get('oro_email.datagrid_query_factory'));

        $instance->setEmailSync(new \Oro\Bundle\ImapBundle\Sync\ImapEmailSynchronizer($a, new \Oro\Bundle\EmailBundle\Builder\EmailEntityBuilder(new \Oro\Bundle\EmailBundle\Builder\EmailEntityBatchProcessor($b, $this->get('oro_email.email.owner.provider')), $b), $b, $this->get('oro_imap.connector.factory'), $this->get('oro_security.encoder.mcrypt')));

        return $instance;
    }

    /**
     * Gets the 'oro_user.event_listener.without_from_user_email_grid_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\EventListener\UserEmailGridListener A Oro\Bundle\UserBundle\EventListener\UserEmailGridListener instance.
     */
    protected function getOroUser_EventListener_WithoutFromUserEmailGridListenerService()
    {
        $a = $this->get('doctrine.orm.default_entity_manager');
        $b = $this->get('oro_email.email.address.manager');

        $this->services['oro_user.event_listener.without_from_user_email_grid_listener'] = $instance = new \Oro\Bundle\UserBundle\EventListener\UserEmailGridListener($a, $this->get('oro_datagrid.datagrid.request_params'));

        $instance->setEmailSync(new \Oro\Bundle\ImapBundle\Sync\ImapEmailSynchronizer($a, new \Oro\Bundle\EmailBundle\Builder\EmailEntityBuilder(new \Oro\Bundle\EmailBundle\Builder\EmailEntityBatchProcessor($b, $this->get('oro_email.email.owner.provider')), $b), $b, $this->get('oro_imap.connector.factory'), $this->get('oro_security.encoder.mcrypt')));

        return $instance;
    }

    /**
     * Gets the 'oro_user.form.group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroUser_Form_GroupService()
    {
        return $this->services['oro_user.form.group'] = $this->get('form.factory')->createNamed('oro_user_group_form', 'oro_user_group');
    }

    /**
     * Gets the 'oro_user.form.group.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroUser_Form_Group_ApiService()
    {
        return $this->services['oro_user.form.group.api'] = $this->get('form.factory')->createNamed('group', 'group', NULL);
    }

    /**
     * Gets the 'oro_user.form.handler.acl_role' service.
     *
     * @return Oro\Bundle\UserBundle\Form\Handler\AclRoleHandler A Oro\Bundle\UserBundle\Form\Handler\AclRoleHandler instance.
     */
    protected function getOroUser_Form_Handler_AclRoleService()
    {
        $instance = new \Oro\Bundle\UserBundle\Form\Handler\AclRoleHandler($this->get('form.factory'), array('entity' => array('label' => 'Entity', 'view_type' => 'grid', 'types' => array(0 => 'entity'), 'field_type' => 'oro_acl_access_level_selector', 'fix_values' => false, 'default_value' => 5, 'show_default' => true), 'action' => array('label' => 'Capabilities', 'view_type' => 'list', 'types' => array(0 => 'action'), 'field_type' => 'oro_acl_access_level_selector', 'fix_values' => false, 'default_value' => 1, 'show_default' => false)));

        $instance->setAclManager($this->get('oro_security.acl.manager'));
        $instance->setAclPrivilegeRepository($this->get('oro_security.acl.privilege_repository'));
        $instance->setEntityManager($this->get('doctrine.orm.default_entity_manager'));
        $instance->setRequest($this->get('request'));

        return $instance;
    }

    /**
     * Gets the 'oro_user.form.handler.group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Form\Handler\GroupHandler A Oro\Bundle\UserBundle\Form\Handler\GroupHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_user.form.handler.group' service is requested while the 'request' scope is not active
     */
    protected function getOroUser_Form_Handler_GroupService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_user.form.handler.group', 'request');
        }

        return $this->services['oro_user.form.handler.group'] = $this->scopedServices['request']['oro_user.form.handler.group'] = new \Oro\Bundle\UserBundle\Form\Handler\GroupHandler($this->get('oro_user.form.group'), $this->get('request'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_user.form.handler.group.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Form\Handler\GroupHandler A Oro\Bundle\UserBundle\Form\Handler\GroupHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_user.form.handler.group.api' service is requested while the 'request' scope is not active
     */
    protected function getOroUser_Form_Handler_Group_ApiService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_user.form.handler.group.api', 'request');
        }

        return $this->services['oro_user.form.handler.group.api'] = $this->scopedServices['request']['oro_user.form.handler.group.api'] = new \Oro\Bundle\UserBundle\Form\Handler\GroupHandler($this->get('oro_user.form.group.api'), $this->get('request'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_user.form.handler.reset' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Form\Handler\ResetHandler A Oro\Bundle\UserBundle\Form\Handler\ResetHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_user.form.handler.reset' service is requested while the 'request' scope is not active
     */
    protected function getOroUser_Form_Handler_ResetService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_user.form.handler.reset', 'request');
        }

        return $this->services['oro_user.form.handler.reset'] = $this->scopedServices['request']['oro_user.form.handler.reset'] = new \Oro\Bundle\UserBundle\Form\Handler\ResetHandler($this->get('oro_user.form.reset'), $this->get('request'), $this->get('oro_user.manager'));
    }

    /**
     * Gets the 'oro_user.form.handler.role.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Form\Handler\RoleHandler A Oro\Bundle\UserBundle\Form\Handler\RoleHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_user.form.handler.role.api' service is requested while the 'request' scope is not active
     */
    protected function getOroUser_Form_Handler_Role_ApiService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_user.form.handler.role.api', 'request');
        }

        return $this->services['oro_user.form.handler.role.api'] = $this->scopedServices['request']['oro_user.form.handler.role.api'] = new \Oro\Bundle\UserBundle\Form\Handler\RoleHandler($this->get('oro_user.form.role.api'), $this->get('request'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_user.form.handler.status' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Form\Handler\StatusHandler A Oro\Bundle\UserBundle\Form\Handler\StatusHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_user.form.handler.status' service is requested while the 'request' scope is not active
     */
    protected function getOroUser_Form_Handler_StatusService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_user.form.handler.status', 'request');
        }

        return $this->services['oro_user.form.handler.status'] = $this->scopedServices['request']['oro_user.form.handler.status'] = new \Oro\Bundle\UserBundle\Form\Handler\StatusHandler($this->get('oro_user.form.status'), $this->get('request'), $this->get('doctrine.orm.default_entity_manager'), $this->get('oro_user.manager'));
    }

    /**
     * Gets the 'oro_user.form.handler.user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Form\Handler\UserHandler A Oro\Bundle\UserBundle\Form\Handler\UserHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_user.form.handler.user' service is requested while the 'request' scope is not active
     */
    protected function getOroUser_Form_Handler_UserService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_user.form.handler.user', 'request');
        }

        $this->services['oro_user.form.handler.user'] = $this->scopedServices['request']['oro_user.form.handler.user'] = $instance = new \Oro\Bundle\UserBundle\Form\Handler\UserHandler($this->get('oro_user.form.user'), $this->get('request'), $this->get('oro_user.manager'));

        $instance->setBusinessUnitManager($this->get('oro_organization.business_unit_manager'));
        $instance->setTagManager($this->get('oro_tag.tag.manager'));

        return $instance;
    }

    /**
     * Gets the 'oro_user.form.handler.user.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Form\Handler\UserHandler A Oro\Bundle\UserBundle\Form\Handler\UserHandler instance.
     * 
     * @throws InactiveScopeException when the 'oro_user.form.handler.user.api' service is requested while the 'request' scope is not active
     */
    protected function getOroUser_Form_Handler_User_ApiService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_user.form.handler.user.api', 'request');
        }

        $this->services['oro_user.form.handler.user.api'] = $this->scopedServices['request']['oro_user.form.handler.user.api'] = $instance = new \Oro\Bundle\UserBundle\Form\Handler\UserHandler($this->get('oro_user.form.user.api'), $this->get('request'), $this->get('oro_user.manager'));

        $instance->setTagManager($this->get('oro_tag.tag.manager'));

        return $instance;
    }

    /**
     * Gets the 'oro_user.form.reset' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroUser_Form_ResetService()
    {
        return $this->services['oro_user.form.reset'] = $this->get('form.factory')->createNamed('oro_user_reset_form', 'oro_user_reset', NULL, array('validation_groups' => array(0 => 'ResetPassword', 1 => 'Default')));
    }

    /**
     * Gets the 'oro_user.form.role' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroUser_Form_RoleService()
    {
        return $this->services['oro_user.form.role'] = $this->get('form.factory')->createNamed('oro_user_role_form', 'oro_user_role');
    }

    /**
     * Gets the 'oro_user.form.role.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroUser_Form_Role_ApiService()
    {
        return $this->services['oro_user.form.role.api'] = $this->get('form.factory')->createNamed('role', 'role', NULL);
    }

    /**
     * Gets the 'oro_user.form.status' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroUser_Form_StatusService()
    {
        return $this->services['oro_user.form.status'] = $this->get('form.factory')->createNamed('oro_user_status_form', 'oro_user_status', NULL);
    }

    /**
     * Gets the 'oro_user.form.type.change_password' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Form\Type\ChangePasswordType A Oro\Bundle\UserBundle\Form\Type\ChangePasswordType instance.
     */
    protected function getOroUser_Form_Type_ChangePasswordService()
    {
        return $this->services['oro_user.form.type.change_password'] = new \Oro\Bundle\UserBundle\Form\Type\ChangePasswordType($this->get('oro_user.change_password.subscriber'));
    }

    /**
     * Gets the 'oro_user.form.type.email' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Form\Type\EmailType A Oro\Bundle\UserBundle\Form\Type\EmailType instance.
     */
    protected function getOroUser_Form_Type_EmailService()
    {
        return $this->services['oro_user.form.type.email'] = new \Oro\Bundle\UserBundle\Form\Type\EmailType();
    }

    /**
     * Gets the 'oro_user.form.type.gender' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Form\Type\GenderType A Oro\Bundle\UserBundle\Form\Type\GenderType instance.
     */
    protected function getOroUser_Form_Type_GenderService()
    {
        return $this->services['oro_user.form.type.gender'] = new \Oro\Bundle\UserBundle\Form\Type\GenderType($this->get('oro_user.gender_provider'));
    }

    /**
     * Gets the 'oro_user.form.type.group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Form\Type\GroupType A Oro\Bundle\UserBundle\Form\Type\GroupType instance.
     */
    protected function getOroUser_Form_Type_GroupService()
    {
        return $this->services['oro_user.form.type.group'] = new \Oro\Bundle\UserBundle\Form\Type\GroupType();
    }

    /**
     * Gets the 'oro_user.form.type.group.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Form\Type\GroupApiType A Oro\Bundle\UserBundle\Form\Type\GroupApiType instance.
     */
    protected function getOroUser_Form_Type_Group_ApiService()
    {
        return $this->services['oro_user.form.type.group.api'] = new \Oro\Bundle\UserBundle\Form\Type\GroupApiType();
    }

    /**
     * Gets the 'oro_user.form.type.reset' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Form\Type\ResetType A Oro\Bundle\UserBundle\Form\Type\ResetType instance.
     */
    protected function getOroUser_Form_Type_ResetService()
    {
        return $this->services['oro_user.form.type.reset'] = new \Oro\Bundle\UserBundle\Form\Type\ResetType('Oro\\Bundle\\UserBundle\\Entity\\User');
    }

    /**
     * Gets the 'oro_user.form.type.role.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Form\Type\RoleApiType A Oro\Bundle\UserBundle\Form\Type\RoleApiType instance.
     */
    protected function getOroUser_Form_Type_Role_ApiService()
    {
        return $this->services['oro_user.form.type.role.api'] = new \Oro\Bundle\UserBundle\Form\Type\RoleApiType();
    }

    /**
     * Gets the 'oro_user.form.type.status' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Form\Type\StatusType A Oro\Bundle\UserBundle\Form\Type\StatusType instance.
     */
    protected function getOroUser_Form_Type_StatusService()
    {
        return $this->services['oro_user.form.type.status'] = new \Oro\Bundle\UserBundle\Form\Type\StatusType();
    }

    /**
     * Gets the 'oro_user.form.type.user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Form\Type\UserType A Oro\Bundle\UserBundle\Form\Type\UserType instance.
     * 
     * @throws InactiveScopeException when the 'oro_user.form.type.user' service is requested while the 'request' scope is not active
     */
    protected function getOroUser_Form_Type_UserService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_user.form.type.user', 'request');
        }

        return $this->services['oro_user.form.type.user'] = $this->scopedServices['request']['oro_user.form.type.user'] = new \Oro\Bundle\UserBundle\Form\Type\UserType($this->get('security.context'), $this->get('request'));
    }

    /**
     * Gets the 'oro_user.form.type.user.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Form\Type\UserApiType A Oro\Bundle\UserBundle\Form\Type\UserApiType instance.
     * 
     * @throws InactiveScopeException when the 'oro_user.form.type.user.api' service is requested while the 'request' scope is not active
     */
    protected function getOroUser_Form_Type_User_ApiService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('oro_user.form.type.user.api', 'request');
        }

        return $this->services['oro_user.form.type.user.api'] = $this->scopedServices['request']['oro_user.form.type.user.api'] = new \Oro\Bundle\UserBundle\Form\Type\UserApiType($this->get('security.context'), $this->get('request'));
    }

    /**
     * Gets the 'oro_user.form.type.user_acl_select' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Form\Type\UserAclSelectType A Oro\Bundle\UserBundle\Form\Type\UserAclSelectType instance.
     */
    protected function getOroUser_Form_Type_UserAclSelectService()
    {
        return $this->services['oro_user.form.type.user_acl_select'] = new \Oro\Bundle\UserBundle\Form\Type\UserAclSelectType();
    }

    /**
     * Gets the 'oro_user.form.type.user_multiselect' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Form\Type\UserMultiSelectType A Oro\Bundle\UserBundle\Form\Type\UserMultiSelectType instance.
     */
    protected function getOroUser_Form_Type_UserMultiselectService()
    {
        return $this->services['oro_user.form.type.user_multiselect'] = new \Oro\Bundle\UserBundle\Form\Type\UserMultiSelectType($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_user.form.type.user_select' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Form\Type\UserSelectType A Oro\Bundle\UserBundle\Form\Type\UserSelectType instance.
     */
    protected function getOroUser_Form_Type_UserSelectService()
    {
        return $this->services['oro_user.form.type.user_select'] = new \Oro\Bundle\UserBundle\Form\Type\UserSelectType();
    }

    /**
     * Gets the 'oro_user.form.user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroUser_Form_UserService()
    {
        return $this->services['oro_user.form.user'] = $this->get('form.factory')->createNamed('oro_user_user_form', 'oro_user_user', NULL);
    }

    /**
     * Gets the 'oro_user.form.user.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Form\Form A Symfony\Component\Form\Form instance.
     */
    protected function getOroUser_Form_User_ApiService()
    {
        return $this->services['oro_user.form.user.api'] = $this->get('form.factory')->createNamed('user', 'user', NULL);
    }

    /**
     * Gets the 'oro_user.gender_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Provider\GenderProvider A Oro\Bundle\UserBundle\Provider\GenderProvider instance.
     */
    protected function getOroUser_GenderProviderService()
    {
        return $this->services['oro_user.gender_provider'] = new \Oro\Bundle\UserBundle\Provider\GenderProvider($this->get('translator.default'));
    }

    /**
     * Gets the 'oro_user.group_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Entity\Manager\GroupManager A Oro\Bundle\UserBundle\Entity\Manager\GroupManager instance.
     */
    protected function getOroUser_GroupManagerService()
    {
        return $this->services['oro_user.group_manager'] = new \Oro\Bundle\UserBundle\Entity\Manager\GroupManager($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_user.group_manager.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager A Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager instance.
     */
    protected function getOroUser_GroupManager_ApiService()
    {
        return $this->services['oro_user.group_manager.api'] = new \Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager('Oro\\Bundle\\UserBundle\\Entity\\Group', $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_user.importexport.user_normalizer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\ImportExport\Serializer\Normalizer\UserNormalizer A Oro\Bundle\UserBundle\ImportExport\Serializer\Normalizer\UserNormalizer instance.
     */
    protected function getOroUser_Importexport_UserNormalizerService()
    {
        return $this->services['oro_user.importexport.user_normalizer'] = new \Oro\Bundle\UserBundle\ImportExport\Serializer\Normalizer\UserNormalizer();
    }

    /**
     * Gets the 'oro_user.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Entity\UserManager A Oro\Bundle\UserBundle\Entity\UserManager instance.
     */
    protected function getOroUser_ManagerService()
    {
        return $this->services['oro_user.manager'] = new \Oro\Bundle\UserBundle\Entity\UserManager('Oro\\Bundle\\UserBundle\\Entity\\User', $this->get('doctrine.orm.default_entity_manager'), $this->get('security.encoder_factory'));
    }

    /**
     * Gets the 'oro_user.manager.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager A Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager instance.
     */
    protected function getOroUser_Manager_ApiService()
    {
        return $this->services['oro_user.manager.api'] = new \Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager('Oro\\Bundle\\UserBundle\\Entity\\User', $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_user.role.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\EventListener\RoleListener A Oro\Bundle\UserBundle\EventListener\RoleListener instance.
     */
    protected function getOroUser_Role_ListenerService()
    {
        return $this->services['oro_user.role.listener'] = new \Oro\Bundle\UserBundle\EventListener\RoleListener($this->get('oro_security.link.sid_manager'));
    }

    /**
     * Gets the 'oro_user.role_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Entity\Manager\RoleManager A Oro\Bundle\UserBundle\Entity\Manager\RoleManager instance.
     */
    protected function getOroUser_RoleManagerService()
    {
        return $this->services['oro_user.role_manager'] = new \Oro\Bundle\UserBundle\Entity\Manager\RoleManager($this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_user.role_manager.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager A Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager instance.
     */
    protected function getOroUser_RoleManager_ApiService()
    {
        return $this->services['oro_user.role_manager.api'] = new \Oro\Bundle\SoapBundle\Entity\Manager\ApiEntityManager('Oro\\Bundle\\UserBundle\\Entity\\Role', $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_user.security.login' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\EventListener\LoginSubscriber A Oro\Bundle\UserBundle\EventListener\LoginSubscriber instance.
     */
    protected function getOroUser_Security_LoginService()
    {
        return $this->services['oro_user.security.login'] = new \Oro\Bundle\UserBundle\EventListener\LoginSubscriber($this->get('oro_user.manager'));
    }

    /**
     * Gets the 'oro_user.status_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Entity\Manager\StatusManager A Oro\Bundle\UserBundle\Entity\Manager\StatusManager instance.
     */
    protected function getOroUser_StatusManagerService()
    {
        return $this->services['oro_user.status_manager'] = new \Oro\Bundle\UserBundle\Entity\Manager\StatusManager($this->get('doctrine.orm.default_entity_manager'), $this->get('oro_user.manager'));
    }

    /**
     * Gets the 'oro_user.twig.user_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Twig\OroUserExtension A Oro\Bundle\UserBundle\Twig\OroUserExtension instance.
     */
    protected function getOroUser_Twig_UserExtensionService()
    {
        return $this->services['oro_user.twig.user_extension'] = new \Oro\Bundle\UserBundle\Twig\OroUserExtension($this->get('oro_user.gender_provider'));
    }

    /**
     * Gets the 'oro_user.user_menu' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\UserBundle\Menu\UserMenuBuilder A Oro\Bundle\UserBundle\Menu\UserMenuBuilder instance.
     */
    protected function getOroUser_UserMenuService()
    {
        return $this->services['oro_user.user_menu'] = new \Oro\Bundle\UserBundle\Menu\UserMenuBuilder($this->get('security.context'));
    }

    /**
     * Gets the 'oro_wamp.db_ping' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SyncBundle\Wamp\DbPing A Oro\Bundle\SyncBundle\Wamp\DbPing instance.
     */
    protected function getOroWamp_DbPingService()
    {
        return $this->services['oro_wamp.db_ping'] = new \Oro\Bundle\SyncBundle\Wamp\DbPing($this->get('doctrine.dbal.default.wrapped_connection', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'oro_wamp.publisher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SyncBundle\Wamp\TopicPublisher A Oro\Bundle\SyncBundle\Wamp\TopicPublisher instance.
     */
    protected function getOroWamp_PublisherService()
    {
        return $this->services['oro_wamp.publisher'] = new \Oro\Bundle\SyncBundle\Wamp\TopicPublisher('127.0.0.1', 8080);
    }

    /**
     * Gets the 'oro_wamp.twig.sync_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SyncBundle\Twig\OroSyncExtension A Oro\Bundle\SyncBundle\Twig\OroSyncExtension instance.
     */
    protected function getOroWamp_Twig_SyncExtensionService()
    {
        return $this->services['oro_wamp.twig.sync_extension'] = new \Oro\Bundle\SyncBundle\Twig\OroSyncExtension($this->get('oro_wamp.publisher'));
    }

    /**
     * Gets the 'oro_windows.twig.extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WindowsBundle\Twig\WindowsExtension A Oro\Bundle\WindowsBundle\Twig\WindowsExtension instance.
     */
    protected function getOroWindows_Twig_ExtensionService()
    {
        return $this->services['oro_windows.twig.extension'] = new \Oro\Bundle\WindowsBundle\Twig\WindowsExtension($this->get('security.context'), $this->get('doctrine.orm.default_entity_manager'));
    }

    /**
     * Gets the 'oro_workflow.action.assign_active_user' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Action\AssignActiveUser A Oro\Bundle\WorkflowBundle\Model\Action\AssignActiveUser instance.
     */
    protected function getOroWorkflow_Action_AssignActiveUserService()
    {
        return new \Oro\Bundle\WorkflowBundle\Model\Action\AssignActiveUser($this->get('oro_workflow.context_accessor'), $this->get('security.context'));
    }

    /**
     * Gets the 'oro_workflow.action.assign_value' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Action\AssignValue A Oro\Bundle\WorkflowBundle\Model\Action\AssignValue instance.
     */
    protected function getOroWorkflow_Action_AssignValueService()
    {
        return new \Oro\Bundle\WorkflowBundle\Model\Action\AssignValue($this->get('oro_workflow.context_accessor'));
    }

    /**
     * Gets the 'oro_workflow.action.call_method' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Action\CallMethod A Oro\Bundle\WorkflowBundle\Model\Action\CallMethod instance.
     */
    protected function getOroWorkflow_Action_CallMethodService()
    {
        return new \Oro\Bundle\WorkflowBundle\Model\Action\CallMethod($this->get('oro_workflow.context_accessor'));
    }

    /**
     * Gets the 'oro_workflow.action.close_workflow' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Action\CloseWorkflow A Oro\Bundle\WorkflowBundle\Model\Action\CloseWorkflow instance.
     */
    protected function getOroWorkflow_Action_CloseWorkflowService()
    {
        return new \Oro\Bundle\WorkflowBundle\Model\Action\CloseWorkflow();
    }

    /**
     * Gets the 'oro_workflow.action.configurable' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Action\Configurable A Oro\Bundle\WorkflowBundle\Model\Action\Configurable instance.
     */
    protected function getOroWorkflow_Action_ConfigurableService()
    {
        return new \Oro\Bundle\WorkflowBundle\Model\Action\Configurable($this->get('oro_workflow.action_assembler'));
    }

    /**
     * Gets the 'oro_workflow.action.create_entity' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Action\CreateEntity A Oro\Bundle\WorkflowBundle\Model\Action\CreateEntity instance.
     */
    protected function getOroWorkflow_Action_CreateEntityService()
    {
        return new \Oro\Bundle\WorkflowBundle\Model\Action\CreateEntity($this->get('oro_workflow.context_accessor'), $this->get('doctrine'));
    }

    /**
     * Gets the 'oro_workflow.action.create_object' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Action\CreateObject A Oro\Bundle\WorkflowBundle\Model\Action\CreateObject instance.
     */
    protected function getOroWorkflow_Action_CreateObjectService()
    {
        return new \Oro\Bundle\WorkflowBundle\Model\Action\CreateObject($this->get('oro_workflow.context_accessor'));
    }

    /**
     * Gets the 'oro_workflow.action.format_name' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Action\FormatName A Oro\Bundle\WorkflowBundle\Model\Action\FormatName instance.
     */
    protected function getOroWorkflow_Action_FormatNameService()
    {
        return new \Oro\Bundle\WorkflowBundle\Model\Action\FormatName($this->get('oro_workflow.context_accessor'), $this->get('oro_locale.formatter.name'));
    }

    /**
     * Gets the 'oro_workflow.action.format_string' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Action\FormatString A Oro\Bundle\WorkflowBundle\Model\Action\FormatString instance.
     */
    protected function getOroWorkflow_Action_FormatStringService()
    {
        return new \Oro\Bundle\WorkflowBundle\Model\Action\FormatString($this->get('oro_workflow.context_accessor'));
    }

    /**
     * Gets the 'oro_workflow.action.redirect' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Action\Redirect A Oro\Bundle\WorkflowBundle\Model\Action\Redirect instance.
     */
    protected function getOroWorkflow_Action_RedirectService()
    {
        return new \Oro\Bundle\WorkflowBundle\Model\Action\Redirect($this->get('oro_workflow.context_accessor'), $this->get('router'), 'result.redirectUrl');
    }

    /**
     * Gets the 'oro_workflow.action.redirect_to_workflow' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Action\RedirectToWorkflow A Oro\Bundle\WorkflowBundle\Model\Action\RedirectToWorkflow instance.
     */
    protected function getOroWorkflow_Action_RedirectToWorkflowService()
    {
        return new \Oro\Bundle\WorkflowBundle\Model\Action\RedirectToWorkflow(new \Oro\Bundle\WorkflowBundle\Model\Action\Redirect($this->get('oro_workflow.context_accessor'), $this->get('router'), 'result.redirectUrl'));
    }

    /**
     * Gets the 'oro_workflow.action.request_entity' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Action\RequestEntity A Oro\Bundle\WorkflowBundle\Model\Action\RequestEntity instance.
     */
    protected function getOroWorkflow_Action_RequestEntityService()
    {
        return new \Oro\Bundle\WorkflowBundle\Model\Action\RequestEntity($this->get('oro_workflow.context_accessor'), $this->get('doctrine'));
    }

    /**
     * Gets the 'oro_workflow.action.start_workflow' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Action\StartWorkflow A Oro\Bundle\WorkflowBundle\Model\Action\StartWorkflow instance.
     */
    protected function getOroWorkflow_Action_StartWorkflowService()
    {
        return new \Oro\Bundle\WorkflowBundle\Model\Action\StartWorkflow($this->get('oro_workflow.context_accessor'), $this->get('oro_workflow.manager'));
    }

    /**
     * Gets the 'oro_workflow.action.tree' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Action\TreeExecutor A Oro\Bundle\WorkflowBundle\Model\Action\TreeExecutor instance.
     */
    protected function getOroWorkflow_Action_TreeService()
    {
        return new \Oro\Bundle\WorkflowBundle\Model\Action\TreeExecutor($this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'oro_workflow.action.unset_value' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Action\UnsetValue A Oro\Bundle\WorkflowBundle\Model\Action\UnsetValue instance.
     */
    protected function getOroWorkflow_Action_UnsetValueService()
    {
        return new \Oro\Bundle\WorkflowBundle\Model\Action\UnsetValue(new \Oro\Bundle\WorkflowBundle\Model\Action\AssignValue($this->get('oro_workflow.context_accessor')));
    }

    /**
     * Gets the 'oro_workflow.action_assembler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Action\ActionAssembler A Oro\Bundle\WorkflowBundle\Model\Action\ActionAssembler instance.
     */
    protected function getOroWorkflow_ActionAssemblerService()
    {
        $this->services['oro_workflow.action_assembler'] = $instance = new \Oro\Bundle\WorkflowBundle\Model\Action\ActionAssembler($this->get('oro_workflow.action_factory'), $this->get('oro_workflow.condition_factory'));

        $instance->addConfigurationPass($this->get('oro_workflow.configuration_pass.replace_property_path'));

        return $instance;
    }

    /**
     * Gets the 'oro_workflow.action_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Action\ActionFactory A Oro\Bundle\WorkflowBundle\Model\Action\ActionFactory instance.
     */
    protected function getOroWorkflow_ActionFactoryService()
    {
        return $this->services['oro_workflow.action_factory'] = new \Oro\Bundle\WorkflowBundle\Model\Action\ActionFactory($this, array('send_email' => 'oro_email.workflow.action.send_email', 'tree' => 'oro_workflow.action.tree', 'configurable' => 'oro_workflow.action.configurable', 'assign_value' => 'oro_workflow.action.assign_value', 'unset_value' => 'oro_workflow.action.unset_value', 'create_object' => 'oro_workflow.action.create_object', 'create_entity' => 'oro_workflow.action.create_entity', 'request_entity' => 'oro_workflow.action.request_entity', 'find_entity' => 'oro_workflow.action.request_entity', 'call_method' => 'oro_workflow.action.call_method', 'start_workflow' => 'oro_workflow.action.start_workflow', 'close_workflow' => 'oro_workflow.action.close_workflow', 'redirect' => 'oro_workflow.action.redirect', 'redirect_to_workflow' => 'oro_workflow.action.redirect_to_workflow', 'format_string' => 'oro_workflow.action.format_string', 'assign_active_user' => 'oro_workflow.action.assign_active_user', 'get_active_user' => 'oro_workflow.action.assign_active_user', 'format_name' => 'oro_workflow.action.format_name'));
    }

    /**
     * Gets the 'oro_workflow.attribute_assembler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\AttributeAssembler A Oro\Bundle\WorkflowBundle\Model\AttributeAssembler instance.
     */
    protected function getOroWorkflow_AttributeAssemblerService()
    {
        return $this->services['oro_workflow.attribute_assembler'] = new \Oro\Bundle\WorkflowBundle\Model\AttributeAssembler();
    }

    /**
     * Gets the 'oro_workflow.condition.andx' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Condition\Andx A Oro\Bundle\WorkflowBundle\Model\Condition\Andx instance.
     */
    protected function getOroWorkflow_Condition_AndxService()
    {
        return new \Oro\Bundle\WorkflowBundle\Model\Condition\Andx();
    }

    /**
     * Gets the 'oro_workflow.condition.blank' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Condition\Blank A Oro\Bundle\WorkflowBundle\Model\Condition\Blank instance.
     */
    protected function getOroWorkflow_Condition_BlankService()
    {
        return new \Oro\Bundle\WorkflowBundle\Model\Condition\Blank($this->get('oro_workflow.context_accessor'));
    }

    /**
     * Gets the 'oro_workflow.condition.configurable' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Condition\Configurable A Oro\Bundle\WorkflowBundle\Model\Condition\Configurable instance.
     */
    protected function getOroWorkflow_Condition_ConfigurableService()
    {
        return new \Oro\Bundle\WorkflowBundle\Model\Condition\Configurable($this->get('oro_workflow.condition_assembler'));
    }

    /**
     * Gets the 'oro_workflow.condition.equal_to' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Condition\EqualTo A Oro\Bundle\WorkflowBundle\Model\Condition\EqualTo instance.
     */
    protected function getOroWorkflow_Condition_EqualToService()
    {
        return new \Oro\Bundle\WorkflowBundle\Model\Condition\EqualTo($this->get('oro_workflow.context_accessor'), $this->get('oro_workflow.doctrine_helper'));
    }

    /**
     * Gets the 'oro_workflow.condition.false' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Condition\False A Oro\Bundle\WorkflowBundle\Model\Condition\False instance.
     */
    protected function getOroWorkflow_Condition_FalseService()
    {
        return new \Oro\Bundle\WorkflowBundle\Model\Condition\False();
    }

    /**
     * Gets the 'oro_workflow.condition.greater_than' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Condition\GreaterThan A Oro\Bundle\WorkflowBundle\Model\Condition\GreaterThan instance.
     */
    protected function getOroWorkflow_Condition_GreaterThanService()
    {
        return new \Oro\Bundle\WorkflowBundle\Model\Condition\GreaterThan($this->get('oro_workflow.context_accessor'));
    }

    /**
     * Gets the 'oro_workflow.condition.greater_than_or_equal' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Condition\GreaterThanOrEqual A Oro\Bundle\WorkflowBundle\Model\Condition\GreaterThanOrEqual instance.
     */
    protected function getOroWorkflow_Condition_GreaterThanOrEqualService()
    {
        return new \Oro\Bundle\WorkflowBundle\Model\Condition\GreaterThanOrEqual($this->get('oro_workflow.context_accessor'));
    }

    /**
     * Gets the 'oro_workflow.condition.has_value' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Condition\HasValue A Oro\Bundle\WorkflowBundle\Model\Condition\HasValue instance.
     */
    protected function getOroWorkflow_Condition_HasValueService()
    {
        return new \Oro\Bundle\WorkflowBundle\Model\Condition\HasValue($this->get('oro_workflow.context_accessor'));
    }

    /**
     * Gets the 'oro_workflow.condition.less_than' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Condition\LessThan A Oro\Bundle\WorkflowBundle\Model\Condition\LessThan instance.
     */
    protected function getOroWorkflow_Condition_LessThanService()
    {
        return new \Oro\Bundle\WorkflowBundle\Model\Condition\LessThan($this->get('oro_workflow.context_accessor'));
    }

    /**
     * Gets the 'oro_workflow.condition.less_than_or_equal' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Condition\LessThanOrEqual A Oro\Bundle\WorkflowBundle\Model\Condition\LessThanOrEqual instance.
     */
    protected function getOroWorkflow_Condition_LessThanOrEqualService()
    {
        return new \Oro\Bundle\WorkflowBundle\Model\Condition\LessThanOrEqual($this->get('oro_workflow.context_accessor'));
    }

    /**
     * Gets the 'oro_workflow.condition.not' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Condition\Not A Oro\Bundle\WorkflowBundle\Model\Condition\Not instance.
     */
    protected function getOroWorkflow_Condition_NotService()
    {
        return new \Oro\Bundle\WorkflowBundle\Model\Condition\Not();
    }

    /**
     * Gets the 'oro_workflow.condition.not_blank' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Condition\NotBlank A Oro\Bundle\WorkflowBundle\Model\Condition\NotBlank instance.
     */
    protected function getOroWorkflow_Condition_NotBlankService()
    {
        return new \Oro\Bundle\WorkflowBundle\Model\Condition\NotBlank(new \Oro\Bundle\WorkflowBundle\Model\Condition\Blank($this->get('oro_workflow.context_accessor')));
    }

    /**
     * Gets the 'oro_workflow.condition.not_equal_to' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Condition\NotEqualTo A Oro\Bundle\WorkflowBundle\Model\Condition\NotEqualTo instance.
     */
    protected function getOroWorkflow_Condition_NotEqualToService()
    {
        return new \Oro\Bundle\WorkflowBundle\Model\Condition\NotEqualTo(new \Oro\Bundle\WorkflowBundle\Model\Condition\EqualTo($this->get('oro_workflow.context_accessor'), $this->get('oro_workflow.doctrine_helper')));
    }

    /**
     * Gets the 'oro_workflow.condition.not_has_value' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Condition\NotHasValue A Oro\Bundle\WorkflowBundle\Model\Condition\NotHasValue instance.
     */
    protected function getOroWorkflow_Condition_NotHasValueService()
    {
        return new \Oro\Bundle\WorkflowBundle\Model\Condition\NotHasValue(new \Oro\Bundle\WorkflowBundle\Model\Condition\HasValue($this->get('oro_workflow.context_accessor')));
    }

    /**
     * Gets the 'oro_workflow.condition.orx' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Condition\Orx A Oro\Bundle\WorkflowBundle\Model\Condition\Orx instance.
     */
    protected function getOroWorkflow_Condition_OrxService()
    {
        return new \Oro\Bundle\WorkflowBundle\Model\Condition\Orx();
    }

    /**
     * Gets the 'oro_workflow.condition.true' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Condition\True A Oro\Bundle\WorkflowBundle\Model\Condition\True instance.
     */
    protected function getOroWorkflow_Condition_TrueService()
    {
        return new \Oro\Bundle\WorkflowBundle\Model\Condition\True();
    }

    /**
     * Gets the 'oro_workflow.condition_assembler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Condition\ConditionAssembler A Oro\Bundle\WorkflowBundle\Model\Condition\ConditionAssembler instance.
     */
    protected function getOroWorkflow_ConditionAssemblerService()
    {
        $this->services['oro_workflow.condition_assembler'] = $instance = new \Oro\Bundle\WorkflowBundle\Model\Condition\ConditionAssembler($this->get('oro_workflow.condition_factory'));

        $instance->addConfigurationPass($this->get('oro_workflow.configuration_pass.replace_property_path'));

        return $instance;
    }

    /**
     * Gets the 'oro_workflow.condition_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Condition\ConditionFactory A Oro\Bundle\WorkflowBundle\Model\Condition\ConditionFactory instance.
     */
    protected function getOroWorkflow_ConditionFactoryService()
    {
        return $this->services['oro_workflow.condition_factory'] = new \Oro\Bundle\WorkflowBundle\Model\Condition\ConditionFactory($this, array('and' => 'oro_workflow.condition.andx', 'or' => 'oro_workflow.condition.orx', 'not' => 'oro_workflow.condition.not', 'true' => 'oro_workflow.condition.true', 'false' => 'oro_workflow.condition.false', 'eq' => 'oro_workflow.condition.equal_to', 'equal' => 'oro_workflow.condition.equal_to', 'neq' => 'oro_workflow.condition.not_equal_to', 'not_equal' => 'oro_workflow.condition.not_equal_to', 'blank' => 'oro_workflow.condition.blank', 'empty' => 'oro_workflow.condition.blank', 'not_blank' => 'oro_workflow.condition.not_blank', 'not_empty' => 'oro_workflow.condition.not_blank', 'has_value' => 'oro_workflow.condition.has_value', 'not_has_value' => 'oro_workflow.condition.not_has_value', 'gt' => 'oro_workflow.condition.greater_than', 'greater' => 'oro_workflow.condition.greater_than', 'ge' => 'oro_workflow.condition.greater_than_or_equal', 'gte' => 'oro_workflow.condition.greater_than_or_equal', 'greater_or_equal' => 'oro_workflow.condition.greater_than_or_equal', 'lt' => 'oro_workflow.condition.less_than', 'less' => 'oro_workflow.condition.less_than', 'le' => 'oro_workflow.condition.less_than_or_equal', 'lte' => 'oro_workflow.condition.less_than_or_equal', 'less_or_equal' => 'oro_workflow.condition.less_than_or_equal', 'configurable' => 'oro_workflow.condition.configurable'));
    }

    /**
     * Gets the 'oro_workflow.configuration.builder.workflow_definition' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Configuration\ConfigurationWorkflowDefinitionBuilder A Oro\Bundle\WorkflowBundle\Configuration\ConfigurationWorkflowDefinitionBuilder instance.
     */
    protected function getOroWorkflow_Configuration_Builder_WorkflowDefinitionService()
    {
        return $this->services['oro_workflow.configuration.builder.workflow_definition'] = new \Oro\Bundle\WorkflowBundle\Configuration\ConfigurationWorkflowDefinitionBuilder();
    }

    /**
     * Gets the 'oro_workflow.configuration.config.workflow_list' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Configuration\WorkflowListConfiguration A Oro\Bundle\WorkflowBundle\Configuration\WorkflowListConfiguration instance.
     */
    protected function getOroWorkflow_Configuration_Config_WorkflowListService()
    {
        return $this->services['oro_workflow.configuration.config.workflow_list'] = new \Oro\Bundle\WorkflowBundle\Configuration\WorkflowListConfiguration($this->get('oro_workflow.configuration.config.workflow_sole'));
    }

    /**
     * Gets the 'oro_workflow.configuration.config.workflow_sole' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Configuration\WorkflowConfiguration A Oro\Bundle\WorkflowBundle\Configuration\WorkflowConfiguration instance.
     */
    protected function getOroWorkflow_Configuration_Config_WorkflowSoleService()
    {
        return $this->services['oro_workflow.configuration.config.workflow_sole'] = new \Oro\Bundle\WorkflowBundle\Configuration\WorkflowConfiguration();
    }

    /**
     * Gets the 'oro_workflow.configuration.config_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Configuration\ConfigurationProvider A Oro\Bundle\WorkflowBundle\Configuration\ConfigurationProvider instance.
     */
    protected function getOroWorkflow_Configuration_ConfigProviderService()
    {
        return $this->services['oro_workflow.configuration.config_provider'] = new \Oro\Bundle\WorkflowBundle\Configuration\ConfigurationProvider(array('FrameworkBundle' => 'Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle', 'SecurityBundle' => 'Symfony\\Bundle\\SecurityBundle\\SecurityBundle', 'TwigBundle' => 'Symfony\\Bundle\\TwigBundle\\TwigBundle', 'MonologBundle' => 'Symfony\\Bundle\\MonologBundle\\MonologBundle', 'SwiftmailerBundle' => 'Symfony\\Bundle\\SwiftmailerBundle\\SwiftmailerBundle', 'AsseticBundle' => 'Symfony\\Bundle\\AsseticBundle\\AsseticBundle', 'DoctrineBundle' => 'Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle', 'DoctrineFixturesBundle' => 'Doctrine\\Bundle\\FixturesBundle\\DoctrineFixturesBundle', 'SensioFrameworkExtraBundle' => 'Sensio\\Bundle\\FrameworkExtraBundle\\SensioFrameworkExtraBundle', 'JMSSerializerBundle' => 'JMS\\SerializerBundle\\JMSSerializerBundle', 'KnpPaginatorBundle' => 'Knp\\Bundle\\PaginatorBundle\\KnpPaginatorBundle', 'KnpMenuBundle' => 'Knp\\Bundle\\MenuBundle\\KnpMenuBundle', 'FOSRestBundle' => 'FOS\\RestBundle\\FOSRestBundle', 'FOSJsRoutingBundle' => 'FOS\\JsRoutingBundle\\FOSJsRoutingBundle', 'NelmioApiDocBundle' => 'Nelmio\\ApiDocBundle\\NelmioApiDocBundle', 'BeSimpleSoapBundle' => 'BeSimple\\SoapBundle\\BeSimpleSoapBundle', 'StofDoctrineExtensionsBundle' => 'Stof\\DoctrineExtensionsBundle\\StofDoctrineExtensionsBundle', 'EscapeWSSEAuthenticationBundle' => 'Escape\\WSSEAuthenticationBundle\\EscapeWSSEAuthenticationBundle', 'LiipImagineBundle' => 'Liip\\ImagineBundle\\LiipImagineBundle', 'GenemuFormBundle' => 'Genemu\\Bundle\\FormBundle\\GenemuFormBundle', 'A2lixTranslationFormBundle' => 'A2lix\\TranslationFormBundle\\A2lixTranslationFormBundle', 'LexikMaintenanceBundle' => 'Lexik\\Bundle\\MaintenanceBundle\\LexikMaintenanceBundle', 'OroSecurityBundle' => 'Oro\\Bundle\\SecurityBundle\\OroSecurityBundle', 'OroUIBundle' => 'Oro\\Bundle\\UIBundle\\OroUIBundle', 'OroEntityBundle' => 'Oro\\Bundle\\EntityBundle\\OroEntityBundle', 'JDareClankBundle' => 'JDare\\ClankBundle\\JDareClankBundle', 'JMSJobQueueBundle' => 'JMS\\JobQueueBundle\\JMSJobQueueBundle', 'OroAddressBundle' => 'Oro\\Bundle\\AddressBundle\\OroAddressBundle', 'OroAsseticBundle' => 'Oro\\Bundle\\AsseticBundle\\OroAsseticBundle', 'OroBatchBundle' => 'Oro\\Bundle\\BatchBundle\\OroBatchBundle', 'OroBusinessEntitiesBundle' => 'Oro\\Bundle\\BusinessEntitiesBundle\\OroBusinessEntitiesBundle', 'OroCalendarBundle' => 'Oro\\Bundle\\CalendarBundle\\OroCalendarBundle', 'OroConfigBundle' => 'Oro\\Bundle\\ConfigBundle\\OroConfigBundle', 'OroCronBundle' => 'Oro\\Bundle\\CronBundle\\OroCronBundle', 'OroDashboardBundle' => 'Oro\\Bundle\\DashboardBundle\\OroDashboardBundle', 'OroDataAuditBundle' => 'Oro\\Bundle\\DataAuditBundle\\OroDataAuditBundle', 'OroDataGridBundle' => 'Oro\\Bundle\\DataGridBundle\\OroDataGridBundle', 'OroDistributionBundle' => 'Oro\\Bundle\\DistributionBundle\\OroDistributionBundle', 'OroEmailBundle' => 'Oro\\Bundle\\EmailBundle\\OroEmailBundle', 'OroEntityConfigBundle' => 'Oro\\Bundle\\EntityConfigBundle\\OroEntityConfigBundle', 'OroEntityExtendBundle' => 'Oro\\Bundle\\EntityExtendBundle\\OroEntityExtendBundle', 'OroFilterBundle' => 'Oro\\Bundle\\FilterBundle\\OroFilterBundle', 'OroFormBundle' => 'Oro\\Bundle\\FormBundle\\OroFormBundle', 'OroHelpBundle' => 'Oro\\Bundle\\HelpBundle\\OroHelpBundle', 'OroImapBundle' => 'Oro\\Bundle\\ImapBundle\\OroImapBundle', 'OroImportExportBundle' => 'Oro\\Bundle\\ImportExportBundle\\OroImportExportBundle', 'OroInstallerBundle' => 'Oro\\Bundle\\InstallerBundle\\OroInstallerBundle', 'OroIntegrationBundle' => 'Oro\\Bundle\\IntegrationBundle\\OroIntegrationBundle', 'OroLocaleBundle' => 'Oro\\Bundle\\LocaleBundle\\OroLocaleBundle', 'OroMeasureBundle' => 'Oro\\Bundle\\MeasureBundle\\OroMeasureBundle', 'OroNotificationBundle' => 'Oro\\Bundle\\NotificationBundle\\OroNotificationBundle', 'OroOrganizationBundle' => 'Oro\\Bundle\\OrganizationBundle\\OroOrganizationBundle', 'OroPlatformBundle' => 'Oro\\Bundle\\PlatformBundle\\OroPlatformBundle', 'OroQueryDesignerBundle' => 'Oro\\Bundle\\QueryDesignerBundle\\OroQueryDesignerBundle', 'OroReportBundle' => 'Oro\\Bundle\\ReportBundle\\OroReportBundle', 'OroRequireJSBundle' => 'Oro\\Bundle\\RequireJSBundle\\OroRequireJSBundle', 'OroSearchBundle' => 'Oro\\Bundle\\SearchBundle\\OroSearchBundle', 'OroSegmentationTreeBundle' => 'Oro\\Bundle\\SegmentationTreeBundle\\OroSegmentationTreeBundle', 'OroSidebarBundle' => 'Oro\\Bundle\\SidebarBundle\\OroSidebarBundle', 'OroSoapBundle' => 'Oro\\Bundle\\SoapBundle\\OroSoapBundle', 'OroSyncBundle' => 'Oro\\Bundle\\SyncBundle\\OroSyncBundle', 'OroTagBundle' => 'Oro\\Bundle\\TagBundle\\OroTagBundle', 'OroThemeBundle' => 'Oro\\Bundle\\ThemeBundle\\OroThemeBundle', 'OroTranslationBundle' => 'Oro\\Bundle\\TranslationBundle\\OroTranslationBundle', 'OroUserBundle' => 'Oro\\Bundle\\UserBundle\\OroUserBundle', 'OroWindowsBundle' => 'Oro\\Bundle\\WindowsBundle\\OroWindowsBundle', 'OroWorkflowBundle' => 'Oro\\Bundle\\WorkflowBundle\\OroWorkflowBundle', 'SyliusFlowBundle' => 'Sylius\\Bundle\\FlowBundle\\SyliusFlowBundle', 'OroNavigationBundle' => 'Oro\\Bundle\\NavigationBundle\\OroNavigationBundle', 'WebProfilerBundle' => 'Symfony\\Bundle\\WebProfilerBundle\\WebProfilerBundle', 'SensioDistributionBundle' => 'Sensio\\Bundle\\DistributionBundle\\SensioDistributionBundle', 'SensioGeneratorBundle' => 'Sensio\\Bundle\\GeneratorBundle\\SensioGeneratorBundle'), $this->get('oro_workflow.configuration.config.workflow_list'));
    }

    /**
     * Gets the 'oro_workflow.configuration_pass.replace_property_path' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\ConfigurationPass\ReplacePropertyPath A Oro\Bundle\WorkflowBundle\Model\ConfigurationPass\ReplacePropertyPath instance.
     */
    protected function getOroWorkflow_ConfigurationPass_ReplacePropertyPathService()
    {
        return $this->services['oro_workflow.configuration_pass.replace_property_path'] = new \Oro\Bundle\WorkflowBundle\Model\ConfigurationPass\ReplacePropertyPath('data');
    }

    /**
     * Gets the 'oro_workflow.context_accessor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\ContextAccessor A Oro\Bundle\WorkflowBundle\Model\ContextAccessor instance.
     */
    protected function getOroWorkflow_ContextAccessorService()
    {
        return $this->services['oro_workflow.context_accessor'] = new \Oro\Bundle\WorkflowBundle\Model\ContextAccessor();
    }

    /**
     * Gets the 'oro_workflow.doctrine_helper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\DoctrineHelper A Oro\Bundle\WorkflowBundle\Model\DoctrineHelper instance.
     */
    protected function getOroWorkflow_DoctrineHelperService()
    {
        return $this->services['oro_workflow.doctrine_helper'] = new \Oro\Bundle\WorkflowBundle\Model\DoctrineHelper($this->get('doctrine'));
    }

    /**
     * Gets the 'oro_workflow.entity_binder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\EntityBinder A Oro\Bundle\WorkflowBundle\Model\EntityBinder instance.
     */
    protected function getOroWorkflow_EntityBinderService()
    {
        return $this->services['oro_workflow.entity_binder'] = new \Oro\Bundle\WorkflowBundle\Model\EntityBinder($this->get('oro_workflow.registry'), $this->get('oro_workflow.doctrine_helper'));
    }

    /**
     * Gets the 'oro_workflow.form.event_listener.default_values' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Form\EventListener\DefaultValuesListener A Oro\Bundle\WorkflowBundle\Form\EventListener\DefaultValuesListener instance.
     */
    protected function getOroWorkflow_Form_EventListener_DefaultValuesService()
    {
        return $this->services['oro_workflow.form.event_listener.default_values'] = new \Oro\Bundle\WorkflowBundle\Form\EventListener\DefaultValuesListener($this->get('oro_workflow.context_accessor'));
    }

    /**
     * Gets the 'oro_workflow.form.event_listener.init_actions' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Form\EventListener\InitActionsListener A Oro\Bundle\WorkflowBundle\Form\EventListener\InitActionsListener instance.
     */
    protected function getOroWorkflow_Form_EventListener_InitActionsService()
    {
        return $this->services['oro_workflow.form.event_listener.init_actions'] = new \Oro\Bundle\WorkflowBundle\Form\EventListener\InitActionsListener();
    }

    /**
     * Gets the 'oro_workflow.form.event_listener.required_attributes' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Form\EventListener\RequiredAttributesListener A Oro\Bundle\WorkflowBundle\Form\EventListener\RequiredAttributesListener instance.
     */
    protected function getOroWorkflow_Form_EventListener_RequiredAttributesService()
    {
        return $this->services['oro_workflow.form.event_listener.required_attributes'] = new \Oro\Bundle\WorkflowBundle\Form\EventListener\RequiredAttributesListener();
    }

    /**
     * Gets the 'oro_workflow.form.type.attributes' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Form\Type\WorkflowAttributesType A Oro\Bundle\WorkflowBundle\Form\Type\WorkflowAttributesType instance.
     */
    protected function getOroWorkflow_Form_Type_AttributesService()
    {
        return $this->services['oro_workflow.form.type.attributes'] = new \Oro\Bundle\WorkflowBundle\Form\Type\WorkflowAttributesType($this->get('oro_workflow.registry'), $this->get('oro_workflow.form.event_listener.default_values'), $this->get('oro_workflow.form.event_listener.init_actions'), $this->get('oro_workflow.form.event_listener.required_attributes'));
    }

    /**
     * Gets the 'oro_workflow.form.type.step' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Form\Type\WorkflowStepType A Oro\Bundle\WorkflowBundle\Form\Type\WorkflowStepType instance.
     */
    protected function getOroWorkflow_Form_Type_StepService()
    {
        return $this->services['oro_workflow.form.type.step'] = new \Oro\Bundle\WorkflowBundle\Form\Type\WorkflowStepType();
    }

    /**
     * Gets the 'oro_workflow.form.type.transition' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Form\Type\WorkflowTransitionType A Oro\Bundle\WorkflowBundle\Form\Type\WorkflowTransitionType instance.
     */
    protected function getOroWorkflow_Form_Type_TransitionService()
    {
        return $this->services['oro_workflow.form.type.transition'] = new \Oro\Bundle\WorkflowBundle\Form\Type\WorkflowTransitionType();
    }

    /**
     * Gets the 'oro_workflow.form_options_assembler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\FormOptionsAssembler A Oro\Bundle\WorkflowBundle\Model\FormOptionsAssembler instance.
     */
    protected function getOroWorkflow_FormOptionsAssemblerService()
    {
        $this->services['oro_workflow.form_options_assembler'] = $instance = new \Oro\Bundle\WorkflowBundle\Model\FormOptionsAssembler($this->get('oro_workflow.action_factory'));

        $instance->addConfigurationPass($this->get('oro_workflow.configuration_pass.replace_property_path'));

        return $instance;
    }

    /**
     * Gets the 'oro_workflow.http.workflow_item_validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Http\WorkflowItemValidator A Oro\Bundle\WorkflowBundle\Http\WorkflowItemValidator instance.
     */
    protected function getOroWorkflow_Http_WorkflowItemValidatorService()
    {
        return $this->services['oro_workflow.http.workflow_item_validator'] = new \Oro\Bundle\WorkflowBundle\Http\WorkflowItemValidator($this->get('oro_workflow.manager'));
    }

    /**
     * Gets the 'oro_workflow.listener.subscriber.workflow_data_serialize' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\EventListener\WorkflowDataSerializeSubscriber A Oro\Bundle\WorkflowBundle\EventListener\WorkflowDataSerializeSubscriber instance.
     */
    protected function getOroWorkflow_Listener_Subscriber_WorkflowDataSerializeService()
    {
        return $this->services['oro_workflow.listener.subscriber.workflow_data_serialize'] = new \Oro\Bundle\WorkflowBundle\EventListener\WorkflowDataSerializeSubscriber($this->get('oro_workflow.serializer.data.serializer'));
    }

    /**
     * Gets the 'oro_workflow.listener.subscriver.workflow_definition' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\EventListener\WorkflowDefinitionSubscriber A Oro\Bundle\WorkflowBundle\EventListener\WorkflowDefinitionSubscriber instance.
     */
    protected function getOroWorkflow_Listener_Subscriver_WorkflowDefinitionService()
    {
        return $this->services['oro_workflow.listener.subscriver.workflow_definition'] = new \Oro\Bundle\WorkflowBundle\EventListener\WorkflowDefinitionSubscriber();
    }

    /**
     * Gets the 'oro_workflow.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\WorkflowManager A Oro\Bundle\WorkflowBundle\Model\WorkflowManager instance.
     */
    protected function getOroWorkflow_ManagerService()
    {
        return $this->services['oro_workflow.manager'] = new \Oro\Bundle\WorkflowBundle\Model\WorkflowManager($this->get('doctrine'), $this->get('oro_workflow.registry'), $this->get('oro_workflow.doctrine_helper'));
    }

    /**
     * Gets the 'oro_workflow.prototype.attribute_manager' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\AttributeManager A Oro\Bundle\WorkflowBundle\Model\AttributeManager instance.
     */
    protected function getOroWorkflow_Prototype_AttributeManagerService()
    {
        return new \Oro\Bundle\WorkflowBundle\Model\AttributeManager();
    }

    /**
     * Gets the 'oro_workflow.prototype.step_manager' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\StepManager A Oro\Bundle\WorkflowBundle\Model\StepManager instance.
     */
    protected function getOroWorkflow_Prototype_StepManagerService()
    {
        return new \Oro\Bundle\WorkflowBundle\Model\StepManager();
    }

    /**
     * Gets the 'oro_workflow.prototype.transition_manager' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\TransitionManager A Oro\Bundle\WorkflowBundle\Model\TransitionManager instance.
     */
    protected function getOroWorkflow_Prototype_TransitionManagerService()
    {
        return new \Oro\Bundle\WorkflowBundle\Model\TransitionManager();
    }

    /**
     * Gets the 'oro_workflow.prototype.workflow' service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\Workflow A Oro\Bundle\WorkflowBundle\Model\Workflow instance.
     */
    protected function getOroWorkflow_Prototype_WorkflowService()
    {
        $instance = new \Oro\Bundle\WorkflowBundle\Model\Workflow(new \Oro\Bundle\WorkflowBundle\Model\StepManager(), new \Oro\Bundle\WorkflowBundle\Model\AttributeManager(), new \Oro\Bundle\WorkflowBundle\Model\TransitionManager());

        $instance->setEntityBinder($this->get('oro_workflow.entity_binder'));

        return $instance;
    }

    /**
     * Gets the 'oro_workflow.registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\WorkflowRegistry A Oro\Bundle\WorkflowBundle\Model\WorkflowRegistry instance.
     */
    protected function getOroWorkflow_RegistryService()
    {
        return $this->services['oro_workflow.registry'] = new \Oro\Bundle\WorkflowBundle\Model\WorkflowRegistry($this->get('doctrine'), $this->get('oro_workflow.workflow_assembler'));
    }

    /**
     * Gets the 'oro_workflow.serializer.data.attribute_normalizer.entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Serializer\Normalizer\EntityAttributeNormalizer A Oro\Bundle\WorkflowBundle\Serializer\Normalizer\EntityAttributeNormalizer instance.
     */
    protected function getOroWorkflow_Serializer_Data_AttributeNormalizer_EntityService()
    {
        return $this->services['oro_workflow.serializer.data.attribute_normalizer.entity'] = new \Oro\Bundle\WorkflowBundle\Serializer\Normalizer\EntityAttributeNormalizer($this->get('doctrine'), $this->get('oro_workflow.doctrine_helper'));
    }

    /**
     * Gets the 'oro_workflow.serializer.data.attribute_normalizer.standard' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Serializer\Normalizer\StandardAttributeNormalizer A Oro\Bundle\WorkflowBundle\Serializer\Normalizer\StandardAttributeNormalizer instance.
     */
    protected function getOroWorkflow_Serializer_Data_AttributeNormalizer_StandardService()
    {
        return $this->services['oro_workflow.serializer.data.attribute_normalizer.standard'] = new \Oro\Bundle\WorkflowBundle\Serializer\Normalizer\StandardAttributeNormalizer();
    }

    /**
     * Gets the 'oro_workflow.serializer.data.normalizer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Serializer\Normalizer\WorkflowDataNormalizer A Oro\Bundle\WorkflowBundle\Serializer\Normalizer\WorkflowDataNormalizer instance.
     */
    protected function getOroWorkflow_Serializer_Data_NormalizerService()
    {
        $this->services['oro_workflow.serializer.data.normalizer'] = $instance = new \Oro\Bundle\WorkflowBundle\Serializer\Normalizer\WorkflowDataNormalizer();

        $instance->addAttributeNormalizer($this->get('oro_workflow.serializer.data.attribute_normalizer.standard'));
        $instance->addAttributeNormalizer($this->get('oro_workflow.serializer.data.attribute_normalizer.entity'));

        return $instance;
    }

    /**
     * Gets the 'oro_workflow.serializer.data.serializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Serializer\WorkflowDataSerializer A Oro\Bundle\WorkflowBundle\Serializer\WorkflowDataSerializer instance.
     */
    protected function getOroWorkflow_Serializer_Data_SerializerService()
    {
        $this->services['oro_workflow.serializer.data.serializer'] = $instance = new \Oro\Bundle\WorkflowBundle\Serializer\WorkflowDataSerializer(array(0 => $this->get('oro_workflow.serializer.data.normalizer')), array(0 => new \Symfony\Component\Serializer\Encoder\JsonEncoder()));

        $instance->setWorkflowRegistry($this->get('oro_workflow.registry'));

        return $instance;
    }

    /**
     * Gets the 'oro_workflow.serializer.handler.workflow_result' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Serializer\Handler\WorkflowResultHandler A Oro\Bundle\WorkflowBundle\Serializer\Handler\WorkflowResultHandler instance.
     */
    protected function getOroWorkflow_Serializer_Handler_WorkflowResultService()
    {
        return $this->services['oro_workflow.serializer.handler.workflow_result'] = new \Oro\Bundle\WorkflowBundle\Serializer\Handler\WorkflowResultHandler($this->get('oro_workflow.doctrine_helper'));
    }

    /**
     * Gets the 'oro_workflow.step_assembler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\StepAssembler A Oro\Bundle\WorkflowBundle\Model\StepAssembler instance.
     */
    protected function getOroWorkflow_StepAssemblerService()
    {
        $this->services['oro_workflow.step_assembler'] = $instance = new \Oro\Bundle\WorkflowBundle\Model\StepAssembler($this->get('oro_workflow.form_options_assembler'));

        $instance->addConfigurationPass($this->get('oro_workflow.configuration_pass.replace_property_path'));

        return $instance;
    }

    /**
     * Gets the 'oro_workflow.transition_assembler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\TransitionAssembler A Oro\Bundle\WorkflowBundle\Model\TransitionAssembler instance.
     */
    protected function getOroWorkflow_TransitionAssemblerService()
    {
        return $this->services['oro_workflow.transition_assembler'] = new \Oro\Bundle\WorkflowBundle\Model\TransitionAssembler($this->get('oro_workflow.form_options_assembler'), $this->get('oro_workflow.condition_factory'), $this->get('oro_workflow.action_factory'));
    }

    /**
     * Gets the 'oro_workflow.twig.extension.class_name' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Twig\ClassNameExtension A Oro\Bundle\WorkflowBundle\Twig\ClassNameExtension instance.
     */
    protected function getOroWorkflow_Twig_Extension_ClassNameService()
    {
        return $this->services['oro_workflow.twig.extension.class_name'] = new \Oro\Bundle\WorkflowBundle\Twig\ClassNameExtension($this->get('oro_workflow.doctrine_helper'));
    }

    /**
     * Gets the 'oro_workflow.twig.extension.view_attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Twig\ViewAttributeExtension A Oro\Bundle\WorkflowBundle\Twig\ViewAttributeExtension instance.
     */
    protected function getOroWorkflow_Twig_Extension_ViewAttributeService()
    {
        return $this->services['oro_workflow.twig.extension.view_attribute'] = new \Oro\Bundle\WorkflowBundle\Twig\ViewAttributeExtension($this->get('oro_workflow.context_accessor'), array(0 => 'OroWorkflowBundle:WorkflowStep:view_attributes.html.twig'));
    }

    /**
     * Gets the 'oro_workflow.twig.extension.workflow' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Twig\WorkflowExtension A Oro\Bundle\WorkflowBundle\Twig\WorkflowExtension instance.
     */
    protected function getOroWorkflow_Twig_Extension_WorkflowService()
    {
        return $this->services['oro_workflow.twig.extension.workflow'] = new \Oro\Bundle\WorkflowBundle\Twig\WorkflowExtension($this->get('oro_workflow.registry'));
    }

    /**
     * Gets the 'oro_workflow.validator.transition_is_allowed' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Validator\Constraints\TransitionIsAllowedValidator A Oro\Bundle\WorkflowBundle\Validator\Constraints\TransitionIsAllowedValidator instance.
     */
    protected function getOroWorkflow_Validator_TransitionIsAllowedService()
    {
        return $this->services['oro_workflow.validator.transition_is_allowed'] = new \Oro\Bundle\WorkflowBundle\Validator\Constraints\TransitionIsAllowedValidator($this->get('oro_workflow.registry'));
    }

    /**
     * Gets the 'oro_workflow.workflow_assembler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\WorkflowBundle\Model\WorkflowAssembler A Oro\Bundle\WorkflowBundle\Model\WorkflowAssembler instance.
     */
    protected function getOroWorkflow_WorkflowAssemblerService()
    {
        return $this->services['oro_workflow.workflow_assembler'] = new \Oro\Bundle\WorkflowBundle\Model\WorkflowAssembler($this, $this->get('oro_workflow.configuration.config.workflow_sole'), $this->get('oro_workflow.attribute_assembler'), $this->get('oro_workflow.step_assembler'), $this->get('oro_workflow.transition_assembler'));
    }

    /**
     * Gets the 'profiler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\HttpKernel\Profiler\Profiler A Symfony\Component\HttpKernel\Profiler\Profiler instance.
     */
    protected function getProfilerService()
    {
        $a = $this->get('monolog.logger.profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE);
        $b = $this->get('kernel', ContainerInterface::NULL_ON_INVALID_REFERENCE);

        $c = new \Symfony\Component\HttpKernel\DataCollector\ConfigDataCollector();
        if ($this->has('kernel')) {
            $c->setKernel($b);
        }

        $d = new \Doctrine\Bundle\DoctrineBundle\DataCollector\DoctrineDataCollector($this->get('doctrine'));
        $d->addLogger('default', $this->get('doctrine.dbal.logger.profiling.default'));
        $d->addLogger('report_source', $this->get('doctrine.dbal.logger.profiling.report_source'));
        $d->addLogger('report_target', $this->get('doctrine.dbal.logger.profiling.report_target'));

        $this->services['profiler'] = $instance = new \Symfony\Component\HttpKernel\Profiler\Profiler(new \Symfony\Component\HttpKernel\Profiler\FileProfilerStorage('file:/var/www/orocrm-platform/app/cache/de_/profiler', '', '', 86400), $a);

        $instance->add($c);
        $instance->add($this->get('data_collector.request'));
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\ExceptionDataCollector());
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\EventDataCollector());
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\LoggerDataCollector($a));
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\TimeDataCollector($b));
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\MemoryDataCollector());
        $instance->add($this->get('data_collector.router'));
        $instance->add(new \Symfony\Bundle\SecurityBundle\DataCollector\SecurityDataCollector($this->get('security.context', ContainerInterface::NULL_ON_INVALID_REFERENCE)));
        $instance->add(new \Symfony\Bundle\SwiftmailerBundle\DataCollector\MessageDataCollector($this));
        $instance->add($d);

        return $instance;
    }

    /**
     * Gets the 'profiler_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\HttpKernel\EventListener\ProfilerListener A Symfony\Component\HttpKernel\EventListener\ProfilerListener instance.
     */
    protected function getProfilerListenerService()
    {
        return $this->services['profiler_listener'] = new \Symfony\Component\HttpKernel\EventListener\ProfilerListener($this->get('profiler'), NULL, false, false);
    }

    /**
     * Gets the 'property_accessor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\PropertyAccess\PropertyAccessor A Symfony\Component\PropertyAccess\PropertyAccessor instance.
     */
    protected function getPropertyAccessorService()
    {
        return $this->services['property_accessor'] = new \Symfony\Component\PropertyAccess\PropertyAccessor();
    }

    /**
     * Gets the 'request' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @throws RuntimeException always since this service is expected to be injected dynamically
     * @throws InactiveScopeException when the 'request' service is requested while the 'request' scope is not active
     */
    protected function getRequestService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('request', 'request');
        }

        throw new RuntimeException('You have requested a synthetic service ("request"). The DIC does not know how to construct this service.');
    }

    /**
     * Gets the 'response_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\HttpKernel\EventListener\ResponseListener A Symfony\Component\HttpKernel\EventListener\ResponseListener instance.
     */
    protected function getResponseListenerService()
    {
        return $this->services['response_listener'] = new \Symfony\Component\HttpKernel\EventListener\ResponseListener('UTF-8');
    }

    /**
     * Gets the 'router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\FrameworkBundle\Routing\Router A Symfony\Bundle\FrameworkBundle\Routing\Router instance.
     */
    protected function getRouterService()
    {
        return $this->services['router'] = new \Symfony\Bundle\FrameworkBundle\Routing\Router($this, '/var/www/orocrm-platform/app/config/routing_dev.yml', array('cache_dir' => '/var/www/orocrm-platform/app/cache/de_', 'debug' => true, 'generator_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator', 'generator_base_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator', 'generator_dumper_class' => 'Symfony\\Component\\Routing\\Generator\\Dumper\\PhpGeneratorDumper', 'generator_cache_class' => 'ap_DevUrlGenerator', 'matcher_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher', 'matcher_base_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher', 'matcher_dumper_class' => 'Symfony\\Component\\Routing\\Matcher\\Dumper\\PhpMatcherDumper', 'matcher_cache_class' => 'ap_DevUrlMatcher', 'strict_requirements' => true), $this->get('router.request_context', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('monolog.logger.router', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'router_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\HttpKernel\EventListener\RouterListener A Symfony\Component\HttpKernel\EventListener\RouterListener instance.
     */
    protected function getRouterListenerService()
    {
        $this->services['router_listener'] = $instance = new \Symfony\Component\HttpKernel\EventListener\RouterListener($this->get('router'), $this->get('router.request_context', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('monolog.logger.request', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        $instance->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        return $instance;
    }

    /**
     * Gets the 'routing.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader A Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader instance.
     */
    protected function getRouting_LoaderService()
    {
        $a = $this->get('file_locator');
        $b = $this->get('annotation_reader');

        $c = new \Sensio\Bundle\FrameworkExtraBundle\Routing\AnnotatedRouteControllerLoader($b);

        $d = new \Symfony\Component\Config\Loader\LoaderResolver();
        $d->addLoader(new \Symfony\Component\Routing\Loader\XmlFileLoader($a));
        $d->addLoader(new \Symfony\Component\Routing\Loader\YamlFileLoader($a));
        $d->addLoader(new \Symfony\Component\Routing\Loader\PhpFileLoader($a));
        $d->addLoader(new \Symfony\Component\Routing\Loader\AnnotationDirectoryLoader($a, $c));
        $d->addLoader(new \Symfony\Component\Routing\Loader\AnnotationFileLoader($a, $c));
        $d->addLoader($c);
        $d->addLoader($this->get('fos_rest.routing.loader.controller'));
        $d->addLoader($this->get('fos_rest.routing.loader.yaml_collection'));
        $d->addLoader($this->get('fos_rest.routing.loader.xml_collection'));
        $d->addLoader($this->get('liip_imagine.routing.loader'));
        $d->addLoader($this->get('oro_distribution.routing_loader'));

        return $this->services['routing.loader'] = new \Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader($this->get('controller_name_converter'), $this->get('monolog.logger.router', ContainerInterface::NULL_ON_INVALID_REFERENCE), $d);
    }

    /**
     * Gets the 'security.acl.cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SecurityBundle\Acl\Cache\AclCache A Oro\Bundle\SecurityBundle\Acl\Cache\AclCache instance.
     */
    protected function getSecurity_Acl_CacheService()
    {
        $a = new \Oro\Bundle\SecurityBundle\Cache\FilesystemCache('/var/www/orocrm-platform/app/cache/de_/oro_data');
        $a->setNamespace('oro_acl');

        return $this->services['security.acl.cache'] = new \Oro\Bundle\SecurityBundle\Acl\Cache\AclCache($a, $this->get('oro_security.acl.permission_granting_strategy'), 'sf2_acl_');
    }

    /**
     * Gets the 'security.acl.dbal.schema' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Security\Acl\Dbal\Schema A Symfony\Component\Security\Acl\Dbal\Schema instance.
     */
    protected function getSecurity_Acl_Dbal_SchemaService()
    {
        return $this->services['security.acl.dbal.schema'] = new \Symfony\Component\Security\Acl\Dbal\Schema(array('class_table_name' => 'acl_classes', 'entry_table_name' => 'acl_entries', 'oid_table_name' => 'acl_object_identities', 'oid_ancestors_table_name' => 'acl_object_identity_ancestors', 'sid_table_name' => 'acl_security_identities'), $this->get('doctrine.dbal.default_connection'));
    }

    /**
     * Gets the 'security.acl.dbal.schema_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\SecurityBundle\EventListener\AclSchemaListener A Symfony\Bundle\SecurityBundle\EventListener\AclSchemaListener instance.
     */
    protected function getSecurity_Acl_Dbal_SchemaListenerService()
    {
        return $this->services['security.acl.dbal.schema_listener'] = new \Symfony\Bundle\SecurityBundle\EventListener\AclSchemaListener($this);
    }

    /**
     * Gets the 'security.acl.provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SecurityBundle\Acl\Dbal\MutableAclProvider A Oro\Bundle\SecurityBundle\Acl\Dbal\MutableAclProvider instance.
     */
    protected function getSecurity_Acl_ProviderService()
    {
        return $this->services['security.acl.provider'] = new \Oro\Bundle\SecurityBundle\Acl\Dbal\MutableAclProvider($this->get('doctrine.dbal.default_connection'), $this->get('oro_security.acl.permission_granting_strategy'), array('class_table_name' => 'acl_classes', 'entry_table_name' => 'acl_entries', 'oid_table_name' => 'acl_object_identities', 'oid_ancestors_table_name' => 'acl_object_identity_ancestors', 'sid_table_name' => 'acl_security_identities'), $this->get('security.acl.cache', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'security.acl.voter.basic_permissions' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SecurityBundle\Acl\Voter\AclVoter A Oro\Bundle\SecurityBundle\Acl\Voter\AclVoter instance.
     */
    protected function getSecurity_Acl_Voter_BasicPermissionsService()
    {
        $a = $this->get('oro_security.acl.extension_selector');
        $b = $this->get('oro_security.acl.object_identity_factory');

        $c = new \Oro\Bundle\SecurityBundle\Acl\Domain\RootBasedAclProvider($b);
        $c->setBaseAclProvider($this->get('security.acl.provider'));

        $this->services['security.acl.voter.basic_permissions'] = $instance = new \Oro\Bundle\SecurityBundle\Acl\Voter\AclVoter($c, new \Oro\Bundle\SecurityBundle\Acl\Domain\ObjectIdentityRetrievalStrategy($b), new \Symfony\Component\Security\Acl\Domain\SecurityIdentityRetrievalStrategy($this->get('security.role_hierarchy'), $this->get('security.authentication.trust_resolver')), new \Oro\Bundle\SecurityBundle\Acl\Permission\PermissionMap($a), $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE), true);

        $instance->setAclExtensionSelector($a);

        return $instance;
    }

    /**
     * Gets the 'security.context' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Security\Core\SecurityContext A Symfony\Component\Security\Core\SecurityContext instance.
     */
    protected function getSecurity_ContextService()
    {
        return $this->services['security.context'] = new \Symfony\Component\Security\Core\SecurityContext($this->get('security.authentication.manager'), $this->get('security.access.decision_manager'), false);
    }

    /**
     * Gets the 'security.encoder_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Security\Core\Encoder\EncoderFactory A Symfony\Component\Security\Core\Encoder\EncoderFactory instance.
     */
    protected function getSecurity_EncoderFactoryService()
    {
        return $this->services['security.encoder_factory'] = new \Symfony\Component\Security\Core\Encoder\EncoderFactory(array('Oro\\Bundle\\UserBundle\\Entity\\User' => array('class' => 'Symfony\\Component\\Security\\Core\\Encoder\\MessageDigestPasswordEncoder', 'arguments' => array(0 => 'sha512', 1 => true, 2 => 5000)), 'Symfony\\Component\\Security\\Core\\User\\User' => array('class' => 'Symfony\\Component\\Security\\Core\\Encoder\\PlaintextPasswordEncoder', 'arguments' => array(0 => false))));
    }

    /**
     * Gets the 'security.firewall' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Security\Http\Firewall A Symfony\Component\Security\Http\Firewall instance.
     */
    protected function getSecurity_FirewallService()
    {
        return $this->services['security.firewall'] = new \Symfony\Component\Security\Http\Firewall(new \Symfony\Bundle\SecurityBundle\Security\FirewallMap($this, array('security.firewall.map.context.dev' => new \Symfony\Component\HttpFoundation\RequestMatcher('^/(_(profiler|wdt)|css|images|js)/'), 'security.firewall.map.context.install' => new \Symfony\Component\HttpFoundation\RequestMatcher('^/installer'), 'security.firewall.map.context.wsse_secured' => new \Symfony\Component\HttpFoundation\RequestMatcher('^/api/(rest|soap).*'), 'security.firewall.map.context.login' => new \Symfony\Component\HttpFoundation\RequestMatcher('^/user/(login|reset-request|send-email|check-email)$'), 'security.firewall.map.context.reset_password' => new \Symfony\Component\HttpFoundation\RequestMatcher('^/user/reset/*'), 'security.firewall.map.context.main' => new \Symfony\Component\HttpFoundation\RequestMatcher('^/'))), $this->get('event_dispatcher'));
    }

    /**
     * Gets the 'security.firewall.map.context.dev' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\SecurityBundle\Security\FirewallContext A Symfony\Bundle\SecurityBundle\Security\FirewallContext instance.
     */
    protected function getSecurity_Firewall_Map_Context_DevService()
    {
        return $this->services['security.firewall.map.context.dev'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(), NULL);
    }

    /**
     * Gets the 'security.firewall.map.context.install' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\SecurityBundle\Security\FirewallContext A Symfony\Bundle\SecurityBundle\Security\FirewallContext instance.
     */
    protected function getSecurity_Firewall_Map_Context_InstallService()
    {
        return $this->services['security.firewall.map.context.install'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(), NULL);
    }

    /**
     * Gets the 'security.firewall.map.context.login' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\SecurityBundle\Security\FirewallContext A Symfony\Bundle\SecurityBundle\Security\FirewallContext instance.
     */
    protected function getSecurity_Firewall_Map_Context_LoginService()
    {
        $a = $this->get('security.context');
        $b = $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE);

        return $this->services['security.firewall.map.context.login'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(0 => $this->get('security.channel_listener'), 1 => new \Symfony\Component\Security\Http\Firewall\ContextListener($a, array(0 => $this->get('security.user.provider.concrete.chain_provider'), 1 => $this->get('oro_user.security.provider'), 2 => $this->get('security.user.provider.concrete.in_memory')), 'login', $b, $this->get('event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE)), 2 => new \Symfony\Component\Security\Http\Firewall\AnonymousAuthenticationListener($a, '52f863f4a5961', $b), 3 => $this->get('security.access_listener')), new \Symfony\Component\Security\Http\Firewall\ExceptionListener($a, $this->get('security.authentication.trust_resolver'), $this->get('security.http_utils'), 'login', NULL, NULL, NULL, $b));
    }

    /**
     * Gets the 'security.firewall.map.context.main' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\SecurityBundle\Security\FirewallContext A Symfony\Bundle\SecurityBundle\Security\FirewallContext instance.
     */
    protected function getSecurity_Firewall_Map_Context_MainService()
    {
        $a = $this->get('security.http_utils');
        $b = $this->get('security.user.provider.concrete.chain_provider');
        $c = $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE);
        $d = $this->get('security.context');
        $e = $this->get('http_kernel');
        $f = $this->get('security.authentication.manager');
        $g = $this->get('event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE);

        $h = new \Symfony\Component\Security\Http\RememberMe\TokenBasedRememberMeServices(array(0 => $b), 'ThisTokenIsNotSoSecretChangeIt', 'main', array('name' => 'BAPRM', 'lifetime' => 1209600, 'path' => '/', 'domain' => NULL, 'secure' => false, 'httponly' => true, 'always_remember_me' => false, 'remember_me_parameter' => '_remember_me'), $c);

        $i = new \Symfony\Component\Security\Http\Firewall\LogoutListener($d, $a, new \Symfony\Component\Security\Http\Logout\DefaultLogoutSuccessHandler($a, '/'), array('csrf_parameter' => '_csrf_token', 'intention' => 'logout', 'logout_path' => 'oro_user_security_logout'));
        $i->addHandler(new \Symfony\Component\Security\Http\Logout\SessionLogoutHandler());
        $i->addHandler($h);

        $j = new \Symfony\Component\Security\Http\Authentication\DefaultAuthenticationSuccessHandler($a, array('login_path' => 'oro_user_security_login', 'always_use_default_target_path' => false, 'default_target_path' => '/', 'target_path_parameter' => '_target_path', 'use_referer' => false));
        $j->setProviderKey('main');

        $k = new \Symfony\Component\Security\Http\Firewall\UsernamePasswordFormAuthenticationListener($d, $f, new \Symfony\Component\Security\Http\Session\SessionAuthenticationStrategy('migrate'), $a, 'main', $j, new \Symfony\Component\Security\Http\Authentication\DefaultAuthenticationFailureHandler($e, $a, array('login_path' => 'oro_user_security_login', 'failure_path' => NULL, 'failure_forward' => false, 'failure_path_parameter' => '_failure_path'), $c), array('check_path' => 'oro_user_security_check', 'use_forward' => false, 'require_previous_session' => true, 'username_parameter' => '_username', 'password_parameter' => '_password', 'csrf_parameter' => '_csrf_token', 'intention' => 'authenticate', 'post_only' => true), $c, $g, $this->get('form.csrf_provider'));
        $k->setRememberMeServices($h);

        return $this->services['security.firewall.map.context.main'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(0 => $this->get('security.channel_listener'), 1 => $this->get('security.context_listener.0'), 2 => $i, 3 => $k, 4 => new \Symfony\Component\Security\Http\Firewall\RememberMeListener($d, $h, $f, $c, $g), 5 => $this->get('security.access_listener')), new \Symfony\Component\Security\Http\Firewall\ExceptionListener($d, $this->get('security.authentication.trust_resolver'), $a, 'main', new \Symfony\Component\Security\Http\EntryPoint\FormAuthenticationEntryPoint($e, $a, 'oro_user_security_login', false), NULL, NULL, $c));
    }

    /**
     * Gets the 'security.firewall.map.context.reset_password' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\SecurityBundle\Security\FirewallContext A Symfony\Bundle\SecurityBundle\Security\FirewallContext instance.
     */
    protected function getSecurity_Firewall_Map_Context_ResetPasswordService()
    {
        $a = $this->get('security.context');
        $b = $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE);

        return $this->services['security.firewall.map.context.reset_password'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(0 => $this->get('security.channel_listener'), 1 => new \Symfony\Component\Security\Http\Firewall\ContextListener($a, array(0 => $this->get('security.user.provider.concrete.chain_provider'), 1 => $this->get('oro_user.security.provider'), 2 => $this->get('security.user.provider.concrete.in_memory')), 'reset_password', $b, $this->get('event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE)), 2 => new \Symfony\Component\Security\Http\Firewall\AnonymousAuthenticationListener($a, '52f863f4a5961', $b), 3 => $this->get('security.access_listener')), new \Symfony\Component\Security\Http\Firewall\ExceptionListener($a, $this->get('security.authentication.trust_resolver'), $this->get('security.http_utils'), 'reset_password', NULL, NULL, NULL, $b));
    }

    /**
     * Gets the 'security.firewall.map.context.wsse_secured' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\SecurityBundle\Security\FirewallContext A Symfony\Bundle\SecurityBundle\Security\FirewallContext instance.
     */
    protected function getSecurity_Firewall_Map_Context_WsseSecuredService()
    {
        return $this->services['security.firewall.map.context.wsse_secured'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(0 => $this->get('security.channel_listener'), 1 => $this->get('security.context_listener.0'), 2 => $this->get('escape_wsse_authentication.listener.wsse_secured'), 3 => $this->get('security.access_listener')), new \Symfony\Component\Security\Http\Firewall\ExceptionListener($this->get('security.context'), $this->get('security.authentication.trust_resolver'), $this->get('security.http_utils'), 'wsse_secured', $this->get('escape_wsse_authentication.entry_point.wsse_secured'), NULL, NULL, $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE)));
    }

    /**
     * Gets the 'security.rememberme.response_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Security\Http\RememberMe\ResponseListener A Symfony\Component\Security\Http\RememberMe\ResponseListener instance.
     */
    protected function getSecurity_Rememberme_ResponseListenerService()
    {
        return $this->services['security.rememberme.response_listener'] = new \Symfony\Component\Security\Http\RememberMe\ResponseListener();
    }

    /**
     * Gets the 'security.secure_random' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Security\Core\Util\SecureRandom A Symfony\Component\Security\Core\Util\SecureRandom instance.
     */
    protected function getSecurity_SecureRandomService()
    {
        return $this->services['security.secure_random'] = new \Symfony\Component\Security\Core\Util\SecureRandom('/var/www/orocrm-platform/app/cache/de_/secure_random.seed', $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'security.validator.user_password' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator A Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator instance.
     */
    protected function getSecurity_Validator_UserPasswordService()
    {
        return $this->services['security.validator.user_password'] = new \Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator($this->get('security.context'), $this->get('security.encoder_factory'));
    }

    /**
     * Gets the 'sensio_distribution.webconfigurator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Sensio\Bundle\DistributionBundle\Configurator\Configurator A Sensio\Bundle\DistributionBundle\Configurator\Configurator instance.
     */
    protected function getSensioDistribution_WebconfiguratorService()
    {
        return $this->services['sensio_distribution.webconfigurator'] = new \Sensio\Bundle\DistributionBundle\Configurator\Configurator('/var/www/orocrm-platform/app');
    }

    /**
     * Gets the 'sensio_framework_extra.cache.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Sensio\Bundle\FrameworkExtraBundle\EventListener\CacheListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\CacheListener instance.
     */
    protected function getSensioFrameworkExtra_Cache_ListenerService()
    {
        return $this->services['sensio_framework_extra.cache.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\CacheListener();
    }

    /**
     * Gets the 'sensio_framework_extra.controller.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener instance.
     */
    protected function getSensioFrameworkExtra_Controller_ListenerService()
    {
        return $this->services['sensio_framework_extra.controller.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener($this->get('annotation_reader'));
    }

    /**
     * Gets the 'sensio_framework_extra.converter.datetime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter A Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter instance.
     */
    protected function getSensioFrameworkExtra_Converter_DatetimeService()
    {
        return $this->services['sensio_framework_extra.converter.datetime'] = new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter();
    }

    /**
     * Gets the 'sensio_framework_extra.converter.doctrine.orm' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\SecurityBundle\Request\ParamConverter\DoctrineParamConverter A Oro\Bundle\SecurityBundle\Request\ParamConverter\DoctrineParamConverter instance.
     */
    protected function getSensioFrameworkExtra_Converter_Doctrine_OrmService()
    {
        return $this->services['sensio_framework_extra.converter.doctrine.orm'] = new \Oro\Bundle\SecurityBundle\Request\ParamConverter\DoctrineParamConverter($this->get('doctrine', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('oro_security.security_facade'));
    }

    /**
     * Gets the 'sensio_framework_extra.converter.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener instance.
     */
    protected function getSensioFrameworkExtra_Converter_ListenerService()
    {
        return $this->services['sensio_framework_extra.converter.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener($this->get('sensio_framework_extra.converter.manager'));
    }

    /**
     * Gets the 'sensio_framework_extra.converter.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager A Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager instance.
     */
    protected function getSensioFrameworkExtra_Converter_ManagerService()
    {
        $this->services['sensio_framework_extra.converter.manager'] = $instance = new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager();

        $instance->add($this->get('sensio_framework_extra.converter.doctrine.orm'), 0, 'doctrine.orm');
        $instance->add($this->get('sensio_framework_extra.converter.datetime'), 0, 'datetime');

        return $instance;
    }

    /**
     * Gets the 'sensio_framework_extra.view.guesser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser A Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser instance.
     */
    protected function getSensioFrameworkExtra_View_GuesserService()
    {
        return $this->services['sensio_framework_extra.view.guesser'] = new \Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser($this->get('kernel'));
    }

    /**
     * Gets the 'sensio_framework_extra.view.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener instance.
     */
    protected function getSensioFrameworkExtra_View_ListenerService()
    {
        return $this->services['sensio_framework_extra.view.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener($this);
    }

    /**
     * Gets the 'service_container' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @throws RuntimeException always since this service is expected to be injected dynamically
     */
    protected function getServiceContainerService()
    {
        throw new RuntimeException('You have requested a synthetic service ("service_container"). The DIC does not know how to construct this service.');
    }

    /**
     * Gets the 'session' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\HttpFoundation\Session\Session A Symfony\Component\HttpFoundation\Session\Session instance.
     */
    protected function getSessionService()
    {
        $this->services['session'] = $instance = new \Symfony\Component\HttpFoundation\Session\Session($this->get('session.storage.native'), new \Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag(), new \Symfony\Component\HttpFoundation\Session\Flash\FlashBag());

        $instance->registerBag($this->get('sylius.process_storage.session.bag'));

        return $instance;
    }

    /**
     * Gets the 'session.handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\HttpFoundation\Session\Storage\Handler\NativeFileSessionHandler A Symfony\Component\HttpFoundation\Session\Storage\Handler\NativeFileSessionHandler instance.
     */
    protected function getSession_HandlerService()
    {
        return $this->services['session.handler'] = new \Symfony\Component\HttpFoundation\Session\Storage\Handler\NativeFileSessionHandler('/var/www/orocrm-platform/app/cache/sessions');
    }

    /**
     * Gets the 'session.handler.pdo' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler A Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler instance.
     */
    protected function getSession_Handler_PdoService()
    {
        return $this->services['session.handler.pdo'] = new \Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler($this->get('doctrine.dbal.default.wrapped_connection'), array('db_table' => 'oro_session', 'db_id_col' => 'id'));
    }

    /**
     * Gets the 'session.storage.filesystem' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage A Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage instance.
     */
    protected function getSession_Storage_FilesystemService()
    {
        return $this->services['session.storage.filesystem'] = new \Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage('/var/www/orocrm-platform/app/cache/de_/sessions');
    }

    /**
     * Gets the 'session.storage.native' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage A Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage instance.
     */
    protected function getSession_Storage_NativeService()
    {
        return $this->services['session.storage.native'] = new \Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage(array('name' => 'BAPID', 'gc_maxlifetime' => 3600), $this->get('session.handler'));
    }

    /**
     * Gets the 'session.storage.php_bridge' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage A Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage instance.
     */
    protected function getSession_Storage_PhpBridgeService()
    {
        return $this->services['session.storage.php_bridge'] = new \Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage($this->get('session.handler'));
    }

    /**
     * Gets the 'session_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\FrameworkBundle\EventListener\SessionListener A Symfony\Bundle\FrameworkBundle\EventListener\SessionListener instance.
     */
    protected function getSessionListenerService()
    {
        return $this->services['session_listener'] = new \Symfony\Bundle\FrameworkBundle\EventListener\SessionListener($this);
    }

    /**
     * Gets the 'stof_doctrine_extensions.event_listener.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Stof\DoctrineExtensionsBundle\EventListener\LocaleListener A Stof\DoctrineExtensionsBundle\EventListener\LocaleListener instance.
     */
    protected function getStofDoctrineExtensions_EventListener_LocaleService()
    {
        return $this->services['stof_doctrine_extensions.event_listener.locale'] = new \Stof\DoctrineExtensionsBundle\EventListener\LocaleListener($this->get('stof_doctrine_extensions.listener.translatable'));
    }

    /**
     * Gets the 'stof_doctrine_extensions.uploadable.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Stof\DoctrineExtensionsBundle\Uploadable\UploadableManager A Stof\DoctrineExtensionsBundle\Uploadable\UploadableManager instance.
     */
    protected function getStofDoctrineExtensions_Uploadable_ManagerService()
    {
        $a = new \Gedmo\Uploadable\UploadableListener(new \Stof\DoctrineExtensionsBundle\Uploadable\MimeTypeGuesserAdapter());
        $a->setAnnotationReader($this->get('annotation_reader'));
        $a->setDefaultFileInfoClass('Stof\\DoctrineExtensionsBundle\\Uploadable\\UploadedFileInfo');

        return $this->services['stof_doctrine_extensions.uploadable.manager'] = new \Stof\DoctrineExtensionsBundle\Uploadable\UploadableManager($a, 'Stof\\DoctrineExtensionsBundle\\Uploadable\\UploadedFileInfo');
    }

    /**
     * Gets the 'streamed_response_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\HttpKernel\EventListener\StreamedResponseListener A Symfony\Component\HttpKernel\EventListener\StreamedResponseListener instance.
     */
    protected function getStreamedResponseListenerService()
    {
        return $this->services['streamed_response_listener'] = new \Symfony\Component\HttpKernel\EventListener\StreamedResponseListener();
    }

    /**
     * Gets the 'swiftmailer.email_sender.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener A Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener instance.
     */
    protected function getSwiftmailer_EmailSender_ListenerService()
    {
        return $this->services['swiftmailer.email_sender.listener'] = new \Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener($this);
    }

    /**
     * Gets the 'swiftmailer.mailer.db_spool_mailer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Swift_Mailer A Swift_Mailer instance.
     */
    protected function getSwiftmailer_Mailer_DbSpoolMailerService()
    {
        return $this->services['swiftmailer.mailer.db_spool_mailer'] = new \Swift_Mailer(new \Swift_Transport_SpoolTransport(new \Swift_Events_SimpleEventDispatcher(), $this->get('oro_notification.mailer.spool_db')));
    }

    /**
     * Gets the 'swiftmailer.mailer.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Swift_Mailer A Swift_Mailer instance.
     */
    protected function getSwiftmailer_Mailer_DefaultService()
    {
        return $this->services['swiftmailer.mailer.default'] = new \Swift_Mailer($this->get('swiftmailer.mailer.default.transport'));
    }

    /**
     * Gets the 'swiftmailer.mailer.default.plugin.messagelogger' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Swift_Plugins_MessageLogger A Swift_Plugins_MessageLogger instance.
     */
    protected function getSwiftmailer_Mailer_Default_Plugin_MessageloggerService()
    {
        return $this->services['swiftmailer.mailer.default.plugin.messagelogger'] = new \Swift_Plugins_MessageLogger();
    }

    /**
     * Gets the 'swiftmailer.mailer.default.spool' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Swift_MemorySpool A Swift_MemorySpool instance.
     */
    protected function getSwiftmailer_Mailer_Default_SpoolService()
    {
        return $this->services['swiftmailer.mailer.default.spool'] = new \Swift_MemorySpool();
    }

    /**
     * Gets the 'swiftmailer.mailer.default.transport' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Swift_Transport_SpoolTransport A Swift_Transport_SpoolTransport instance.
     */
    protected function getSwiftmailer_Mailer_Default_TransportService()
    {
        $this->services['swiftmailer.mailer.default.transport'] = $instance = new \Swift_Transport_SpoolTransport($this->get('swiftmailer.mailer.default.transport.eventdispatcher'), $this->get('swiftmailer.mailer.default.spool'));

        $instance->registerPlugin($this->get('swiftmailer.mailer.default.plugin.messagelogger'));

        return $instance;
    }

    /**
     * Gets the 'swiftmailer.mailer.default.transport.real' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Swift_Transport_MailTransport A Swift_Transport_MailTransport instance.
     */
    protected function getSwiftmailer_Mailer_Default_Transport_RealService()
    {
        return $this->services['swiftmailer.mailer.default.transport.real'] = new \Swift_Transport_MailTransport(new \Swift_Transport_SimpleMailInvoker(), $this->get('swiftmailer.mailer.default.transport.eventdispatcher'));
    }

    /**
     * Gets the 'sylius.controller.process' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Sylius\Bundle\FlowBundle\Controller\ProcessController A Sylius\Bundle\FlowBundle\Controller\ProcessController instance.
     */
    protected function getSylius_Controller_ProcessService()
    {
        $this->services['sylius.controller.process'] = $instance = new \Sylius\Bundle\FlowBundle\Controller\ProcessController();

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'sylius.process.builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Sylius\Bundle\FlowBundle\Process\Builder\ProcessBuilder A Sylius\Bundle\FlowBundle\Process\Builder\ProcessBuilder instance.
     */
    protected function getSylius_Process_BuilderService()
    {
        return $this->services['sylius.process.builder'] = new \Sylius\Bundle\FlowBundle\Process\Builder\ProcessBuilder($this);
    }

    /**
     * Gets the 'sylius.process.context' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Sylius\Bundle\FlowBundle\Process\Context\ProcessContext A Sylius\Bundle\FlowBundle\Process\Context\ProcessContext instance.
     */
    protected function getSylius_Process_ContextService()
    {
        return $this->services['sylius.process.context'] = new \Sylius\Bundle\FlowBundle\Process\Context\ProcessContext($this->get('sylius.process_storage.session'));
    }

    /**
     * Gets the 'sylius.process.coordinator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Sylius\Bundle\FlowBundle\Process\Coordinator\Coordinator A Sylius\Bundle\FlowBundle\Process\Coordinator\Coordinator instance.
     */
    protected function getSylius_Process_CoordinatorService()
    {
        $this->services['sylius.process.coordinator'] = $instance = new \Sylius\Bundle\FlowBundle\Process\Coordinator\Coordinator($this->get('router'), $this->get('sylius.process.builder'), $this->get('sylius.process.context'));

        $instance->registerScenario('oro_installer', $this->get('oro_installer.scenario'));

        return $instance;
    }

    /**
     * Gets the 'sylius.process_storage.session' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Sylius\Bundle\FlowBundle\Storage\SessionStorage A Sylius\Bundle\FlowBundle\Storage\SessionStorage instance.
     */
    protected function getSylius_ProcessStorage_SessionService()
    {
        return $this->services['sylius.process_storage.session'] = new \Sylius\Bundle\FlowBundle\Storage\SessionStorage($this->get('session'));
    }

    /**
     * Gets the 'sylius.process_storage.session.bag' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Sylius\Bundle\FlowBundle\Storage\SessionFlowsBag A Sylius\Bundle\FlowBundle\Storage\SessionFlowsBag instance.
     */
    protected function getSylius_ProcessStorage_Session_BagService()
    {
        return $this->services['sylius.process_storage.session.bag'] = new \Sylius\Bundle\FlowBundle\Storage\SessionFlowsBag();
    }

    /**
     * Gets the 'templating' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\FrameworkBundle\Templating\DelegatingEngine A Symfony\Bundle\FrameworkBundle\Templating\DelegatingEngine instance.
     */
    protected function getTemplatingService()
    {
        $this->services['templating'] = $instance = new \Symfony\Bundle\FrameworkBundle\Templating\DelegatingEngine($this, array());

        $instance->addEngine($this->get('debug.templating.engine.twig'));
        $instance->addEngine($this->get('debug.templating.engine.php'));

        return $instance;
    }

    /**
     * Gets the 'templating.asset.package_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\FrameworkBundle\Templating\Asset\PackageFactory A Symfony\Bundle\FrameworkBundle\Templating\Asset\PackageFactory instance.
     */
    protected function getTemplating_Asset_PackageFactoryService()
    {
        return $this->services['templating.asset.package_factory'] = new \Symfony\Bundle\FrameworkBundle\Templating\Asset\PackageFactory($this);
    }

    /**
     * Gets the 'templating.filename_parser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\FrameworkBundle\Templating\TemplateFilenameParser A Symfony\Bundle\FrameworkBundle\Templating\TemplateFilenameParser instance.
     */
    protected function getTemplating_FilenameParserService()
    {
        return $this->services['templating.filename_parser'] = new \Symfony\Bundle\FrameworkBundle\Templating\TemplateFilenameParser();
    }

    /**
     * Gets the 'templating.globals' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\FrameworkBundle\Templating\GlobalVariables A Symfony\Bundle\FrameworkBundle\Templating\GlobalVariables instance.
     */
    protected function getTemplating_GlobalsService()
    {
        return $this->services['templating.globals'] = new \Symfony\Bundle\FrameworkBundle\Templating\GlobalVariables($this);
    }

    /**
     * Gets the 'templating.helper.actions' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\FrameworkBundle\Templating\Helper\ActionsHelper A Symfony\Bundle\FrameworkBundle\Templating\Helper\ActionsHelper instance.
     */
    protected function getTemplating_Helper_ActionsService()
    {
        return $this->services['templating.helper.actions'] = new \Symfony\Bundle\FrameworkBundle\Templating\Helper\ActionsHelper($this->get('fragment.handler'));
    }

    /**
     * Gets the 'templating.helper.assets' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Templating\Helper\CoreAssetsHelper A Symfony\Component\Templating\Helper\CoreAssetsHelper instance.
     * 
     * @throws InactiveScopeException when the 'templating.helper.assets' service is requested while the 'request' scope is not active
     */
    protected function getTemplating_Helper_AssetsService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('templating.helper.assets', 'request');
        }

        return $this->services['templating.helper.assets'] = $this->scopedServices['request']['templating.helper.assets'] = new \Symfony\Component\Templating\Helper\CoreAssetsHelper(new \Symfony\Bundle\FrameworkBundle\Templating\Asset\PathPackage($this->get('request'), NULL, '%s?%s'), array());
    }

    /**
     * Gets the 'templating.helper.code' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\FrameworkBundle\Templating\Helper\CodeHelper A Symfony\Bundle\FrameworkBundle\Templating\Helper\CodeHelper instance.
     */
    protected function getTemplating_Helper_CodeService()
    {
        return $this->services['templating.helper.code'] = new \Symfony\Bundle\FrameworkBundle\Templating\Helper\CodeHelper(NULL, '/var/www/orocrm-platform/app', 'UTF-8');
    }

    /**
     * Gets the 'templating.helper.form' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\FrameworkBundle\Templating\Helper\FormHelper A Symfony\Bundle\FrameworkBundle\Templating\Helper\FormHelper instance.
     */
    protected function getTemplating_Helper_FormService()
    {
        return $this->services['templating.helper.form'] = new \Symfony\Bundle\FrameworkBundle\Templating\Helper\FormHelper(new \Symfony\Component\Form\FormRenderer(new \Symfony\Component\Form\Extension\Templating\TemplatingRendererEngine($this->get('debug.templating.engine.php'), array(0 => 'FrameworkBundle:Form')), $this->get('form.csrf_provider', ContainerInterface::NULL_ON_INVALID_REFERENCE)));
    }

    /**
     * Gets the 'templating.helper.logout_url' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\SecurityBundle\Templating\Helper\LogoutUrlHelper A Symfony\Bundle\SecurityBundle\Templating\Helper\LogoutUrlHelper instance.
     */
    protected function getTemplating_Helper_LogoutUrlService()
    {
        $this->services['templating.helper.logout_url'] = $instance = new \Symfony\Bundle\SecurityBundle\Templating\Helper\LogoutUrlHelper($this, $this->get('router'));

        $instance->registerListener('main', 'oro_user_security_logout', 'logout', '_csrf_token', NULL);

        return $instance;
    }

    /**
     * Gets the 'templating.helper.request' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\FrameworkBundle\Templating\Helper\RequestHelper A Symfony\Bundle\FrameworkBundle\Templating\Helper\RequestHelper instance.
     */
    protected function getTemplating_Helper_RequestService()
    {
        return $this->services['templating.helper.request'] = new \Symfony\Bundle\FrameworkBundle\Templating\Helper\RequestHelper($this->get('request'));
    }

    /**
     * Gets the 'templating.helper.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\FrameworkBundle\Templating\Helper\RouterHelper A Symfony\Bundle\FrameworkBundle\Templating\Helper\RouterHelper instance.
     */
    protected function getTemplating_Helper_RouterService()
    {
        return $this->services['templating.helper.router'] = new \Symfony\Bundle\FrameworkBundle\Templating\Helper\RouterHelper($this->get('router'));
    }

    /**
     * Gets the 'templating.helper.security' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\SecurityBundle\Templating\Helper\SecurityHelper A Symfony\Bundle\SecurityBundle\Templating\Helper\SecurityHelper instance.
     */
    protected function getTemplating_Helper_SecurityService()
    {
        return $this->services['templating.helper.security'] = new \Symfony\Bundle\SecurityBundle\Templating\Helper\SecurityHelper($this->get('security.context', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'templating.helper.session' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\FrameworkBundle\Templating\Helper\SessionHelper A Symfony\Bundle\FrameworkBundle\Templating\Helper\SessionHelper instance.
     */
    protected function getTemplating_Helper_SessionService()
    {
        return $this->services['templating.helper.session'] = new \Symfony\Bundle\FrameworkBundle\Templating\Helper\SessionHelper($this->get('request'));
    }

    /**
     * Gets the 'templating.helper.slots' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Templating\Helper\SlotsHelper A Symfony\Component\Templating\Helper\SlotsHelper instance.
     */
    protected function getTemplating_Helper_SlotsService()
    {
        return $this->services['templating.helper.slots'] = new \Symfony\Component\Templating\Helper\SlotsHelper();
    }

    /**
     * Gets the 'templating.helper.translator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\FrameworkBundle\Templating\Helper\TranslatorHelper A Symfony\Bundle\FrameworkBundle\Templating\Helper\TranslatorHelper instance.
     */
    protected function getTemplating_Helper_TranslatorService()
    {
        return $this->services['templating.helper.translator'] = new \Symfony\Bundle\FrameworkBundle\Templating\Helper\TranslatorHelper($this->get('translator.default'));
    }

    /**
     * Gets the 'templating.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\FrameworkBundle\Templating\Loader\FilesystemLoader A Symfony\Bundle\FrameworkBundle\Templating\Loader\FilesystemLoader instance.
     */
    protected function getTemplating_LoaderService()
    {
        return $this->services['templating.loader'] = new \Symfony\Bundle\FrameworkBundle\Templating\Loader\FilesystemLoader($this->get('templating.locator'));
    }

    /**
     * Gets the 'templating.name_parser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\FrameworkBundle\Templating\TemplateNameParser A Symfony\Bundle\FrameworkBundle\Templating\TemplateNameParser instance.
     */
    protected function getTemplating_NameParserService()
    {
        return $this->services['templating.name_parser'] = new \Symfony\Bundle\FrameworkBundle\Templating\TemplateNameParser($this->get('kernel'));
    }

    /**
     * Gets the 'translation.dumper.csv' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Translation\Dumper\CsvFileDumper A Symfony\Component\Translation\Dumper\CsvFileDumper instance.
     */
    protected function getTranslation_Dumper_CsvService()
    {
        return $this->services['translation.dumper.csv'] = new \Symfony\Component\Translation\Dumper\CsvFileDumper();
    }

    /**
     * Gets the 'translation.dumper.ini' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Translation\Dumper\IniFileDumper A Symfony\Component\Translation\Dumper\IniFileDumper instance.
     */
    protected function getTranslation_Dumper_IniService()
    {
        return $this->services['translation.dumper.ini'] = new \Symfony\Component\Translation\Dumper\IniFileDumper();
    }

    /**
     * Gets the 'translation.dumper.mo' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Translation\Dumper\MoFileDumper A Symfony\Component\Translation\Dumper\MoFileDumper instance.
     */
    protected function getTranslation_Dumper_MoService()
    {
        return $this->services['translation.dumper.mo'] = new \Symfony\Component\Translation\Dumper\MoFileDumper();
    }

    /**
     * Gets the 'translation.dumper.php' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Translation\Dumper\PhpFileDumper A Symfony\Component\Translation\Dumper\PhpFileDumper instance.
     */
    protected function getTranslation_Dumper_PhpService()
    {
        return $this->services['translation.dumper.php'] = new \Symfony\Component\Translation\Dumper\PhpFileDumper();
    }

    /**
     * Gets the 'translation.dumper.po' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Translation\Dumper\PoFileDumper A Symfony\Component\Translation\Dumper\PoFileDumper instance.
     */
    protected function getTranslation_Dumper_PoService()
    {
        return $this->services['translation.dumper.po'] = new \Symfony\Component\Translation\Dumper\PoFileDumper();
    }

    /**
     * Gets the 'translation.dumper.qt' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Translation\Dumper\QtFileDumper A Symfony\Component\Translation\Dumper\QtFileDumper instance.
     */
    protected function getTranslation_Dumper_QtService()
    {
        return $this->services['translation.dumper.qt'] = new \Symfony\Component\Translation\Dumper\QtFileDumper();
    }

    /**
     * Gets the 'translation.dumper.res' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Translation\Dumper\IcuResFileDumper A Symfony\Component\Translation\Dumper\IcuResFileDumper instance.
     */
    protected function getTranslation_Dumper_ResService()
    {
        return $this->services['translation.dumper.res'] = new \Symfony\Component\Translation\Dumper\IcuResFileDumper();
    }

    /**
     * Gets the 'translation.dumper.xliff' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Translation\Dumper\XliffFileDumper A Symfony\Component\Translation\Dumper\XliffFileDumper instance.
     */
    protected function getTranslation_Dumper_XliffService()
    {
        return $this->services['translation.dumper.xliff'] = new \Symfony\Component\Translation\Dumper\XliffFileDumper();
    }

    /**
     * Gets the 'translation.dumper.yml' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Translation\Dumper\YamlFileDumper A Symfony\Component\Translation\Dumper\YamlFileDumper instance.
     */
    protected function getTranslation_Dumper_YmlService()
    {
        return $this->services['translation.dumper.yml'] = new \Symfony\Component\Translation\Dumper\YamlFileDumper();
    }

    /**
     * Gets the 'translation.extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Translation\Extractor\ChainExtractor A Symfony\Component\Translation\Extractor\ChainExtractor instance.
     */
    protected function getTranslation_ExtractorService()
    {
        $this->services['translation.extractor'] = $instance = new \Symfony\Component\Translation\Extractor\ChainExtractor();

        $instance->addExtractor('php', $this->get('translation.extractor.php'));
        $instance->addExtractor('twig', $this->get('twig.translation.extractor'));
        $instance->addExtractor('oro_translation_php_extractor', $this->get('oro_translation.extractor.php_code_extractor'));
        $instance->addExtractor('navigation_translation_extractor', $this->get('oro_navigation.translation.extractor'));

        return $instance;
    }

    /**
     * Gets the 'translation.extractor.php' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor A Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor instance.
     */
    protected function getTranslation_Extractor_PhpService()
    {
        return $this->services['translation.extractor.php'] = new \Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor();
    }

    /**
     * Gets the 'translation.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader A Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader instance.
     */
    protected function getTranslation_LoaderService()
    {
        $a = $this->get('translation.loader.xliff');

        $this->services['translation.loader'] = $instance = new \Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader();

        $instance->addLoader('php', $this->get('translation.loader.php'));
        $instance->addLoader('yml', $this->get('translation.loader.yml'));
        $instance->addLoader('xlf', $a);
        $instance->addLoader('xliff', $a);
        $instance->addLoader('po', $this->get('translation.loader.po'));
        $instance->addLoader('mo', $this->get('translation.loader.mo'));
        $instance->addLoader('ts', $this->get('translation.loader.qt'));
        $instance->addLoader('csv', $this->get('translation.loader.csv'));
        $instance->addLoader('res', $this->get('translation.loader.res'));
        $instance->addLoader('dat', $this->get('translation.loader.dat'));
        $instance->addLoader('ini', $this->get('translation.loader.ini'));
        $instance->addLoader('oro_database_translation', $this->get('oro_translation.database_translation.loader'));

        return $instance;
    }

    /**
     * Gets the 'translation.loader.csv' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Translation\Loader\CsvFileLoader A Symfony\Component\Translation\Loader\CsvFileLoader instance.
     */
    protected function getTranslation_Loader_CsvService()
    {
        return $this->services['translation.loader.csv'] = new \Symfony\Component\Translation\Loader\CsvFileLoader();
    }

    /**
     * Gets the 'translation.loader.dat' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Translation\Loader\IcuResFileLoader A Symfony\Component\Translation\Loader\IcuResFileLoader instance.
     */
    protected function getTranslation_Loader_DatService()
    {
        return $this->services['translation.loader.dat'] = new \Symfony\Component\Translation\Loader\IcuResFileLoader();
    }

    /**
     * Gets the 'translation.loader.ini' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Translation\Loader\IniFileLoader A Symfony\Component\Translation\Loader\IniFileLoader instance.
     */
    protected function getTranslation_Loader_IniService()
    {
        return $this->services['translation.loader.ini'] = new \Symfony\Component\Translation\Loader\IniFileLoader();
    }

    /**
     * Gets the 'translation.loader.mo' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Translation\Loader\MoFileLoader A Symfony\Component\Translation\Loader\MoFileLoader instance.
     */
    protected function getTranslation_Loader_MoService()
    {
        return $this->services['translation.loader.mo'] = new \Symfony\Component\Translation\Loader\MoFileLoader();
    }

    /**
     * Gets the 'translation.loader.php' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Translation\Loader\PhpFileLoader A Symfony\Component\Translation\Loader\PhpFileLoader instance.
     */
    protected function getTranslation_Loader_PhpService()
    {
        return $this->services['translation.loader.php'] = new \Symfony\Component\Translation\Loader\PhpFileLoader();
    }

    /**
     * Gets the 'translation.loader.po' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Translation\Loader\PoFileLoader A Symfony\Component\Translation\Loader\PoFileLoader instance.
     */
    protected function getTranslation_Loader_PoService()
    {
        return $this->services['translation.loader.po'] = new \Symfony\Component\Translation\Loader\PoFileLoader();
    }

    /**
     * Gets the 'translation.loader.qt' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Translation\Loader\QtFileLoader A Symfony\Component\Translation\Loader\QtFileLoader instance.
     */
    protected function getTranslation_Loader_QtService()
    {
        return $this->services['translation.loader.qt'] = new \Symfony\Component\Translation\Loader\QtFileLoader();
    }

    /**
     * Gets the 'translation.loader.res' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Translation\Loader\IcuResFileLoader A Symfony\Component\Translation\Loader\IcuResFileLoader instance.
     */
    protected function getTranslation_Loader_ResService()
    {
        return $this->services['translation.loader.res'] = new \Symfony\Component\Translation\Loader\IcuResFileLoader();
    }

    /**
     * Gets the 'translation.loader.xliff' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Translation\Loader\XliffFileLoader A Symfony\Component\Translation\Loader\XliffFileLoader instance.
     */
    protected function getTranslation_Loader_XliffService()
    {
        return $this->services['translation.loader.xliff'] = new \Symfony\Component\Translation\Loader\XliffFileLoader();
    }

    /**
     * Gets the 'translation.loader.yml' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Translation\Loader\YamlFileLoader A Symfony\Component\Translation\Loader\YamlFileLoader instance.
     */
    protected function getTranslation_Loader_YmlService()
    {
        return $this->services['translation.loader.yml'] = new \Symfony\Component\Translation\Loader\YamlFileLoader();
    }

    /**
     * Gets the 'translation.writer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Translation\Writer\TranslationWriter A Symfony\Component\Translation\Writer\TranslationWriter instance.
     */
    protected function getTranslation_WriterService()
    {
        $this->services['translation.writer'] = $instance = new \Symfony\Component\Translation\Writer\TranslationWriter();

        $instance->addDumper('php', $this->get('translation.dumper.php'));
        $instance->addDumper('xlf', $this->get('translation.dumper.xliff'));
        $instance->addDumper('po', $this->get('translation.dumper.po'));
        $instance->addDumper('mo', $this->get('translation.dumper.mo'));
        $instance->addDumper('yml', $this->get('translation.dumper.yml'));
        $instance->addDumper('ts', $this->get('translation.dumper.qt'));
        $instance->addDumper('csv', $this->get('translation.dumper.csv'));
        $instance->addDumper('ini', $this->get('translation.dumper.ini'));
        $instance->addDumper('res', $this->get('translation.dumper.res'));

        return $instance;
    }

    /**
     * Gets the 'translator.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Oro\Bundle\TranslationBundle\Translation\Translator A Oro\Bundle\TranslationBundle\Translation\Translator instance.
     */
    protected function getTranslator_DefaultService()
    {
        $this->services['translator.default'] = $instance = new \Oro\Bundle\TranslationBundle\Translation\Translator($this, new \Symfony\Component\Translation\MessageSelector(), array('translation.loader.php' => array(0 => 'php'), 'translation.loader.yml' => array(0 => 'yml'), 'translation.loader.xliff' => array(0 => 'xlf', 1 => 'xliff'), 'translation.loader.po' => array(0 => 'po'), 'translation.loader.mo' => array(0 => 'mo'), 'translation.loader.qt' => array(0 => 'ts'), 'translation.loader.csv' => array(0 => 'csv'), 'translation.loader.res' => array(0 => 'res'), 'translation.loader.dat' => array(0 => 'dat'), 'translation.loader.ini' => array(0 => 'ini'), 'oro_translation.database_translation.loader' => array(0 => 'oro_database_translation')), array('cache_dir' => '/var/www/orocrm-platform/app/cache/de_/translations', 'debug' => true));

        $instance->setFallbackLocales(array(0 => 'en'));
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.it.xlf', 'it', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.nl.xlf', 'nl', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.no.xlf', 'no', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.fi.xlf', 'fi', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.cy.xlf', 'cy', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ar.xlf', 'ar', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.el.xlf', 'el', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ca.xlf', 'ca', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.pl.xlf', 'pl', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sv.xlf', 'sv', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.pt.xlf', 'pt', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.da.xlf', 'da', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.hy.xlf', 'hy', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.lb.xlf', 'lb', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sk.xlf', 'sk', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.de.xlf', 'de', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sq.xlf', 'sq', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.cs.xlf', 'cs', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.en.xlf', 'en', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.fr.xlf', 'fr', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sl.xlf', 'sl', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.pt_BR.xlf', 'pt_BR', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sr_Cyrl.xlf', 'sr_Cyrl', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.he.xlf', 'he', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.zh_CN.xlf', 'zh_CN', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.bg.xlf', 'bg', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.id.xlf', 'id', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.mn.xlf', 'mn', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sr_Latn.xlf', 'sr_Latn', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.nb.xlf', 'nb', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.hr.xlf', 'hr', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.et.xlf', 'et', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ja.xlf', 'ja', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.tr.xlf', 'tr', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ro.xlf', 'ro', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.gl.xlf', 'gl', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.af.xlf', 'af', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.eu.xlf', 'eu', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.es.xlf', 'es', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.lt.xlf', 'lt', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.uk.xlf', 'uk', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.hu.xlf', 'hu', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.fa.xlf', 'fa', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ru.xlf', 'ru', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.it.xlf', 'it', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.nl.xlf', 'nl', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.fi.xlf', 'fi', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ar.xlf', 'ar', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.el.xlf', 'el', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ca.xlf', 'ca', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.pl.xlf', 'pl', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sv.xlf', 'sv', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.pt.xlf', 'pt', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.da.xlf', 'da', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.hy.xlf', 'hy', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.lb.xlf', 'lb', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sk.xlf', 'sk', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.de.xlf', 'de', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.cs.xlf', 'cs', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.en.xlf', 'en', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.fr.xlf', 'fr', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sl.xlf', 'sl', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.pt_BR.xlf', 'pt_BR', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sr_Cyrl.xlf', 'sr_Cyrl', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.he.xlf', 'he', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.zh_CN.xlf', 'zh_CN', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.bg.xlf', 'bg', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.id.xlf', 'id', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.mn.xlf', 'mn', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sr_Latn.xlf', 'sr_Latn', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.nb.xlf', 'nb', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.hr.xlf', 'hr', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ua.xlf', 'ua', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.et.xlf', 'et', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ja.xlf', 'ja', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ro.xlf', 'ro', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.lv.xlf', 'lv', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.gl.xlf', 'gl', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.eu.xlf', 'eu', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.es.xlf', 'es', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.lt.xlf', 'lt', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.hu.xlf', 'hu', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.fa.xlf', 'fa', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ru.xlf', 'ru', 'validators');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.cs.xlf', 'cs', 'security');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.no.xlf', 'no', 'security');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.nl.xlf', 'nl', 'security');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.ru.xlf', 'ru', 'security');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.fr.xlf', 'fr', 'security');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.tr.xlf', 'tr', 'security');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.gl.xlf', 'gl', 'security');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.pt_PT.xlf', 'pt_PT', 'security');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.ca.xlf', 'ca', 'security');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.it.xlf', 'it', 'security');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.hu.xlf', 'hu', 'security');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.en.xlf', 'en', 'security');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.sr_Cyrl.xlf', 'sr_Cyrl', 'security');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.sr_Latn.xlf', 'sr_Latn', 'security');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.es.xlf', 'es', 'security');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.ro.xlf', 'ro', 'security');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.pt_BR.xlf', 'pt_BR', 'security');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.ar.xlf', 'ar', 'security');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.sl.xlf', 'sl', 'security');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.lb.xlf', 'lb', 'security');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.pl.xlf', 'pl', 'security');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.de.xlf', 'de', 'security');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.el.xlf', 'el', 'security');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.da.xlf', 'da', 'security');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.ua.xlf', 'ua', 'security');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.sv.xlf', 'sv', 'security');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.fa.xlf', 'fa', 'security');
        $instance->addResource('xlf', '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../../Resources/translations/security.sk.xlf', 'sk', 'security');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/genemu/form-bundle/Genemu/Bundle/FormBundle/Resources/translations/validators.en.yml', 'en', 'validators');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/genemu/form-bundle/Genemu/Bundle/FormBundle/Resources/translations/validators.fr.yml', 'fr', 'validators');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/genemu/form-bundle/Genemu/Bundle/FormBundle/Resources/translations/validators.de.yml', 'de', 'validators');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/lexik/maintenance-bundle/Lexik/Bundle/MaintenanceBundle/Resources/translations/maintenance.en.yml', 'en', 'maintenance');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/lexik/maintenance-bundle/Lexik/Bundle/MaintenanceBundle/Resources/translations/maintenance.fr.yml', 'fr', 'maintenance');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/SecurityBundle/Resources/translations/messages.en.yml', 'en', 'messages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/UIBundle/Resources/translations/jsmessages.en.yml', 'en', 'jsmessages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/UIBundle/Resources/translations/messages.en.yml', 'en', 'messages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/EntityBundle/Resources/translations/messages.en.yml', 'en', 'messages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/AddressBundle/Resources/translations/jsmessages.en.yml', 'en', 'jsmessages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/AddressBundle/Resources/translations/validators.en.yml', 'en', 'validators');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/AddressBundle/Resources/translations/messages.en.yml', 'en', 'messages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/AddressBundle/Resources/translations/entities.en.yml', 'en', 'entities');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/CalendarBundle/Resources/translations/jsmessages.en.yml', 'en', 'jsmessages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/CalendarBundle/Resources/translations/messages.en.yml', 'en', 'messages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/ConfigBundle/Resources/translations/jsmessages.en.yml', 'en', 'jsmessages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/ConfigBundle/Resources/translations/messages.en.yml', 'en', 'messages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/CronBundle/Resources/translations/jsmessages.en.yml', 'en', 'jsmessages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/CronBundle/Resources/translations/messages.en.yml', 'en', 'messages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/DashboardBundle/Resources/translations/messages.en.yml', 'en', 'messages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/DataAuditBundle/Resources/translations/messages.en.yml', 'en', 'messages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/DataGridBundle/Resources/translations/jsmessages.en.yml', 'en', 'jsmessages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/DataGridBundle/Resources/translations/jsmessages.es.yml', 'es', 'jsmessages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/DataGridBundle/Resources/translations/messages.en.yml', 'en', 'messages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/EmailBundle/Resources/translations/jsmessages.en.yml', 'en', 'jsmessages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/EmailBundle/Resources/translations/messages.en.yml', 'en', 'messages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/EntityConfigBundle/Resources/translations/messages.en.yml', 'en', 'messages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/EntityExtendBundle/Resources/translations/messages.en.yml', 'en', 'messages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/FilterBundle/Resources/translations/jsmessages.en.yml', 'en', 'jsmessages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/FilterBundle/Resources/translations/messages.en.yml', 'en', 'messages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/FormBundle/Resources/translations/jsmessages.en.yml', 'en', 'jsmessages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/FormBundle/Resources/translations/messages.en.yml', 'en', 'messages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/HelpBundle/Resources/translations/messages.en.yml', 'en', 'messages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/ImportExportBundle/Resources/translations/jsmessages.en.yml', 'en', 'jsmessages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/ImportExportBundle/Resources/translations/messages.en.yml', 'en', 'messages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/InstallerBundle/Resources/translations/validators.en.yml', 'en', 'validators');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/InstallerBundle/Resources/translations/messages.en.yml', 'en', 'messages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/IntegrationBundle/Resources/translations/jsmessages.en.yml', 'en', 'jsmessages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/IntegrationBundle/Resources/translations/messages.en.yml', 'en', 'messages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/LocaleBundle/Resources/translations/jsmessages.en.yml', 'en', 'jsmessages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/LocaleBundle/Resources/translations/messages.en.yml', 'en', 'messages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/NotificationBundle/Resources/translations/validators.en.yml', 'en', 'validators');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/NotificationBundle/Resources/translations/messages.en.yml', 'en', 'messages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/OrganizationBundle/Resources/translations/messages.en.yml', 'en', 'messages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/QueryDesignerBundle/Resources/translations/jsmessages.en.yml', 'en', 'jsmessages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/QueryDesignerBundle/Resources/translations/validators.en.yml', 'en', 'validators');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/QueryDesignerBundle/Resources/translations/messages.en.yml', 'en', 'messages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/ReportBundle/Resources/translations/jsmessages.en.yml', 'en', 'jsmessages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/ReportBundle/Resources/translations/messages.en.yml', 'en', 'messages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/SearchBundle/Resources/translations/messages.en.yml', 'en', 'messages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/SidebarBundle/Resources/translations/jsmessages.en.yml', 'en', 'jsmessages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/SyncBundle/Resources/translations/jsmessages.en.yml', 'en', 'jsmessages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/TagBundle/Resources/translations/jsmessages.en.yml', 'en', 'jsmessages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/TagBundle/Resources/translations/messages.en.yml', 'en', 'messages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/UserBundle/Resources/translations/jsmessages.en.yml', 'en', 'jsmessages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/UserBundle/Resources/translations/validators.en.yml', 'en', 'validators');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/UserBundle/Resources/translations/messages.en.yml', 'en', 'messages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/WorkflowBundle/Resources/translations/messages.en.yml', 'en', 'messages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/sylius/flow-bundle/Sylius/Bundle/FlowBundle/Resources/translations/messages.hr.yml', 'hr', 'messages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/sylius/flow-bundle/Sylius/Bundle/FlowBundle/Resources/translations/messages.en.yml', 'en', 'messages');
        $instance->addResource('yml', '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/NavigationBundle/Resources/translations/jsmessages.en.yml', 'en', 'jsmessages');
        $instance->addResource('yml', '/var/www/orocrm-platform/app/Resources/translations/install.en.yml', 'en', 'install');

        return $instance;
    }

    /**
     * Gets the 'twig' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Twig_Environment A Twig_Environment instance.
     */
    protected function getTwigService()
    {
        $this->services['twig'] = $instance = new \Twig_Environment($this->get('twig.loader'), array('exception_controller' => 'FOS\\RestBundle\\Controller\\ExceptionController::showAction', 'debug' => true, 'strict_variables' => true, 'autoescape_service' => NULL, 'autoescape_service_method' => NULL, 'cache' => '/var/www/orocrm-platform/app/cache/de_/twig', 'charset' => 'UTF-8', 'paths' => array()));

        $instance->addExtension($this->get('twig.extension.intl'));
        $instance->addExtension(new \Symfony\Bundle\SecurityBundle\Twig\Extension\LogoutUrlExtension($this->get('templating.helper.logout_url')));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\SecurityExtension($this->get('security.context', ContainerInterface::NULL_ON_INVALID_REFERENCE)));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\TranslationExtension($this->get('translator.default')));
        $instance->addExtension(new \Symfony\Bundle\TwigBundle\Extension\AssetsExtension($this));
        $instance->addExtension(new \Symfony\Bundle\TwigBundle\Extension\ActionsExtension($this));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\CodeExtension(NULL, '/var/www/orocrm-platform/app', 'UTF-8'));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\RoutingExtension($this->get('router')));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\YamlExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\HttpKernelExtension($this->get('fragment.handler')));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\FormExtension($this->get('twig.form.renderer')));
        $instance->addExtension(new \Twig_Extension_Debug());
        $instance->addExtension(new \Symfony\Bundle\AsseticBundle\Twig\AsseticExtension($this->get('assetic.asset_factory'), $this->get('templating.name_parser'), false, array(), array(0 => 'FrameworkBundle', 1 => 'SecurityBundle', 2 => 'TwigBundle', 3 => 'MonologBundle', 4 => 'SwiftmailerBundle', 5 => 'AsseticBundle', 6 => 'DoctrineBundle', 7 => 'DoctrineFixturesBundle', 8 => 'SensioFrameworkExtraBundle', 9 => 'JMSSerializerBundle', 10 => 'KnpPaginatorBundle', 11 => 'KnpMenuBundle', 12 => 'FOSRestBundle', 13 => 'FOSJsRoutingBundle', 14 => 'NelmioApiDocBundle', 15 => 'BeSimpleSoapBundle', 16 => 'StofDoctrineExtensionsBundle', 17 => 'EscapeWSSEAuthenticationBundle', 18 => 'LiipImagineBundle', 19 => 'GenemuFormBundle', 20 => 'A2lixTranslationFormBundle', 21 => 'LexikMaintenanceBundle', 22 => 'OroSecurityBundle', 23 => 'OroUIBundle', 24 => 'OroEntityBundle', 25 => 'JDareClankBundle', 26 => 'JMSJobQueueBundle', 27 => 'OroAddressBundle', 28 => 'OroAsseticBundle', 29 => 'OroBatchBundle', 30 => 'OroBusinessEntitiesBundle', 31 => 'OroCalendarBundle', 32 => 'OroConfigBundle', 33 => 'OroCronBundle', 34 => 'OroDashboardBundle', 35 => 'OroDataAuditBundle', 36 => 'OroDataGridBundle', 37 => 'OroDistributionBundle', 38 => 'OroEmailBundle', 39 => 'OroEntityConfigBundle', 40 => 'OroEntityExtendBundle', 41 => 'OroFilterBundle', 42 => 'OroFormBundle', 43 => 'OroHelpBundle', 44 => 'OroImapBundle', 45 => 'OroImportExportBundle', 46 => 'OroInstallerBundle', 47 => 'OroIntegrationBundle', 48 => 'OroLocaleBundle', 49 => 'OroMeasureBundle', 50 => 'OroNotificationBundle', 51 => 'OroOrganizationBundle', 52 => 'OroPlatformBundle', 53 => 'OroQueryDesignerBundle', 54 => 'OroReportBundle', 55 => 'OroRequireJSBundle', 56 => 'OroSearchBundle', 57 => 'OroSegmentationTreeBundle', 58 => 'OroSidebarBundle', 59 => 'OroSoapBundle', 60 => 'OroSyncBundle', 61 => 'OroTagBundle', 62 => 'OroThemeBundle', 63 => 'OroTranslationBundle', 64 => 'OroUserBundle', 65 => 'OroWindowsBundle', 66 => 'OroWorkflowBundle', 67 => 'SyliusFlowBundle', 68 => 'OroNavigationBundle', 69 => 'WebProfilerBundle', 70 => 'SensioDistributionBundle', 71 => 'SensioGeneratorBundle'), new \Symfony\Bundle\AsseticBundle\DefaultValueSupplier($this)));
        $instance->addExtension(new \Doctrine\Bundle\DoctrineBundle\Twig\DoctrineExtension());
        $instance->addExtension(new \JMS\Serializer\Twig\SerializerExtension($this->get('jms_serializer')));
        $instance->addExtension($this->get('knp_paginator.twig.extension.pagination'));
        $instance->addExtension(new \Knp\Menu\Twig\MenuExtension($this->get('knp_menu.helper')));
        $instance->addExtension($this->get('nelmio_api_doc.twig.extension.extra_markdown'));
        $instance->addExtension(new \Liip\ImagineBundle\Templating\ImagineExtension($this->get('liip_imagine.cache.manager')));
        $instance->addExtension($this->get('genemu.twig.extension.form'));
        $instance->addExtension($this->get('oro_security.twig.security_extension'));
        $instance->addExtension($this->get('oro_ui.twig.ceil_extension'));
        $instance->addExtension($this->get('oro_ui.twig.ui_extension'));
        $instance->addExtension($this->get('oro_ui.twig.mobile_extension'));
        $instance->addExtension($this->get('oro_ui.twig.form_extension'));
        $instance->addExtension($this->get('oro_ui.twig.widget_extension'));
        $instance->addExtension($this->get('oro_ui.twig.date_extension'));
        $instance->addExtension($this->get('oro_ui.twig.skype_button_extension'));
        $instance->addExtension($this->get('jms_job_queue.twig.extension'));
        $instance->addExtension($this->get('oro_assetic.twig.extension'));
        $instance->addExtension($this->get('oro_calendar.twig.dateformat'));
        $instance->addExtension($this->get('oro_config.twig.config_extension'));
        $instance->addExtension($this->get('oro_dataaudit.twig.extension.auditable'));
        $instance->addExtension($this->get('oro_datagrid.twig.datagrid'));
        $instance->addExtension($this->get('oro_entity_config.twig.extension.dynamic_fields'));
        $instance->addExtension($this->get('oro_form.twig.form_extension'));
        $instance->addExtension($this->get('oro_form.twig.js_validation_extension'));
        $instance->addExtension($this->get('oro_help.twig.extension'));
        $instance->addExtension($this->get('oro_locale.twig.date_format'));
        $instance->addExtension($this->get('oro_locale.twig.locale'));
        $instance->addExtension($this->get('oro_locale.twig.calendar'));
        $instance->addExtension($this->get('oro_locale.twig.date_time'));
        $instance->addExtension($this->get('oro_locale.twig.name'));
        $instance->addExtension($this->get('oro_locale.twig.address'));
        $instance->addExtension($this->get('oro_locale.twig.number'));
        $instance->addExtension($this->get('oro_organization.twig.get_owner'));
        $instance->addExtension($this->get('oro_organization.twig.business_units'));
        $instance->addExtension($this->get('oro_requirejs.twig.requirejs_extension'));
        $instance->addExtension($this->get('oro_search.twig.search_extension'));
        $instance->addExtension($this->get('oro_sidebar.twig.extension'));
        $instance->addExtension($this->get('oro_wamp.twig.sync_extension'));
        $instance->addExtension($this->get('oro_tag.twig.tag.extension'));
        $instance->addExtension($this->get('oro_theme.twig.extension'));
        $instance->addExtension($this->get('oro_user.twig.user_extension'));
        $instance->addExtension($this->get('oro_windows.twig.extension'));
        $instance->addExtension($this->get('oro_workflow.twig.extension.class_name'));
        $instance->addExtension($this->get('oro_workflow.twig.extension.workflow'));
        $instance->addExtension($this->get('oro_workflow.twig.extension.view_attribute'));
        $instance->addExtension($this->get('oro_menu.twig.extension'));
        $instance->addExtension($this->get('oro_navigation.title_service.twig.extension'));
        $instance->addExtension($this->get('oro_navigation.twig.hash_nav_extension'));
        $instance->addExtension($this->get('oro_navigation.twig.content_tags'));
        $instance->addExtension($this->get('jdare_clank.twig.clank_extension'));
        $instance->addGlobal('app', $this->get('templating.globals'));
        $instance->addGlobal('bap', array('layout' => '::base.html.twig'));
        $instance->addGlobal('ws', array('port' => 8080, 'host' => '127.0.0.1'));
        $instance->addGlobal('show_pin_button_on_start_page', true);

        return $instance;
    }

    /**
     * Gets the 'twig.controller.exception' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\TwigBundle\Controller\ExceptionController A Symfony\Bundle\TwigBundle\Controller\ExceptionController instance.
     */
    protected function getTwig_Controller_ExceptionService()
    {
        return $this->services['twig.controller.exception'] = new \Symfony\Bundle\TwigBundle\Controller\ExceptionController($this->get('twig'), true);
    }

    /**
     * Gets the 'twig.exception_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\HttpKernel\EventListener\ExceptionListener A Symfony\Component\HttpKernel\EventListener\ExceptionListener instance.
     */
    protected function getTwig_ExceptionListenerService()
    {
        return $this->services['twig.exception_listener'] = new \Symfony\Component\HttpKernel\EventListener\ExceptionListener('FOS\\RestBundle\\Controller\\ExceptionController::showAction', $this->get('monolog.logger.request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'twig.extension.intl' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Twig_Extensions_Extension_Intl A Twig_Extensions_Extension_Intl instance.
     */
    protected function getTwig_Extension_IntlService()
    {
        return $this->services['twig.extension.intl'] = new \Twig_Extensions_Extension_Intl();
    }

    /**
     * Gets the 'twig.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\TwigBundle\Loader\FilesystemLoader A Symfony\Bundle\TwigBundle\Loader\FilesystemLoader instance.
     */
    protected function getTwig_LoaderService()
    {
        $this->services['twig.loader'] = $instance = new \Symfony\Bundle\TwigBundle\Loader\FilesystemLoader($this->get('templating.locator'), $this->get('templating.name_parser'));

        $instance->addPath('/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Resources/views', 'Framework');
        $instance->addPath('/var/www/orocrm-platform/app/Resources/SecurityBundle/views', 'Security');
        $instance->addPath('/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Bundle/SecurityBundle/Resources/views', 'Security');
        $instance->addPath('/var/www/orocrm-platform/app/Resources/TwigBundle/views', 'Twig');
        $instance->addPath('/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Bundle/TwigBundle/Resources/views', 'Twig');
        $instance->addPath('/var/www/orocrm-platform/app/Resources/SwiftmailerBundle/views', 'Swiftmailer');
        $instance->addPath('/var/www/orocrm-platform/vendor/symfony/swiftmailer-bundle/Symfony/Bundle/SwiftmailerBundle/Resources/views', 'Swiftmailer');
        $instance->addPath('/var/www/orocrm-platform/app/Resources/DoctrineBundle/views', 'Doctrine');
        $instance->addPath('/var/www/orocrm-platform/vendor/doctrine/doctrine-bundle/Doctrine/Bundle/DoctrineBundle/Resources/views', 'Doctrine');
        $instance->addPath('/var/www/orocrm-platform/vendor/knplabs/knp-paginator-bundle/Knp/Bundle/PaginatorBundle/Resources/views', 'KnpPaginator');
        $instance->addPath('/var/www/orocrm-platform/vendor/nelmio/api-doc-bundle/Nelmio/ApiDocBundle/Resources/views', 'NelmioApiDoc');
        $instance->addPath('/var/www/orocrm-platform/vendor/liip/imagine-bundle/Liip/ImagineBundle/Resources/views', 'LiipImagine');
        $instance->addPath('/var/www/orocrm-platform/vendor/genemu/form-bundle/Genemu/Bundle/FormBundle/Resources/views', 'GenemuForm');
        $instance->addPath('/var/www/orocrm-platform/vendor/a2lix/translation-form-bundle/A2lix/TranslationFormBundle/Resources/views', 'A2lixTranslationForm');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/SecurityBundle/Resources/views', 'OroSecurity');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/UIBundle/Resources/views', 'OroUI');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/EntityBundle/Resources/views', 'OroEntity');
        $instance->addPath('/var/www/orocrm-platform/vendor/jdare/clank-bundle/JDare/ClankBundle/Resources/views', 'JDareClank');
        $instance->addPath('/var/www/orocrm-platform/vendor/jms/job-queue-bundle/JMS/JobQueueBundle/Resources/views', 'JMSJobQueue');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/AddressBundle/Resources/views', 'OroAddress');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/AsseticBundle/Resources/views', 'OroAssetic');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/BatchBundle/Resources/views', 'OroBatch');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/CalendarBundle/Resources/views', 'OroCalendar');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/ConfigBundle/Resources/views', 'OroConfig');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/CronBundle/Resources/views', 'OroCron');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/DashboardBundle/Resources/views', 'OroDashboard');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/DataAuditBundle/Resources/views', 'OroDataAudit');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/DataGridBundle/Resources/views', 'OroDataGrid');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/DistributionBundle/Resources/views', 'OroDistribution');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/EmailBundle/Resources/views', 'OroEmail');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/EntityConfigBundle/Resources/views', 'OroEntityConfig');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/EntityExtendBundle/Resources/views', 'OroEntityExtend');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/FilterBundle/Resources/views', 'OroFilter');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/FormBundle/Resources/views', 'OroForm');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/ImportExportBundle/Resources/views', 'OroImportExport');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/InstallerBundle/Resources/views', 'OroInstaller');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/IntegrationBundle/Resources/views', 'OroIntegration');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/LocaleBundle/Resources/views', 'OroLocale');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/NotificationBundle/Resources/views', 'OroNotification');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/OrganizationBundle/Resources/views', 'OroOrganization');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/PlatformBundle/Resources/views', 'OroPlatform');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/QueryDesignerBundle/Resources/views', 'OroQueryDesigner');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/ReportBundle/Resources/views', 'OroReport');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/RequireJSBundle/Resources/views', 'OroRequireJS');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/SearchBundle/Resources/views', 'OroSearch');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/SidebarBundle/Resources/views', 'OroSidebar');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/SyncBundle/Resources/views', 'OroSync');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/TagBundle/Resources/views', 'OroTag');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/TranslationBundle/Resources/views', 'OroTranslation');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/UserBundle/Resources/views', 'OroUser');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/WindowsBundle/Resources/views', 'OroWindows');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/WorkflowBundle/Resources/views', 'OroWorkflow');
        $instance->addPath('/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/NavigationBundle/Resources/views', 'OroNavigation');
        $instance->addPath('/var/www/orocrm-platform/app/Resources/WebProfilerBundle/views', 'WebProfiler');
        $instance->addPath('/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Bundle/WebProfilerBundle/Resources/views', 'WebProfiler');
        $instance->addPath('/var/www/orocrm-platform/vendor/sensio/distribution-bundle/Sensio/Bundle/DistributionBundle/Resources/views', 'SensioDistribution');
        $instance->addPath('/var/www/orocrm-platform/app/Resources/views');
        $instance->addPath('/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Bridge/Twig/Resources/views/Form');
        $instance->addPath('/var/www/orocrm-platform/vendor/knplabs/knp-menu/src/Knp/Menu/Resources/views');

        return $instance;
    }

    /**
     * Gets the 'twig.translation.extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bridge\Twig\Translation\TwigExtractor A Symfony\Bridge\Twig\Translation\TwigExtractor instance.
     */
    protected function getTwig_Translation_ExtractorService()
    {
        return $this->services['twig.translation.extractor'] = new \Symfony\Bridge\Twig\Translation\TwigExtractor($this->get('twig'));
    }

    /**
     * Gets the 'uri_signer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\HttpKernel\UriSigner A Symfony\Component\HttpKernel\UriSigner instance.
     */
    protected function getUriSignerService()
    {
        return $this->services['uri_signer'] = new \Symfony\Component\HttpKernel\UriSigner('ThisTokenIsNotSoSecretChangeIt');
    }

    /**
     * Gets the 'validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Component\Validator\Validator A Symfony\Component\Validator\Validator instance.
     */
    protected function getValidatorService()
    {
        return $this->services['validator'] = new \Symfony\Component\Validator\Validator($this->get('validator.mapping.class_metadata_factory'), new \Symfony\Bundle\FrameworkBundle\Validator\ConstraintValidatorFactory($this, array('security.validator.user_password' => 'security.validator.user_password', 'doctrine.orm.validator.unique' => 'doctrine.orm.validator.unique', 'oro_email.variables_validator' => 'oro_email.validator.variables_validator', 'oro_workflow_transition_is_allowed' => 'oro_workflow.validator.transition_is_allowed')), $this->get('translator.default'), 'validators', array(0 => $this->get('doctrine.orm.validator_initializer')));
    }

    /**
     * Gets the 'web_profiler.controller.exception' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\WebProfilerBundle\Controller\ExceptionController A Symfony\Bundle\WebProfilerBundle\Controller\ExceptionController instance.
     */
    protected function getWebProfiler_Controller_ExceptionService()
    {
        return $this->services['web_profiler.controller.exception'] = new \Symfony\Bundle\WebProfilerBundle\Controller\ExceptionController($this->get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('twig'), true);
    }

    /**
     * Gets the 'web_profiler.controller.profiler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\WebProfilerBundle\Controller\ProfilerController A Symfony\Bundle\WebProfilerBundle\Controller\ProfilerController instance.
     */
    protected function getWebProfiler_Controller_ProfilerService()
    {
        return $this->services['web_profiler.controller.profiler'] = new \Symfony\Bundle\WebProfilerBundle\Controller\ProfilerController($this->get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('twig'), array('data_collector.config' => array(0 => 'config', 1 => '@WebProfiler/Collector/config.html.twig'), 'data_collector.request' => array(0 => 'request', 1 => '@WebProfiler/Collector/request.html.twig'), 'data_collector.exception' => array(0 => 'exception', 1 => '@WebProfiler/Collector/exception.html.twig'), 'data_collector.events' => array(0 => 'events', 1 => '@WebProfiler/Collector/events.html.twig'), 'data_collector.logger' => array(0 => 'logger', 1 => '@WebProfiler/Collector/logger.html.twig'), 'data_collector.time' => array(0 => 'time', 1 => '@WebProfiler/Collector/time.html.twig'), 'data_collector.memory' => array(0 => 'memory', 1 => '@WebProfiler/Collector/memory.html.twig'), 'data_collector.router' => array(0 => 'router', 1 => '@WebProfiler/Collector/router.html.twig'), 'data_collector.security' => array(0 => 'security', 1 => 'SecurityBundle:Collector:security'), 'swiftmailer.data_collector' => array(0 => 'swiftmailer', 1 => '@Swiftmailer/Collector/swiftmailer.html.twig'), 'data_collector.doctrine' => array(0 => 'db', 1 => '@Doctrine/Collector/db.html.twig')), 'bottom');
    }

    /**
     * Gets the 'web_profiler.controller.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\WebProfilerBundle\Controller\RouterController A Symfony\Bundle\WebProfilerBundle\Controller\RouterController instance.
     */
    protected function getWebProfiler_Controller_RouterService()
    {
        return $this->services['web_profiler.controller.router'] = new \Symfony\Bundle\WebProfilerBundle\Controller\RouterController($this->get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('twig'), $this->get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'web_profiler.debug_toolbar' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener A Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener instance.
     */
    protected function getWebProfiler_DebugToolbarService()
    {
        return $this->services['web_profiler.debug_toolbar'] = new \Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener($this->get('twig'), false, 2, 'bottom');
    }

    /**
     * Updates the 'request' service.
     */
    protected function synchronizeRequestService()
    {
        if ($this->initialized('locale_listener')) {
            $this->get('locale_listener')->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }
        if ($this->initialized('fragment.handler')) {
            $this->get('fragment.handler')->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }
        if ($this->initialized('router_listener')) {
            $this->get('router_listener')->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }
        if ($this->initialized('oro_entity.event_listener.custom_entity_grid_subscriber')) {
                    if ($this->has('request')) {
    $this->get('oro_entity.event_listener.custom_entity_grid_subscriber')->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));        }

        }
        if ($this->initialized('oro_entity.event_listener.relation_entity_grid_subscriber')) {
                    if ($this->has('request')) {
    $this->get('oro_entity.event_listener.relation_entity_grid_subscriber')->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));        }

        }
        if ($this->initialized('oro_datagrid.datagrid.request_params')) {
                    if ($this->has('request')) {
    $this->get('oro_datagrid.datagrid.request_params')->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));        }

        }
        if ($this->initialized('oro_locale.locale_listener')) {
                    if ($this->has('request')) {
    $this->get('oro_locale.locale_listener')->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));        }

        }
        if ($this->initialized('oro_notification.locale_listener')) {
                    if ($this->has('request')) {
    $this->get('oro_notification.locale_listener')->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));        }

        }
        if ($this->initialized('oro_user.form.handler.acl_role')) {
            $this->get('oro_user.form.handler.acl_role')->setRequest($this->get('request'));
        }
    }

    /**
     * Gets the 'assetic.asset_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Symfony\Bundle\AsseticBundle\Factory\AssetFactory A Symfony\Bundle\AsseticBundle\Factory\AssetFactory instance.
     */
    protected function getAssetic_AssetFactoryService()
    {
        $this->services['assetic.asset_factory'] = $instance = new \Symfony\Bundle\AsseticBundle\Factory\AssetFactory($this->get('kernel'), $this, $this->getParameterBag(), '/var/www/orocrm-platform/app/../web', false);

        $instance->addWorker(new \Assetic\Factory\Worker\EnsureFilterWorker('/\\.less$/', $this->get('assetic.filter.lessphp')));

        return $instance;
    }

    /**
     * Gets the 'controller_name_converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser A Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser instance.
     */
    protected function getControllerNameConverterService()
    {
        return $this->services['controller_name_converter'] = new \Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser($this->get('kernel'));
    }

    /**
     * Gets the 'doctrine.dbal.logger' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Symfony\Bridge\Doctrine\Logger\DbalLogger A Symfony\Bridge\Doctrine\Logger\DbalLogger instance.
     */
    protected function getDoctrine_Dbal_LoggerService()
    {
        return $this->services['doctrine.dbal.logger'] = new \Symfony\Bridge\Doctrine\Logger\DbalLogger($this->get('monolog.logger.doctrine', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'doctrine.dbal.logger.profiling.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Doctrine\DBAL\Logging\DebugStack A Doctrine\DBAL\Logging\DebugStack instance.
     */
    protected function getDoctrine_Dbal_Logger_Profiling_DefaultService()
    {
        return $this->services['doctrine.dbal.logger.profiling.default'] = new \Doctrine\DBAL\Logging\DebugStack();
    }

    /**
     * Gets the 'doctrine.dbal.logger.profiling.report_source' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Doctrine\DBAL\Logging\DebugStack A Doctrine\DBAL\Logging\DebugStack instance.
     */
    protected function getDoctrine_Dbal_Logger_Profiling_ReportSourceService()
    {
        return $this->services['doctrine.dbal.logger.profiling.report_source'] = new \Doctrine\DBAL\Logging\DebugStack();
    }

    /**
     * Gets the 'doctrine.dbal.logger.profiling.report_target' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Doctrine\DBAL\Logging\DebugStack A Doctrine\DBAL\Logging\DebugStack instance.
     */
    protected function getDoctrine_Dbal_Logger_Profiling_ReportTargetService()
    {
        return $this->services['doctrine.dbal.logger.profiling.report_target'] = new \Doctrine\DBAL\Logging\DebugStack();
    }

    /**
     * Gets the 'doctrine.orm.listeners.resolve_target_entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Doctrine\ORM\Tools\ResolveTargetEntityListener A Doctrine\ORM\Tools\ResolveTargetEntityListener instance.
     */
    protected function getDoctrine_Orm_Listeners_ResolveTargetEntityService()
    {
        $this->services['doctrine.orm.listeners.resolve_target_entity'] = $instance = new \Doctrine\ORM\Tools\ResolveTargetEntityListener();

        $instance->addResolveTargetEntity('Symfony\\Component\\Security\\Core\\User\\UserInterface', 'Oro\\Bundle\\UserBundle\\Entity\\User', array());
        $instance->addResolveTargetEntity('Oro\\Bundle\\EmailBundle\\Entity\\EmailAddress', 'OroEmail\\Cache\\OroEmailBundle\\Entity\\EmailAddressProxy', array());

        return $instance;
    }

    /**
     * Gets the 'jms_serializer.metadata_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Metadata\MetadataFactory A Metadata\MetadataFactory instance.
     */
    protected function getJmsSerializer_MetadataFactoryService()
    {
        $this->services['jms_serializer.metadata_factory'] = $instance = new \Metadata\MetadataFactory(new \Metadata\Driver\LazyLoadingDriver($this, 'jms_serializer.metadata_driver'), 'Metadata\\ClassHierarchyMetadata', true);

        $instance->setCache(new \Metadata\Cache\FileCache('/var/www/orocrm-platform/app/cache/de_/jms_serializer'));

        return $instance;
    }

    /**
     * Gets the 'jms_serializer.unserialize_object_constructor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return JMS\Serializer\Construction\UnserializeObjectConstructor A JMS\Serializer\Construction\UnserializeObjectConstructor instance.
     */
    protected function getJmsSerializer_UnserializeObjectConstructorService()
    {
        return $this->services['jms_serializer.unserialize_object_constructor'] = new \JMS\Serializer\Construction\UnserializeObjectConstructor();
    }

    /**
     * Gets the 'knp_menu.helper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Knp\Menu\Twig\Helper A Knp\Menu\Twig\Helper instance.
     */
    protected function getKnpMenu_HelperService()
    {
        return $this->services['knp_menu.helper'] = new \Knp\Menu\Twig\Helper($this->get('knp_menu.renderer_provider'), $this->get('knp_menu.menu_provider'));
    }

    /**
     * Gets the 'oro_distribution.composer.io' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Composer\IO\BufferIO A Composer\IO\BufferIO instance.
     */
    protected function getOroDistribution_Composer_IoService()
    {
        return $this->services['oro_distribution.composer.io'] = new \Composer\IO\BufferIO();
    }

    /**
     * Gets the 'oro_email.email.owner.provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Oro\Bundle\EmailBundle\Entity\Provider\EmailOwnerProvider A Oro\Bundle\EmailBundle\Entity\Provider\EmailOwnerProvider instance.
     */
    protected function getOroEmail_Email_Owner_ProviderService()
    {
        return $this->services['oro_email.email.owner.provider'] = new \Oro\Bundle\EmailBundle\Entity\Provider\EmailOwnerProvider($this->get('oro_email.email.owner.provider.storage'));
    }

    /**
     * Gets the 'oro_email.email.owner.provider.storage' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Oro\Bundle\EmailBundle\Entity\Provider\EmailOwnerProviderStorage A Oro\Bundle\EmailBundle\Entity\Provider\EmailOwnerProviderStorage instance.
     */
    protected function getOroEmail_Email_Owner_Provider_StorageService()
    {
        $this->services['oro_email.email.owner.provider.storage'] = $instance = new \Oro\Bundle\EmailBundle\Entity\Provider\EmailOwnerProviderStorage();

        $instance->addProvider($this->get('oro_user.email.owner.provider'));

        return $instance;
    }

    /**
     * Gets the 'oro_security.acl.extension_selector' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Oro\Bundle\SecurityBundle\Acl\Extension\AclExtensionSelector A Oro\Bundle\SecurityBundle\Acl\Extension\AclExtensionSelector instance.
     */
    protected function getOroSecurity_Acl_ExtensionSelectorService()
    {
        $a = $this->get('oro_security.acl.object_id_accessor');
        $b = $this->get('oro_entity.orm.entity_class_accessor');
        $c = $this->get('oro_security.owner.ownership_metadata_provider');

        $this->services['oro_security.acl.extension_selector'] = $instance = new \Oro\Bundle\SecurityBundle\Acl\Extension\AclExtensionSelector($a);

        $instance->addAclExtension(new \Oro\Bundle\SecurityBundle\Acl\Extension\ActionAclExtension($this->get('oro_security.action_metadata_provider')));
        $instance->addAclExtension(new \Oro\Bundle\SecurityBundle\Acl\Extension\EntityAclExtension($b, $a, $this->get('oro_entity.orm.entity_class_resolver'), $this->get('oro_security.entity_security_metadata_provider'), $c, new \Oro\Bundle\SecurityBundle\Owner\EntityOwnershipDecisionMaker($this->get('oro_security.ownership_tree_provider'), $b, $a, $this->get('oro_security.owner.entity_owner_accessor'), $c)));

        return $instance;
    }

    /**
     * Gets the 'oro_security.acl.object_id_accessor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Oro\Bundle\SecurityBundle\Acl\Domain\ObjectIdAccessor A Oro\Bundle\SecurityBundle\Acl\Domain\ObjectIdAccessor instance.
     */
    protected function getOroSecurity_Acl_ObjectIdAccessorService()
    {
        return $this->services['oro_security.acl.object_id_accessor'] = new \Oro\Bundle\SecurityBundle\Acl\Domain\ObjectIdAccessor();
    }

    /**
     * Gets the 'oro_security.acl.permission_granting_strategy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Oro\Bundle\SecurityBundle\Acl\Domain\PermissionGrantingStrategy A Oro\Bundle\SecurityBundle\Acl\Domain\PermissionGrantingStrategy instance.
     */
    protected function getOroSecurity_Acl_PermissionGrantingStrategyService()
    {
        $this->services['oro_security.acl.permission_granting_strategy'] = $instance = new \Oro\Bundle\SecurityBundle\Acl\Domain\PermissionGrantingStrategy();

        $instance->setContext($this->get('oro_security.acl.voter_link'));

        return $instance;
    }

    /**
     * Gets the 'oro_security.action_metadata_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Oro\Bundle\SecurityBundle\Metadata\ActionMetadataProvider A Oro\Bundle\SecurityBundle\Metadata\ActionMetadataProvider instance.
     */
    protected function getOroSecurity_ActionMetadataProviderService()
    {
        $a = new \Oro\Bundle\SecurityBundle\Cache\FilesystemCache('/var/www/orocrm-platform/app/cache/de_/oro_data');
        $a->setNamespace('oro_acl_actions.cache');

        return $this->services['oro_security.action_metadata_provider'] = new \Oro\Bundle\SecurityBundle\Metadata\ActionMetadataProvider($this->get('oro_security.acl.annotation_provider'), $a);
    }

    /**
     * Gets the 'oro_security.entity_security_metadata_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Oro\Bundle\SecurityBundle\Metadata\EntitySecurityMetadataProvider A Oro\Bundle\SecurityBundle\Metadata\EntitySecurityMetadataProvider instance.
     */
    protected function getOroSecurity_EntitySecurityMetadataProviderService()
    {
        $a = new \Oro\Bundle\SecurityBundle\Cache\FilesystemCache('/var/www/orocrm-platform/app/cache/de_/oro_data');
        $a->setNamespace('oro_acl_entities.cache');

        return $this->services['oro_security.entity_security_metadata_provider'] = new \Oro\Bundle\SecurityBundle\Metadata\EntitySecurityMetadataProvider($this->get('oro_entity_config.provider.security'), $this->get('oro_entity_config.provider.entity'), $a);
    }

    /**
     * Gets the 'oro_user.security.provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Oro\Bundle\UserBundle\Security\UserProvider A Oro\Bundle\UserBundle\Security\UserProvider instance.
     */
    protected function getOroUser_Security_ProviderService()
    {
        return $this->services['oro_user.security.provider'] = new \Oro\Bundle\UserBundle\Security\UserProvider($this->get('oro_user.manager'));
    }

    /**
     * Gets the 'router.request_context' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Symfony\Component\Routing\RequestContext A Symfony\Component\Routing\RequestContext instance.
     */
    protected function getRouter_RequestContextService()
    {
        return $this->services['router.request_context'] = new \Symfony\Component\Routing\RequestContext('', 'GET', 'localhost', 'http', 80, 443);
    }

    /**
     * Gets the 'security.access.decision_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Symfony\Component\Security\Core\Authorization\AccessDecisionManager A Symfony\Component\Security\Core\Authorization\AccessDecisionManager instance.
     */
    protected function getSecurity_Access_DecisionManagerService()
    {
        return $this->services['security.access.decision_manager'] = new \Symfony\Component\Security\Core\Authorization\AccessDecisionManager(array(0 => new \Symfony\Component\Security\Core\Authorization\Voter\RoleHierarchyVoter($this->get('security.role_hierarchy')), 1 => new \Symfony\Component\Security\Core\Authorization\Voter\AuthenticatedVoter($this->get('security.authentication.trust_resolver')), 2 => $this->get('security.acl.voter.basic_permissions')), 'affirmative', false, true);
    }

    /**
     * Gets the 'security.access_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Symfony\Component\Security\Http\Firewall\AccessListener A Symfony\Component\Security\Http\Firewall\AccessListener instance.
     */
    protected function getSecurity_AccessListenerService()
    {
        return $this->services['security.access_listener'] = new \Symfony\Component\Security\Http\Firewall\AccessListener($this->get('security.context'), $this->get('security.access.decision_manager'), $this->get('security.access_map'), $this->get('security.authentication.manager'));
    }

    /**
     * Gets the 'security.access_map' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Symfony\Component\Security\Http\AccessMap A Symfony\Component\Security\Http\AccessMap instance.
     */
    protected function getSecurity_AccessMapService()
    {
        $this->services['security.access_map'] = $instance = new \Symfony\Component\Security\Http\AccessMap();

        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/admin/'), array(0 => 'ROLE_ADMIN'), NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/api/rest/(latest|v1)/pinbars'), array(0 => 'ROLE_USER'), NULL);

        return $instance;
    }

    /**
     * Gets the 'security.authentication.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager A Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager instance.
     */
    protected function getSecurity_Authentication_ManagerService()
    {
        $a = new \Symfony\Component\Security\Core\User\UserChecker();

        $this->services['security.authentication.manager'] = $instance = new \Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager(array(0 => $this->get('escape_wsse_authentication.provider.wsse_secured'), 1 => new \Symfony\Component\Security\Core\Authentication\Provider\AnonymousAuthenticationProvider('52f863f4a5961'), 2 => new \Symfony\Component\Security\Core\Authentication\Provider\AnonymousAuthenticationProvider('52f863f4a5961'), 3 => new \Symfony\Component\Security\Core\Authentication\Provider\DaoAuthenticationProvider($this->get('security.user.provider.concrete.chain_provider'), $a, 'main', $this->get('security.encoder_factory'), true), 4 => new \Symfony\Component\Security\Core\Authentication\Provider\RememberMeAuthenticationProvider($a, 'ThisTokenIsNotSoSecretChangeIt', 'main')), true);

        $instance->setEventDispatcher($this->get('event_dispatcher'));

        return $instance;
    }

    /**
     * Gets the 'security.authentication.trust_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver A Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver instance.
     */
    protected function getSecurity_Authentication_TrustResolverService()
    {
        return $this->services['security.authentication.trust_resolver'] = new \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver('Symfony\\Component\\Security\\Core\\Authentication\\Token\\AnonymousToken', 'Symfony\\Component\\Security\\Core\\Authentication\\Token\\RememberMeToken');
    }

    /**
     * Gets the 'security.channel_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Symfony\Component\Security\Http\Firewall\ChannelListener A Symfony\Component\Security\Http\Firewall\ChannelListener instance.
     */
    protected function getSecurity_ChannelListenerService()
    {
        return $this->services['security.channel_listener'] = new \Symfony\Component\Security\Http\Firewall\ChannelListener($this->get('security.access_map'), new \Symfony\Component\Security\Http\EntryPoint\RetryAuthenticationEntryPoint(80, 443), $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'security.context_listener.0' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Symfony\Component\Security\Http\Firewall\ContextListener A Symfony\Component\Security\Http\Firewall\ContextListener instance.
     */
    protected function getSecurity_ContextListener_0Service()
    {
        return $this->services['security.context_listener.0'] = new \Symfony\Component\Security\Http\Firewall\ContextListener($this->get('security.context'), array(0 => $this->get('security.user.provider.concrete.chain_provider'), 1 => $this->get('oro_user.security.provider'), 2 => $this->get('security.user.provider.concrete.in_memory')), 'main', $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'security.http_utils' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Symfony\Component\Security\Http\HttpUtils A Symfony\Component\Security\Http\HttpUtils instance.
     */
    protected function getSecurity_HttpUtilsService()
    {
        $a = $this->get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE);

        return $this->services['security.http_utils'] = new \Symfony\Component\Security\Http\HttpUtils($a, $a);
    }

    /**
     * Gets the 'security.role_hierarchy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Symfony\Component\Security\Core\Role\RoleHierarchy A Symfony\Component\Security\Core\Role\RoleHierarchy instance.
     */
    protected function getSecurity_RoleHierarchyService()
    {
        return $this->services['security.role_hierarchy'] = new \Symfony\Component\Security\Core\Role\RoleHierarchy(array());
    }

    /**
     * Gets the 'security.user.provider.concrete.chain_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Symfony\Component\Security\Core\User\ChainUserProvider A Symfony\Component\Security\Core\User\ChainUserProvider instance.
     */
    protected function getSecurity_User_Provider_Concrete_ChainProviderService()
    {
        return $this->services['security.user.provider.concrete.chain_provider'] = new \Symfony\Component\Security\Core\User\ChainUserProvider(array(0 => $this->get('security.user.provider.concrete.in_memory'), 1 => $this->get('oro_user.security.provider')));
    }

    /**
     * Gets the 'security.user.provider.concrete.in_memory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Symfony\Component\Security\Core\User\InMemoryUserProvider A Symfony\Component\Security\Core\User\InMemoryUserProvider instance.
     */
    protected function getSecurity_User_Provider_Concrete_InMemoryService()
    {
        return $this->services['security.user.provider.concrete.in_memory'] = new \Symfony\Component\Security\Core\User\InMemoryUserProvider();
    }

    /**
     * Gets the 'stof_doctrine_extensions.listener.translatable' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Gedmo\Translatable\TranslatableListener A Gedmo\Translatable\TranslatableListener instance.
     */
    protected function getStofDoctrineExtensions_Listener_TranslatableService()
    {
        $this->services['stof_doctrine_extensions.listener.translatable'] = $instance = new \Gedmo\Translatable\TranslatableListener();

        $instance->setAnnotationReader($this->get('annotation_reader'));
        $instance->setDefaultLocale('en');
        $instance->setTranslatableLocale('en');
        $instance->setTranslationFallback(true);
        $instance->setPersistDefaultLocaleTranslation(false);
        $instance->setSkipOnLoad(false);

        return $instance;
    }

    /**
     * Gets the 'swiftmailer.mailer.default.transport.eventdispatcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Swift_Events_SimpleEventDispatcher A Swift_Events_SimpleEventDispatcher instance.
     */
    protected function getSwiftmailer_Mailer_Default_Transport_EventdispatcherService()
    {
        return $this->services['swiftmailer.mailer.default.transport.eventdispatcher'] = new \Swift_Events_SimpleEventDispatcher();
    }

    /**
     * Gets the 'templating.locator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Symfony\Bundle\FrameworkBundle\Templating\Loader\TemplateLocator A Symfony\Bundle\FrameworkBundle\Templating\Loader\TemplateLocator instance.
     */
    protected function getTemplating_LocatorService()
    {
        return $this->services['templating.locator'] = new \Symfony\Bundle\FrameworkBundle\Templating\Loader\TemplateLocator($this->get('file_locator'), '/var/www/orocrm-platform/app/cache/de_');
    }

    /**
     * Gets the 'twig.form.renderer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Symfony\Bridge\Twig\Form\TwigRenderer A Symfony\Bridge\Twig\Form\TwigRenderer instance.
     */
    protected function getTwig_Form_RendererService()
    {
        return $this->services['twig.form.renderer'] = new \Symfony\Bridge\Twig\Form\TwigRenderer(new \Symfony\Bridge\Twig\Form\TwigRendererEngine(array(0 => 'form_div_layout.html.twig', 1 => 'LiipImagineBundle:Form:form_div_layout.html.twig', 2 => 'OroSecurityBundle:Form:fields.html.twig', 3 => 'OroUIBundle:Form:fields.html.twig', 4 => 'OroEntityBundle:Form:fields.html.twig', 5 => 'OroAddressBundle:Include:fields.html.twig', 6 => 'GenemuFormBundle:Form:div_layout.html.twig', 7 => 'GenemuFormBundle:Form:jquery_layout.html.twig', 8 => 'GenemuFormBundle:Form:stylesheet_layout.html.twig', 9 => 'OroFormBundle:Form:fields.html.twig', 10 => 'OroOrganizationBundle:Form:fields.html.twig', 11 => 'OroTranslationBundle:Form:fields.html.twig', 12 => 'OroUserBundle:Form:fields.html.twig', 13 => 'OroUIBundle:Form:translatable.html.twig')), $this->get('form.csrf_provider', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'validator.mapping.class_metadata_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return Symfony\Component\Validator\Mapping\ClassMetadataFactory A Symfony\Component\Validator\Mapping\ClassMetadataFactory instance.
     */
    protected function getValidator_Mapping_ClassMetadataFactoryService()
    {
        return $this->services['validator.mapping.class_metadata_factory'] = new \Symfony\Component\Validator\Mapping\ClassMetadataFactory(new \Symfony\Component\Validator\Mapping\Loader\LoaderChain(array(0 => new \Symfony\Component\Validator\Mapping\Loader\AnnotationLoader($this->get('annotation_reader')), 1 => new \Symfony\Component\Validator\Mapping\Loader\StaticMethodLoader(), 2 => new \Symfony\Component\Validator\Mapping\Loader\XmlFilesLoader(array(0 => '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/config/validation.xml')), 3 => new \Symfony\Component\Validator\Mapping\Loader\YamlFilesLoader(array(0 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/AddressBundle/Resources/config/validation.yml', 1 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/CalendarBundle/Resources/config/validation.yml', 2 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/EmailBundle/Resources/config/validation.yml', 3 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/EntityConfigBundle/Resources/config/validation.yml', 4 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/ImapBundle/Resources/config/validation.yml', 5 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/ImportExportBundle/Resources/config/validation.yml', 6 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/IntegrationBundle/Resources/config/validation.yml', 7 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/NotificationBundle/Resources/config/validation.yml', 8 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/OrganizationBundle/Resources/config/validation.yml', 9 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/ReportBundle/Resources/config/validation.yml', 10 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/TagBundle/Resources/config/validation.yml', 11 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/UserBundle/Resources/config/validation.yml', 12 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/NavigationBundle/Resources/config/validation.yml')))), NULL);
    }

    /**
     * {@inheritdoc}
     */
    public function getParameter($name)
    {
        $name = strtolower($name);

        if (!(isset($this->parameters[$name]) || array_key_exists($name, $this->parameters))) {
            throw new InvalidArgumentException(sprintf('The parameter "%s" must be defined.', $name));
        }

        return $this->parameters[$name];
    }

    /**
     * {@inheritdoc}
     */
    public function hasParameter($name)
    {
        $name = strtolower($name);

        return isset($this->parameters[$name]) || array_key_exists($name, $this->parameters);
    }

    /**
     * {@inheritdoc}
     */
    public function setParameter($name, $value)
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    /**
     * {@inheritDoc}
     */
    public function getParameterBag()
    {
        if (null === $this->parameterBag) {
            $this->parameterBag = new FrozenParameterBag($this->parameters);
        }

        return $this->parameterBag;
    }
    /**
     * Gets the default parameters.
     *
     * @return array An array of the default parameters
     */
    protected function getDefaultParameters()
    {
        return array(
            'kernel.root_dir' => '/var/www/orocrm-platform/app',
            'kernel.environment' => 'dev',
            'kernel.debug' => true,
            'kernel.name' => 'ap_',
            'kernel.cache_dir' => '/var/www/orocrm-platform/app/cache/de_',
            'kernel.logs_dir' => '/var/www/orocrm-platform/app/logs',
            'kernel.bundles' => array(
                'FrameworkBundle' => 'Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle',
                'SecurityBundle' => 'Symfony\\Bundle\\SecurityBundle\\SecurityBundle',
                'TwigBundle' => 'Symfony\\Bundle\\TwigBundle\\TwigBundle',
                'MonologBundle' => 'Symfony\\Bundle\\MonologBundle\\MonologBundle',
                'SwiftmailerBundle' => 'Symfony\\Bundle\\SwiftmailerBundle\\SwiftmailerBundle',
                'AsseticBundle' => 'Symfony\\Bundle\\AsseticBundle\\AsseticBundle',
                'DoctrineBundle' => 'Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle',
                'DoctrineFixturesBundle' => 'Doctrine\\Bundle\\FixturesBundle\\DoctrineFixturesBundle',
                'SensioFrameworkExtraBundle' => 'Sensio\\Bundle\\FrameworkExtraBundle\\SensioFrameworkExtraBundle',
                'JMSSerializerBundle' => 'JMS\\SerializerBundle\\JMSSerializerBundle',
                'KnpPaginatorBundle' => 'Knp\\Bundle\\PaginatorBundle\\KnpPaginatorBundle',
                'KnpMenuBundle' => 'Knp\\Bundle\\MenuBundle\\KnpMenuBundle',
                'FOSRestBundle' => 'FOS\\RestBundle\\FOSRestBundle',
                'FOSJsRoutingBundle' => 'FOS\\JsRoutingBundle\\FOSJsRoutingBundle',
                'NelmioApiDocBundle' => 'Nelmio\\ApiDocBundle\\NelmioApiDocBundle',
                'BeSimpleSoapBundle' => 'BeSimple\\SoapBundle\\BeSimpleSoapBundle',
                'StofDoctrineExtensionsBundle' => 'Stof\\DoctrineExtensionsBundle\\StofDoctrineExtensionsBundle',
                'EscapeWSSEAuthenticationBundle' => 'Escape\\WSSEAuthenticationBundle\\EscapeWSSEAuthenticationBundle',
                'LiipImagineBundle' => 'Liip\\ImagineBundle\\LiipImagineBundle',
                'GenemuFormBundle' => 'Genemu\\Bundle\\FormBundle\\GenemuFormBundle',
                'A2lixTranslationFormBundle' => 'A2lix\\TranslationFormBundle\\A2lixTranslationFormBundle',
                'LexikMaintenanceBundle' => 'Lexik\\Bundle\\MaintenanceBundle\\LexikMaintenanceBundle',
                'OroSecurityBundle' => 'Oro\\Bundle\\SecurityBundle\\OroSecurityBundle',
                'OroUIBundle' => 'Oro\\Bundle\\UIBundle\\OroUIBundle',
                'OroEntityBundle' => 'Oro\\Bundle\\EntityBundle\\OroEntityBundle',
                'JDareClankBundle' => 'JDare\\ClankBundle\\JDareClankBundle',
                'JMSJobQueueBundle' => 'JMS\\JobQueueBundle\\JMSJobQueueBundle',
                'OroAddressBundle' => 'Oro\\Bundle\\AddressBundle\\OroAddressBundle',
                'OroAsseticBundle' => 'Oro\\Bundle\\AsseticBundle\\OroAsseticBundle',
                'OroBatchBundle' => 'Oro\\Bundle\\BatchBundle\\OroBatchBundle',
                'OroBusinessEntitiesBundle' => 'Oro\\Bundle\\BusinessEntitiesBundle\\OroBusinessEntitiesBundle',
                'OroCalendarBundle' => 'Oro\\Bundle\\CalendarBundle\\OroCalendarBundle',
                'OroConfigBundle' => 'Oro\\Bundle\\ConfigBundle\\OroConfigBundle',
                'OroCronBundle' => 'Oro\\Bundle\\CronBundle\\OroCronBundle',
                'OroDashboardBundle' => 'Oro\\Bundle\\DashboardBundle\\OroDashboardBundle',
                'OroDataAuditBundle' => 'Oro\\Bundle\\DataAuditBundle\\OroDataAuditBundle',
                'OroDataGridBundle' => 'Oro\\Bundle\\DataGridBundle\\OroDataGridBundle',
                'OroDistributionBundle' => 'Oro\\Bundle\\DistributionBundle\\OroDistributionBundle',
                'OroEmailBundle' => 'Oro\\Bundle\\EmailBundle\\OroEmailBundle',
                'OroEntityConfigBundle' => 'Oro\\Bundle\\EntityConfigBundle\\OroEntityConfigBundle',
                'OroEntityExtendBundle' => 'Oro\\Bundle\\EntityExtendBundle\\OroEntityExtendBundle',
                'OroFilterBundle' => 'Oro\\Bundle\\FilterBundle\\OroFilterBundle',
                'OroFormBundle' => 'Oro\\Bundle\\FormBundle\\OroFormBundle',
                'OroHelpBundle' => 'Oro\\Bundle\\HelpBundle\\OroHelpBundle',
                'OroImapBundle' => 'Oro\\Bundle\\ImapBundle\\OroImapBundle',
                'OroImportExportBundle' => 'Oro\\Bundle\\ImportExportBundle\\OroImportExportBundle',
                'OroInstallerBundle' => 'Oro\\Bundle\\InstallerBundle\\OroInstallerBundle',
                'OroIntegrationBundle' => 'Oro\\Bundle\\IntegrationBundle\\OroIntegrationBundle',
                'OroLocaleBundle' => 'Oro\\Bundle\\LocaleBundle\\OroLocaleBundle',
                'OroMeasureBundle' => 'Oro\\Bundle\\MeasureBundle\\OroMeasureBundle',
                'OroNotificationBundle' => 'Oro\\Bundle\\NotificationBundle\\OroNotificationBundle',
                'OroOrganizationBundle' => 'Oro\\Bundle\\OrganizationBundle\\OroOrganizationBundle',
                'OroPlatformBundle' => 'Oro\\Bundle\\PlatformBundle\\OroPlatformBundle',
                'OroQueryDesignerBundle' => 'Oro\\Bundle\\QueryDesignerBundle\\OroQueryDesignerBundle',
                'OroReportBundle' => 'Oro\\Bundle\\ReportBundle\\OroReportBundle',
                'OroRequireJSBundle' => 'Oro\\Bundle\\RequireJSBundle\\OroRequireJSBundle',
                'OroSearchBundle' => 'Oro\\Bundle\\SearchBundle\\OroSearchBundle',
                'OroSegmentationTreeBundle' => 'Oro\\Bundle\\SegmentationTreeBundle\\OroSegmentationTreeBundle',
                'OroSidebarBundle' => 'Oro\\Bundle\\SidebarBundle\\OroSidebarBundle',
                'OroSoapBundle' => 'Oro\\Bundle\\SoapBundle\\OroSoapBundle',
                'OroSyncBundle' => 'Oro\\Bundle\\SyncBundle\\OroSyncBundle',
                'OroTagBundle' => 'Oro\\Bundle\\TagBundle\\OroTagBundle',
                'OroThemeBundle' => 'Oro\\Bundle\\ThemeBundle\\OroThemeBundle',
                'OroTranslationBundle' => 'Oro\\Bundle\\TranslationBundle\\OroTranslationBundle',
                'OroUserBundle' => 'Oro\\Bundle\\UserBundle\\OroUserBundle',
                'OroWindowsBundle' => 'Oro\\Bundle\\WindowsBundle\\OroWindowsBundle',
                'OroWorkflowBundle' => 'Oro\\Bundle\\WorkflowBundle\\OroWorkflowBundle',
                'SyliusFlowBundle' => 'Sylius\\Bundle\\FlowBundle\\SyliusFlowBundle',
                'OroNavigationBundle' => 'Oro\\Bundle\\NavigationBundle\\OroNavigationBundle',
                'WebProfilerBundle' => 'Symfony\\Bundle\\WebProfilerBundle\\WebProfilerBundle',
                'SensioDistributionBundle' => 'Sensio\\Bundle\\DistributionBundle\\SensioDistributionBundle',
                'SensioGeneratorBundle' => 'Sensio\\Bundle\\GeneratorBundle\\SensioGeneratorBundle',
            ),
            'kernel.charset' => 'UTF-8',
            'kernel.container_class' => 'ap_DevDebugProjectContainer',
            'oro_email.entity.cache_dir' => '/var/www/orocrm-platform/app/emails',
            'oro_email.entity.cache_namespace' => 'OroEmail\\Cache\\OroEmailBundle\\Entity',
            'oro_email.entity.proxy_name_template' => '%sProxy',
            'database_host' => '127.0.0.1',
            'database_port' => NULL,
            'database_name' => 'bap_standard',
            'database_user' => 'root',
            'database_password' => NULL,
            'mailer_transport' => 'mail',
            'mailer_host' => '127.0.0.1',
            'mailer_port' => NULL,
            'mailer_encryption' => NULL,
            'mailer_user' => NULL,
            'mailer_password' => NULL,
            'websocket_host' => '127.0.0.1',
            'websocket_port' => 8080,
            'session_handler' => 'session.handler.native_file',
            'locale' => 'en',
            'secret' => 'ThisTokenIsNotSoSecretChangeIt',
            'installed' => NULL,
            'controller_resolver.class' => 'Symfony\\Bundle\\FrameworkBundle\\Controller\\ControllerResolver',
            'controller_name_converter.class' => 'Symfony\\Bundle\\FrameworkBundle\\Controller\\ControllerNameParser',
            'response_listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener',
            'streamed_response_listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener',
            'locale_listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener',
            'event_dispatcher.class' => 'Symfony\\Component\\EventDispatcher\\ContainerAwareEventDispatcher',
            'http_kernel.class' => 'Symfony\\Component\\HttpKernel\\DependencyInjection\\ContainerAwareHttpKernel',
            'filesystem.class' => 'Symfony\\Component\\Filesystem\\Filesystem',
            'cache_warmer.class' => 'Symfony\\Component\\HttpKernel\\CacheWarmer\\CacheWarmerAggregate',
            'cache_clearer.class' => 'Symfony\\Component\\HttpKernel\\CacheClearer\\ChainCacheClearer',
            'file_locator.class' => 'Symfony\\Component\\HttpKernel\\Config\\FileLocator',
            'uri_signer.class' => 'Symfony\\Component\\HttpKernel\\UriSigner',
            'fragment.handler.class' => 'Symfony\\Component\\HttpKernel\\Fragment\\FragmentHandler',
            'fragment.renderer.inline.class' => 'Symfony\\Component\\HttpKernel\\Fragment\\InlineFragmentRenderer',
            'fragment.renderer.hinclude.class' => 'Symfony\\Bundle\\FrameworkBundle\\Fragment\\ContainerAwareHIncludeFragmentRenderer',
            'fragment.renderer.hinclude.global_template' => NULL,
            'fragment.path' => '/_fragment',
            'translator.class' => 'Oro\\Bundle\\TranslationBundle\\Translation\\Translator',
            'translator.identity.class' => 'Symfony\\Component\\Translation\\IdentityTranslator',
            'translator.selector.class' => 'Symfony\\Component\\Translation\\MessageSelector',
            'translation.loader.php.class' => 'Symfony\\Component\\Translation\\Loader\\PhpFileLoader',
            'translation.loader.yml.class' => 'Symfony\\Component\\Translation\\Loader\\YamlFileLoader',
            'translation.loader.xliff.class' => 'Symfony\\Component\\Translation\\Loader\\XliffFileLoader',
            'translation.loader.po.class' => 'Symfony\\Component\\Translation\\Loader\\PoFileLoader',
            'translation.loader.mo.class' => 'Symfony\\Component\\Translation\\Loader\\MoFileLoader',
            'translation.loader.qt.class' => 'Symfony\\Component\\Translation\\Loader\\QtFileLoader',
            'translation.loader.csv.class' => 'Symfony\\Component\\Translation\\Loader\\CsvFileLoader',
            'translation.loader.res.class' => 'Symfony\\Component\\Translation\\Loader\\IcuResFileLoader',
            'translation.loader.dat.class' => 'Symfony\\Component\\Translation\\Loader\\IcuDatFileLoader',
            'translation.loader.ini.class' => 'Symfony\\Component\\Translation\\Loader\\IniFileLoader',
            'translation.dumper.php.class' => 'Symfony\\Component\\Translation\\Dumper\\PhpFileDumper',
            'translation.dumper.xliff.class' => 'Symfony\\Component\\Translation\\Dumper\\XliffFileDumper',
            'translation.dumper.po.class' => 'Symfony\\Component\\Translation\\Dumper\\PoFileDumper',
            'translation.dumper.mo.class' => 'Symfony\\Component\\Translation\\Dumper\\MoFileDumper',
            'translation.dumper.yml.class' => 'Symfony\\Component\\Translation\\Dumper\\YamlFileDumper',
            'translation.dumper.qt.class' => 'Symfony\\Component\\Translation\\Dumper\\QtFileDumper',
            'translation.dumper.csv.class' => 'Symfony\\Component\\Translation\\Dumper\\CsvFileDumper',
            'translation.dumper.ini.class' => 'Symfony\\Component\\Translation\\Dumper\\IniFileDumper',
            'translation.dumper.res.class' => 'Symfony\\Component\\Translation\\Dumper\\IcuResFileDumper',
            'translation.extractor.php.class' => 'Symfony\\Bundle\\FrameworkBundle\\Translation\\PhpExtractor',
            'translation.loader.class' => 'Symfony\\Bundle\\FrameworkBundle\\Translation\\TranslationLoader',
            'translation.extractor.class' => 'Symfony\\Component\\Translation\\Extractor\\ChainExtractor',
            'translation.writer.class' => 'Symfony\\Component\\Translation\\Writer\\TranslationWriter',
            'debug.errors_logger_listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorsLoggerListener',
            'debug.event_dispatcher.class' => 'Symfony\\Component\\HttpKernel\\Debug\\TraceableEventDispatcher',
            'debug.stopwatch.class' => 'Symfony\\Component\\Stopwatch\\Stopwatch',
            'debug.container.dump' => '/var/www/orocrm-platform/app/cache/de_/ap_DevDebugProjectContainer.xml',
            'debug.controller_resolver.class' => 'Symfony\\Component\\HttpKernel\\Controller\\TraceableControllerResolver',
            'kernel.secret' => 'ThisTokenIsNotSoSecretChangeIt',
            'kernel.http_method_override' => true,
            'kernel.trusted_hosts' => array(

            ),
            'kernel.trusted_proxies' => array(

            ),
            'kernel.default_locale' => 'en',
            'session.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Session',
            'session.flashbag.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Flash\\FlashBag',
            'session.attribute_bag.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag',
            'session.storage.native.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Storage\\NativeSessionStorage',
            'session.storage.php_bridge.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Storage\\PhpBridgeSessionStorage',
            'session.storage.mock_file.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Storage\\MockFileSessionStorage',
            'session.handler.native_file.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\NativeFileSessionHandler',
            'session_listener.class' => 'Symfony\\Bundle\\FrameworkBundle\\EventListener\\SessionListener',
            'session.storage.options' => array(
                'name' => 'BAPID',
                'gc_maxlifetime' => 3600,
            ),
            'session.save_path' => '/var/www/orocrm-platform/app/cache/sessions',
            'form.resolved_type_factory.class' => 'Symfony\\Component\\Form\\ResolvedFormTypeFactory',
            'form.registry.class' => 'Symfony\\Component\\Form\\FormRegistry',
            'form.factory.class' => 'Symfony\\Component\\Form\\FormFactory',
            'form.extension.class' => 'Symfony\\Component\\Form\\Extension\\DependencyInjection\\DependencyInjectionExtension',
            'form.type_guesser.validator.class' => 'Symfony\\Component\\Form\\Extension\\Validator\\ValidatorTypeGuesser',
            'property_accessor.class' => 'Symfony\\Component\\PropertyAccess\\PropertyAccessor',
            'form.csrf_provider.class' => 'Symfony\\Component\\Form\\Extension\\Csrf\\CsrfProvider\\SessionCsrfProvider',
            'form.type_extension.csrf.enabled' => true,
            'form.type_extension.csrf.field_name' => '_token',
            'templating.engine.delegating.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\DelegatingEngine',
            'templating.name_parser.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\TemplateNameParser',
            'templating.filename_parser.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\TemplateFilenameParser',
            'templating.cache_warmer.template_paths.class' => 'Symfony\\Bundle\\FrameworkBundle\\CacheWarmer\\TemplatePathsCacheWarmer',
            'templating.locator.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Loader\\TemplateLocator',
            'templating.loader.filesystem.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Loader\\FilesystemLoader',
            'templating.loader.cache.class' => 'Symfony\\Component\\Templating\\Loader\\CacheLoader',
            'templating.loader.chain.class' => 'Symfony\\Component\\Templating\\Loader\\ChainLoader',
            'templating.finder.class' => 'Symfony\\Bundle\\FrameworkBundle\\CacheWarmer\\TemplateFinder',
            'templating.engine.php.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\PhpEngine',
            'templating.helper.slots.class' => 'Symfony\\Component\\Templating\\Helper\\SlotsHelper',
            'templating.helper.assets.class' => 'Symfony\\Component\\Templating\\Helper\\CoreAssetsHelper',
            'templating.helper.actions.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Helper\\ActionsHelper',
            'templating.helper.router.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Helper\\RouterHelper',
            'templating.helper.request.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Helper\\RequestHelper',
            'templating.helper.session.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Helper\\SessionHelper',
            'templating.helper.code.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Helper\\CodeHelper',
            'templating.helper.translator.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Helper\\TranslatorHelper',
            'templating.helper.form.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Helper\\FormHelper',
            'templating.form.engine.class' => 'Symfony\\Component\\Form\\Extension\\Templating\\TemplatingRendererEngine',
            'templating.form.renderer.class' => 'Symfony\\Component\\Form\\FormRenderer',
            'templating.globals.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\GlobalVariables',
            'templating.asset.path_package.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Asset\\PathPackage',
            'templating.asset.url_package.class' => 'Symfony\\Component\\Templating\\Asset\\UrlPackage',
            'templating.asset.package_factory.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Asset\\PackageFactory',
            'templating.helper.code.file_link_format' => NULL,
            'templating.helper.form.resources' => array(
                0 => 'FrameworkBundle:Form',
            ),
            'templating.debugger.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Debugger',
            'debug.templating.engine.php.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\TimedPhpEngine',
            'templating.loader.cache.path' => NULL,
            'templating.engines' => array(
                0 => 'twig',
                1 => 'php',
            ),
            'validator.class' => 'Symfony\\Component\\Validator\\Validator',
            'validator.mapping.class_metadata_factory.class' => 'Symfony\\Component\\Validator\\Mapping\\ClassMetadataFactory',
            'validator.mapping.cache.apc.class' => 'Symfony\\Component\\Validator\\Mapping\\Cache\\ApcCache',
            'validator.mapping.cache.prefix' => '',
            'validator.mapping.loader.loader_chain.class' => 'Symfony\\Component\\Validator\\Mapping\\Loader\\LoaderChain',
            'validator.mapping.loader.static_method_loader.class' => 'Symfony\\Component\\Validator\\Mapping\\Loader\\StaticMethodLoader',
            'validator.mapping.loader.annotation_loader.class' => 'Symfony\\Component\\Validator\\Mapping\\Loader\\AnnotationLoader',
            'validator.mapping.loader.xml_files_loader.class' => 'Symfony\\Component\\Validator\\Mapping\\Loader\\XmlFilesLoader',
            'validator.mapping.loader.yaml_files_loader.class' => 'Symfony\\Component\\Validator\\Mapping\\Loader\\YamlFilesLoader',
            'validator.validator_factory.class' => 'Symfony\\Bundle\\FrameworkBundle\\Validator\\ConstraintValidatorFactory',
            'validator.mapping.loader.xml_files_loader.mapping_files' => array(
                0 => '/var/www/orocrm-platform/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/config/validation.xml',
            ),
            'validator.mapping.loader.yaml_files_loader.mapping_files' => array(
                0 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/AddressBundle/Resources/config/validation.yml',
                1 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/CalendarBundle/Resources/config/validation.yml',
                2 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/EmailBundle/Resources/config/validation.yml',
                3 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/EntityConfigBundle/Resources/config/validation.yml',
                4 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/ImapBundle/Resources/config/validation.yml',
                5 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/ImportExportBundle/Resources/config/validation.yml',
                6 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/IntegrationBundle/Resources/config/validation.yml',
                7 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/NotificationBundle/Resources/config/validation.yml',
                8 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/OrganizationBundle/Resources/config/validation.yml',
                9 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/ReportBundle/Resources/config/validation.yml',
                10 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/TagBundle/Resources/config/validation.yml',
                11 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/UserBundle/Resources/config/validation.yml',
                12 => '/var/www/orocrm-platform/vendor/oro/platform/src/Oro/Bundle/NavigationBundle/Resources/config/validation.yml',
            ),
            'validator.translation_domain' => 'validators',
            'fragment.listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\FragmentListener',
            'profiler.class' => 'Symfony\\Component\\HttpKernel\\Profiler\\Profiler',
            'profiler_listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\ProfilerListener',
            'data_collector.config.class' => 'Symfony\\Component\\HttpKernel\\DataCollector\\ConfigDataCollector',
            'data_collector.request.class' => 'Symfony\\Component\\HttpKernel\\DataCollector\\RequestDataCollector',
            'data_collector.exception.class' => 'Symfony\\Component\\HttpKernel\\DataCollector\\ExceptionDataCollector',
            'data_collector.events.class' => 'Symfony\\Component\\HttpKernel\\DataCollector\\EventDataCollector',
            'data_collector.logger.class' => 'Symfony\\Component\\HttpKernel\\DataCollector\\LoggerDataCollector',
            'data_collector.time.class' => 'Symfony\\Component\\HttpKernel\\DataCollector\\TimeDataCollector',
            'data_collector.memory.class' => 'Symfony\\Component\\HttpKernel\\DataCollector\\MemoryDataCollector',
            'data_collector.router.class' => 'Symfony\\Bundle\\FrameworkBundle\\DataCollector\\RouterDataCollector',
            'profiler_listener.only_exceptions' => false,
            'profiler_listener.only_master_requests' => false,
            'profiler.storage.dsn' => 'file:/var/www/orocrm-platform/app/cache/de_/profiler',
            'profiler.storage.username' => '',
            'profiler.storage.password' => '',
            'profiler.storage.lifetime' => 86400,
            'router.class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\Router',
            'router.request_context.class' => 'Symfony\\Component\\Routing\\RequestContext',
            'routing.loader.class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\DelegatingLoader',
            'routing.resolver.class' => 'Symfony\\Component\\Config\\Loader\\LoaderResolver',
            'routing.loader.xml.class' => 'Symfony\\Component\\Routing\\Loader\\XmlFileLoader',
            'routing.loader.yml.class' => 'Symfony\\Component\\Routing\\Loader\\YamlFileLoader',
            'routing.loader.php.class' => 'Symfony\\Component\\Routing\\Loader\\PhpFileLoader',
            'router.options.generator_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator',
            'router.options.generator_base_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator',
            'router.options.generator_dumper_class' => 'Symfony\\Component\\Routing\\Generator\\Dumper\\PhpGeneratorDumper',
            'router.options.matcher_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher',
            'router.options.matcher_base_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher',
            'router.options.matcher_dumper_class' => 'Symfony\\Component\\Routing\\Matcher\\Dumper\\PhpMatcherDumper',
            'router.cache_warmer.class' => 'Symfony\\Bundle\\FrameworkBundle\\CacheWarmer\\RouterCacheWarmer',
            'router.options.matcher.cache_class' => 'ap_DevUrlMatcher',
            'router.options.generator.cache_class' => 'ap_DevUrlGenerator',
            'router_listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\RouterListener',
            'router.request_context.host' => 'localhost',
            'router.request_context.scheme' => 'http',
            'router.request_context.base_url' => '',
            'router.resource' => '/var/www/orocrm-platform/app/config/routing_dev.yml',
            'router.cache_class_prefix' => 'ap_Dev',
            'request_listener.http_port' => 80,
            'request_listener.https_port' => 443,
            'annotations.reader.class' => 'Doctrine\\Common\\Annotations\\AnnotationReader',
            'annotations.cached_reader.class' => 'Doctrine\\Common\\Annotations\\CachedReader',
            'annotations.file_cache_reader.class' => 'Doctrine\\Common\\Annotations\\FileCacheReader',
            'serializer.class' => 'Symfony\\Component\\Serializer\\Serializer',
            'serializer.encoder.xml.class' => 'Symfony\\Component\\Serializer\\Encoder\\XmlEncoder',
            'serializer.encoder.json.class' => 'Symfony\\Component\\Serializer\\Encoder\\JsonEncoder',
            'security.context.class' => 'Symfony\\Component\\Security\\Core\\SecurityContext',
            'security.user_checker.class' => 'Symfony\\Component\\Security\\Core\\User\\UserChecker',
            'security.encoder_factory.generic.class' => 'Symfony\\Component\\Security\\Core\\Encoder\\EncoderFactory',
            'security.encoder.digest.class' => 'Symfony\\Component\\Security\\Core\\Encoder\\MessageDigestPasswordEncoder',
            'security.encoder.plain.class' => 'Symfony\\Component\\Security\\Core\\Encoder\\PlaintextPasswordEncoder',
            'security.encoder.pbkdf2.class' => 'Symfony\\Component\\Security\\Core\\Encoder\\Pbkdf2PasswordEncoder',
            'security.encoder.bcrypt.class' => 'Symfony\\Component\\Security\\Core\\Encoder\\BCryptPasswordEncoder',
            'security.user.provider.in_memory.class' => 'Symfony\\Component\\Security\\Core\\User\\InMemoryUserProvider',
            'security.user.provider.in_memory.user.class' => 'Symfony\\Component\\Security\\Core\\User\\User',
            'security.user.provider.chain.class' => 'Symfony\\Component\\Security\\Core\\User\\ChainUserProvider',
            'security.authentication.trust_resolver.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\AuthenticationTrustResolver',
            'security.authentication.trust_resolver.anonymous_class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Token\\AnonymousToken',
            'security.authentication.trust_resolver.rememberme_class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Token\\RememberMeToken',
            'security.authentication.manager.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\AuthenticationProviderManager',
            'security.authentication.session_strategy.class' => 'Symfony\\Component\\Security\\Http\\Session\\SessionAuthenticationStrategy',
            'security.access.decision_manager.class' => 'Symfony\\Component\\Security\\Core\\Authorization\\AccessDecisionManager',
            'security.access.simple_role_voter.class' => 'Symfony\\Component\\Security\\Core\\Authorization\\Voter\\RoleVoter',
            'security.access.authenticated_voter.class' => 'Symfony\\Component\\Security\\Core\\Authorization\\Voter\\AuthenticatedVoter',
            'security.access.role_hierarchy_voter.class' => 'Symfony\\Component\\Security\\Core\\Authorization\\Voter\\RoleHierarchyVoter',
            'security.firewall.class' => 'Symfony\\Component\\Security\\Http\\Firewall',
            'security.firewall.map.class' => 'Symfony\\Bundle\\SecurityBundle\\Security\\FirewallMap',
            'security.firewall.context.class' => 'Symfony\\Bundle\\SecurityBundle\\Security\\FirewallContext',
            'security.matcher.class' => 'Symfony\\Component\\HttpFoundation\\RequestMatcher',
            'security.role_hierarchy.class' => 'Symfony\\Component\\Security\\Core\\Role\\RoleHierarchy',
            'security.http_utils.class' => 'Symfony\\Component\\Security\\Http\\HttpUtils',
            'security.validator.user_password.class' => 'Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPasswordValidator',
            'security.authentication.retry_entry_point.class' => 'Symfony\\Component\\Security\\Http\\EntryPoint\\RetryAuthenticationEntryPoint',
            'security.channel_listener.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\ChannelListener',
            'security.authentication.form_entry_point.class' => 'Symfony\\Component\\Security\\Http\\EntryPoint\\FormAuthenticationEntryPoint',
            'security.authentication.listener.form.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\UsernamePasswordFormAuthenticationListener',
            'security.authentication.listener.basic.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\BasicAuthenticationListener',
            'security.authentication.basic_entry_point.class' => 'Symfony\\Component\\Security\\Http\\EntryPoint\\BasicAuthenticationEntryPoint',
            'security.authentication.listener.digest.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\DigestAuthenticationListener',
            'security.authentication.digest_entry_point.class' => 'Symfony\\Component\\Security\\Http\\EntryPoint\\DigestAuthenticationEntryPoint',
            'security.authentication.listener.x509.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\X509AuthenticationListener',
            'security.authentication.listener.anonymous.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\AnonymousAuthenticationListener',
            'security.authentication.switchuser_listener.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\SwitchUserListener',
            'security.logout_listener.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\LogoutListener',
            'security.logout.handler.session.class' => 'Symfony\\Component\\Security\\Http\\Logout\\SessionLogoutHandler',
            'security.logout.handler.cookie_clearing.class' => 'Symfony\\Component\\Security\\Http\\Logout\\CookieClearingLogoutHandler',
            'security.logout.success_handler.class' => 'Symfony\\Component\\Security\\Http\\Logout\\DefaultLogoutSuccessHandler',
            'security.access_listener.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\AccessListener',
            'security.access_map.class' => 'Symfony\\Component\\Security\\Http\\AccessMap',
            'security.exception_listener.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\ExceptionListener',
            'security.context_listener.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\ContextListener',
            'security.authentication.provider.dao.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Provider\\DaoAuthenticationProvider',
            'security.authentication.provider.pre_authenticated.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Provider\\PreAuthenticatedAuthenticationProvider',
            'security.authentication.provider.anonymous.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Provider\\AnonymousAuthenticationProvider',
            'security.authentication.success_handler.class' => 'Symfony\\Component\\Security\\Http\\Authentication\\DefaultAuthenticationSuccessHandler',
            'security.authentication.failure_handler.class' => 'Symfony\\Component\\Security\\Http\\Authentication\\DefaultAuthenticationFailureHandler',
            'security.authentication.provider.rememberme.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Provider\\RememberMeAuthenticationProvider',
            'security.authentication.listener.rememberme.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\RememberMeListener',
            'security.rememberme.token.provider.in_memory.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\RememberMe\\InMemoryTokenProvider',
            'security.authentication.rememberme.services.persistent.class' => 'Symfony\\Component\\Security\\Http\\RememberMe\\PersistentTokenBasedRememberMeServices',
            'security.authentication.rememberme.services.simplehash.class' => 'Symfony\\Component\\Security\\Http\\RememberMe\\TokenBasedRememberMeServices',
            'security.rememberme.response_listener.class' => 'Symfony\\Component\\Security\\Http\\RememberMe\\ResponseListener',
            'templating.helper.logout_url.class' => 'Symfony\\Bundle\\SecurityBundle\\Templating\\Helper\\LogoutUrlHelper',
            'templating.helper.security.class' => 'Symfony\\Bundle\\SecurityBundle\\Templating\\Helper\\SecurityHelper',
            'twig.extension.logout_url.class' => 'Symfony\\Bundle\\SecurityBundle\\Twig\\Extension\\LogoutUrlExtension',
            'twig.extension.security.class' => 'Symfony\\Bridge\\Twig\\Extension\\SecurityExtension',
            'data_collector.security.class' => 'Symfony\\Bundle\\SecurityBundle\\DataCollector\\SecurityDataCollector',
            'security.access.denied_url' => NULL,
            'security.authentication.manager.erase_credentials' => true,
            'security.authentication.session_strategy.strategy' => 'migrate',
            'security.access.always_authenticate_before_granting' => false,
            'security.authentication.hide_user_not_found' => true,
            'security.role_hierarchy.roles' => array(

            ),
            'security.acl.permission_granting_strategy.class' => 'Symfony\\Component\\Security\\Acl\\Domain\\PermissionGrantingStrategy',
            'security.acl.voter.class' => 'Symfony\\Component\\Security\\Acl\\Voter\\AclVoter',
            'security.acl.permission.map.class' => 'Symfony\\Component\\Security\\Acl\\Permission\\BasicPermissionMap',
            'security.acl.object_identity_retrieval_strategy.class' => 'Symfony\\Component\\Security\\Acl\\Domain\\ObjectIdentityRetrievalStrategy',
            'security.acl.security_identity_retrieval_strategy.class' => 'Symfony\\Component\\Security\\Acl\\Domain\\SecurityIdentityRetrievalStrategy',
            'security.acl.cache.doctrine.class' => 'Symfony\\Component\\Security\\Acl\\Domain\\DoctrineAclCache',
            'security.acl.collection_cache.class' => 'Symfony\\Component\\Security\\Acl\\Domain\\AclCollectionCache',
            'security.acl.dbal.provider.class' => 'Oro\\Bundle\\SecurityBundle\\Acl\\Dbal\\MutableAclProvider',
            'security.acl.dbal.schema.class' => 'Symfony\\Component\\Security\\Acl\\Dbal\\Schema',
            'security.acl.dbal.schema_listener.class' => 'Symfony\\Bundle\\SecurityBundle\\EventListener\\AclSchemaListener',
            'security.acl.dbal.class_table_name' => 'acl_classes',
            'security.acl.dbal.entry_table_name' => 'acl_entries',
            'security.acl.dbal.oid_table_name' => 'acl_object_identities',
            'security.acl.dbal.oid_ancestors_table_name' => 'acl_object_identity_ancestors',
            'security.acl.dbal.sid_table_name' => 'acl_security_identities',
            'twig.class' => 'Twig_Environment',
            'twig.loader.filesystem.class' => 'Symfony\\Bundle\\TwigBundle\\Loader\\FilesystemLoader',
            'twig.loader.chain.class' => 'Twig_Loader_Chain',
            'templating.engine.twig.class' => 'Symfony\\Bundle\\TwigBundle\\TwigEngine',
            'twig.cache_warmer.class' => 'Symfony\\Bundle\\TwigBundle\\CacheWarmer\\TemplateCacheCacheWarmer',
            'twig.extension.trans.class' => 'Symfony\\Bridge\\Twig\\Extension\\TranslationExtension',
            'twig.extension.assets.class' => 'Symfony\\Bundle\\TwigBundle\\Extension\\AssetsExtension',
            'twig.extension.actions.class' => 'Symfony\\Bundle\\TwigBundle\\Extension\\ActionsExtension',
            'twig.extension.code.class' => 'Symfony\\Bridge\\Twig\\Extension\\CodeExtension',
            'twig.extension.routing.class' => 'Symfony\\Bridge\\Twig\\Extension\\RoutingExtension',
            'twig.extension.yaml.class' => 'Symfony\\Bridge\\Twig\\Extension\\YamlExtension',
            'twig.extension.form.class' => 'Symfony\\Bridge\\Twig\\Extension\\FormExtension',
            'twig.extension.httpkernel.class' => 'Symfony\\Bridge\\Twig\\Extension\\HttpKernelExtension',
            'twig.form.engine.class' => 'Symfony\\Bridge\\Twig\\Form\\TwigRendererEngine',
            'twig.form.renderer.class' => 'Symfony\\Bridge\\Twig\\Form\\TwigRenderer',
            'twig.translation.extractor.class' => 'Symfony\\Bridge\\Twig\\Translation\\TwigExtractor',
            'twig.exception_listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\ExceptionListener',
            'twig.controller.exception.class' => 'Symfony\\Bundle\\TwigBundle\\Controller\\ExceptionController',
            'twig.exception_listener.controller' => 'FOS\\RestBundle\\Controller\\ExceptionController::showAction',
            'twig.form.resources' => array(
                0 => 'form_div_layout.html.twig',
                1 => 'LiipImagineBundle:Form:form_div_layout.html.twig',
                2 => 'OroSecurityBundle:Form:fields.html.twig',
                3 => 'OroUIBundle:Form:fields.html.twig',
                4 => 'OroEntityBundle:Form:fields.html.twig',
                5 => 'OroAddressBundle:Include:fields.html.twig',
                6 => 'GenemuFormBundle:Form:div_layout.html.twig',
                7 => 'GenemuFormBundle:Form:jquery_layout.html.twig',
                8 => 'GenemuFormBundle:Form:stylesheet_layout.html.twig',
                9 => 'OroFormBundle:Form:fields.html.twig',
                10 => 'OroOrganizationBundle:Form:fields.html.twig',
                11 => 'OroTranslationBundle:Form:fields.html.twig',
                12 => 'OroUserBundle:Form:fields.html.twig',
                13 => 'OroUIBundle:Form:translatable.html.twig',
            ),
            'debug.templating.engine.twig.class' => 'Symfony\\Bundle\\TwigBundle\\Debug\\TimedTwigEngine',
            'twig.options' => array(
                'exception_controller' => 'FOS\\RestBundle\\Controller\\ExceptionController::showAction',
                'debug' => true,
                'strict_variables' => true,
                'autoescape_service' => NULL,
                'autoescape_service_method' => NULL,
                'cache' => '/var/www/orocrm-platform/app/cache/de_/twig',
                'charset' => 'UTF-8',
                'paths' => array(

                ),
            ),
            'monolog.logger.class' => 'Symfony\\Bridge\\Monolog\\Logger',
            'monolog.gelf.publisher.class' => 'Gelf\\MessagePublisher',
            'monolog.handler.stream.class' => 'Monolog\\Handler\\StreamHandler',
            'monolog.handler.group.class' => 'Monolog\\Handler\\GroupHandler',
            'monolog.handler.buffer.class' => 'Monolog\\Handler\\BufferHandler',
            'monolog.handler.rotating_file.class' => 'Monolog\\Handler\\RotatingFileHandler',
            'monolog.handler.syslog.class' => 'Monolog\\Handler\\SyslogHandler',
            'monolog.handler.null.class' => 'Monolog\\Handler\\NullHandler',
            'monolog.handler.test.class' => 'Monolog\\Handler\\TestHandler',
            'monolog.handler.gelf.class' => 'Monolog\\Handler\\GelfHandler',
            'monolog.handler.firephp.class' => 'Symfony\\Bridge\\Monolog\\Handler\\FirePHPHandler',
            'monolog.handler.chromephp.class' => 'Symfony\\Bridge\\Monolog\\Handler\\ChromePhpHandler',
            'monolog.handler.debug.class' => 'Symfony\\Bridge\\Monolog\\Handler\\DebugHandler',
            'monolog.handler.swift_mailer.class' => 'Monolog\\Handler\\SwiftMailerHandler',
            'monolog.handler.native_mailer.class' => 'Monolog\\Handler\\NativeMailerHandler',
            'monolog.handler.socket.class' => 'Monolog\\Handler\\SocketHandler',
            'monolog.handler.pushover.class' => 'Monolog\\Handler\\PushoverHandler',
            'monolog.handler.raven.class' => 'Monolog\\Handler\\RavenHandler',
            'monolog.handler.fingers_crossed.class' => 'Monolog\\Handler\\FingersCrossedHandler',
            'monolog.handler.fingers_crossed.error_level_activation_strategy.class' => 'Monolog\\Handler\\FingersCrossed\\ErrorLevelActivationStrategy',
            'monolog.handlers_to_channels' => array(
                'monolog.handler.chromephp' => NULL,
                'monolog.handler.firephp' => NULL,
                'monolog.handler.main' => NULL,
            ),
            'swiftmailer.class' => 'Swift_Mailer',
            'swiftmailer.transport.sendmail.class' => 'Swift_Transport_SendmailTransport',
            'swiftmailer.transport.mail.class' => 'Swift_Transport_MailTransport',
            'swiftmailer.transport.failover.class' => 'Swift_Transport_FailoverTransport',
            'swiftmailer.plugin.redirecting.class' => 'Swift_Plugins_RedirectingPlugin',
            'swiftmailer.plugin.impersonate.class' => 'Swift_Plugins_ImpersonatePlugin',
            'swiftmailer.plugin.messagelogger.class' => 'Swift_Plugins_MessageLogger',
            'swiftmailer.plugin.antiflood.class' => 'Swift_Plugins_AntiFloodPlugin',
            'swiftmailer.transport.smtp.class' => 'Swift_Transport_EsmtpTransport',
            'swiftmailer.plugin.blackhole.class' => 'Swift_Plugins_BlackholePlugin',
            'swiftmailer.spool.file.class' => 'Swift_FileSpool',
            'swiftmailer.spool.memory.class' => 'Swift_MemorySpool',
            'swiftmailer.email_sender.listener.class' => 'Symfony\\Bundle\\SwiftmailerBundle\\EventListener\\EmailSenderListener',
            'swiftmailer.data_collector.class' => 'Symfony\\Bundle\\SwiftmailerBundle\\DataCollector\\MessageDataCollector',
            'swiftmailer.mailer.default.transport.name' => 'mail',
            'swiftmailer.mailer.default.delivery.enabled' => true,
            'swiftmailer.mailer.default.transport.smtp.encryption' => NULL,
            'swiftmailer.mailer.default.transport.smtp.port' => NULL,
            'swiftmailer.mailer.default.transport.smtp.host' => '127.0.0.1',
            'swiftmailer.mailer.default.transport.smtp.username' => NULL,
            'swiftmailer.mailer.default.transport.smtp.password' => NULL,
            'swiftmailer.mailer.default.transport.smtp.auth_mode' => NULL,
            'swiftmailer.mailer.default.transport.smtp.timeout' => 30,
            'swiftmailer.mailer.default.transport.smtp.source_ip' => NULL,
            'swiftmailer.spool.default.memory.path' => '/var/www/orocrm-platform/app/cache/de_/swiftmailer/spool/default',
            'swiftmailer.mailer.default.spool.enabled' => true,
            'swiftmailer.mailer.default.single_address' => NULL,
            'swiftmailer.spool.enabled' => true,
            'swiftmailer.delivery.enabled' => true,
            'swiftmailer.single_address' => NULL,
            'swiftmailer.mailers' => array(
                'default' => 'swiftmailer.mailer.default',
            ),
            'swiftmailer.default_mailer' => 'default',
            'assetic.asset_factory.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\AssetFactory',
            'assetic.asset_manager.class' => 'Assetic\\Factory\\LazyAssetManager',
            'assetic.asset_manager_cache_warmer.class' => 'Symfony\\Bundle\\AsseticBundle\\CacheWarmer\\AssetManagerCacheWarmer',
            'assetic.cached_formula_loader.class' => 'Assetic\\Factory\\Loader\\CachedFormulaLoader',
            'assetic.config_cache.class' => 'Assetic\\Cache\\ConfigCache',
            'assetic.config_loader.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Loader\\ConfigurationLoader',
            'assetic.config_resource.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Resource\\ConfigurationResource',
            'assetic.coalescing_directory_resource.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Resource\\CoalescingDirectoryResource',
            'assetic.directory_resource.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Resource\\DirectoryResource',
            'assetic.filter_manager.class' => 'Symfony\\Bundle\\AsseticBundle\\FilterManager',
            'assetic.worker.ensure_filter.class' => 'Assetic\\Factory\\Worker\\EnsureFilterWorker',
            'assetic.value_supplier.class' => 'Symfony\\Bundle\\AsseticBundle\\DefaultValueSupplier',
            'assetic.node.paths' => array(

            ),
            'assetic.cache_dir' => '/var/www/orocrm-platform/app/cache/de_/assetic',
            'assetic.bundles' => array(
                0 => 'FrameworkBundle',
                1 => 'SecurityBundle',
                2 => 'TwigBundle',
                3 => 'MonologBundle',
                4 => 'SwiftmailerBundle',
                5 => 'AsseticBundle',
                6 => 'DoctrineBundle',
                7 => 'DoctrineFixturesBundle',
                8 => 'SensioFrameworkExtraBundle',
                9 => 'JMSSerializerBundle',
                10 => 'KnpPaginatorBundle',
                11 => 'KnpMenuBundle',
                12 => 'FOSRestBundle',
                13 => 'FOSJsRoutingBundle',
                14 => 'NelmioApiDocBundle',
                15 => 'BeSimpleSoapBundle',
                16 => 'StofDoctrineExtensionsBundle',
                17 => 'EscapeWSSEAuthenticationBundle',
                18 => 'LiipImagineBundle',
                19 => 'GenemuFormBundle',
                20 => 'A2lixTranslationFormBundle',
                21 => 'LexikMaintenanceBundle',
                22 => 'OroSecurityBundle',
                23 => 'OroUIBundle',
                24 => 'OroEntityBundle',
                25 => 'JDareClankBundle',
                26 => 'JMSJobQueueBundle',
                27 => 'OroAddressBundle',
                28 => 'OroAsseticBundle',
                29 => 'OroBatchBundle',
                30 => 'OroBusinessEntitiesBundle',
                31 => 'OroCalendarBundle',
                32 => 'OroConfigBundle',
                33 => 'OroCronBundle',
                34 => 'OroDashboardBundle',
                35 => 'OroDataAuditBundle',
                36 => 'OroDataGridBundle',
                37 => 'OroDistributionBundle',
                38 => 'OroEmailBundle',
                39 => 'OroEntityConfigBundle',
                40 => 'OroEntityExtendBundle',
                41 => 'OroFilterBundle',
                42 => 'OroFormBundle',
                43 => 'OroHelpBundle',
                44 => 'OroImapBundle',
                45 => 'OroImportExportBundle',
                46 => 'OroInstallerBundle',
                47 => 'OroIntegrationBundle',
                48 => 'OroLocaleBundle',
                49 => 'OroMeasureBundle',
                50 => 'OroNotificationBundle',
                51 => 'OroOrganizationBundle',
                52 => 'OroPlatformBundle',
                53 => 'OroQueryDesignerBundle',
                54 => 'OroReportBundle',
                55 => 'OroRequireJSBundle',
                56 => 'OroSearchBundle',
                57 => 'OroSegmentationTreeBundle',
                58 => 'OroSidebarBundle',
                59 => 'OroSoapBundle',
                60 => 'OroSyncBundle',
                61 => 'OroTagBundle',
                62 => 'OroThemeBundle',
                63 => 'OroTranslationBundle',
                64 => 'OroUserBundle',
                65 => 'OroWindowsBundle',
                66 => 'OroWorkflowBundle',
                67 => 'SyliusFlowBundle',
                68 => 'OroNavigationBundle',
                69 => 'WebProfilerBundle',
                70 => 'SensioDistributionBundle',
                71 => 'SensioGeneratorBundle',
            ),
            'assetic.twig_extension.class' => 'Symfony\\Bundle\\AsseticBundle\\Twig\\AsseticExtension',
            'assetic.twig_formula_loader.class' => 'Assetic\\Extension\\Twig\\TwigFormulaLoader',
            'assetic.helper.dynamic.class' => 'Symfony\\Bundle\\AsseticBundle\\Templating\\DynamicAsseticHelper',
            'assetic.helper.static.class' => 'Symfony\\Bundle\\AsseticBundle\\Templating\\StaticAsseticHelper',
            'assetic.php_formula_loader.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Loader\\AsseticHelperFormulaLoader',
            'assetic.debug' => false,
            'assetic.use_controller' => false,
            'assetic.enable_profiler' => false,
            'assetic.read_from' => '/var/www/orocrm-platform/app/../web',
            'assetic.write_to' => '/var/www/orocrm-platform/app/../web',
            'assetic.variables' => array(

            ),
            'assetic.java.bin' => '/usr/bin/java',
            'assetic.node.bin' => '/usr/local/bin/node',
            'assetic.ruby.bin' => '/usr/bin/ruby',
            'assetic.sass.bin' => '/usr/bin/sass',
            'assetic.filter.cssrewrite.class' => 'Assetic\\Filter\\CssRewriteFilter',
            'assetic.filter.lessphp.class' => 'Assetic\\Filter\\LessphpFilter',
            'assetic.filter.lessphp.presets' => array(

            ),
            'assetic.filter.lessphp.paths' => array(

            ),
            'assetic.filter.lessphp.formatter' => NULL,
            'assetic.filter.lessphp.preserve_comments' => NULL,
            'assetic.filter.cssmin.class' => 'Assetic\\Filter\\CssMinFilter',
            'assetic.filter.cssmin.filters' => array(

            ),
            'assetic.filter.cssmin.plugins' => array(

            ),
            'assetic.twig_extension.functions' => array(

            ),
            'doctrine.dbal.logger.chain.class' => 'Doctrine\\DBAL\\Logging\\LoggerChain',
            'doctrine.dbal.logger.profiling.class' => 'Doctrine\\DBAL\\Logging\\DebugStack',
            'doctrine.dbal.logger.class' => 'Symfony\\Bridge\\Doctrine\\Logger\\DbalLogger',
            'doctrine.dbal.configuration.class' => 'Doctrine\\DBAL\\Configuration',
            'doctrine.data_collector.class' => 'Doctrine\\Bundle\\DoctrineBundle\\DataCollector\\DoctrineDataCollector',
            'doctrine.dbal.connection.event_manager.class' => 'Symfony\\Bridge\\Doctrine\\ContainerAwareEventManager',
            'doctrine.dbal.connection_factory.class' => 'Doctrine\\Bundle\\DoctrineBundle\\ConnectionFactory',
            'doctrine.dbal.events.mysql_session_init.class' => 'Doctrine\\DBAL\\Event\\Listeners\\MysqlSessionInit',
            'doctrine.dbal.events.oracle_session_init.class' => 'Doctrine\\DBAL\\Event\\Listeners\\OracleSessionInit',
            'doctrine.class' => 'Doctrine\\Bundle\\DoctrineBundle\\Registry',
            'doctrine.entity_managers' => array(
                'default' => 'doctrine.orm.default_entity_manager',
            ),
            'doctrine.default_entity_manager' => 'default',
            'doctrine.dbal.connection_factory.types' => array(
                'date' => array(
                    'class' => 'Oro\\Bundle\\LocaleBundle\\DoctrineExtensions\\DBAL\\Types\\UTCDateType',
                    'commented' => true,
                ),
                'datetime' => array(
                    'class' => 'Oro\\Bundle\\LocaleBundle\\DoctrineExtensions\\DBAL\\Types\\UTCDateTimeType',
                    'commented' => true,
                ),
                'time' => array(
                    'class' => 'Oro\\Bundle\\LocaleBundle\\DoctrineExtensions\\DBAL\\Types\\UTCTimeType',
                    'commented' => true,
                ),
            ),
            'doctrine.connections' => array(
                'default' => 'doctrine.dbal.default_connection',
                'report_source' => 'doctrine.dbal.report_source_connection',
                'report_target' => 'doctrine.dbal.report_target_connection',
            ),
            'doctrine.default_connection' => 'default',
            'doctrine.orm.configuration.class' => 'Doctrine\\ORM\\Configuration',
            'doctrine.orm.entity_manager.class' => 'Oro\\Bundle\\EntityBundle\\ORM\\OroEntityManager',
            'doctrine.orm.manager_configurator.class' => 'Doctrine\\Bundle\\DoctrineBundle\\ManagerConfigurator',
            'doctrine.orm.cache.array.class' => 'Doctrine\\Common\\Cache\\ArrayCache',
            'doctrine.orm.cache.apc.class' => 'Doctrine\\Common\\Cache\\ApcCache',
            'doctrine.orm.cache.memcache.class' => 'Doctrine\\Common\\Cache\\MemcacheCache',
            'doctrine.orm.cache.memcache_host' => 'localhost',
            'doctrine.orm.cache.memcache_port' => 11211,
            'doctrine.orm.cache.memcache_instance.class' => 'Memcache',
            'doctrine.orm.cache.memcached.class' => 'Doctrine\\Common\\Cache\\MemcachedCache',
            'doctrine.orm.cache.memcached_host' => 'localhost',
            'doctrine.orm.cache.memcached_port' => 11211,
            'doctrine.orm.cache.memcached_instance.class' => 'Memcached',
            'doctrine.orm.cache.redis.class' => 'Doctrine\\Common\\Cache\\RedisCache',
            'doctrine.orm.cache.redis_host' => 'localhost',
            'doctrine.orm.cache.redis_port' => 6379,
            'doctrine.orm.cache.redis_instance.class' => 'Redis',
            'doctrine.orm.cache.xcache.class' => 'Doctrine\\Common\\Cache\\XcacheCache',
            'doctrine.orm.cache.wincache.class' => 'Doctrine\\Common\\Cache\\WinCacheCache',
            'doctrine.orm.cache.zenddata.class' => 'Doctrine\\Common\\Cache\\ZendDataCache',
            'doctrine.orm.metadata.driver_chain.class' => 'Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriverChain',
            'doctrine.orm.metadata.annotation.class' => 'Doctrine\\ORM\\Mapping\\Driver\\AnnotationDriver',
            'doctrine.orm.metadata.xml.class' => 'Doctrine\\ORM\\Mapping\\Driver\\SimplifiedXmlDriver',
            'doctrine.orm.metadata.yml.class' => 'Doctrine\\ORM\\Mapping\\Driver\\SimplifiedYamlDriver',
            'doctrine.orm.metadata.php.class' => 'Doctrine\\ORM\\Mapping\\Driver\\PHPDriver',
            'doctrine.orm.metadata.staticphp.class' => 'Doctrine\\ORM\\Mapping\\Driver\\StaticPHPDriver',
            'doctrine.orm.proxy_cache_warmer.class' => 'Symfony\\Bridge\\Doctrine\\CacheWarmer\\ProxyCacheWarmer',
            'form.type_guesser.doctrine.class' => 'Symfony\\Bridge\\Doctrine\\Form\\DoctrineOrmTypeGuesser',
            'doctrine.orm.validator.unique.class' => 'Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator',
            'doctrine.orm.validator_initializer.class' => 'Symfony\\Bridge\\Doctrine\\Validator\\DoctrineInitializer',
            'doctrine.orm.security.user.provider.class' => 'Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider',
            'doctrine.orm.listeners.resolve_target_entity.class' => 'Doctrine\\ORM\\Tools\\ResolveTargetEntityListener',
            'doctrine.orm.naming_strategy.default.class' => 'Doctrine\\ORM\\Mapping\\DefaultNamingStrategy',
            'doctrine.orm.naming_strategy.underscore.class' => 'Doctrine\\ORM\\Mapping\\UnderscoreNamingStrategy',
            'doctrine.orm.auto_generate_proxy_classes' => true,
            'doctrine.orm.proxy_dir' => '/var/www/orocrm-platform/app/cache/de_/doctrine/orm/Proxies',
            'doctrine.orm.proxy_namespace' => 'Proxies',
            'sensio_framework_extra.view.guesser.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Templating\\TemplateGuesser',
            'sensio_framework_extra.controller.listener.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener',
            'sensio_framework_extra.routing.loader.annot_dir.class' => 'Symfony\\Component\\Routing\\Loader\\AnnotationDirectoryLoader',
            'sensio_framework_extra.routing.loader.annot_file.class' => 'Symfony\\Component\\Routing\\Loader\\AnnotationFileLoader',
            'sensio_framework_extra.routing.loader.annot_class.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Routing\\AnnotatedRouteControllerLoader',
            'sensio_framework_extra.converter.listener.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener',
            'sensio_framework_extra.converter.manager.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Request\\ParamConverter\\ParamConverterManager',
            'sensio_framework_extra.converter.doctrine.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Request\\ParamConverter\\DoctrineParamConverter',
            'sensio_framework_extra.converter.datetime.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Request\\ParamConverter\\DateTimeParamConverter',
            'sensio_framework_extra.view.listener.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener',
            'jms_serializer.metadata.file_locator.class' => 'Metadata\\Driver\\FileLocator',
            'jms_serializer.metadata.annotation_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\AnnotationDriver',
            'jms_serializer.metadata.chain_driver.class' => 'Metadata\\Driver\\DriverChain',
            'jms_serializer.metadata.yaml_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\YamlDriver',
            'jms_serializer.metadata.xml_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\XmlDriver',
            'jms_serializer.metadata.php_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\PhpDriver',
            'jms_serializer.metadata.doctrine_type_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\DoctrineTypeDriver',
            'jms_serializer.metadata.doctrine_phpcr_type_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\DoctrinePHPCRTypeDriver',
            'jms_serializer.metadata.lazy_loading_driver.class' => 'Metadata\\Driver\\LazyLoadingDriver',
            'jms_serializer.metadata.metadata_factory.class' => 'Metadata\\MetadataFactory',
            'jms_serializer.metadata.cache.file_cache.class' => 'Metadata\\Cache\\FileCache',
            'jms_serializer.event_dispatcher.class' => 'JMS\\Serializer\\EventDispatcher\\LazyEventDispatcher',
            'jms_serializer.camel_case_naming_strategy.class' => 'JMS\\Serializer\\Naming\\CamelCaseNamingStrategy',
            'jms_serializer.serialized_name_annotation_strategy.class' => 'JMS\\Serializer\\Naming\\SerializedNameAnnotationStrategy',
            'jms_serializer.cache_naming_strategy.class' => 'JMS\\Serializer\\Naming\\CacheNamingStrategy',
            'jms_serializer.doctrine_object_constructor.class' => 'JMS\\Serializer\\Construction\\DoctrineObjectConstructor',
            'jms_serializer.unserialize_object_constructor.class' => 'JMS\\Serializer\\Construction\\UnserializeObjectConstructor',
            'jms_serializer.version_exclusion_strategy.class' => 'JMS\\Serializer\\Exclusion\\VersionExclusionStrategy',
            'jms_serializer.serializer.class' => 'JMS\\Serializer\\Serializer',
            'jms_serializer.twig_extension.class' => 'JMS\\Serializer\\Twig\\SerializerExtension',
            'jms_serializer.templating.helper.class' => 'JMS\\SerializerBundle\\Templating\\SerializerHelper',
            'jms_serializer.json_serialization_visitor.class' => 'JMS\\Serializer\\JsonSerializationVisitor',
            'jms_serializer.json_serialization_visitor.options' => 0,
            'jms_serializer.json_deserialization_visitor.class' => 'JMS\\Serializer\\JsonDeserializationVisitor',
            'jms_serializer.xml_serialization_visitor.class' => 'JMS\\Serializer\\XmlSerializationVisitor',
            'jms_serializer.xml_deserialization_visitor.class' => 'JMS\\Serializer\\XmlDeserializationVisitor',
            'jms_serializer.xml_deserialization_visitor.doctype_whitelist' => array(

            ),
            'jms_serializer.yaml_serialization_visitor.class' => 'JMS\\Serializer\\YamlSerializationVisitor',
            'jms_serializer.handler_registry.class' => 'JMS\\Serializer\\Handler\\LazyHandlerRegistry',
            'jms_serializer.datetime_handler.class' => 'JMS\\Serializer\\Handler\\DateHandler',
            'jms_serializer.array_collection_handler.class' => 'JMS\\Serializer\\Handler\\ArrayCollectionHandler',
            'jms_serializer.php_collection_handler.class' => 'JMS\\Serializer\\Handler\\PhpCollectionHandler',
            'jms_serializer.form_error_handler.class' => 'JMS\\Serializer\\Handler\\FormErrorHandler',
            'jms_serializer.constraint_violation_handler.class' => 'JMS\\Serializer\\Handler\\ConstraintViolationHandler',
            'jms_serializer.doctrine_proxy_subscriber.class' => 'JMS\\Serializer\\EventDispatcher\\Subscriber\\DoctrineProxySubscriber',
            'jms_serializer.stopwatch_subscriber.class' => 'JMS\\SerializerBundle\\Serializer\\StopwatchEventSubscriber',
            'jms_serializer.infer_types_from_doctrine_metadata' => true,
            'knp_paginator.class' => 'Knp\\Component\\Pager\\Paginator',
            'knp_paginator.templating.helper.pagination.class' => 'Knp\\Bundle\\PaginatorBundle\\Templating\\PaginationHelper',
            'knp_paginator.helper.processor.class' => 'Knp\\Bundle\\PaginatorBundle\\Helper\\Processor',
            'knp_paginator.template.pagination' => 'OroUIBundle::pager.html.twig',
            'knp_paginator.template.filtration' => 'KnpPaginatorBundle:Pagination:filtration.html.twig',
            'knp_paginator.template.sortable' => 'KnpPaginatorBundle:Pagination:sortable_link.html.twig',
            'knp_paginator.page_range' => 5,
            'knp_menu.factory.class' => 'Knp\\Menu\\MenuFactory',
            'knp_menu.factory_extension.routing.class' => 'Knp\\Menu\\Silex\\RoutingExtension',
            'knp_menu.helper.class' => 'Knp\\Menu\\Twig\\Helper',
            'knp_menu.matcher.class' => 'Knp\\Menu\\Matcher\\Matcher',
            'knp_menu.menu_provider.chain.class' => 'Knp\\Menu\\Provider\\ChainProvider',
            'knp_menu.menu_provider.container_aware.class' => 'Knp\\Bundle\\MenuBundle\\Provider\\ContainerAwareProvider',
            'knp_menu.menu_provider.builder_alias.class' => 'Knp\\Bundle\\MenuBundle\\Provider\\BuilderAliasProvider',
            'knp_menu.renderer_provider.class' => 'Knp\\Bundle\\MenuBundle\\Renderer\\ContainerAwareProvider',
            'knp_menu.renderer.list.class' => 'Knp\\Menu\\Renderer\\ListRenderer',
            'knp_menu.renderer.list.options' => array(

            ),
            'knp_menu.twig.extension.class' => 'Knp\\Menu\\Twig\\MenuExtension',
            'knp_menu.renderer.twig.class' => 'Knp\\Menu\\Renderer\\TwigRenderer',
            'knp_menu.renderer.twig.options' => array(

            ),
            'knp_menu.renderer.twig.template' => 'knp_menu.html.twig',
            'knp_menu.default_renderer' => 'twig',
            'fos_rest.serializer.exclusion_strategy.version' => '',
            'fos_rest.serializer.exclusion_strategy.groups' => '',
            'fos_rest.routing.loader.controller.class' => 'FOS\\RestBundle\\Routing\\Loader\\RestRouteLoader',
            'fos_rest.routing.loader.yaml_collection.class' => 'FOS\\RestBundle\\Routing\\Loader\\RestYamlCollectionLoader',
            'fos_rest.routing.loader.xml_collection.class' => 'FOS\\RestBundle\\Routing\\Loader\\RestXmlCollectionLoader',
            'fos_rest.routing.loader.processor.class' => 'FOS\\RestBundle\\Routing\\Loader\\RestRouteProcessor',
            'fos_rest.routing.loader.reader.controller.class' => 'FOS\\RestBundle\\Routing\\Loader\\Reader\\RestControllerReader',
            'fos_rest.routing.loader.reader.action.class' => 'FOS\\RestBundle\\Routing\\Loader\\Reader\\RestActionReader',
            'fos_rest.format_negotiator.class' => 'FOS\\Rest\\Util\\FormatNegotiator',
            'fos_rest.inflector.class' => 'FOS\\RestBundle\\Util\\Inflector\\DoctrineInflector',
            'fos_rest.request.param_fetcher.class' => 'FOS\\RestBundle\\Request\\ParamFetcher',
            'fos_rest.request.param_fetcher.reader.class' => 'FOS\\RestBundle\\Request\\ParamReader',
            'fos_rest.cache_dir' => '/var/www/orocrm-platform/app/cache/de_/fos_rest',
            'fos_rest.formats' => array(
                'json' => false,
                'xml' => false,
                'html' => true,
            ),
            'fos_rest.default_engine' => 'php',
            'fos_rest.force_redirects' => array(
                'html' => 302,
            ),
            'fos_rest.failed_validation' => 400,
            'fos_rest.empty_content' => 204,
            'fos_rest.serialize_null' => false,
            'fos_rest.routing.loader.default_format' => 'json',
            'fos_rest.routing.loader.include_format' => true,
            'fos_rest.exception.codes' => array(

            ),
            'fos_rest.exception.messages' => array(

            ),
            'fos_rest.decoders' => array(
                'json' => 'fos_rest.decoder.json',
                'xml' => 'fos_rest.decoder.xml',
            ),
            'fos_rest.default_priorities' => array(
                0 => 'html',
                1 => '*/*',
            ),
            'fos_rest.prefer_extension' => true,
            'fos_rest.fallback_format' => 'html',
            'fos_rest.mime_types' => array(

            ),
            'fos_js_routing.extractor.class' => 'FOS\\JsRoutingBundle\\Extractor\\ExposedRoutesExtractor',
            'fos_js_routing.controller.class' => 'FOS\\JsRoutingBundle\\Controller\\Controller',
            'fos_js_routing.cache_control' => array(
                'enabled' => false,
            ),
            'nelmio_api_doc.motd.template' => 'NelmioApiDocBundle::Components/motd.html.twig',
            'nelmio_api_doc.api_name' => 'API documentation',
            'nelmio_api_doc.sandbox.enabled' => true,
            'nelmio_api_doc.sandbox.endpoint' => NULL,
            'nelmio_api_doc.sandbox.request_format.method' => 'format_param',
            'nelmio_api_doc.sandbox.accept_type' => '',
            'nelmio_api_doc.sandbox.body_format' => 'form',
            'nelmio_api_doc.sandbox.request_format.default_format' => 'json',
            'nelmio_api_doc.formatter.abstract_formatter.class' => 'Nelmio\\ApiDocBundle\\Formatter\\AbstractFormatter',
            'nelmio_api_doc.formatter.markdown_formatter.class' => 'Nelmio\\ApiDocBundle\\Formatter\\MarkdownFormatter',
            'nelmio_api_doc.formatter.simple_formatter.class' => 'Nelmio\\ApiDocBundle\\Formatter\\SimpleFormatter',
            'nelmio_api_doc.formatter.html_formatter.class' => 'Nelmio\\ApiDocBundle\\Formatter\\HtmlFormatter',
            'nelmio_api_doc.sandbox.authentication' => NULL,
            'nelmio_api_doc.extractor.api_doc_extractor.class' => 'Nelmio\\ApiDocBundle\\Extractor\\ApiDocExtractor',
            'nelmio_api_doc.form.extension.description_form_type_extension.class' => 'Nelmio\\ApiDocBundle\\Form\\Extension\\DescriptionFormTypeExtension',
            'nelmio_api_doc.twig.extension.extra_markdown.class' => 'Nelmio\\ApiDocBundle\\Twig\\Extension\\MarkdownExtension',
            'nelmio_api_doc.doc_comment_extractor.class' => 'Nelmio\\ApiDocBundle\\Util\\DocCommentExtractor',
            'nelmio_api_doc.extractor.handler.fos_rest.class' => 'Nelmio\\ApiDocBundle\\Extractor\\Handler\\FosRestHandler',
            'nelmio_api_doc.extractor.handler.jms_security.class' => 'Nelmio\\ApiDocBundle\\Extractor\\Handler\\JmsSecurityExtraHandler',
            'nelmio_api_doc.extractor.handler.sensio_framework_extra.class' => 'Nelmio\\ApiDocBundle\\Extractor\\Handler\\SensioFrameworkExtraHandler',
            'nelmio_api_doc.extractor.handler.phpdoc.class' => 'Nelmio\\ApiDocBundle\\Extractor\\Handler\\PhpDocHandler',
            'nelmio_api_doc.request_listener.parameter' => '_doc',
            'nelmio_api_doc.event_listener.request.class' => 'Nelmio\\ApiDocBundle\\EventListener\\RequestListener',
            'besimple.soap.request_format.listener.class' => 'BeSimple\\SoapBundle\\EventListener\\RequestFormatListener',
            'besimple.soap.definition.loader.resolver.class' => 'Symfony\\Component\\Config\\Loader\\LoaderResolver',
            'besimple.soap.definition.loader.class' => 'Symfony\\Component\\Config\\Loader\\DelegatingLoader',
            'besimple.soap.definition.loader.annot_dir.class' => 'BeSimple\\SoapBundle\\ServiceDefinition\\Loader\\AnnotationDirectoryLoader',
            'besimple.soap.definition.loader.annot_file.class' => 'BeSimple\\SoapBundle\\ServiceDefinition\\Loader\\AnnotationFileLoader',
            'besimple.soap.definition.loader.annot_class.class' => 'BeSimple\\SoapBundle\\ServiceDefinition\\Loader\\AnnotationClassLoader',
            'besimple.soap.definition.loader.annot_complextype.class' => 'BeSimple\\SoapBundle\\ServiceDefinition\\Loader\\AnnotationComplexTypeLoader',
            'besimple.soap.converter.collection.class' => 'BeSimple\\SoapCommon\\Converter\\TypeConverterCollection',
            'besimple.soap.converter.date_time.class' => 'BeSimple\\SoapCommon\\Converter\\DateTimeTypeConverter',
            'besimple.soap.converter.date.class' => 'BeSimple\\SoapCommon\\Converter\\DateTypeConverter',
            'besimple.soap.response.class' => 'BeSimple\\SoapBundle\\Soap\\SoapResponse',
            'besimple.soap.response.listener.class' => 'BeSimple\\SoapBundle\\EventListener\\SoapResponseListener',
            'besimple.soap.exception_listener.class' => 'BeSimple\\SoapBundle\\EventListener\\SoapExceptionListener',
            'besimple.soap.context.class' => 'BeSimple\\SoapBundle\\WebServiceContext',
            'besimple.soap.binder.request_header.rpcliteral.class' => 'BeSimple\\SoapBundle\\ServiceBinding\\RpcLiteralRequestHeaderMessageBinder',
            'besimple.soap.binder.request.rpcliteral.class' => 'BeSimple\\SoapBundle\\ServiceBinding\\RpcLiteralRequestMessageBinder',
            'besimple.soap.binder.response.rpcliteral.class' => 'BeSimple\\SoapBundle\\ServiceBinding\\RpcLiteralResponseMessageBinder',
            'besimple.soap.binder.request.documentwrapped.class' => 'BeSimple\\SoapBundle\\ServiceBinding\\DocumentLiteralWrappedRequestMessageBinder',
            'besimple.soap.binder.request_header.documentwrapped.class' => 'BeSimple\\SoapBundle\\ServiceBinding\\DocumentLiteralWrappedRequestHeaderMessageBinder',
            'besimple.soap.binder.response.documentwrapped.class' => 'BeSimple\\SoapBundle\\ServiceBinding\\DocumentLiteralWrappedResponseMessageBinder',
            'besimple.soap.type.repository.class' => 'BeSimple\\SoapCommon\\Definition\\Type\\TypeRepository',
            'besimple.soap.server.classmap.class' => 'BeSimple\\SoapServer\\Classmap',
            'besimple.soap.cache.class' => 'BeSimple\\SoapBundle\\Cache',
            'besimple.soap.cache.dir' => '/var/www/orocrm-platform/app/cache/de_/besimple/soap',
            'besimple.soap.cache.type' => 1,
            'besimple.soap.cache.lifetime' => 86400,
            'besimple.soap.cache.limit' => 5,
            'besimple.soap.definition.dumper.options.stylesheet' => NULL,
            'besimple.soap.exception_listener.controller' => 'BeSimpleSoapBundle:SoapWebService:exception',
            'stof_doctrine_extensions.event_listener.locale.class' => 'Stof\\DoctrineExtensionsBundle\\EventListener\\LocaleListener',
            'stof_doctrine_extensions.event_listener.logger.class' => 'Stof\\DoctrineExtensionsBundle\\EventListener\\LoggerListener',
            'stof_doctrine_extensions.event_listener.blame.class' => 'Stof\\DoctrineExtensionsBundle\\EventListener\\BlameListener',
            'stof_doctrine_extensions.uploadable.manager.class' => 'Stof\\DoctrineExtensionsBundle\\Uploadable\\UploadableManager',
            'stof_doctrine_extensions.uploadable.mime_type_guesser.class' => 'Stof\\DoctrineExtensionsBundle\\Uploadable\\MimeTypeGuesserAdapter',
            'stof_doctrine_extensions.uploadable.default_file_info.class' => 'Stof\\DoctrineExtensionsBundle\\Uploadable\\UploadedFileInfo',
            'stof_doctrine_extensions.default_locale' => 'en',
            'stof_doctrine_extensions.default_file_path' => NULL,
            'stof_doctrine_extensions.translation_fallback' => true,
            'stof_doctrine_extensions.persist_default_translation' => false,
            'stof_doctrine_extensions.skip_translation_on_load' => false,
            'stof_doctrine_extensions.uploadable.validate_writable_directory' => true,
            'stof_doctrine_extensions.listener.translatable.class' => 'Gedmo\\Translatable\\TranslatableListener',
            'stof_doctrine_extensions.listener.timestampable.class' => 'Gedmo\\Timestampable\\TimestampableListener',
            'stof_doctrine_extensions.listener.blameable.class' => 'Gedmo\\Blameable\\BlameableListener',
            'stof_doctrine_extensions.listener.sluggable.class' => 'Gedmo\\Sluggable\\SluggableListener',
            'stof_doctrine_extensions.listener.tree.class' => 'Gedmo\\Tree\\TreeListener',
            'stof_doctrine_extensions.listener.loggable.class' => 'Gedmo\\Loggable\\LoggableListener',
            'stof_doctrine_extensions.listener.sortable.class' => 'Gedmo\\Sortable\\SortableListener',
            'stof_doctrine_extensions.listener.softdeleteable.class' => 'Gedmo\\SoftDeleteable\\SoftDeleteableListener',
            'stof_doctrine_extensions.listener.uploadable.class' => 'Gedmo\\Uploadable\\UploadableListener',
            'stof_doctrine_extensions.listener.reference_integrity.class' => 'Gedmo\\ReferenceIntegrity\\ReferenceIntegrityListener',
            'escape_wsse_authentication.provider.class' => 'Oro\\Bundle\\UserBundle\\Security\\WsseUserProvider',
            'escape_wsse_authentication.listener.class' => 'Oro\\Bundle\\UserBundle\\Security\\WsseAuthListener',
            'escape_wsse_authentication.entry_point.class' => 'Escape\\WSSEAuthenticationBundle\\Security\\Http\\EntryPoint\\EntryPoint',
            'escape_wsse_authentication.encoder.class' => 'Symfony\\Component\\Security\\Core\\Encoder\\MessageDigestPasswordEncoder',
            'liip_imagine.filter.configuration.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\FilterConfiguration',
            'liip_imagine.filter.manager.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\FilterManager',
            'liip_imagine.data.manager.class' => 'Liip\\ImagineBundle\\Imagine\\Data\\DataManager',
            'liip_imagine.cache.manager.class' => 'Liip\\ImagineBundle\\Imagine\\Cache\\CacheManager',
            'liip_imagine.controller.class' => 'Liip\\ImagineBundle\\Controller\\ImagineController',
            'liip_imagine.routing.loader.class' => 'Liip\\ImagineBundle\\Routing\\ImagineLoader',
            'liip_imagine.twig.extension.class' => 'Liip\\ImagineBundle\\Templating\\ImagineExtension',
            'liip_imagine.templating.helper.class' => 'Liip\\ImagineBundle\\Templating\\Helper\\ImagineHelper',
            'liip_imagine.gd.class' => 'Imagine\\Gd\\Imagine',
            'liip_imagine.imagick.class' => 'Imagine\\Imagick\\Imagine',
            'liip_imagine.gmagick.class' => 'Imagine\\Gmagick\\Imagine',
            'liip_imagine.filter.loader.relative_resize.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\RelativeResizeFilterLoader',
            'liip_imagine.filter.loader.resize.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\ResizeFilterLoader',
            'liip_imagine.filter.loader.thumbnail.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\ThumbnailFilterLoader',
            'liip_imagine.filter.loader.crop.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\CropFilterLoader',
            'liip_imagine.filter.loader.paste.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\PasteFilterLoader',
            'liip_imagine.filter.loader.watermark.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\WatermarkFilterLoader',
            'liip_imagine.filter.loader.strip.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\StripFilterLoader',
            'liip_imagine.filter.loader.background.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\BackgroundFilterLoader',
            'liip_imagine.filter.loader.upscale.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\UpscaleFilterLoader',
            'liip_imagine.data.loader.filesystem.class' => 'Liip\\ImagineBundle\\Imagine\\Data\\Loader\\FileSystemLoader',
            'liip_imagine.data.loader.stream.class' => 'Liip\\ImagineBundle\\Imagine\\Data\\Loader\\StreamLoader',
            'liip_imagine.cache.resolver.web_path.class' => 'Liip\\ImagineBundle\\Imagine\\Cache\\Resolver\\WebPathResolver',
            'liip_imagine.cache.resolver.no_cache.class' => 'Liip\\ImagineBundle\\Imagine\\Cache\\Resolver\\NoCacheResolver',
            'liip_imagine.form.type.image.class' => 'Liip\\ImagineBundle\\Form\\Type\\ImageType',
            'liip_imagine.cache.clearer.class' => 'Liip\\ImagineBundle\\Imagine\\Cache\\CacheClearer',
            'liip_imagine.cache_prefix' => '/media/cache',
            'liip_imagine.web_root' => '/var/www/orocrm-platform/app/../web',
            'liip_imagine.data_root' => '/var/www/orocrm-platform/app/../web',
            'liip_imagine.cache_mkdir_mode' => 511,
            'liip_imagine.formats' => array(

            ),
            'liip_imagine.cache.resolver.default' => 'web_path',
            'liip_imagine.filter_sets' => array(
                'avatar_med' => array(
                    'quality' => 95,
                    'filters' => array(
                        'thumbnail' => array(
                            'size' => array(
                                0 => 58,
                                1 => 58,
                            ),
                            'mode' => 'outbound',
                        ),
                        'strip' => array(

                        ),
                    ),
                    'format' => NULL,
                    'cache' => NULL,
                    'data_loader' => NULL,
                    'controller_action' => NULL,
                    'route' => array(

                    ),
                ),
            ),
            'liip_imagine.data.loader.default' => 'filesystem',
            'liip_imagine.controller_action' => 'liip_imagine.controller:filterAction',
            'liip_imagine.cache.resolver.base_path' => '',
            'genemu.form.recaptcha.public_key' => '',
            'genemu.form.recaptcha.private_key' => '',
            'genemu.form.recaptcha.server_url' => '',
            'genemu.form.recaptcha.code' => '',
            'genemu.form.recaptcha.options' => array(

            ),
            'genemu.form.recaptcha.validation.options' => array(

            ),
            'genemu.form.captcha.options' => array(
                'enabled' => true,
                'driver' => 'gd',
                'width' => 100,
                'height' => 30,
                'length' => 4,
                'format' => 'png',
                'chars' => array(
                    0 => 0,
                    1 => 1,
                    2 => 2,
                    3 => 3,
                    4 => 4,
                    5 => 5,
                    6 => 6,
                    7 => 7,
                    8 => 8,
                    9 => 9,
                ),
                'font_size' => 18,
                'grayscale' => false,
                'font_color' => array(
                    0 => '252525',
                    1 => '8B8787',
                    2 => '550707',
                    3 => '3526E6',
                    4 => '88531E',
                ),
                'background_color' => 'DDDDDD',
                'border_color' => '000000',
                'code' => NULL,
            ),
            'genemu.form.tinymce.configs' => array(
                'theme' => 'advanced',
            ),
            'genemu.form.color.options' => array(

            ),
            'genemu.form.date.options' => array(

            ),
            'genemu.form.rating.options' => array(

            ),
            'genemu.form.file.root_dir' => '/var/www/orocrm-platform/app/../web',
            'genemu.form.file.folder' => '/upload',
            'genemu.form.file.upload_dir' => '/var/www/orocrm-platform/app/../web/upload',
            'genemu.form.file.options' => array(

            ),
            'genemu.form.image.selected' => '',
            'genemu.form.image.thumbnails' => array(

            ),
            'genemu.form.image.filters' => array(

            ),
            'a2lix_translation_form.locales' => array(
                0 => 'en',
                1 => 'fr',
            ),
            'a2lix_translation_form.default_required' => true,
            'a2lix_translation_form.default.service.translation.class' => 'A2lix\\TranslationFormBundle\\TranslationForm\\DefaultTranslationForm',
            'a2lix_translation_form.default.listener.translations.class' => 'A2lix\\TranslationFormBundle\\Form\\EventListener\\DefaultTranslationsListener',
            'a2lix_translation_form.default.type.translations.class' => 'A2lix\\TranslationFormBundle\\Form\\Type\\TranslationsType',
            'a2lix_translation_form.default.type.translationsfields.class' => 'A2lix\\TranslationFormBundle\\Form\\Type\\TranslationsFieldsType',
            'a2lix_translation_form.default.type.translationsforms.class' => 'A2lix\\TranslationFormBundle\\Form\\Type\\TranslationsFormsType',
            'a2lix_translation_form.default.type.translationslocalesselector.class' => 'A2lix\\TranslationFormBundle\\Form\\Type\\TranslationsLocalesSelectorType',
            'a2lix_translation_form.templating' => 'OroUIBundle:Form:translatable.html.twig',
            'a2lix_translation_form.listener.controller.class' => 'A2lix\\TranslationFormBundle\\EventListener\\ControllerListener',
            'a2lix_translation_form.gedmo.service.translation.class' => 'A2lix\\TranslationFormBundle\\TranslationForm\\GedmoTranslationForm',
            'a2lix_translation_form.gedmo.listener.translations.class' => 'A2lix\\TranslationFormBundle\\Form\\EventListener\\GedmoTranslationsListener',
            'a2lix_translation_form.gedmo.type.translations.class' => 'A2lix\\TranslationFormBundle\\Form\\Type\\GedmoTranslationsType',
            'a2lix_translation_form.gedmo.type.translationslocales.class' => 'A2lix\\TranslationFormBundle\\Form\\Type\\GedmoTranslationsLocalesType',
            'lexik_maintenance.listener.class' => 'Lexik\\Bundle\\MaintenanceBundle\\Listener\\MaintenanceListener',
            'lexik_maintenance.driver_factory.class' => 'Lexik\\Bundle\\MaintenanceBundle\\Drivers\\DriverFactory',
            'lexik_maintenance.driver.database.class' => 'Lexik\\Bundle\\MaintenanceBundle\\Drivers\\DatabaseDriver',
            'lexik_maintenance.driver' => array(
                'class' => 'Lexik\\Bundle\\MaintenanceBundle\\Drivers\\FileDriver',
                'options' => array(
                    'file_path' => '/var/www/orocrm-platform/app/cache/lock',
                ),
                'ttl' => NULL,
            ),
            'lexik_maintenance.authorized.path' => 'maintenance|.*\\.js',
            'lexik_maintenance.authorized.host' => NULL,
            'lexik_maintenance.authorized.ips' => NULL,
            'lexik_maintenance.authorized.query' => array(

            ),
            'lexik_maintenance.authorized.route' => NULL,
            'lexik_maintenance.authorized.attributes' => array(

            ),
            'oro_security.entity.owners' => array(
                'organization' => 'OroOrganizationBundle:Organization',
                'business_unit' => 'OroOrganizationBundle:BusinessUnit',
                'user' => 'OroUserBundle:User',
            ),
            'oro_security.owner.entity_owner_accessor.class' => 'Oro\\Bundle\\SecurityBundle\\Owner\\EntityOwnerAccessor',
            'oro_security.owner.ownership_metadata_provider.class' => 'Oro\\Bundle\\SecurityBundle\\Owner\\Metadata\\OwnershipMetadataProvider',
            'oro_security.owner.ownership_config_subscriber.class' => 'Oro\\Bundle\\SecurityBundle\\EventListener\\OwnershipConfigSubscriber',
            'oro_security.owner.ownership_metadata_provider.cache.warmer.class' => 'Oro\\Bundle\\SecurityBundle\\Cache\\OwnershipMetadataCacheWarmer',
            'oro_security.owner.ownership_metadata_provider.cache.clearer.class' => 'Oro\\Bundle\\SecurityBundle\\Cache\\OwnershipMetadataCacheClearer',
            'oro_security.security_facade.class' => 'Oro\\Bundle\\SecurityBundle\\SecurityFacade',
            'oro_security.acl.manager.class' => 'Oro\\Bundle\\SecurityBundle\\Acl\\Persistence\\AclManager',
            'oro_security.acl.sid_manager.class' => 'Oro\\Bundle\\SecurityBundle\\Acl\\Persistence\\AclSidManager',
            'oro_security.acl.ace_provider.class' => 'Oro\\Bundle\\SecurityBundle\\Acl\\Persistence\\AceManipulationHelper',
            'oro_security.acl.privilege_repository.class' => 'Oro\\Bundle\\SecurityBundle\\Acl\\Persistence\\AclPrivilegeRepository',
            'oro_security.acl.extension_selector.class' => 'Oro\\Bundle\\SecurityBundle\\Acl\\Extension\\AclExtensionSelector',
            'oro_security.acl.extension.entity.class' => 'Oro\\Bundle\\SecurityBundle\\Acl\\Extension\\EntityAclExtension',
            'oro_security.acl.extension.action.class' => 'Oro\\Bundle\\SecurityBundle\\Acl\\Extension\\ActionAclExtension',
            'oro_security.acl.voter.class' => 'Oro\\Bundle\\SecurityBundle\\Acl\\Voter\\AclVoter',
            'oro_security.acl.provider.class' => 'Oro\\Bundle\\SecurityBundle\\Acl\\Domain\\RootBasedAclProvider',
            'oro_security.acl.dbal.provider.class' => 'Oro\\Bundle\\SecurityBundle\\Acl\\Dbal\\MutableAclProvider',
            'oro_security.acl.permission_granting_strategy.class' => 'Oro\\Bundle\\SecurityBundle\\Acl\\Domain\\PermissionGrantingStrategy',
            'oro_security.acl.permission_map.class' => 'Oro\\Bundle\\SecurityBundle\\Acl\\Permission\\PermissionMap',
            'oro_security.acl.object_identity_factory.class' => 'Oro\\Bundle\\SecurityBundle\\Acl\\Domain\\ObjectIdentityFactory',
            'oro_security.acl.object_identity_retrieval_strategy.class' => 'Oro\\Bundle\\SecurityBundle\\Acl\\Domain\\ObjectIdentityRetrievalStrategy',
            'oro_security.acl.object_id_accessor.class' => 'Oro\\Bundle\\SecurityBundle\\Acl\\Domain\\ObjectIdAccessor',
            'oro_security.owner.tree.class' => 'Oro\\Bundle\\SecurityBundle\\Owner\\OwnerTree',
            'oro_security.owner.decision_maker.class' => 'Oro\\Bundle\\SecurityBundle\\Owner\\EntityOwnershipDecisionMaker',
            'oro_security.type.oro_acl_access_level_selector.class' => 'Oro\\Bundle\\SecurityBundle\\Form\\Type\\AclAccessLevelSelectorType',
            'oro_security.type.oro_acl_label.class' => 'Oro\\Bundle\\SecurityBundle\\Form\\Type\\ObjectLabelType',
            'oro_security.entity_security_metadata_provider.class' => 'Oro\\Bundle\\SecurityBundle\\Metadata\\EntitySecurityMetadataProvider',
            'oro_security.action_metadata_provider.class' => 'Oro\\Bundle\\SecurityBundle\\Metadata\\ActionMetadataProvider',
            'oro_security.acl.annotation_provider.class' => 'Oro\\Bundle\\SecurityBundle\\Metadata\\AclAnnotationProvider',
            'oro_security.acl.annotation_loader.class' => 'Oro\\Bundle\\SecurityBundle\\Annotation\\Loader\\AclAnnotationLoader',
            'oro_security.acl.yaml_config_loader.class' => 'Oro\\Bundle\\SecurityBundle\\Annotation\\Loader\\AclYamlConfigLoader',
            'oro_security.entity_security_config_subscriber.class' => 'Oro\\Bundle\\SecurityBundle\\EventListener\\EntitySecurityMetadataConfigSubscriber',
            'oro_security.acl.annotation_provider.cache.warmer.class' => 'Oro\\Bundle\\SecurityBundle\\Cache\\AclAnnotationCacheWarmer',
            'oro_security.acl.annotation_provider.cache.clearer.class' => 'Oro\\Bundle\\SecurityBundle\\Cache\\AclAnnotationCacheClearer',
            'oro_security.action_metadata_provider.cache.warmer.class' => 'Oro\\Bundle\\SecurityBundle\\Cache\\ActionMetadataCacheWarmer',
            'oro_security.action_metadata_provider.cache.clearer.class' => 'Oro\\Bundle\\SecurityBundle\\Cache\\ActionMetadataCacheClearer',
            'oro_security.entity_security_metadata_provider.cache.warmer.class' => 'Oro\\Bundle\\SecurityBundle\\Cache\\EntitySecurityMetadataCacheWarmer',
            'oro_security.entity_security_metadata_provider.cache.clearer.class' => 'Oro\\Bundle\\SecurityBundle\\Cache\\EntitySecurityMetadataCacheClearer',
            'oro_security.listener.controller.class' => 'Oro\\Bundle\\SecurityBundle\\EventListener\\ControllerListener',
            'oro_security.twig.security_extension' => 'Oro\\Bundle\\SecurityBundle\\Twig\\OroSecurityExtension',
            'oro_security.encoder.mcrypt.class' => 'Oro\\Bundle\\SecurityBundle\\Encoder\\Mcrypt',
            'oro_security.acl.listenerclass' => 'Oro\\Bundle\\SecurityBundle\\EventListener\\AclListener',
            'oro_security.acl_helper.class' => 'Oro\\Bundle\\SecurityBundle\\ORM\\Walker\\AclHelper',
            'oro_security.orm.ownership_sql_walker_builder.class' => 'Oro\\Bundle\\SecurityBundle\\ORM\\Walker\\OwnershipConditionDataBuilder',
            'oro_security.ownership_tree_provider.class' => 'Oro\\Bundle\\SecurityBundle\\Owner\\OwnerTreeProvider',
            'oro_security.ownership_tree.cache.warmer.class' => 'Oro\\Bundle\\SecurityBundle\\Cache\\OwnerTreeCacheWarmer',
            'oro_security.ownership_tree.cache.clearer.class' => 'Oro\\Bundle\\SecurityBundle\\Cache\\OwnerTreeCacheCleaner',
            'oro_security.ownership_tree_subscriber.class' => 'Oro\\Bundle\\SecurityBundle\\EventListener\\OwnerTreeListener',
            'oro_ui.twig.ceil.class' => 'Oro\\Bundle\\UIBundle\\Twig\\CeilExtension',
            'oro_ui.twig.extension.class' => 'Oro\\Bundle\\UIBundle\\Twig\\UiExtension',
            'oro_ui.twig.mobile.class' => 'Oro\\Bundle\\UIBundle\\Twig\\MobileExtension',
            'oro_ui.router.class' => 'Oro\\Bundle\\UIBundle\\Route\\Router',
            'oro_ui.twig.widget.class' => 'Oro\\Bundle\\UIBundle\\Twig\\WidgetExtension',
            'oro_ui.twig.date.class' => 'Oro\\Bundle\\UIBundle\\Twig\\DateExtension',
            'oro_ui.twig.skype_button.class' => 'Oro\\Bundle\\UIBundle\\Twig\\SkypeButtonExtension',
            'oro_ui.view.listener.class' => 'Oro\\Bundle\\UIBundle\\EventListener\\TemplateListener',
            'oro_ui.twig.form.class' => 'Oro\\Bundle\\UIBundle\\Twig\\FormExtension',
            'oro_ui.format_converter.date_time.jquery_ui.class' => 'Oro\\Bundle\\UIBundle\\Converter\\JqueryUiDateTimeFormatConverter',
            'oro_ui.show_pin_button_on_start_page' => true,
            'oro_ui.wrap_class' => 'block-wrap',
            'oro_ui.placeholders' => array(
                'header_logo' => array(
                    'label' => 'Header Logo',
                    'items' => array(
                        0 => array(
                            'order' => 100,
                            'template' => 'OroUIBundle:Default:logo.html.twig',
                            'name' => 'logo',
                        ),
                    ),
                ),
                'user_menu' => array(
                    'label' => 'Profile menu',
                    'items' => array(
                        0 => array(
                            'order' => 100,
                            'template' => 'OroUserBundle:Menu:menuProfile.html.twig',
                            'name' => 'menu_user',
                        ),
                        1 => array(
                            'order' => 200,
                            'template' => 'OroUIBundle:Default:help.html.twig',
                            'name' => 'help',
                        ),
                    ),
                ),
                'form_buttons' => array(
                    'label' => 'Profile menu',
                    'items' => array(
                        0 => array(
                            'order' => 100,
                            'template' => 'OroUIBundle:Form:buttons.html.twig',
                            'name' => 'add_update_delete',
                        ),
                    ),
                ),
                'head_style' => array(
                    'label' => 'Head styles',
                    'items' => array(
                        0 => array(
                            'order' => 100,
                            'template' => 'OroAsseticBundle:Assets:oro_css.html.twig',
                            'name' => 'assets_css',
                        ),
                    ),
                ),
                'head_script' => array(
                    'label' => 'Head scripts',
                ),
                'requirejs_config_extend' => array(
                    'items' => array(
                        0 => array(
                            'order' => 10,
                            'template' => 'OroUIBundle::requirejs.config.js.twig',
                            'name' => 'ui_requirejs_config',
                        ),
                        1 => array(
                            'order' => 100,
                            'template' => 'OroNavigationBundle:Js:requirejs.config.js.twig',
                            'name' => 'routing_requirejs_config',
                        ),
                        2 => array(
                            'order' => 100,
                            'template' => 'OroTranslationBundle::requirejs.config.js.twig',
                            'name' => 'translation_requirejs_config',
                        ),
                    ),
                    'lable' => 'RequireJS Configuration Run Time Extend',
                ),
                'change_history_block' => array(
                    'label' => 'Change history block',
                    'items' => array(
                        0 => array(
                            'template' => 'OroDataAuditBundle::change_history_link.html.twig',
                            'name' => 'change_history_link',
                        ),
                    ),
                ),
                'scripts_before' => array(
                    'items' => array(
                        0 => array(
                            'order' => 20,
                            'template' => 'OroFilterBundle:Filter:container.js.twig',
                            'name' => 'filter_container',
                        ),
                        1 => array(
                            'order' => 20,
                            'template' => 'OroDataGridBundle:js:toolbar.html.twig',
                            'name' => 'template_datagrid_toolbar',
                        ),
                        2 => array(
                            'order' => 30,
                            'template' => 'OroDataGridBundle:js:pagination.html.twig',
                            'name' => 'template_datagrid_toolbar_pagination',
                        ),
                        3 => array(
                            'order' => 40,
                            'template' => 'OroDataGridBundle:js:pagination-input.html.twig',
                            'name' => 'template_datagrid_toolbar_pagination_input',
                        ),
                        4 => array(
                            'order' => 50,
                            'template' => 'OroDataGridBundle:js:page-size.html.twig',
                            'name' => 'template_datagrid_toolbar_page_size',
                        ),
                        5 => array(
                            'order' => 100,
                            'template' => 'OroNavigationBundle:Js:dot.menu.js.twig',
                            'name' => 'dot_menu_js',
                        ),
                        6 => array(
                            'order' => 200,
                            'template' => 'OroNavigationBundle:Js:pinbar.js.twig',
                            'name' => 'pinbar_js',
                        ),
                    ),
                    'label' => 'Scripts Before',
                ),
                'scripts_after' => array(
                    'items' => array(
                        0 => array(
                            'order' => 200,
                            'template' => 'OroWindowsBundle:Include:javascript.html.twig',
                            'name' => 'window_bundle_js',
                        ),
                        1 => array(
                            'order' => 220,
                            'template' => 'OroSyncBundle::maintenance_js.html.twig',
                            'name' => 'maintenance_js',
                        ),
                        2 => array(
                            'order' => 310,
                            'template' => 'OroSyncBundle::sync_js.html.twig',
                            'name' => 'sync_js',
                        ),
                        3 => array(
                            'order' => 500,
                            'template' => 'OroLocaleBundle::locale_settings.html.twig',
                            'name' => 'locale_settings',
                        ),
                    ),
                    'label' => 'Scripts After',
                ),
                'footer_inner' => array(
                    'items' => array(
                        0 => array(
                            'order' => 100,
                            'template' => 'OroPlatformBundle::application_version.html.twig',
                            'name' => 'application_version',
                        ),
                    ),
                ),
                'navbar' => array(
                    'items' => array(
                        0 => array(
                            'order' => 100,
                            'template' => 'OroNavigationBundle:Shortcut:shortcuts.html.twig',
                            'name' => 'shortcuts',
                        ),
                        1 => array(
                            'order' => 200,
                            'action' => 'OroSearchBundle:Search:searchBar',
                            'name' => 'search',
                        ),
                    ),
                    'label' => 'Navigation Bar',
                ),
                'right_panel' => array(
                    'items' => array(
                        0 => array(
                            'order' => 200,
                            'template' => 'OroSidebarBundle::sidebar.html.twig',
                            'name' => 'sidebar',
                        ),
                    ),
                ),
                'left_panel' => array(
                    'items' => array(
                        0 => array(
                            'order' => 200,
                            'template' => 'OroSidebarBundle::sidebar.html.twig',
                            'name' => 'sidebar',
                        ),
                    ),
                ),
                'view_navButtons_before' => array(
                    'label' => 'Entity Workflow Buttons',
                    'items' => array(
                        0 => array(
                            'order' => 100,
                            'template' => 'OroWorkflowBundle:Widget:entityButtons.html.twig',
                            'name' => 'workflow_buttons_entity',
                        ),
                    ),
                ),
                'hash_nav' => array(
                    'label' => 'Hash Navigation',
                    'items' => array(
                        0 => array(
                            'order' => 100,
                            'template' => 'OroNavigationBundle:HashNav:script.js.twig',
                            'name' => 'hashNavigation',
                        ),
                    ),
                ),
                'application_menu' => array(
                    'label' => 'Application Menu',
                    'items' => array(
                        0 => array(
                            'order' => 100,
                            'template' => 'OroNavigationBundle:ApplicationMenu:applicationMenu.html.twig',
                            'name' => 'application_menu',
                        ),
                    ),
                ),
                'before_navigation' => array(
                    'label' => 'Top Navigation Before',
                    'items' => array(
                        0 => array(
                            'order' => 100,
                            'template' => 'OroNavigationBundle:ApplicationMenu:dotsMenu.html.twig',
                            'name' => 'dots_menu',
                        ),
                    ),
                ),
                'after_navigation' => array(
                    'label' => 'Top Navigation After',
                ),
                'pin_button' => array(
                    'label' => 'Pinbar buttons',
                    'items' => array(
                        0 => array(
                            'order' => 100,
                            'template' => 'OroNavigationBundle:ApplicationMenu:pinButton.html.twig',
                            'name' => 'pin_button',
                        ),
                    ),
                ),
                'breadcrumb' => array(
                    'label' => 'Breadcrumbs',
                    'items' => array(
                        0 => array(
                            'order' => 100,
                            'template' => 'OroNavigationBundle:ApplicationMenu:breabcrumbs.html.twig',
                            'name' => 'breadcrumbs',
                        ),
                    ),
                ),
            ),
            'oro_entity.orm.entity_class_resolver.class' => 'Oro\\Bundle\\EntityBundle\\ORM\\EntityClassResolver',
            'oro_entity.orm.entity_class_accessor.class' => 'Oro\\Bundle\\EntityBundle\\ORM\\EntityClassAccessor',
            'oro_entity.orm.query.filter_collection.class' => 'Oro\\Bundle\\EntityBundle\\ORM\\Query\\FilterCollection',
            'oro_entity.form.type.custom_entity.class' => 'Oro\\Bundle\\EntityBundle\\Form\\Type\\CustomEntityType',
            'oro_entity.form.type.entity_choice.class' => 'Oro\\Bundle\\EntityBundle\\Form\\Type\\EntityChoiceType',
            'oro_entity.form.type.entity_field_choice.class' => 'Oro\\Bundle\\EntityBundle\\Form\\Type\\EntityFieldChoiceType',
            'oro_entity.form.type.option_select.class' => 'Oro\\Bundle\\EntityBundle\\Form\\Type\\OptionSelectType',
            'oro_entity.form.type.entity_select.class' => 'Oro\\Bundle\\EntityBundle\\Form\\Type\\EntitySelectType',
            'oro_entity.form.handler.entity_select.class' => 'Oro\\Bundle\\EntityBundle\\Form\\Handler\\EntitySelectHandler',
            'oro_entity.listener.navigation_listener.class' => 'Oro\\Bundle\\EntityBundle\\EventListener\\NavigationListener',
            'oro_entity.owner.entity_config_subscriber.class' => 'Oro\\Bundle\\EntityBundle\\EventListener\\EntityConfigSubscriber',
            'oro_entity.datagrid.extension.class' => 'Oro\\Bundle\\EntityBundle\\Grid\\ExtendExtension',
            'oro_entity.event_listener.custom_entity_grid_subscriber.class' => 'Oro\\Bundle\\EntityBundle\\EventListener\\CustomEntityGridListener',
            'oro_entity.event_listener.relation_entity_grid_subscriber.class' => 'Oro\\Bundle\\EntityBundle\\EventListener\\RelationEntityGridListener',
            'oro_entity.entity_provider.class' => 'Oro\\Bundle\\EntityBundle\\Provider\\EntityProvider',
            'oro_entity.entity_field_provider.class' => 'Oro\\Bundle\\EntityBundle\\Provider\\EntityFieldProvider',
            'jms_job_queue.entity.many_to_any_listener.class' => 'JMS\\JobQueueBundle\\Entity\\Listener\\ManyToAnyListener',
            'jms_job_queue.twig.extension.class' => 'JMS\\JobQueueBundle\\Twig\\JobQueueExtension',
            'jms_job_queue.statistics' => false,
            'jms_job_queue.entity.statistics_listener.class' => 'JMS\\JobQueueBundle\\Entity\\Listener\\StatisticsListener',
            'oro_address.address.entity.class' => 'Oro\\Bundle\\AddressBundle\\Entity\\Address',
            'oro_address.address.type.entity.class' => 'Oro\\Bundle\\AddressBundle\\Entity\\AddressType',
            'oro_address.address.manager.class' => 'Oro\\Bundle\\AddressBundle\\Entity\\Manager\\AddressManager',
            'oro_address.provider.address.class' => 'Oro\\Bundle\\AddressBundle\\Provider\\AddressProvider',
            'oro_address.form.listener.address.class' => 'Oro\\Bundle\\AddressBundle\\Form\\EventListener\\AddressCountryAndRegionSubscriber',
            'oro_address.form.type.address.class' => 'Oro\\Bundle\\AddressBundle\\Form\\Type\\AddressType',
            'oro_address.form.type.address_collection.class' => 'Oro\\Bundle\\AddressBundle\\Form\\Type\\AddressCollectionType',
            'oro_address.form.type.typed_address.class' => 'Oro\\Bundle\\AddressBundle\\Form\\Type\\TypedAddressType',
            'oro_address.form.type.email.class' => 'Oro\\Bundle\\AddressBundle\\Form\\Type\\EmailType',
            'oro_address.form.type.email_collection.class' => 'Oro\\Bundle\\AddressBundle\\Form\\Type\\EmailCollectionType',
            'oro_address.form.type.country.class' => 'Oro\\Bundle\\AddressBundle\\Form\\Type\\CountryType',
            'oro_address.form.type.region.class' => 'Oro\\Bundle\\AddressBundle\\Form\\Type\\RegionType',
            'oro_address.form.type.phone.class' => 'Oro\\Bundle\\AddressBundle\\Form\\Type\\PhoneType',
            'oro_address.form.type.phone_collection.class' => 'Oro\\Bundle\\AddressBundle\\Form\\Type\\PhoneCollectionType',
            'oro_address.form.handler.address.class' => 'Oro\\Bundle\\AddressBundle\\Form\\Handler\\AddressHandler',
            'oro_address.importexport.phone_normalizer.class' => 'Oro\\Bundle\\AddressBundle\\ImportExport\\Serializer\\Normalizer\\PhoneNormalizer',
            'oro_address.importexport.email_normalizer.class' => 'Oro\\Bundle\\AddressBundle\\ImportExport\\Serializer\\Normalizer\\EmailNormalizer',
            'oro_address.importexport.address_type_normalizer.class' => 'Oro\\Bundle\\AddressBundle\\ImportExport\\Serializer\\Normalizer\\AddressTypeNormalizer',
            'oro_address.importexport.address_normalizer.class' => 'Oro\\Bundle\\AddressBundle\\ImportExport\\Serializer\\Normalizer\\AddressNormalizer',
            'oro_address.importexport.typed_address_normalizer.class' => 'Oro\\Bundle\\AddressBundle\\ImportExport\\Serializer\\Normalizer\\TypedAddressNormalizer',
            'oro_address' => array(

            ),
            'oro_assetic.raw_configuration' => array(
                'css_debug_groups' => array(

                ),
                'css_debug_all' => false,
                'css' => array(
                    'UI' => array(
                        0 => 'bundles/oroui/css/less/main.less',
                        1 => 'bundles/oroui/css/all.css',
                        2 => 'bundles/oroui/lib/jstree/themes/default/style.css',
                        3 => 'bundles/oroui/css/jquery-ui.grid.css',
                        4 => 'bundles/oroui/lib/font-awesome/css/font-awesome.css',
                    ),
                    'address' => array(
                        0 => 'bundles/oroaddress/css/less/address.less',
                        1 => 'bundles/oroaddress/css/address.css',
                    ),
                    'full-calendar' => array(
                        0 => 'bundles/orocalendar/css/calendar.css',
                        1 => 'bundles/orocalendar/lib/fullcalendar/fullcalendar.css',
                    ),
                    'config' => array(
                        0 => 'bundles/oroconfig/css/less/config.less',
                    ),
                    'dashboard' => array(
                        0 => 'bundles/orodashboard/css/less/dashboard.less',
                    ),
                    'grids' => array(
                        0 => 'bundles/orodatagrid/lib/backgrid/backgrid.css',
                        1 => 'bundles/orodatagrid/lib/backgrid/extensions/paginator/backgrid-paginator.css',
                        2 => 'bundles/orodatagrid/lib/multiselect/jquery.multiselect.css',
                        3 => 'bundles/orodatagrid/lib/multiselect/jquery.multiselect.filter.css',
                        4 => 'bundles/orodatagrid/css/oro.grid.css',
                    ),
                    'email' => array(
                        0 => 'bundles/oroemail/css/style.css',
                    ),
                    'entityextend' => array(
                        0 => 'bundles/oroentityextend/css/extend.css',
                    ),
                    'filters' => array(
                        0 => 'bundles/orofilter/lib/multiselect/jquery.multiselect.css',
                        1 => 'bundles/orofilter/lib/multiselect/jquery.multiselect.filter.css',
                        2 => 'bundles/orofilter/css/oro.filter.css',
                    ),
                    'user' => array(
                        0 => 'bundles/oronotification/css/translation-widget.css',
                        1 => 'bundles/orouser/css/jquery-ui-1.10.2.custom.css',
                    ),
                    'query_designer' => array(
                        0 => 'bundles/oroquerydesigner/css/query-designer.css',
                    ),
                    'report' => array(
                        0 => 'bundles/ororeport/css/report.css',
                    ),
                    'search' => array(
                        0 => 'bundles/orosearch/css/search.css',
                    ),
                    'sidebar' => array(
                        0 => 'bundles/orosidebar/css/sidebar.css',
                        1 => 'bundles/orosidebar/css/widget-add.css',
                    ),
                    'tags' => array(
                        0 => 'bundles/orotag/css/tag-grid.css',
                    ),
                    'windows' => array(
                        0 => 'bundles/orowindows/css/jquery.dialog.extended.css',
                    ),
                ),
            ),
            'oro_assetic.configuration.class' => 'Oro\\Bundle\\AsseticBundle\\AssetsConfiguration',
            'oro_assetic.twig_extension.class' => 'Oro\\Bundle\\AsseticBundle\\Twig\\AsseticExtension',
            'oro_batch.connectors.class' => 'Oro\\Bundle\\BatchBundle\\Connector\\ConnectorRegistry',
            'oro_batch.job_repository.class' => 'Oro\\Bundle\\BatchBundle\\Job\\DoctrineJobRepository',
            'oro_batch.job_factory.class' => 'Oro\\Bundle\\BatchBundle\\Job\\JobFactory',
            'oro_batch.step_factory.class' => 'Oro\\Bundle\\BatchBundle\\Step\\StepFactory',
            'oro_batch.logger_subscriber.class' => 'Oro\\Bundle\\BatchBundle\\EventListener\\LoggerSubscriber',
            'oro_batch.notification_subscriber.class' => 'Oro\\Bundle\\BatchBundle\\EventListener\\NotificationSubscriber',
            'oro_batch.logger.batch_log_handler.class' => 'Oro\\Bundle\\BatchBundle\\Monolog\\Handler\\BatchLogHandler',
            'oro_batch.mail_notifier.class' => 'Oro\\Bundle\\BatchBundle\\Notification\\MailNotifier',
            'oro_batch.set_job_execution_log_file_subscriber.class' => 'Oro\\Bundle\\BatchBundle\\EventListener\\SetJobExecutionLogFileSubscriber',
            'oro_batch.connectors_config' => NULL,
            'oro_batch.jobs_config' => NULL,
            'oro_batch.mail_notifier.sender_email' => 'mailer@bap.com',
            'oro_calendar.calendar.entity.class' => 'Oro\\Bundle\\CalendarBundle\\Entity\\Calendar',
            'oro_calendar.calendar_connection.entity.class' => 'Oro\\Bundle\\CalendarBundle\\Entity\\CalendarConnection',
            'oro_calendar.calendar_event.entity.class' => 'Oro\\Bundle\\CalendarBundle\\Entity\\CalendarEvent',
            'oro_calendar.listener.entity_subscriber.class' => 'Oro\\Bundle\\CalendarBundle\\EventListener\\EntitySubscriber',
            'oro_calendar.calendar_connection.manager.api.class' => 'Oro\\Bundle\\SoapBundle\\Entity\\Manager\\ApiEntityManager',
            'oro_calendar.calendar_event.manager.api.class' => 'Oro\\Bundle\\SoapBundle\\Entity\\Manager\\ApiEntityManager',
            'oro_calendar.reminders_sender.class' => 'Oro\\Bundle\\CalendarBundle\\Notification\\RemindersSender',
            'oro_calendar.remind_time_calculator.class' => 'Oro\\Bundle\\CalendarBundle\\Notification\\RemindTimeCalculator',
            'oro_calendar.twig.dateformat.class' => 'Oro\\Bundle\\CalendarBundle\\Twig\\DateFormatExtension',
            'oro_calendar.provider.calendar_config.class' => 'Oro\\Bundle\\CalendarBundle\\Provider\\CalendarDateTimeConfigProvider',
            'oro_calendar.format_converter.date_time.full_calendar.class' => 'Oro\\Bundle\\CalendarBundle\\Converter\\FullCalendarDateTimeFormatConverter',
            'oro_calendar.calendar_event.form.type.class' => 'Oro\\Bundle\\CalendarBundle\\Form\\Type\\CalendarEventType',
            'oro_calendar.calendar_event.form.type.api.class' => 'Oro\\Bundle\\CalendarBundle\\Form\\Type\\CalendarEventApiType',
            'oro_calendar.calendar_event.form.handler.class' => 'Oro\\Bundle\\CalendarBundle\\Form\\Handler\\CalendarEventHandler',
            'oro_calendar.reminder_time' => 15,
            'oro_config.config_definition_bag.class' => 'Oro\\Bundle\\ConfigBundle\\Config\\ConfigDefinitionImmutableBag',
            'oro_config.global.class' => 'Oro\\Bundle\\ConfigBundle\\Config\\ConfigManager',
            'oro_config.user.class' => 'Oro\\Bundle\\ConfigBundle\\Config\\UserConfigManager',
            'oro_config.twig_extension.class' => 'Oro\\Bundle\\ConfigBundle\\Twig\\ConfigExtension',
            'oro_config.provider.system_configuration.form_provider.class' => 'Oro\\Bundle\\ConfigBundle\\Provider\\SystemConfigurationFormProvider',
            'oro_config.form.config_subscriber.class' => 'Oro\\Bundle\\ConfigBundle\\Form\\EventListener\\ConfigSubscriber',
            'oro_config.form.handler.config.class' => 'Oro\\Bundle\\ConfigBundle\\Form\\Handler\\ConfigHandler',
            'oro_config.type.form.class' => 'Oro\\Bundle\\ConfigBundle\\Form\\Type\\FormType',
            'oro_config.type.form_field.class' => 'Oro\\Bundle\\ConfigBundle\\Form\\Type\\FormFieldType',
            'oro_config.type.config_checkbox.class' => 'Oro\\Bundle\\ConfigBundle\\Form\\Type\\ConfigCheckbox',
            'oro_config.entities' => array(
                'Oro\\Bundle\\CalendarBundle\\Entity\\CalendarEvent' => array(
                    'icon_class' => 'icon-calendar',
                    'name' => 'oro.calendar.calendarevent.entity_label',
                    'description' => 'oro.calendar.calendarevent.entity_description',
                ),
                'Oro\\Bundle\\EmailBundle\\Entity\\Email' => array(
                    'icon_class' => 'icon-envelope',
                    'name' => 'oro.email.entity_label',
                    'description' => 'oro.email.entity_description',
                ),
                'Oro\\Bundle\\EmailBundle\\Entity\\EmailTemplate' => array(
                    'name' => 'oro.email.emailtemplate.entity_label',
                    'description' => 'oro.email.emailtemplate.entity_description',
                ),
                'Oro\\Bundle\\NotificationBundle\\Entity\\EmailNotification' => array(
                    'name' => 'oro.notification.emailnotification.entity_label',
                    'description' => 'oro.notification.emailnotification.entity_description',
                ),
                'Oro\\Bundle\\OrganizationBundle\\Entity\\BusinessUnit' => array(
                    'name' => 'oro.organization.businessunit.entity_label',
                    'description' => 'oro.organization.businessunit.entity_description',
                ),
                'Oro\\Bundle\\TagBundle\\Entity\\Tag' => array(
                    'icon_class' => 'icon-tag',
                    'name' => 'oro.tag.entity_label',
                    'description' => 'oro.tag.entity_description',
                ),
                'Oro\\Bundle\\UserBundle\\Entity\\User' => array(
                    'icon_class' => 'icon-user',
                    'name' => 'oro.user.entity_label',
                    'description' => 'oro.user.entity_description',
                ),
                'Oro\\Bundle\\UserBundle\\Entity\\Role' => array(
                    'icon_class' => 'icon-signal',
                    'name' => 'oro.user.role.entity_label',
                    'description' => 'oro.user.role.entity_description',
                ),
                'Oro\\Bundle\\UserBundle\\Entity\\Group' => array(
                    'icon_class' => 'icon-home',
                    'name' => 'oro.user.group.entity_label',
                    'description' => 'oro.user.group.entity_description',
                ),
            ),
            'oro_cron.job_daemon.class' => 'Oro\\Bundle\\CronBundle\\Job\\Daemon',
            'oro_cron.job_manager.class' => 'Oro\\Bundle\\CronBundle\\Entity\\Manager\\JobManager',
            'oro_cron.max_jobs' => 5,
            'oro_cron.jms_statistics' => true,
            'oro_dashboard.manager.class' => 'Oro\\Bundle\\DashboardBundle\\Manager',
            'oro_dataaudit.metadata.metadata_factory.class' => 'Oro\\Bundle\\DataAuditBundle\\Metadata\\ExtendMetadataFactory',
            'oro_dataaudit.metadata.annotation_driver.class' => 'Oro\\Bundle\\DataAuditBundle\\Metadata\\Driver\\AnnotationDriver',
            'oro_dataaudit.listener.entity_subscriber.class' => 'Oro\\Bundle\\DataAuditBundle\\EventListener\\EntitySubscriber',
            'oro_dataaudit.listener.kernel_listener.class' => 'Oro\\Bundle\\DataAuditBundle\\EventListener\\KernelListener',
            'oro_dataaudit.loggable.loggable_manager.class' => 'Oro\\Bundle\\DataAuditBundle\\Loggable\\LoggableManager',
            'oro_dataaudit.loggable.entity.class' => 'Oro\\Bundle\\DataAuditBundle\\Entity\\Audit',
            'oro_dataaudit.event_listener.dataaudit_grid_listener.class' => 'Oro\\Bundle\\DataAuditBundle\\EventListener\\AuditGridListener',
            'oro_dataaudit.event_listener.dataaudit_history_grid_listener.class' => 'Oro\\Bundle\\DataAuditBundle\\EventListener\\AuditHistoryGridListener',
            'oro_dataaudit.twig.extension.auditable.class' => 'Oro\\Bundle\\DataAuditBundle\\Twig\\AuditableExtension',
            'oro_datagrid.datagrid.base.class' => 'Oro\\Bundle\\DataGridBundle\\Datagrid\\Datagrid',
            'oro_datagrid.extension.acceptor.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Acceptor',
            'oro_datagrid.datagrid.manager.class' => 'Oro\\Bundle\\DataGridBundle\\Datagrid\\Manager',
            'oro_datagrid.datagrid.builder.class' => 'Oro\\Bundle\\DataGridBundle\\Datagrid\\Builder',
            'oro_datagrid.datagrid.request_params.class' => 'Oro\\Bundle\\DataGridBundle\\Datagrid\\RequestParameters',
            'oro_datagrid.provider.resolver.class' => 'Oro\\Bundle\\DataGridBundle\\Provider\\SystemAwareResolver',
            'oro_datagrid.twig.datagrid.class' => 'Oro\\Bundle\\DataGridBundle\\Twig\\DataGridExtension',
            'oro_datagrid.event_listener.base_orm_relation.class' => 'Oro\\Bundle\\DataGridBundle\\EventListener\\BaseOrmRelationDatagridListener',
            'oro_datagrid.configuration.provider.class' => 'Oro\\Bundle\\DataGridBundle\\Provider\\ConfigurationProvider',
            'oro_datagrid.configuration.provider.chain.class' => 'Oro\\Bundle\\DataGridBundle\\Provider\\ChainConfigurationProvider',
            'oro_datagrid.extension.toolbar.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Toolbar\\ToolbarExtension',
            'oro_datagrid.extension.formatter.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Formatter\\FormatterExtension',
            'oro_datagrid.extension.orm_pager.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Pager\\OrmPagerExtension',
            'oro_datagrid.extension.pager.orm.pager.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Pager\\Orm\\Pager',
            'oro_datagrid.extension.orm_sorter.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Sorter\\OrmSorterExtension',
            'oro_datagrid.extension.action.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Action\\ActionExtension',
            'oro_datagrid.extension.mass_action.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\MassAction\\MassActionExtension',
            'oro_datagrid.extension.views.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\GridViews\\GridViewsExtension',
            'oro_datagrid.datasource.orm.class' => 'Oro\\Bundle\\DataGridBundle\\Datasource\\Orm\\OrmDatasource',
            'oro_datagrid.extension.formatter.property.field_property.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Formatter\\Property\\FieldProperty',
            'oro_datagrid.extension.formatter.property.url_property.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Formatter\\Property\\UrlProperty',
            'oro_datagrid.extension.formatter.property.twig_property.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Formatter\\Property\\TwigTemplateProperty',
            'oro_datagrid.extension.formatter.property.translatable_property.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Formatter\\Property\\TranslatableProperty',
            'oro_datagrid.extension.formatter.property.callback_property.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Formatter\\Property\\CallbackProperty',
            'oro_datagrid.extension.formatter.property.localized_number_property.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Formatter\\Property\\LocalizedNumberProperty',
            'oro_datagrid.extension.action.type.navigate.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Action\\Actions\\NavigateAction',
            'oro_datagrid.extension.action.type.ajax.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Action\\Actions\\AjaxAction',
            'oro_datagrid.extension.action.type.delete.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\Action\\Actions\\DeleteAction',
            'oro_datagrid.extension.mass_action.handler.delete.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\MassAction\\DeleteMassActionHandler',
            'oro_datagrid.mass_action.parameters_parser.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\MassAction\\MassActionParametersParser',
            'oro_datagrid.mass_action.dispatcher.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\MassAction\\MassActionDispatcher',
            'oro_datagrid.extension.mass_action.type.ajax.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\MassAction\\Actions\\Ajax\\AjaxMassAction',
            'oro_datagrid.extension.mass_action.type.delete.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\MassAction\\Actions\\Ajax\\DeleteMassAction',
            'oro_datagrid.extension.mass_action.type.redirect.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\MassAction\\Actions\\Redirect\\RedirectMassAction',
            'oro_datagrid.extension.mass_action.type.widget.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\MassAction\\Actions\\Widget\\WidgetMassAction',
            'oro_datagrid.extension.mass_action.type.window.class' => 'Oro\\Bundle\\DataGridBundle\\Extension\\MassAction\\Actions\\Widget\\WindowMassAction',
            'oro_distribution.routing_loader.class' => 'Oro\\Bundle\\DistributionBundle\\Routing\\OroAutoLoader',
            'oro_distribution.package_manager.class' => 'Oro\\Bundle\\DistributionBundle\\Manager\\PackageManager',
            'oro_distribution.script_runner.class' => 'Oro\\Bundle\\DistributionBundle\\Script\\Runner',
            'oro_distribution.composer.class' => 'Composer\\Composer',
            'oro_distribution.composer.io.class' => 'Composer\\IO\\BufferIO',
            'oro_distribution.composer.installer.class' => 'Composer\\Installer',
            'oro_distribution.composer.installation_manager.class' => 'Composer\\Installer\\InstallationManager',
            'oro_distribution.composer_json' => '/var/www/orocrm-platform/app/../composer.json',
            'oro_distribution.listener.navigation_listener.class' => 'Oro\\Bundle\\DistributionBundle\\EventListener\\NavigationListener',
            'oro_distribution.entry_point' => '/install.php',
            'oro_distribution.security.access_denied_listener.class' => 'Oro\\Bundle\\DistributionBundle\\Security\\AccessDeniedListener',
            'oro_email.email.entity.class' => 'Oro\\Bundle\\EmailBundle\\Entity\\Email',
            'oro_email.email_folder.entity.class' => 'Oro\\Bundle\\EmailBundle\\Entity\\EmailFolder',
            'oro_email.email.cache.manager.class' => 'Oro\\Bundle\\EmailBundle\\Cache\\EmailCacheManager',
            'oro_email.email.address.manager.class' => 'Oro\\Bundle\\EmailBundle\\Entity\\Manager\\EmailAddressManager',
            'oro_email.email.owner.provider.class' => 'Oro\\Bundle\\EmailBundle\\Entity\\Provider\\EmailOwnerProvider',
            'oro_email.email.owner.provider.storage.class' => 'Oro\\Bundle\\EmailBundle\\Entity\\Provider\\EmailOwnerProviderStorage',
            'oro_email.email.owner.manager.class' => 'Oro\\Bundle\\EmailBundle\\Entity\\Manager\\EmailOwnerManager',
            'oro_email.email.entity.builder.class' => 'Oro\\Bundle\\EmailBundle\\Builder\\EmailEntityBuilder',
            'oro_email.email.entity.batch_processor.class' => 'Oro\\Bundle\\EmailBundle\\Builder\\EmailEntityBatchProcessor',
            'oro_email.email_body_loader_selector.class' => 'Oro\\Bundle\\EmailBundle\\Provider\\EmailBodyLoaderSelector',
            'oro_email.listener.entity_subscriber.class' => 'Oro\\Bundle\\EmailBundle\\EventListener\\EntitySubscriber',
            'oro_email.manager.email.api.class' => 'Oro\\Bundle\\EmailBundle\\Entity\\Manager\\EmailApiEntityManager',
            'oro_email.entity.cache.warmer.class' => 'Oro\\Bundle\\EmailBundle\\Cache\\EntityCacheWarmer',
            'oro_email.entity.cache.clearer.class' => 'Oro\\Bundle\\EmailBundle\\Cache\\EntityCacheClearer',
            'oro_email.direct_mailer.class' => 'Oro\\Bundle\\EmailBundle\\Mailer\\DirectMailer',
            'oro_email.mailer.processor.class' => 'Oro\\Bundle\\EmailBundle\\Mailer\\Processor',
            'oro_email.emailtemplate.entity.class' => 'Oro\\Bundle\\EmailBundle\\Entity\\EmailTemplate',
            'oro_email.manager.emailtemplate.api.class' => 'Oro\\Bundle\\SoapBundle\\Entity\\Manager\\ApiEntityManager',
            'oro_email.listener.config_subscriber.class' => 'Oro\\Bundle\\EmailBundle\\EventListener\\ConfigSubscriber',
            'oro_email.provider.variable_provider.class' => 'Oro\\Bundle\\EmailBundle\\Provider\\VariablesProvider',
            'oro_email.cache.available_in_template_key' => 'oro_email.available_in_template_fields',
            'oro_email.email_renderer.class' => 'Oro\\Bundle\\EmailBundle\\Provider\\EmailRenderer',
            'oro_email.twig.email_security_policy.class' => 'Twig_Sandbox_SecurityPolicy',
            'oro_email.datagrid_query_factory.class' => 'Oro\\Bundle\\EmailBundle\\Datagrid\\EmailQueryFactory',
            'oro_email.emailtemplate.datagrid_view_list.class' => 'Oro\\Bundle\\EmailBundle\\Datagrid\\EmailTemplatesViewList',
            'oro_email.emailtemplate.datagrid_helper.class' => 'Oro\\Bundle\\EmailBundle\\Datagrid\\EmailTemplatesGridHelper',
            'oro_email.workflow.action.send_email.class' => 'Oro\\Bundle\\EmailBundle\\Workflow\\Action\\SendEmail',
            'oro_email.form.subscriber.emailtemplate.class' => 'Oro\\Bundle\\EmailBundle\\Form\\EventListener\\BuildTemplateFormSubscriber',
            'oro_email.form.type.emailtemplate.class' => 'Oro\\Bundle\\EmailBundle\\Form\\Type\\EmailTemplateType',
            'oro_email.form.type.emailtemplate_select.class' => 'Oro\\Bundle\\EmailBundle\\Form\\Type\\EmailTemplateSelectType',
            'oro_email.form.type.emailtemplate_translation.class' => 'Oro\\Bundle\\EmailBundle\\Form\\Type\\EmailTemplateTranslationType',
            'oro_email.form.handler.emailtemplate.class' => 'Oro\\Bundle\\EmailBundle\\Form\\Handler\\EmailTemplateHandler',
            'oro_email.form.type.emailtemplate.api.class' => 'Oro\\Bundle\\EmailBundle\\Form\\Type\\EmailTemplateApiType',
            'oro_email.form.handler.email.class' => 'Oro\\Bundle\\EmailBundle\\Form\\Handler\\EmailHandler',
            'oro_email.form.type.email.class' => 'Oro\\Bundle\\EmailBundle\\Form\\Type\\EmailType',
            'oro_email.form.type.email_address.class' => 'Oro\\Bundle\\EmailBundle\\Form\\Type\\EmailAddressType',
            'oro_entity_config.config_manager.class' => 'Oro\\Bundle\\EntityConfigBundle\\Config\\ConfigManager',
            'oro_entity_config.config_model_manager.class' => 'Oro\\Bundle\\EntityConfigBundle\\Config\\ConfigModelManager',
            'oro_entity_config.config_audit_mamanger.class' => 'Oro\\Bundle\\EntityConfigBundle\\Audit\\AuditManager',
            'oro_entity_config.cache.cache.class' => 'Oro\\Bundle\\EntityConfigBundle\\Config\\ConfigCache',
            'oro_entity_config.provider_bag.class' => 'Oro\\Bundle\\EntityConfigBundle\\Provider\\ConfigProviderBag',
            'oro_entity_config.event_listener.option_set_listener.class' => 'Oro\\Bundle\\EntityConfigBundle\\EventListener\\OptionSetListener',
            'oro_entity_config.event_listener.entityconfig_grid_listener.class' => 'Oro\\Bundle\\EntityConfigBundle\\EventListener\\EntityConfigGridListener',
            'oro_entity_config.event_listener.entityfields_grid_listener.class' => 'Oro\\Bundle\\EntityConfigBundle\\EventListener\\FieldConfigGridListener',
            'oro_entity_config.twig.extension.dynamic_fields.class' => 'Oro\\Bundle\\EntityConfigBundle\\Twig\\DynamicFieldsExtension',
            'oro_entity_config.metadata.metadata_factory.class' => 'Metadata\\MetadataFactory',
            'oro_entity_config.metadata.annotation_driver.class' => 'Oro\\Bundle\\EntityConfigBundle\\Metadata\\Driver\\AnnotationDriver',
            'oro_entity_config.type.config.class' => 'Oro\\Bundle\\EntityConfigBundle\\Form\\Type\\ConfigType',
            'oro_entity_config.extension.config.class' => 'Oro\\Bundle\\EntityConfigBundle\\Form\\Extension\\ConfigExtension',
            'oro_entity_extend.entity.cache.warmer.class' => 'Oro\\Bundle\\EntityExtendBundle\\Cache\\EntityCacheWarmer',
            'oro_entity_extend.extend.extend_manager.class' => 'Oro\\Bundle\\EntityExtendBundle\\Extend\\ExtendManager',
            'oro_entity_extend.extension.extend_entity.class' => 'Oro\\Bundle\\EntityExtendBundle\\Form\\Extension\\ExtendEntityExtension',
            'oro_entity_extend.tools.dumper.class' => 'Oro\\Bundle\\EntityExtendBundle\\Tools\\ExtendConfigDumper',
            'oro_entity_extend.listener.config_subscriber.class' => 'Oro\\Bundle\\EntityExtendBundle\\EventListener\\ConfigSubscriber',
            'oro_entity_extend.listener.entity_subscriber.class' => 'Oro\\Bundle\\EntityExtendBundle\\EventListener\\DoctrineSubscriber',
            'oro_entity_extend.twig.view_extension.class' => 'Oro\\Bundle\\EntityExtendBundle\\Twig\\ViewExtension',
            'oro_entity_extend.type.field.class' => 'Oro\\Bundle\\EntityExtendBundle\\Form\\Type\\FieldType',
            'oro_entity_extend.type.relation.class' => 'Oro\\Bundle\\EntityExtendBundle\\Form\\Type\\RelationType',
            'oro_entity_extend.type.option_set.class' => 'Oro\\Bundle\\EntityExtendBundle\\Form\\Type\\OptionSetType',
            'oro_entity_extend.type.option_set_collection.class' => 'Oro\\Bundle\\EntityExtendBundle\\Form\\Type\\OptionSetCollectionType',
            'oro_filter.extension.orm_filter.class' => 'Oro\\Bundle\\FilterBundle\\Grid\\Extension\\OrmFilterExtension',
            'oro_filter.filter_utility.class' => 'Oro\\Bundle\\FilterBundle\\Filter\\FilterUtility',
            'oro_filter.string_filter.class' => 'Oro\\Bundle\\FilterBundle\\Filter\\StringFilter',
            'oro_filter.select_row_filter.class' => 'Oro\\Bundle\\FilterBundle\\Filter\\SelectRowFilter',
            'oro_filter.number_filter.class' => 'Oro\\Bundle\\FilterBundle\\Filter\\NumberFilter',
            'oro_filter.percent_filter.class' => 'Oro\\Bundle\\FilterBundle\\Filter\\PercentFilter',
            'oro_filter.choice_filter.class' => 'Oro\\Bundle\\FilterBundle\\Filter\\ChoiceFilter',
            'oro_filter.entity_filter.class' => 'Oro\\Bundle\\FilterBundle\\Filter\\EntityFilter',
            'oro_filter.boolean_filter.class' => 'Oro\\Bundle\\FilterBundle\\Filter\\BooleanFilter',
            'oro_filter.date_range_filter.class' => 'Oro\\Bundle\\FilterBundle\\Filter\\DateRangeFilter',
            'oro_filter.datetime_range_filter.class' => 'Oro\\Bundle\\FilterBundle\\Filter\\DateTimeRangeFilter',
            'oro_form.autocomplete.security.class' => 'Oro\\Bundle\\FormBundle\\Autocomplete\\Security',
            'oro_form.autocomplete.search_registry.class' => 'Oro\\Bundle\\FormBundle\\Autocomplete\\SearchRegistry',
            'oro_form.autocomplete.search_handler.class' => 'Oro\\Bundle\\FormBundle\\Autocomplete\\SearchHandler',
            'oro_form.autocomplete.full_name.search_handler.class' => 'Oro\\Bundle\\FormBundle\\Autocomplete\\FullNameSearchHandler',
            'oro_form.type.date.class' => 'Oro\\Bundle\\FormBundle\\Form\\Type\\OroDateType',
            'oro_form.type.datetime.class' => 'Oro\\Bundle\\FormBundle\\Form\\Type\\OroDateTimeType',
            'oro_form.type.time_interval.class' => 'Oro\\Bundle\\FormBundle\\Form\\Type\\OroTimeIntervalType',
            'oro_form.type.money.class' => 'Oro\\Bundle\\FormBundle\\Form\\Type\\OroMoneyType',
            'oro_form.type.entity_identifier.class' => 'Oro\\Bundle\\FormBundle\\Form\\Type\\EntityIdentifierType',
            'oro_form.type.jqueryselect2_hidden.class' => 'Oro\\Bundle\\FormBundle\\Form\\Type\\OroJquerySelect2HiddenType',
            'oro_form.type.icon.class' => 'Oro\\Bundle\\FormBundle\\Form\\Type\\OroIconType',
            'oro_form.type.multiple_entity.class' => 'Oro\\Bundle\\FormBundle\\Form\\Type\\MultipleEntityType',
            'oro_form.type.collection.class' => 'Oro\\Bundle\\FormBundle\\Form\\Type\\CollectionType',
            'oro_form.extension.data_block.class' => 'Oro\\Bundle\\FormBundle\\Form\\Extension\\DataBlockExtension',
            'oro_form.extension.client_validation.class' => 'Oro\\Bundle\\FormBundle\\Form\\Extension\\ClientValidationExtension',
            'oro_form.extension.constraint_as_option.class' => 'Oro\\Bundle\\FormBundle\\Form\\Extension\\ConstraintAsOptionExtension',
            'oro_form.extension.tooltip.class' => 'Oro\\Bundle\\FormBundle\\Form\\Extension\\TooltipFormExtension',
            'oro_form.extension.js_validation.class' => 'Oro\\Bundle\\FormBundle\\Form\\Extension\\JsValidationExtension',
            'oro_form.extension.js_validation.constraints_provider.class' => 'Oro\\Bundle\\FormBundle\\Form\\Extension\\JsValidation\\ConstraintsProvider',
            'oro_form.extension.js_validation.repeated.class' => 'Oro\\Bundle\\FormBundle\\Form\\Extension\\JsValidation\\RepeatedTypeExtension',
            'oro_form.importexport.primary_item_collection_normalizer.class' => 'Oro\\Bundle\\FormBundle\\ImportExport\\Serializer\\Normalizer\\PrimaryItemCollectionNormalizer',
            'oro_form.validator.constraint_factory.class' => 'Oro\\Bundle\\FormBundle\\Validator\\ConstraintFactory',
            'oro_form.twig.form.class' => 'Oro\\Bundle\\FormBundle\\Twig\\FormExtension',
            'oro_form.twig.js_validation_extension.class' => 'Oro\\Bundle\\FormBundle\\Twig\\JsValidationExtension',
            'oro_help.model.help_link_provider.class' => 'Oro\\Bundle\\HelpBundle\\Model\\HelpLinkProvider',
            'oro_help.twig.extension.class' => 'Oro\\Bundle\\HelpBundle\\Twig\\HelpExtension',
            'oro_help.listener.help_link.class' => 'Oro\\Bundle\\HelpBundle\\EventListener\\HelpLinkRequestListener',
            'oro_imap.connector.factory.class' => 'Oro\\Bundle\\ImapBundle\\Connector\\ImapConnectorFactory',
            'oro_imap.connector.class' => 'Oro\\Bundle\\ImapBundle\\Connector\\ImapConnector',
            'oro_imap.services.factory.class' => 'Oro\\Bundle\\ImapBundle\\Connector\\ImapServicesFactory',
            'oro_imap.search_string_manager.gmail.class' => 'Oro\\Bundle\\ImapBundle\\Connector\\Search\\GmailSearchStringManager',
            'oro_imap.search_string_manager.other.class' => 'Oro\\Bundle\\ImapBundle\\Connector\\Search\\SearchStringManager',
            'oro_imap.storage.gmail.class' => 'Oro\\Bundle\\ImapBundle\\Mail\\Storage\\GmailImap',
            'oro_imap.storage.other.class' => 'Oro\\Bundle\\ImapBundle\\Mail\\Storage\\Imap',
            'oro_imap.email_body_loader.class' => 'Oro\\Bundle\\ImapBundle\\Provider\\ImapEmailBodyLoader',
            'oro_imap.email_synchronizer.class' => 'Oro\\Bundle\\ImapBundle\\Sync\\ImapEmailSynchronizer',
            'oro_imap.form.type.configuration.class' => 'Oro\\Bundle\\ImapBundle\\Form\\Type\\ConfigurationType',
            'oro_importexport.serializer.class' => 'Oro\\Bundle\\ImportExportBundle\\Serializer\\Serializer',
            'oro_importexport.serializer.dummy_encoder.class' => 'Oro\\Bundle\\ImportExportBundle\\Serializer\\Encoder\\DummyEncoder',
            'oro_importexport.serializer.datetime_normalizer.class' => 'Oro\\Bundle\\ImportExportBundle\\Serializer\\Normalizer\\DateTimeNormalizer',
            'oro_importexport.serializer.collection_normalizer.class' => 'Oro\\Bundle\\ImportExportBundle\\Serializer\\Normalizer\\CollectionNormalizer',
            'oro_importexport.context_registry.class' => 'Oro\\Bundle\\ImportExportBundle\\Context\\ContextRegistry',
            'oro_importexport.data_converter.default.class' => 'Oro\\Bundle\\ImportExportBundle\\Converter\\DefaultDataConverter',
            'oro_importexport.strategy.import.helper.class' => 'Oro\\Bundle\\ImportExportBundle\\Strategy\\Import\\ImportStrategyHelper',
            'oro_importexport.reader.csv.class' => 'Oro\\Bundle\\ImportExportBundle\\Reader\\CsvFileReader',
            'oro_importexport.reader.entity.class' => 'Oro\\Bundle\\ImportExportBundle\\Reader\\EntityReader',
            'oro_importexport.writer.csv.class' => 'Oro\\Bundle\\ImportExportBundle\\Writer\\CsvFileWriter',
            'oro_importexport.writer.entity.class' => 'Oro\\Bundle\\ImportExportBundle\\Writer\\EntityWriter',
            'oro_importexport.writer.entity_detach_fixer.class' => 'Oro\\Bundle\\ImportExportBundle\\Writer\\EntityDetachFixer',
            'oro_importexport.writer.dummy.class' => 'Oro\\Bundle\\ImportExportBundle\\Writer\\DummyWriter',
            'oro_importexport.writer.doctrine_clear.class' => 'Oro\\Bundle\\ImportExportBundle\\Writer\\DoctrineClearWriter',
            'oro_importexport.processor.registry.class' => 'Oro\\Bundle\\ImportExportBundle\\Processor\\ProcessorRegistry',
            'oro_importexport.processor.registry_delegate_processor.class' => 'Oro\\Bundle\\ImportExportBundle\\Processor\\RegistryDelegateProcessor',
            'oro_importexport.processor.export_abstract.class' => 'Oro\\Bundle\\ImportExportBundle\\Processor\\ExportProcessor',
            'oro_importexport.processor.import_abstract.class' => 'Oro\\Bundle\\ImportExportBundle\\Processor\\ImportProcessor',
            'oro_importexport.form.type.import.class' => 'Oro\\Bundle\\ImportExportBundle\\Form\\Type\\ImportType',
            'oro_importexport.job_executor.class' => 'Oro\\Bundle\\ImportExportBundle\\Job\\JobExecutor',
            'oro_importexport.file.file_system_operator.class' => 'Oro\\Bundle\\ImportExportBundle\\File\\FileSystemOperator',
            'oro_installer.scenario.class' => 'Oro\\Bundle\\InstallerBundle\\Process\\InstallerScenario',
            'oro_installer.requirements.class' => 'Oro\\Bundle\\InstallerBundle\\Requirement\\OroRequirements',
            'oro_installer.requirements.settings.class' => 'Oro\\Bundle\\InstallerBundle\\Requirement\\SettingsRequirements',
            'oro_installer.requirements.extensions.class' => 'Oro\\Bundle\\InstallerBundle\\Requirement\\ExtensionsRequirements',
            'oro_installer.requirements.filesystem.class' => 'Oro\\Bundle\\InstallerBundle\\Requirement\\FilesystemRequirements',
            'oro_installer.yaml_persister.class' => 'Oro\\Bundle\\InstallerBundle\\Persister\\YamlPersister',
            'oro_installer.listener.request.class' => 'Oro\\Bundle\\InstallerBundle\\EventListener\\RequestListener',
            'oro_installer.script_manager.class' => 'Oro\\Bundle\\InstallerBundle\\ScriptManager',
            'oro_installer.form.type.configuration.class' => 'Oro\\Bundle\\InstallerBundle\\Form\\Type\\ConfigurationType',
            'oro_installer.form.type.configuration.database.class' => 'Oro\\Bundle\\InstallerBundle\\Form\\Type\\Configuration\\DatabaseType',
            'oro_installer.form.type.configuration.mailer.class' => 'Oro\\Bundle\\InstallerBundle\\Form\\Type\\Configuration\\MailerType',
            'oro_installer.form.type.configuration.system.class' => 'Oro\\Bundle\\InstallerBundle\\Form\\Type\\Configuration\\SystemType',
            'oro_installer.form.type.configuration.ws.class' => 'Oro\\Bundle\\InstallerBundle\\Form\\Type\\Configuration\\WebsocketType',
            'oro_installer.form.type.setup.class' => 'Oro\\Bundle\\InstallerBundle\\Form\\Type\\SetupType',
            'oro_integration.channel.entity.class' => 'Oro\\Bundle\\IntegrationBundle\\Entity\\Channel',
            'oro_integration.form.type.channel.class' => 'Oro\\Bundle\\IntegrationBundle\\Form\\Type\\ChannelType',
            'oro_integration.form.handler.channel.class' => 'Oro\\Bundle\\IntegrationBundle\\Form\\Handler\\ChannelHandler',
            'oro_integration.manager.types_registry.class' => 'Oro\\Bundle\\IntegrationBundle\\Manager\\TypesRegistry',
            'oro_integration.sync.processor.class' => 'Oro\\Bundle\\IntegrationBundle\\Provider\\SyncProcessor',
            'oro_integration.provider.channel_type.simple.class' => 'Oro\\Bundle\\IntegrationBundle\\Provider\\SimpleChannelType',
            'oro_integration.provider.simple_transport.class' => 'Oro\\Bundle\\IntegrationBundle\\Provider\\SimpleTransport',
            'oro_integration.job_executor.class' => 'Oro\\Bundle\\IntegrationBundle\\ImportExport\\Job\\Executor',
            'oro_integration.writer.persistent_batch_writer.class' => 'Oro\\Bundle\\IntegrationBundle\\ImportExport\\Writer\\PersistentBatchWriter',
            'oro_integration.logger.strategy.class' => 'Oro\\Bundle\\IntegrationBundle\\Logger\\LoggerStrategy',
            'oro_locale.format.name' => array(
                'en' => '%prefix% %first_name% %middle_name% %last_name% %suffix%',
                'en_US' => '%prefix% %first_name% %middle_name% %last_name% %suffix%',
                'ru' => '%last_name% %first_name% %middle_name%',
                'ru_RU' => '%last_name% %first_name% %middle_name%',
            ),
            'oro_locale.format.address' => array(
                'AD' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %REGION%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'region',
                    ),
                    'region_name_type' => 'parish',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'AE' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'AG' => array(
                    'require' => array(
                        0 => 'street',
                    ),
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'AM' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code%\\n%city%\\n%region%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%postal_code%\\n%city%\\n%region%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'AR' => array(
                    'format' => '%name%\\n%organization%\\n%STREET%\\n%POSTAL_CODE% %CITY%\\n%region%\\n%country%',
                    'region_name_type' => 'region',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'AS' => array(
                    'format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %REGION% %COUNTRY% %postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'zip_name_type' => 'zip',
                    'region_name_type' => 'region',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'AT' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'AU' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\n%CITY% %REGION% %COUNTRY% %postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'region_name_type' => 'region',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'AX' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\nAX-%postal_code% %city%\\n%country%\\nÅLAND',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'postprefix' => 'AX-',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'AZ' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\nAZ %postal_code% %city%\\n%country%',
                    'postprefix' => 'AZ ',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'BA' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'BB' => array(
                    'region_name_type' => 'parish',
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'BD' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% - %postal_code%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'BE' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'BF' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'BG' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'BH' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'BL' => array(
                    'format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'BM' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'BN' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'BR' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\n%CITY%-%REGION%\\n%COUNTRY%\\n%postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'region',
                        2 => 'city',
                        3 => 'postal_code',
                    ),
                    'region_name_type' => 'region',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'BS' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%, %region%\\n%country%',
                    'region_name_type' => 'island',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'BY' => array(
                    'format' => '%country%\\n%region%\\n%postal_code% %city% %street%\\n%organization%\\n%name%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'CA' => array(
                    'format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %REGION%, %COUNTRY% %POSTAL_CODE%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'CC' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\n%CITY% %REGION% %COUNTRY% %postal_code%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'CD' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'CH' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\nCH-%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'postprefix' => 'CH-',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'CI' => array(
                    'format' => '%name%\\n%organization% %street% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'CK' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'CL' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%region%\\n%country%',
                    'region_name_type' => 'region',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'CN' => array(
                    'format' => '%postal_code%\\n%COUNTRY%\\n%REGION%%city%\\n%street%\\n%organization%\\n%name%',
                    'latin_format' => '%name%\\n%organization%\\n%street%, %city%\\n%REGION%, %COUNTRY% %postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'has_disputed' => true,
                    'format_charset' => 'GB2312',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                ),
                'CO' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%, %region%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'CR' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'CS' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'CV' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%region%\\n%country%',
                    'region_name_type' => 'island',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'CX' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\n%CITY% %REGION% %COUNTRY% %postal_code%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'CY' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'CZ' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'DE' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'DK' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'DO' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'DZ' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'EC' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%POSTAL_CODE%\\n%CITY%\\n%COUNTRY%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'EE' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'EG' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%region%\\n%country%\\n%postal_code%',
                    'direction' => 'rtl',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'ES' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %CITY% %REGION%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'ET' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'FI' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\nFI-%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'postprefix' => 'FI-',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'FK' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\n%POSTAL_CODE%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'FM' => array(
                    'format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %COUNTRY% %REGION% %postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'zip_name_type' => 'zip',
                    'region_name_type' => 'region',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'FO' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\nFO%postal_code% %city%\\n%country%',
                    'postprefix' => 'FO',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'FR' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\n%postal_code% %CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'GB' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%region%\\n%country%\\n%POSTAL_CODE%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'region_name_type' => 'county',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'GE' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'GF' => array(
                    'format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'GG' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\nGUERNSEY\\n%POSTAL_CODE%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'GI' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%country%',
                    'require' => array(
                        0 => 'street',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'GL' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'GN' => array(
                    'format' => '%name%\\n%organization%\\n%postal_code% %street% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'GP' => array(
                    'format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'GR' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'GS' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\n%POSTAL_CODE%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'GT' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code%- %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'GU' => array(
                    'format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %REGION% %COUNTRY% %postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'zip_name_type' => 'zip',
                    'region_name_type' => 'region',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'GW' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'HK' => array(
                    'format' => '%REGION%\\n%street%\\n%organization%\\n%name%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%REGION%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'region',
                    ),
                    'region_name_type' => 'area',
                    'format_charset' => 'Big5',
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                ),
                'HM' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\n%CITY% %REGION% %COUNTRY% %postal_code%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'HN' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%, %region%\\n%country%\\n%postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'HR' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\nHR-%postal_code% %city%\\n%country%',
                    'postprefix' => 'HR-',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'HT' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\nHT%postal_code% %city%\\n%country%',
                    'postprefix' => 'HT',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'HU' => array(
                    'format' => '%NAME%\\n%ORGANIZATION%\\n%CITY%\\n%STREET%\\n%COUNTRY%\\n%postal_code%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'ID' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%region%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'IE' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%region%\\n%country%',
                    'region_name_type' => 'county',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'IL' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%',
                    'direction' => 'rtl',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'IM' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\n%POSTAL_CODE%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'IN' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%region%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'region_name_type' => 'region',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'IO' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\n%POSTAL_CODE%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'IQ' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\n%CITY%, %REGION%\\n%COUNTRY%\\n%postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'IS' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'IT' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %CITY% %REGION%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'JE' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\nJERSEY\\n%POSTAL_CODE%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'JM' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%region%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                    ),
                    'region_name_type' => 'parish',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'JO' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'JP' => array(
                    'format' => '〒%postal_code%\\n%REGION%%city%\\n%street%\\n%organization%\\n%name%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%city%, %REGION%\\n%COUNTRY%\\n%postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'region_name_type' => 'prefecture',
                    'format_charset' => 'ISO-2022-JP',
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                ),
                'KE' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%\\n%postal_code%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'KG' => array(
                    'format' => '%postal_code% %country% %city% %street%\\n%organization%\\n%name%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'KH' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'KI' => array(
                    'format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%REGION%\\n%CITY%\\n%COUNTRY%',
                    'region_name_type' => 'island',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'KN' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%, %region%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                    ),
                    'region_name_type' => 'island',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'KR' => array(
                    'format' => '%country%\\n%region% %city%\\n%street%\\n%organization%\\n%name%\\nSEOUL %POSTAL_CODE%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%region%\\n%country%\\nSEOUL %POSTAL_CODE%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'region_name_type' => 'do_si',
                    'format_charset' => 'EUC-KR',
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                ),
                'KW' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'KY' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%region%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'region',
                    ),
                    'region_name_type' => 'island',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'KZ' => array(
                    'format' => '%postal_code%\\n%country%\\n%region%\\n%city%\\n%street%\\n%organization%\\n%name%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'LA' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'LB' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'LI' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\nFL-%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'postprefix' => 'FL-',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'LK' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%\\n%postal_code%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'LR' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'LS' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'LT' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\nLT-%postal_code% %city%\\n%country%',
                    'postprefix' => 'LT-',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'LU' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\nL-%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'postprefix' => 'L-',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'LV' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% %country%, %postal_code%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MA' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MC' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\nMC-%postal_code% %city%\\n%country%',
                    'postprefix' => 'MC-',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MD' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\nMD-%postal_code% %city%\\n%country%',
                    'postprefix' => 'MD-',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'ME' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MF' => array(
                    'format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MG' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MH' => array(
                    'format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %COUNTRY% %REGION% %postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'zip_name_type' => 'zip',
                    'region_name_type' => 'region',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MK' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MN' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%region% %city%\\n%country%\\n%postal_code%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MO' => array(
                    'format' => '%street%\\n%organization%\\n%name%',
                    'latin_format' => '%name%\\n%organization%\\n%street%',
                    'require' => array(
                        0 => 'street',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MP' => array(
                    'format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %COUNTRY% %REGION% %postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'zip_name_type' => 'zip',
                    'region_name_type' => 'region',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MQ' => array(
                    'format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MT' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY% %POSTAL_CODE%\\n%COUNTRY%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MU' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%POSTAL_CODE%\\n%CITY%\\n%COUNTRY%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MV' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MW' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MX' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%POSTAL_CODE% %CITY%, %REGION%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'region_name_type' => 'region',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MY' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %CITY%, %REGION%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'region_name_type' => 'region',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'MZ' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'NC' => array(
                    'format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'NE' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'NF' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\n%CITY% %REGION% %postal_code%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'NG' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY% %postal_code%\\n%REGION%\\n%COUNTRY%',
                    'region_name_type' => 'region',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'NI' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code%\\n%CITY%, %REGION%\\n%COUNTRY%',
                    'region_name_type' => 'department',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'NL' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'NO' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'NP' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'NR' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%region%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'region',
                    ),
                    'region_name_type' => 'district',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'NZ' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'OM' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code%\\n%city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'PA' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%REGION%\\n%COUNTRY%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'PF' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %CITY% %REGION%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'region_name_type' => 'island',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'PG' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code% %region%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'PH' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%region%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'PK' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%-%postal_code%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'PL' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'PM' => array(
                    'format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'PN' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\n%POSTAL_CODE%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'PR' => array(
                    'format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% PR %postal_code%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'zip_name_type' => 'zip',
                    'postprefix' => 'PR',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'PT' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'PW' => array(
                    'format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %COUNTRY% %REGION% %postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'zip_name_type' => 'zip',
                    'region_name_type' => 'region',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'PY' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'RE' => array(
                    'format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'RO' => array(
                    'format' => '%name%\\n%organization%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'RS' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'RU' => array(
                    'format' => '%postal_code% %COUNTRY% %CITY%\\n%STREET%\\n%organization%\\n%name%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'SA' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city% %postal_code%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'SC' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%REGION%\\n%COUNTRY%',
                    'region_name_type' => 'island',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'SE' => array(
                    'format' => '%organization%\\n%name%\\n%street%\\nSE-%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'postprefix' => 'SE-',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'SG' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\nSINGAPORE %postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'SH' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\n%POSTAL_CODE%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'SI' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\nSI- %postal_code% %city%\\n%country%',
                    'postprefix' => 'SI-',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'SJ' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'SK' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'SM' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'SN' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'SO' => array(
                    'format' => '%name%\\n%organization%\\n%STREET%\\n%CITY%, %REGION% %COUNTRY% %postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'SR' => array(
                    'format' => '%name%\\n%organization%\\n%STREET%\\n%city% %REGION%\\n%COUNTRY%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'ST' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'SV' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%POSTAL_CODE%-%CITY%\\n%REGION%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'SZ' => array(
                    'format' => '%name%\\n%organization%\\n%STREET%\\n%CITY%\\n%COUNTRY%\\n%POSTAL_CODE%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'TC' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%\\n%POSTAL_CODE%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'TH' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%REGION% %COUNTRY% %postal_code%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%REGION% %COUNTRY% %postal_code%',
                    'format_charset' => 'TIS-620',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                ),
                'TJ' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'TM' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'TN' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'TR' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%/%region%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'TV' => array(
                    'format' => '%name%\\n%organization%\\n%STREET%\\n%CITY%\\n%REGION%\\n%COUNTRY%',
                    'region_name_type' => 'island',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'TW' => array(
                    'format' => '%postal_code%\\n%country%\\n%region%%city%\\n%street%\\n%organization%\\n%name%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%city%, %region% %country% %postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'region_name_type' => 'county',
                    'format_charset' => 'Big5',
                    'zip_name_type' => 'postal',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                ),
                'UA' => array(
                    'format' => '%postal_code% %country% %city%\\n%street%\\n%organization%\\n%name%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'UM' => array(
                    'format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %REGION% %COUNTRY% %postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                    ),
                    'zip_name_type' => 'zip',
                    'region_name_type' => 'region',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'US' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY% %REGION_CODE% %COUNTRY_ISO2% %postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'zip_name_type' => 'zip',
                    'region_name_type' => 'region',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'UY' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %CITY% %REGION%\\n%COUNTRY%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'UZ' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %CITY%\\n%REGION%\\n%COUNTRY%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'VA' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'VE' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY% %postal_code%, %REGION%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'VG' => array(
                    'require' => array(
                        0 => 'street',
                    ),
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'VI' => array(
                    'format' => '%NAME%\\n%ORGANIZATION%\\n%STREET%\\n%CITY% %REGION% %COUNTRY% %postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'region',
                        3 => 'postal_code',
                    ),
                    'zip_name_type' => 'zip',
                    'region_name_type' => 'region',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'VN' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%region%\\n%country%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%region%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'WF' => array(
                    'format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'YE' => array(
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'YT' => array(
                    'format' => '%organization%\\n%name%\\n%STREET%\\n%postal_code% %CITY%\\n%COUNTRY%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'ZA' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%city%\\n%country%\\n%postal_code%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                        2 => 'postal_code',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
                'ZM' => array(
                    'format' => '%name%\\n%organization%\\n%street%\\n%postal_code% %city%\\n%country%',
                    'require' => array(
                        0 => 'street',
                        1 => 'city',
                    ),
                    'latin_format' => '%name%\\n%organization%\\n%street%\\n%CITY%\\n%COUNTRY%',
                    'zip_name_type' => 'postal',
                    'region_name_type' => 'province',
                    'direction' => 'ltr',
                    'postprefix' => NULL,
                    'has_disputed' => false,
                    'format_charset' => 'UTF-8',
                ),
            ),
            'oro_locale.locale_data' => array(
                'AD' => array(
                    'default_locale' => 'ca',
                    'currency_code' => 'EUR',
                    'phone_prefix' => '376',
                ),
                'AE' => array(
                    'default_locale' => 'ar_AE',
                    'currency_code' => 'AED',
                    'phone_prefix' => '971',
                ),
                'AF' => array(
                    'default_locale' => 'fa_AF',
                    'currency_code' => 'AFN',
                    'phone_prefix' => '93',
                ),
                'AG' => array(
                    'default_locale' => 'en_AG',
                    'currency_code' => 'XCD',
                    'phone_prefix' => '+1-268',
                ),
                'AI' => array(
                    'default_locale' => 'en',
                    'currency_code' => 'XCD',
                    'phone_prefix' => '+1-264',
                ),
                'AL' => array(
                    'default_locale' => 'sq',
                    'currency_code' => 'ALL',
                    'phone_prefix' => '355',
                ),
                'AM' => array(
                    'default_locale' => 'hy',
                    'currency_code' => 'AMD',
                    'phone_prefix' => '374',
                ),
                'AO' => array(
                    'default_locale' => 'pt_AO',
                    'currency_code' => 'AOA',
                    'phone_prefix' => '244',
                ),
                'AR' => array(
                    'default_locale' => 'es_AR',
                    'currency_code' => 'ARS',
                    'phone_prefix' => '54',
                ),
                'AS' => array(
                    'default_locale' => 'en_AS',
                    'currency_code' => 'USD',
                    'phone_prefix' => '+1-684',
                ),
                'AT' => array(
                    'default_locale' => 'de_AT',
                    'currency_code' => 'EUR',
                    'phone_prefix' => '43',
                ),
                'AU' => array(
                    'default_locale' => 'en_AU',
                    'currency_code' => 'AUD',
                    'phone_prefix' => '61',
                ),
                'AW' => array(
                    'default_locale' => 'nl_AW',
                    'currency_code' => 'AWG',
                    'phone_prefix' => '297',
                ),
                'AX' => array(
                    'default_locale' => 'sv_AX',
                    'currency_code' => 'EUR',
                    'phone_prefix' => '+358-18',
                ),
                'AZ' => array(
                    'default_locale' => 'az',
                    'currency_code' => 'AZN',
                    'phone_prefix' => '994',
                ),
                'BA' => array(
                    'default_locale' => 'bs',
                    'currency_code' => 'BAM',
                    'phone_prefix' => '387',
                ),
                'BB' => array(
                    'default_locale' => 'en_BB',
                    'currency_code' => 'BBD',
                    'phone_prefix' => '+1-246',
                ),
                'BD' => array(
                    'default_locale' => 'bn_BD',
                    'currency_code' => 'BDT',
                    'phone_prefix' => '880',
                ),
                'BE' => array(
                    'default_locale' => 'nl_BE',
                    'currency_code' => 'EUR',
                    'phone_prefix' => '32',
                ),
                'BF' => array(
                    'default_locale' => 'fr_BF',
                    'currency_code' => 'XOF',
                    'phone_prefix' => '226',
                ),
                'BG' => array(
                    'default_locale' => 'bg',
                    'currency_code' => 'BGN',
                    'phone_prefix' => '359',
                ),
                'BH' => array(
                    'default_locale' => 'ar_BH',
                    'currency_code' => 'BHD',
                    'phone_prefix' => '973',
                ),
                'BI' => array(
                    'default_locale' => 'fr_BI',
                    'currency_code' => 'BIF',
                    'phone_prefix' => '257',
                ),
                'BJ' => array(
                    'default_locale' => 'fr_BJ',
                    'currency_code' => 'XOF',
                    'phone_prefix' => '229',
                ),
                'BL' => array(
                    'default_locale' => 'fr',
                    'currency_code' => 'EUR',
                    'phone_prefix' => '590',
                ),
                'BM' => array(
                    'default_locale' => 'en_BM',
                    'currency_code' => 'BMD',
                    'phone_prefix' => '+1-441',
                ),
                'BN' => array(
                    'default_locale' => 'ms_BN',
                    'currency_code' => 'BND',
                    'phone_prefix' => '673',
                ),
                'BO' => array(
                    'default_locale' => 'es_BO',
                    'currency_code' => 'BOB',
                    'phone_prefix' => '591',
                ),
                'BQ' => array(
                    'default_locale' => 'nl',
                    'currency_code' => 'USD',
                    'phone_prefix' => '599',
                ),
                'BR' => array(
                    'default_locale' => 'pt_BR',
                    'currency_code' => 'BRL',
                    'phone_prefix' => '55',
                ),
                'BS' => array(
                    'default_locale' => 'en_BS',
                    'currency_code' => 'BSD',
                    'phone_prefix' => '+1-242',
                ),
                'BT' => array(
                    'default_locale' => 'dz',
                    'currency_code' => 'BTN',
                    'phone_prefix' => '975',
                ),
                'BW' => array(
                    'default_locale' => 'en_BW',
                    'currency_code' => 'BWP',
                    'phone_prefix' => '267',
                ),
                'BY' => array(
                    'default_locale' => 'be',
                    'currency_code' => 'BYR',
                    'phone_prefix' => '375',
                ),
                'BZ' => array(
                    'default_locale' => 'en_BZ',
                    'currency_code' => 'BZD',
                    'phone_prefix' => '501',
                ),
                'CA' => array(
                    'default_locale' => 'en_CA',
                    'currency_code' => 'CAD',
                    'phone_prefix' => '1',
                ),
                'CC' => array(
                    'default_locale' => 'ms',
                    'currency_code' => 'AUD',
                    'phone_prefix' => '61',
                ),
                'CD' => array(
                    'default_locale' => 'fr_CD',
                    'currency_code' => 'CDF',
                    'phone_prefix' => '243',
                ),
                'CF' => array(
                    'default_locale' => 'fr_CF',
                    'currency_code' => 'XAF',
                    'phone_prefix' => '236',
                ),
                'CG' => array(
                    'default_locale' => 'fr_CG',
                    'currency_code' => 'XAF',
                    'phone_prefix' => '242',
                ),
                'CH' => array(
                    'default_locale' => 'de_CH',
                    'currency_code' => 'CHF',
                    'phone_prefix' => '41',
                ),
                'CI' => array(
                    'default_locale' => 'fr_CI',
                    'currency_code' => 'XOF',
                    'phone_prefix' => '225',
                ),
                'CK' => array(
                    'default_locale' => 'en',
                    'currency_code' => 'NZD',
                    'phone_prefix' => '682',
                ),
                'CL' => array(
                    'default_locale' => 'es_CL',
                    'currency_code' => 'CLP',
                    'phone_prefix' => '56',
                ),
                'CM' => array(
                    'default_locale' => 'en_CM',
                    'currency_code' => 'XAF',
                    'phone_prefix' => '237',
                ),
                'CN' => array(
                    'default_locale' => 'zh_CN',
                    'currency_code' => 'CNY',
                    'phone_prefix' => '86',
                ),
                'CO' => array(
                    'default_locale' => 'es_CO',
                    'currency_code' => 'COP',
                    'phone_prefix' => '57',
                ),
                'CR' => array(
                    'default_locale' => 'es_CR',
                    'currency_code' => 'CRC',
                    'phone_prefix' => '506',
                ),
                'CU' => array(
                    'default_locale' => 'es_CU',
                    'currency_code' => 'CUP',
                    'phone_prefix' => '53',
                ),
                'CV' => array(
                    'default_locale' => 'pt_CV',
                    'currency_code' => 'CVE',
                    'phone_prefix' => '238',
                ),
                'CW' => array(
                    'default_locale' => 'nl',
                    'currency_code' => 'ANG',
                    'phone_prefix' => '599',
                ),
                'CX' => array(
                    'default_locale' => 'en',
                    'currency_code' => 'AUD',
                    'phone_prefix' => '61',
                ),
                'CY' => array(
                    'default_locale' => 'el_CY',
                    'currency_code' => 'EUR',
                    'phone_prefix' => '357',
                ),
                'CZ' => array(
                    'default_locale' => 'cs',
                    'currency_code' => 'CZK',
                    'phone_prefix' => '420',
                ),
                'DE' => array(
                    'default_locale' => 'de',
                    'currency_code' => 'EUR',
                    'phone_prefix' => '49',
                ),
                'DJ' => array(
                    'default_locale' => 'fr_DJ',
                    'currency_code' => 'DJF',
                    'phone_prefix' => '253',
                ),
                'DK' => array(
                    'default_locale' => 'da_DK',
                    'currency_code' => 'DKK',
                    'phone_prefix' => '45',
                ),
                'DM' => array(
                    'default_locale' => 'en_DM',
                    'currency_code' => 'XCD',
                    'phone_prefix' => '+1-767',
                ),
                'DO' => array(
                    'default_locale' => 'es_DO',
                    'currency_code' => 'DOP',
                    'phone_prefix' => '+1-809',
                ),
                'DZ' => array(
                    'default_locale' => 'ar_DZ',
                    'currency_code' => 'DZD',
                    'phone_prefix' => '213',
                ),
                'EC' => array(
                    'default_locale' => 'es_EC',
                    'currency_code' => 'USD',
                    'phone_prefix' => '593',
                ),
                'EE' => array(
                    'default_locale' => 'et',
                    'currency_code' => 'EUR',
                    'phone_prefix' => '372',
                ),
                'EG' => array(
                    'default_locale' => 'ar_EG',
                    'currency_code' => 'EGP',
                    'phone_prefix' => '20',
                ),
                'EH' => array(
                    'default_locale' => 'ar',
                    'currency_code' => 'MAD',
                    'phone_prefix' => '212',
                ),
                'ER' => array(
                    'default_locale' => 'ti_ER',
                    'currency_code' => 'ERN',
                    'phone_prefix' => '291',
                ),
                'ES' => array(
                    'default_locale' => 'es_ES',
                    'currency_code' => 'EUR',
                    'phone_prefix' => '34',
                ),
                'ET' => array(
                    'default_locale' => 'am',
                    'currency_code' => 'ETB',
                    'phone_prefix' => '251',
                ),
                'FI' => array(
                    'default_locale' => 'fi_FI',
                    'currency_code' => 'EUR',
                    'phone_prefix' => '358',
                ),
                'FJ' => array(
                    'default_locale' => 'en_FJ',
                    'currency_code' => 'FJD',
                    'phone_prefix' => '679',
                ),
                'FK' => array(
                    'default_locale' => 'en',
                    'currency_code' => 'FKP',
                    'phone_prefix' => '500',
                ),
                'FM' => array(
                    'default_locale' => 'en_FM',
                    'currency_code' => 'USD',
                    'phone_prefix' => '691',
                ),
                'FO' => array(
                    'default_locale' => 'fo',
                    'currency_code' => 'DKK',
                    'phone_prefix' => '298',
                ),
                'FR' => array(
                    'default_locale' => 'fr_FR',
                    'currency_code' => 'EUR',
                    'phone_prefix' => '33',
                ),
                'GA' => array(
                    'default_locale' => 'fr_GA',
                    'currency_code' => 'XAF',
                    'phone_prefix' => '241',
                ),
                'GB' => array(
                    'default_locale' => 'en_GB',
                    'currency_code' => 'GBP',
                    'phone_prefix' => '44',
                ),
                'GD' => array(
                    'default_locale' => 'en_GD',
                    'currency_code' => 'XCD',
                    'phone_prefix' => '+1-473',
                ),
                'GE' => array(
                    'default_locale' => 'ka',
                    'currency_code' => 'GEL',
                    'phone_prefix' => '995',
                ),
                'GF' => array(
                    'default_locale' => 'fr_GF',
                    'currency_code' => 'EUR',
                    'phone_prefix' => '594',
                ),
                'GG' => array(
                    'default_locale' => 'en',
                    'currency_code' => 'GBP',
                    'phone_prefix' => '+44-1481',
                ),
                'GH' => array(
                    'default_locale' => 'en_GH',
                    'currency_code' => 'GHS',
                    'phone_prefix' => '233',
                ),
                'GI' => array(
                    'default_locale' => 'en_GI',
                    'currency_code' => 'GIP',
                    'phone_prefix' => '350',
                ),
                'GL' => array(
                    'default_locale' => 'kl',
                    'currency_code' => 'DKK',
                    'phone_prefix' => '299',
                ),
                'GM' => array(
                    'default_locale' => 'en_GM',
                    'currency_code' => 'GMD',
                    'phone_prefix' => '220',
                ),
                'GN' => array(
                    'default_locale' => 'fr_GN',
                    'currency_code' => 'GNF',
                    'phone_prefix' => '224',
                ),
                'GP' => array(
                    'default_locale' => 'fr_GP',
                    'currency_code' => 'EUR',
                    'phone_prefix' => '590',
                ),
                'GQ' => array(
                    'default_locale' => 'es_GQ',
                    'currency_code' => 'XAF',
                    'phone_prefix' => '240',
                ),
                'GR' => array(
                    'default_locale' => 'el_GR',
                    'currency_code' => 'EUR',
                    'phone_prefix' => '30',
                ),
                'GS' => array(
                    'default_locale' => 'en',
                    'currency_code' => 'GBP',
                ),
                'GT' => array(
                    'default_locale' => 'es_GT',
                    'currency_code' => 'GTQ',
                    'phone_prefix' => '502',
                ),
                'GU' => array(
                    'default_locale' => 'en_GU',
                    'currency_code' => 'USD',
                    'phone_prefix' => '+1-671',
                ),
                'GW' => array(
                    'default_locale' => 'pt_GW',
                    'currency_code' => 'XOF',
                    'phone_prefix' => '245',
                ),
                'GY' => array(
                    'default_locale' => 'en_GY',
                    'currency_code' => 'GYD',
                    'phone_prefix' => '592',
                ),
                'HK' => array(
                    'default_locale' => 'zh_HK',
                    'currency_code' => 'HKD',
                    'phone_prefix' => '852',
                ),
                'HN' => array(
                    'default_locale' => 'es_HN',
                    'currency_code' => 'HNL',
                    'phone_prefix' => '504',
                ),
                'HR' => array(
                    'default_locale' => 'hr_HR',
                    'currency_code' => 'HRK',
                    'phone_prefix' => '385',
                ),
                'HT' => array(
                    'default_locale' => 'fr',
                    'currency_code' => 'HTG',
                    'phone_prefix' => '509',
                ),
                'HU' => array(
                    'default_locale' => 'hu_HU',
                    'currency_code' => 'HUF',
                    'phone_prefix' => '36',
                ),
                'ID' => array(
                    'default_locale' => 'id',
                    'currency_code' => 'IDR',
                    'phone_prefix' => '62',
                ),
                'IE' => array(
                    'default_locale' => 'en_IE',
                    'currency_code' => 'EUR',
                    'phone_prefix' => '353',
                ),
                'IL' => array(
                    'default_locale' => 'he',
                    'currency_code' => 'ILS',
                    'phone_prefix' => '972',
                ),
                'IM' => array(
                    'default_locale' => 'en',
                    'currency_code' => 'GBP',
                    'phone_prefix' => '+44-1624',
                ),
                'IN' => array(
                    'default_locale' => 'en_IN',
                    'currency_code' => 'INR',
                    'phone_prefix' => '91',
                ),
                'IO' => array(
                    'default_locale' => 'en',
                    'currency_code' => 'USD',
                    'phone_prefix' => '246',
                ),
                'IQ' => array(
                    'default_locale' => 'ar_IQ',
                    'currency_code' => 'IQD',
                    'phone_prefix' => '964',
                ),
                'IR' => array(
                    'default_locale' => 'fa_IR',
                    'currency_code' => 'IRR',
                    'phone_prefix' => '98',
                ),
                'IS' => array(
                    'default_locale' => 'is',
                    'currency_code' => 'ISK',
                    'phone_prefix' => '354',
                ),
                'IT' => array(
                    'default_locale' => 'it_IT',
                    'currency_code' => 'EUR',
                    'phone_prefix' => '39',
                ),
                'JE' => array(
                    'default_locale' => 'en',
                    'currency_code' => 'GBP',
                    'phone_prefix' => '+44-1534',
                ),
                'JM' => array(
                    'default_locale' => 'en_JM',
                    'currency_code' => 'JMD',
                    'phone_prefix' => '+1-876',
                ),
                'JO' => array(
                    'default_locale' => 'ar_JO',
                    'currency_code' => 'JOD',
                    'phone_prefix' => '962',
                ),
                'JP' => array(
                    'default_locale' => 'ja',
                    'currency_code' => 'JPY',
                    'phone_prefix' => '81',
                ),
                'KE' => array(
                    'default_locale' => 'en_KE',
                    'currency_code' => 'KES',
                    'phone_prefix' => '254',
                ),
                'KG' => array(
                    'default_locale' => 'ru',
                    'currency_code' => 'KGS',
                    'phone_prefix' => '996',
                ),
                'KH' => array(
                    'default_locale' => 'km',
                    'currency_code' => 'KHR',
                    'phone_prefix' => '855',
                ),
                'KI' => array(
                    'default_locale' => 'en_KI',
                    'currency_code' => 'AUD',
                    'phone_prefix' => '686',
                ),
                'KM' => array(
                    'default_locale' => 'ar',
                    'currency_code' => 'KMF',
                    'phone_prefix' => '269',
                ),
                'KN' => array(
                    'default_locale' => 'en_KN',
                    'currency_code' => 'XCD',
                    'phone_prefix' => '+1-869',
                ),
                'KP' => array(
                    'default_locale' => 'ko_KP',
                    'currency_code' => 'KPW',
                    'phone_prefix' => '850',
                ),
                'KR' => array(
                    'default_locale' => 'ko_KR',
                    'currency_code' => 'KRW',
                    'phone_prefix' => '82',
                ),
                'XK' => array(
                    'default_locale' => 'sq',
                    'currency_code' => 'EUR',
                ),
                'KW' => array(
                    'default_locale' => 'ar_KW',
                    'currency_code' => 'KWD',
                    'phone_prefix' => '965',
                ),
                'KY' => array(
                    'default_locale' => 'en_KY',
                    'currency_code' => 'KYD',
                    'phone_prefix' => '+1-345',
                ),
                'KZ' => array(
                    'default_locale' => 'kk',
                    'currency_code' => 'KZT',
                    'phone_prefix' => '7',
                ),
                'LA' => array(
                    'default_locale' => 'lo',
                    'currency_code' => 'LAK',
                    'phone_prefix' => '856',
                ),
                'LB' => array(
                    'default_locale' => 'ar_LB',
                    'currency_code' => 'LBP',
                    'phone_prefix' => '961',
                ),
                'LC' => array(
                    'default_locale' => 'en_LC',
                    'currency_code' => 'XCD',
                    'phone_prefix' => '+1-758',
                ),
                'LI' => array(
                    'default_locale' => 'de_LI',
                    'currency_code' => 'CHF',
                    'phone_prefix' => '423',
                ),
                'LK' => array(
                    'default_locale' => 'si',
                    'currency_code' => 'LKR',
                    'phone_prefix' => '94',
                ),
                'LR' => array(
                    'default_locale' => 'en_LR',
                    'currency_code' => 'LRD',
                    'phone_prefix' => '231',
                ),
                'LS' => array(
                    'default_locale' => 'en_LS',
                    'currency_code' => 'LSL',
                    'phone_prefix' => '266',
                ),
                'LT' => array(
                    'default_locale' => 'lt',
                    'currency_code' => 'LTL',
                    'phone_prefix' => '370',
                ),
                'LU' => array(
                    'default_locale' => 'fr',
                    'currency_code' => 'EUR',
                    'phone_prefix' => '352',
                ),
                'LV' => array(
                    'default_locale' => 'lv',
                    'currency_code' => 'LVL',
                    'phone_prefix' => '371',
                ),
                'LY' => array(
                    'default_locale' => 'ar_LY',
                    'currency_code' => 'LYD',
                    'phone_prefix' => '218',
                ),
                'MA' => array(
                    'default_locale' => 'ar_MA',
                    'currency_code' => 'MAD',
                    'phone_prefix' => '212',
                ),
                'MC' => array(
                    'default_locale' => 'fr_MC',
                    'currency_code' => 'EUR',
                    'phone_prefix' => '377',
                ),
                'MD' => array(
                    'default_locale' => 'ro',
                    'currency_code' => 'MDL',
                    'phone_prefix' => '373',
                ),
                'ME' => array(
                    'default_locale' => 'sr',
                    'currency_code' => 'EUR',
                    'phone_prefix' => '382',
                ),
                'MF' => array(
                    'default_locale' => 'fr',
                    'currency_code' => 'EUR',
                    'phone_prefix' => '590',
                ),
                'MG' => array(
                    'default_locale' => 'fr_MG',
                    'currency_code' => 'MGA',
                    'phone_prefix' => '261',
                ),
                'MH' => array(
                    'default_locale' => 'en',
                    'currency_code' => 'USD',
                    'phone_prefix' => '692',
                ),
                'MK' => array(
                    'default_locale' => 'mk',
                    'currency_code' => 'MKD',
                    'phone_prefix' => '389',
                ),
                'ML' => array(
                    'default_locale' => 'fr_ML',
                    'currency_code' => 'XOF',
                    'phone_prefix' => '223',
                ),
                'MM' => array(
                    'default_locale' => 'my',
                    'currency_code' => 'MMK',
                    'phone_prefix' => '95',
                ),
                'MN' => array(
                    'default_locale' => 'mn',
                    'currency_code' => 'MNT',
                    'phone_prefix' => '976',
                ),
                'MO' => array(
                    'default_locale' => 'zh',
                    'currency_code' => 'MOP',
                    'phone_prefix' => '853',
                ),
                'MP' => array(
                    'default_locale' => 'fil',
                    'currency_code' => 'USD',
                    'phone_prefix' => '+1-670',
                ),
                'MQ' => array(
                    'default_locale' => 'fr_MQ',
                    'currency_code' => 'EUR',
                    'phone_prefix' => '596',
                ),
                'MR' => array(
                    'default_locale' => 'ar_MR',
                    'currency_code' => 'MRO',
                    'phone_prefix' => '222',
                ),
                'MS' => array(
                    'default_locale' => 'en',
                    'currency_code' => 'XCD',
                    'phone_prefix' => '+1-664',
                ),
                'MT' => array(
                    'default_locale' => 'mt',
                    'currency_code' => 'EUR',
                    'phone_prefix' => '356',
                ),
                'MU' => array(
                    'default_locale' => 'en_MU',
                    'currency_code' => 'MUR',
                    'phone_prefix' => '230',
                ),
                'MV' => array(
                    'default_locale' => 'en',
                    'currency_code' => 'MVR',
                    'phone_prefix' => '960',
                ),
                'MW' => array(
                    'default_locale' => 'en',
                    'currency_code' => 'MWK',
                    'phone_prefix' => '265',
                ),
                'MX' => array(
                    'default_locale' => 'es_MX',
                    'currency_code' => 'MXN',
                    'phone_prefix' => '52',
                ),
                'MY' => array(
                    'default_locale' => 'ms_MY',
                    'currency_code' => 'MYR',
                    'phone_prefix' => '60',
                ),
                'MZ' => array(
                    'default_locale' => 'pt_MZ',
                    'currency_code' => 'MZN',
                    'phone_prefix' => '258',
                ),
                'NA' => array(
                    'default_locale' => 'en_NA',
                    'currency_code' => 'NAD',
                    'phone_prefix' => '264',
                ),
                'NC' => array(
                    'default_locale' => 'fr_NC',
                    'currency_code' => 'XPF',
                    'phone_prefix' => '687',
                ),
                'NE' => array(
                    'default_locale' => 'fr_NE',
                    'currency_code' => 'XOF',
                    'phone_prefix' => '227',
                ),
                'NF' => array(
                    'default_locale' => 'en',
                    'currency_code' => 'AUD',
                    'phone_prefix' => '672',
                ),
                'NG' => array(
                    'default_locale' => 'en_NG',
                    'currency_code' => 'NGN',
                    'phone_prefix' => '234',
                ),
                'NI' => array(
                    'default_locale' => 'es_NI',
                    'currency_code' => 'NIO',
                    'phone_prefix' => '505',
                ),
                'NL' => array(
                    'default_locale' => 'nl_NL',
                    'currency_code' => 'EUR',
                    'phone_prefix' => '31',
                ),
                'NO' => array(
                    'default_locale' => 'no',
                    'currency_code' => 'NOK',
                    'phone_prefix' => '47',
                ),
                'NP' => array(
                    'default_locale' => 'ne',
                    'currency_code' => 'NPR',
                    'phone_prefix' => '977',
                ),
                'NR' => array(
                    'default_locale' => 'en',
                    'currency_code' => 'AUD',
                    'phone_prefix' => '674',
                ),
                'NU' => array(
                    'default_locale' => 'en',
                    'currency_code' => 'NZD',
                    'phone_prefix' => '683',
                ),
                'NZ' => array(
                    'default_locale' => 'en_NZ',
                    'currency_code' => 'NZD',
                    'phone_prefix' => '64',
                ),
                'OM' => array(
                    'default_locale' => 'ar_OM',
                    'currency_code' => 'OMR',
                    'phone_prefix' => '968',
                ),
                'PA' => array(
                    'default_locale' => 'es_PA',
                    'currency_code' => 'PAB',
                    'phone_prefix' => '507',
                ),
                'PE' => array(
                    'default_locale' => 'es_PE',
                    'currency_code' => 'PEN',
                    'phone_prefix' => '51',
                ),
                'PF' => array(
                    'default_locale' => 'fr_PF',
                    'currency_code' => 'XPF',
                    'phone_prefix' => '689',
                ),
                'PG' => array(
                    'default_locale' => 'en_PG',
                    'currency_code' => 'PGK',
                    'phone_prefix' => '675',
                ),
                'PH' => array(
                    'default_locale' => 'tl',
                    'currency_code' => 'PHP',
                    'phone_prefix' => '63',
                ),
                'PK' => array(
                    'default_locale' => 'ur_PK',
                    'currency_code' => 'PKR',
                    'phone_prefix' => '92',
                ),
                'PL' => array(
                    'default_locale' => 'pl',
                    'currency_code' => 'PLN',
                    'phone_prefix' => '48',
                ),
                'PM' => array(
                    'default_locale' => 'fr',
                    'currency_code' => 'EUR',
                    'phone_prefix' => '508',
                ),
                'PN' => array(
                    'default_locale' => 'en',
                    'currency_code' => 'NZD',
                    'phone_prefix' => '870',
                ),
                'PR' => array(
                    'default_locale' => 'en_PR',
                    'currency_code' => 'USD',
                    'phone_prefix' => '+1-787',
                ),
                'PS' => array(
                    'default_locale' => 'ar_PS',
                    'currency_code' => 'ILS',
                    'phone_prefix' => '970',
                ),
                'PT' => array(
                    'default_locale' => 'pt_PT',
                    'currency_code' => 'EUR',
                    'phone_prefix' => '351',
                ),
                'PW' => array(
                    'default_locale' => 'en',
                    'currency_code' => 'USD',
                    'phone_prefix' => '680',
                ),
                'PY' => array(
                    'default_locale' => 'es_PY',
                    'currency_code' => 'PYG',
                    'phone_prefix' => '595',
                ),
                'QA' => array(
                    'default_locale' => 'ar_QA',
                    'currency_code' => 'QAR',
                    'phone_prefix' => '974',
                ),
                'RE' => array(
                    'default_locale' => 'fr_RE',
                    'currency_code' => 'EUR',
                    'phone_prefix' => '262',
                ),
                'RO' => array(
                    'default_locale' => 'ro',
                    'currency_code' => 'RON',
                    'phone_prefix' => '40',
                ),
                'RS' => array(
                    'default_locale' => 'sr',
                    'currency_code' => 'RSD',
                    'phone_prefix' => '381',
                ),
                'RU' => array(
                    'default_locale' => 'ru',
                    'currency_code' => 'RUB',
                    'phone_prefix' => '7',
                ),
                'RW' => array(
                    'default_locale' => 'rw',
                    'currency_code' => 'RWF',
                    'phone_prefix' => '250',
                ),
                'SA' => array(
                    'default_locale' => 'ar_SA',
                    'currency_code' => 'SAR',
                    'phone_prefix' => '966',
                ),
                'SB' => array(
                    'default_locale' => 'en_SB',
                    'currency_code' => 'SBD',
                    'phone_prefix' => '677',
                ),
                'SC' => array(
                    'default_locale' => 'en_SC',
                    'currency_code' => 'SCR',
                    'phone_prefix' => '248',
                ),
                'SD' => array(
                    'default_locale' => 'ar_SD',
                    'currency_code' => 'SDG',
                    'phone_prefix' => '249',
                ),
                'SS' => array(
                    'default_locale' => 'en',
                    'currency_code' => 'SSP',
                    'phone_prefix' => '211',
                ),
                'SE' => array(
                    'default_locale' => 'sv_SE',
                    'currency_code' => 'SEK',
                    'phone_prefix' => '46',
                ),
                'SG' => array(
                    'default_locale' => 'en',
                    'currency_code' => 'SGD',
                    'phone_prefix' => '65',
                ),
                'SH' => array(
                    'default_locale' => 'en',
                    'currency_code' => 'SHP',
                    'phone_prefix' => '290',
                ),
                'SI' => array(
                    'default_locale' => 'sl',
                    'currency_code' => 'EUR',
                    'phone_prefix' => '386',
                ),
                'SJ' => array(
                    'default_locale' => 'no',
                    'currency_code' => 'NOK',
                    'phone_prefix' => '47',
                ),
                'SK' => array(
                    'default_locale' => 'sk',
                    'currency_code' => 'EUR',
                    'phone_prefix' => '421',
                ),
                'SL' => array(
                    'default_locale' => 'en_SL',
                    'currency_code' => 'SLL',
                    'phone_prefix' => '232',
                ),
                'SM' => array(
                    'default_locale' => 'it_SM',
                    'currency_code' => 'EUR',
                    'phone_prefix' => '378',
                ),
                'SN' => array(
                    'default_locale' => 'fr_SN',
                    'currency_code' => 'XOF',
                    'phone_prefix' => '221',
                ),
                'SO' => array(
                    'default_locale' => 'so_SO',
                    'currency_code' => 'SOS',
                    'phone_prefix' => '252',
                ),
                'SR' => array(
                    'default_locale' => 'nl_SR',
                    'currency_code' => 'SRD',
                    'phone_prefix' => '597',
                ),
                'ST' => array(
                    'default_locale' => 'pt_ST',
                    'currency_code' => 'STD',
                    'phone_prefix' => '239',
                ),
                'SV' => array(
                    'default_locale' => 'es_SV',
                    'currency_code' => 'USD',
                    'phone_prefix' => '503',
                ),
                'SX' => array(
                    'default_locale' => 'nl',
                    'currency_code' => 'ANG',
                    'phone_prefix' => '599',
                ),
                'SY' => array(
                    'default_locale' => 'ar_SY',
                    'currency_code' => 'SYP',
                    'phone_prefix' => '963',
                ),
                'SZ' => array(
                    'default_locale' => 'en_SZ',
                    'currency_code' => 'SZL',
                    'phone_prefix' => '268',
                ),
                'TC' => array(
                    'default_locale' => 'en_TC',
                    'currency_code' => 'USD',
                    'phone_prefix' => '+1-649',
                ),
                'TD' => array(
                    'default_locale' => 'fr_TD',
                    'currency_code' => 'XAF',
                    'phone_prefix' => '235',
                ),
                'TF' => array(
                    'default_locale' => 'fr',
                    'currency_code' => 'EUR',
                ),
                'TG' => array(
                    'default_locale' => 'fr_TG',
                    'currency_code' => 'XOF',
                    'phone_prefix' => '228',
                ),
                'TH' => array(
                    'default_locale' => 'th',
                    'currency_code' => 'THB',
                    'phone_prefix' => '66',
                ),
                'TJ' => array(
                    'default_locale' => 'fr',
                    'currency_code' => 'TJS',
                    'phone_prefix' => '992',
                ),
                'TK' => array(
                    'default_locale' => 'en',
                    'currency_code' => 'NZD',
                    'phone_prefix' => '690',
                ),
                'TL' => array(
                    'default_locale' => 'pt',
                    'currency_code' => 'USD',
                    'phone_prefix' => '670',
                ),
                'TM' => array(
                    'default_locale' => 'ru',
                    'currency_code' => 'TMT',
                    'phone_prefix' => '993',
                ),
                'TN' => array(
                    'default_locale' => 'ar_TN',
                    'currency_code' => 'TND',
                    'phone_prefix' => '216',
                ),
                'TO' => array(
                    'default_locale' => 'to',
                    'currency_code' => 'TOP',
                    'phone_prefix' => '676',
                ),
                'TR' => array(
                    'default_locale' => 'tr_TR',
                    'currency_code' => 'TRY',
                    'phone_prefix' => '90',
                ),
                'TT' => array(
                    'default_locale' => 'en_TT',
                    'currency_code' => 'TTD',
                    'phone_prefix' => '+1-868',
                ),
                'TV' => array(
                    'default_locale' => 'en',
                    'currency_code' => 'AUD',
                    'phone_prefix' => '688',
                ),
                'TW' => array(
                    'default_locale' => 'zh_TW',
                    'currency_code' => 'TWD',
                    'phone_prefix' => '886',
                ),
                'TZ' => array(
                    'default_locale' => 'sw_TZ',
                    'currency_code' => 'TZS',
                    'phone_prefix' => '255',
                ),
                'UA' => array(
                    'default_locale' => 'uk',
                    'currency_code' => 'UAH',
                    'phone_prefix' => '380',
                ),
                'UG' => array(
                    'default_locale' => 'en_UG',
                    'currency_code' => 'UGX',
                    'phone_prefix' => '256',
                ),
                'UM' => array(
                    'default_locale' => 'en_UM',
                    'currency_code' => 'USD',
                    'phone_prefix' => '1',
                ),
                'US' => array(
                    'default_locale' => 'en_US',
                    'currency_code' => 'USD',
                    'phone_prefix' => '1',
                ),
                'UY' => array(
                    'default_locale' => 'es_UY',
                    'currency_code' => 'UYU',
                    'phone_prefix' => '598',
                ),
                'UZ' => array(
                    'default_locale' => 'uz',
                    'currency_code' => 'UZS',
                    'phone_prefix' => '998',
                ),
                'VA' => array(
                    'default_locale' => 'it',
                    'currency_code' => 'EUR',
                    'phone_prefix' => '379',
                ),
                'VC' => array(
                    'default_locale' => 'en_VC',
                    'currency_code' => 'XCD',
                    'phone_prefix' => '+1-784',
                ),
                'VE' => array(
                    'default_locale' => 'es_VE',
                    'currency_code' => 'VEF',
                    'phone_prefix' => '58',
                ),
                'VG' => array(
                    'default_locale' => 'en_VG',
                    'currency_code' => 'USD',
                    'phone_prefix' => '+1-284',
                ),
                'VI' => array(
                    'default_locale' => 'en_VI',
                    'currency_code' => 'USD',
                    'phone_prefix' => '+1-340',
                ),
                'VN' => array(
                    'default_locale' => 'vi',
                    'currency_code' => 'VND',
                    'phone_prefix' => '84',
                ),
                'VU' => array(
                    'default_locale' => 'fr',
                    'currency_code' => 'VUV',
                    'phone_prefix' => '678',
                ),
                'WF' => array(
                    'default_locale' => 'fr',
                    'currency_code' => 'XPF',
                    'phone_prefix' => '681',
                ),
                'WS' => array(
                    'default_locale' => 'en',
                    'currency_code' => 'WST',
                    'phone_prefix' => '685',
                ),
                'YE' => array(
                    'default_locale' => 'ar_YE',
                    'currency_code' => 'YER',
                    'phone_prefix' => '967',
                ),
                'YT' => array(
                    'default_locale' => 'fr_YT',
                    'currency_code' => 'EUR',
                    'phone_prefix' => '262',
                ),
                'ZA' => array(
                    'default_locale' => 'zu',
                    'currency_code' => 'ZAR',
                    'phone_prefix' => '27',
                ),
                'ZM' => array(
                    'default_locale' => 'en_ZM',
                    'currency_code' => 'ZMK',
                    'phone_prefix' => '260',
                ),
                'ZW' => array(
                    'default_locale' => 'en_ZW',
                    'currency_code' => 'ZWL',
                    'phone_prefix' => '263',
                ),
                'CS' => array(
                    'default_locale' => 'sr',
                    'currency_code' => 'RSD',
                    'phone_prefix' => '381',
                ),
                'AN' => array(
                    'default_locale' => 'nl',
                    'currency_code' => 'ANG',
                    'phone_prefix' => '599',
                ),
            ),
            'oro_locale.currency_data' => array(
                'AED' => array(
                    'symbol' => 'د.إ.‏',
                ),
                'AFN' => array(
                    'symbol' => '؋',
                ),
                'ALL' => array(
                    'symbol' => 'Lek',
                ),
                'AMD' => array(
                    'symbol' => 'դր.',
                ),
                'ANG' => array(
                    'symbol' => 'ANG',
                ),
                'AOA' => array(
                    'symbol' => 'Kz',
                ),
                'ARS' => array(
                    'symbol' => '$',
                ),
                'AUD' => array(
                    'symbol' => 'AU$',
                ),
                'AWG' => array(
                    'symbol' => 'Afl.',
                ),
                'AZN' => array(
                    'symbol' => 'man.',
                ),
                'BAM' => array(
                    'symbol' => 'KM',
                ),
                'BBD' => array(
                    'symbol' => '$',
                ),
                'BDT' => array(
                    'symbol' => '৳',
                ),
                'BGN' => array(
                    'symbol' => 'лв.',
                ),
                'BHD' => array(
                    'symbol' => 'د.ب.‏',
                ),
                'BIF' => array(
                    'symbol' => 'FBu',
                ),
                'BMD' => array(
                    'symbol' => '$',
                ),
                'BND' => array(
                    'symbol' => '$',
                ),
                'BOB' => array(
                    'symbol' => 'Bs',
                ),
                'BRL' => array(
                    'symbol' => 'R$',
                ),
                'BSD' => array(
                    'symbol' => 'BSD',
                ),
                'BTN' => array(
                    'symbol' => 'BTN',
                ),
                'BWP' => array(
                    'symbol' => 'P',
                ),
                'BYR' => array(
                    'symbol' => 'BYR',
                ),
                'BZD' => array(
                    'symbol' => '$',
                ),
                'CAD' => array(
                    'symbol' => '$',
                ),
                'CDF' => array(
                    'symbol' => 'FrCD',
                ),
                'CHF' => array(
                    'symbol' => 'CHF',
                ),
                'CLP' => array(
                    'symbol' => '$',
                ),
                'CNY' => array(
                    'symbol' => '￥',
                ),
                'COP' => array(
                    'symbol' => '$',
                ),
                'CRC' => array(
                    'symbol' => '₡',
                ),
                'CUP' => array(
                    'symbol' => 'CUP',
                ),
                'CVE' => array(
                    'symbol' => 'CVE',
                ),
                'CZK' => array(
                    'symbol' => 'Kč',
                ),
                'DJF' => array(
                    'symbol' => 'Fdj',
                ),
                'DKK' => array(
                    'symbol' => 'kr',
                ),
                'DOP' => array(
                    'symbol' => '$',
                ),
                'DZD' => array(
                    'symbol' => 'د.ج.‏',
                ),
                'EGP' => array(
                    'symbol' => 'ج.م.‏',
                ),
                'ERN' => array(
                    'symbol' => 'Nfk',
                ),
                'ETB' => array(
                    'symbol' => 'ብር',
                ),
                'EUR' => array(
                    'symbol' => '€',
                ),
                'FJD' => array(
                    'symbol' => 'FJD',
                ),
                'FKP' => array(
                    'symbol' => 'FKP',
                ),
                'GBP' => array(
                    'symbol' => '£',
                ),
                'GEL' => array(
                    'symbol' => 'GEL',
                ),
                'GHS' => array(
                    'symbol' => 'GHS',
                ),
                'GIP' => array(
                    'symbol' => 'GIP',
                ),
                'GMD' => array(
                    'symbol' => 'GMD',
                ),
                'GNF' => array(
                    'symbol' => 'FG',
                ),
                'GTQ' => array(
                    'symbol' => 'Q',
                ),
                'GYD' => array(
                    'symbol' => 'GYD',
                ),
                'HKD' => array(
                    'symbol' => '$',
                ),
                'HNL' => array(
                    'symbol' => 'L',
                ),
                'HRK' => array(
                    'symbol' => 'kn',
                ),
                'HTG' => array(
                    'symbol' => 'HTG',
                ),
                'HUF' => array(
                    'symbol' => 'Ft',
                ),
                'IDR' => array(
                    'symbol' => 'Rp',
                ),
                'ILS' => array(
                    'symbol' => '₪',
                ),
                'INR' => array(
                    'symbol' => '₹',
                ),
                'IQD' => array(
                    'symbol' => 'د.ع.‏',
                ),
                'IRR' => array(
                    'symbol' => '﷼',
                ),
                'ISK' => array(
                    'symbol' => 'kr',
                ),
                'JMD' => array(
                    'symbol' => '$',
                ),
                'JOD' => array(
                    'symbol' => 'د.أ.‏',
                ),
                'JPY' => array(
                    'symbol' => '￥',
                ),
                'KES' => array(
                    'symbol' => 'KES',
                ),
                'KGS' => array(
                    'symbol' => 'KGS',
                ),
                'KHR' => array(
                    'symbol' => '៛',
                ),
                'KMF' => array(
                    'symbol' => 'ف.ج.ق.‏',
                ),
                'KPW' => array(
                    'symbol' => 'KPW',
                ),
                'KRW' => array(
                    'symbol' => '₩',
                ),
                'KWD' => array(
                    'symbol' => 'د.ك.‏',
                ),
                'KYD' => array(
                    'symbol' => 'KYD',
                ),
                'KZT' => array(
                    'symbol' => 'тңг.',
                ),
                'LAK' => array(
                    'symbol' => 'LAK',
                ),
                'LBP' => array(
                    'symbol' => 'ل.ل.‏',
                ),
                'LKR' => array(
                    'symbol' => 'රු.',
                ),
                'LRD' => array(
                    'symbol' => 'LRD',
                ),
                'LSL' => array(
                    'symbol' => 'LSL',
                ),
                'LTL' => array(
                    'symbol' => 'Lt',
                ),
                'LVL' => array(
                    'symbol' => 'Ls',
                ),
                'LYD' => array(
                    'symbol' => 'د.ل.‏',
                ),
                'MAD' => array(
                    'symbol' => 'د.م.‏',
                ),
                'MDL' => array(
                    'symbol' => 'MDL',
                ),
                'MGA' => array(
                    'symbol' => 'MGA',
                ),
                'MKD' => array(
                    'symbol' => 'MKD',
                ),
                'MMK' => array(
                    'symbol' => 'K',
                ),
                'MNT' => array(
                    'symbol' => 'MNT',
                ),
                'MOP' => array(
                    'symbol' => 'MOP',
                ),
                'MRO' => array(
                    'symbol' => 'أ.م.‏',
                ),
                'MUR' => array(
                    'symbol' => 'MUR',
                ),
                'MVR' => array(
                    'symbol' => 'Rf.',
                ),
                'MWK' => array(
                    'symbol' => 'MWK',
                ),
                'MXN' => array(
                    'symbol' => '$',
                ),
                'MYR' => array(
                    'symbol' => 'RM',
                ),
                'MZN' => array(
                    'symbol' => 'MTn',
                ),
                'NAD' => array(
                    'symbol' => '$',
                ),
                'NGN' => array(
                    'symbol' => 'NGN',
                ),
                'NIO' => array(
                    'symbol' => 'C$',
                ),
                'NOK' => array(
                    'symbol' => 'kr',
                ),
                'NPR' => array(
                    'symbol' => 'नेरू ',
                ),
                'NZD' => array(
                    'symbol' => 'NZ$',
                ),
                'OMR' => array(
                    'symbol' => 'ر.ع.‏',
                ),
                'PAB' => array(
                    'symbol' => 'B/.',
                ),
                'PEN' => array(
                    'symbol' => 'S/.',
                ),
                'PGK' => array(
                    'symbol' => 'PGK',
                ),
                'PHP' => array(
                    'symbol' => '₱',
                ),
                'PKR' => array(
                    'symbol' => 'PKRs',
                ),
                'PLN' => array(
                    'symbol' => 'zł',
                ),
                'PYG' => array(
                    'symbol' => '₲',
                ),
                'QAR' => array(
                    'symbol' => 'ر.ق.‏',
                ),
                'RON' => array(
                    'symbol' => 'RON',
                ),
                'RSD' => array(
                    'symbol' => 'дин.',
                ),
                'RUB' => array(
                    'symbol' => 'руб.',
                ),
                'RWF' => array(
                    'symbol' => 'RF',
                ),
                'SAR' => array(
                    'symbol' => 'ر.س.‏',
                ),
                'SBD' => array(
                    'symbol' => 'SBD',
                ),
                'SCR' => array(
                    'symbol' => 'SCR',
                ),
                'SDG' => array(
                    'symbol' => 'SDG',
                ),
                'SEK' => array(
                    'symbol' => 'kr',
                ),
                'SGD' => array(
                    'symbol' => 'SGD',
                ),
                'SHP' => array(
                    'symbol' => 'SHP',
                ),
                'SLL' => array(
                    'symbol' => 'SLL',
                ),
                'SOS' => array(
                    'symbol' => 'SOS',
                ),
                'SRD' => array(
                    'symbol' => 'SRD',
                ),
                'SSP' => array(
                    'symbol' => 'SSP',
                ),
                'STD' => array(
                    'symbol' => 'Db',
                ),
                'SYP' => array(
                    'symbol' => 'ل.س.‏',
                ),
                'SZL' => array(
                    'symbol' => 'SZL',
                ),
                'THB' => array(
                    'symbol' => '฿',
                ),
                'TJS' => array(
                    'symbol' => 'TJS',
                ),
                'TMT' => array(
                    'symbol' => 'TMT',
                ),
                'TND' => array(
                    'symbol' => 'د.ت.‏',
                ),
                'TOP' => array(
                    'symbol' => 'T$',
                ),
                'TRY' => array(
                    'symbol' => 'TL',
                ),
                'TTD' => array(
                    'symbol' => '$',
                ),
                'TWD' => array(
                    'symbol' => 'NT$',
                ),
                'TZS' => array(
                    'symbol' => 'TSh',
                ),
                'UAH' => array(
                    'symbol' => '₴',
                ),
                'UGX' => array(
                    'symbol' => 'UGX',
                ),
                'USD' => array(
                    'symbol' => '$',
                ),
                'UYU' => array(
                    'symbol' => '$',
                ),
                'UZS' => array(
                    'symbol' => 'UZS',
                ),
                'VEF' => array(
                    'symbol' => 'Bs.F.',
                ),
                'VND' => array(
                    'symbol' => '₫',
                ),
                'VUV' => array(
                    'symbol' => 'VUV',
                ),
                'WST' => array(
                    'symbol' => 'WST',
                ),
                'XAF' => array(
                    'symbol' => 'FCFA',
                ),
                'XCD' => array(
                    'symbol' => 'EC$',
                ),
                'XOF' => array(
                    'symbol' => 'CFA',
                ),
                'XPF' => array(
                    'symbol' => 'FCFP',
                ),
                'YER' => array(
                    'symbol' => 'ر.ي.‏',
                ),
                'ZAR' => array(
                    'symbol' => 'R',
                ),
                'ZMK' => array(
                    'symbol' => 'ZMK',
                ),
                'ZWL' => array(
                    'symbol' => 'ZWL',
                ),
            ),
            'oro_locale.settings.class' => 'Oro\\Bundle\\LocaleBundle\\Model\\LocaleSettings',
            'oro_locale.calendar.class' => 'Oro\\Bundle\\LocaleBundle\\Model\\Calendar',
            'oro_locale.calendar_factory.class' => 'Oro\\Bundle\\LocaleBundle\\Model\\CalendarFactory',
            'oro_locale.form.type.name_format.class' => 'Oro\\Bundle\\LocaleBundle\\Form\\Type\\NameFormatType',
            'oro_locale.format_converter.date_time.registry.class' => 'Oro\\Bundle\\LocaleBundle\\Converter\\DateTimeFormatConverterRegistry',
            'oro_locale.format_converter.date_time.intl.class' => 'Oro\\Bundle\\LocaleBundle\\Converter\\IntlDateTimeFormatConverter',
            'oro_locale.format_converter.date_time.moment.class' => 'Oro\\Bundle\\LocaleBundle\\Converter\\MomentDateTimeFormatConverter',
            'oro_locale.formatter.name.class' => 'Oro\\Bundle\\LocaleBundle\\Formatter\\NameFormatter',
            'oro_locale.formatter.address.class' => 'Oro\\Bundle\\LocaleBundle\\Formatter\\AddressFormatter',
            'oro_locale.formatter.date_time.class' => 'Oro\\Bundle\\LocaleBundle\\Formatter\\DateTimeFormatter',
            'oro_locale.formatter.number.class' => 'Oro\\Bundle\\LocaleBundle\\Formatter\\NumberFormatter',
            'oro_locale.form.type.country.class' => 'Oro\\Bundle\\LocaleBundle\\Form\\Type\\CountryType',
            'oro_locale.form.type.currency.class' => 'Oro\\Bundle\\LocaleBundle\\Form\\Type\\CurrencyType',
            'oro_locale.form.type.locale.class' => 'Oro\\Bundle\\LocaleBundle\\Form\\Type\\LocaleType',
            'oro_locale.form.type.timezone.class' => 'Oro\\Bundle\\LocaleBundle\\Form\\Type\\TimezoneType',
            'oro_locale.locale_listener.class' => 'Oro\\Bundle\\LocaleBundle\\EventListener\\LocaleListener',
            'oro_locale.twig.date_format.class' => 'Oro\\Bundle\\LocaleBundle\\Twig\\DateFormatExtension',
            'oro_locale.twig.locale.class' => 'Oro\\Bundle\\LocaleBundle\\Twig\\LocaleExtension',
            'oro_locale.twig.calendar.class' => 'Oro\\Bundle\\LocaleBundle\\Twig\\CalendarExtension',
            'oro_locale.twig.date_time.class' => 'Oro\\Bundle\\LocaleBundle\\Twig\\DateTimeExtension',
            'oro_locale.twig.name.class' => 'Oro\\Bundle\\LocaleBundle\\Twig\\NameExtension',
            'oro_locale.twig.address.class' => 'Oro\\Bundle\\LocaleBundle\\Twig\\AddressExtension',
            'oro_locale.twig.number.class' => 'Oro\\Bundle\\LocaleBundle\\Twig\\NumberExtension',
            'oro_measure.measures_config' => array(
                'measures_config' => array(
                    'Area' => array(
                        'standard' => 'SQUARE_METER',
                        'units' => array(
                            'ACRE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 4046.856422,
                                    ),
                                ),
                                'symbol' => 'A',
                            ),
                            'ARE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 100,
                                    ),
                                ),
                                'symbol' => 'a',
                            ),
                            'ARPENT' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 3418.89,
                                    ),
                                ),
                                'symbol' => 'arpent',
                            ),
                            'CENTIARE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1,
                                    ),
                                ),
                                'symbol' => 'ca',
                            ),
                            'HECTARE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 10000,
                                    ),
                                ),
                                'symbol' => 'ha',
                            ),
                            'SQUARE_CENTIMETER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.0001,
                                    ),
                                ),
                                'symbol' => 'cm²',
                            ),
                            'SQUARE_DECIMETER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.01,
                                    ),
                                ),
                                'symbol' => 'dm²',
                            ),
                            'SQUARE_DEKAMETER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 100,
                                    ),
                                ),
                                'symbol' => 'dam²',
                            ),
                            'SQUARE_FOOT' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.09290304,
                                    ),
                                ),
                                'symbol' => 'ft²',
                            ),
                            'SQUARE_FURLONG' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 40468.726,
                                    ),
                                ),
                                'symbol' => 'fur²',
                            ),
                            'SQUARE_HECTOMETER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 10000,
                                    ),
                                ),
                                'symbol' => 'hm²',
                            ),
                            'SQUARE_INCH' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.00064516,
                                    ),
                                ),
                                'symbol' => 'in²',
                            ),
                            'SQUARE_KILOMETER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1000000,
                                    ),
                                ),
                                'symbol' => 'km²',
                            ),
                            'SQUARE_METER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1,
                                    ),
                                ),
                                'symbol' => 'm²',
                            ),
                            'SQUARE_MIL' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 6.4516E-10,
                                    ),
                                ),
                                'symbol' => 'sq mil',
                            ),
                            'SQUARE_MILE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 2589988.110336,
                                    ),
                                ),
                                'symbol' => 'mi²',
                            ),
                            'SQUARE_MILLIMETER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1.0E-6,
                                    ),
                                ),
                                'symbol' => 'mm²',
                            ),
                            'SQUARE_YARD' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.83612736,
                                    ),
                                ),
                                'symbol' => 'yd²',
                            ),
                        ),
                    ),
                    'Binary' => array(
                        'standard' => 'BYTE',
                        'units' => array(
                            'BIT' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.125,
                                    ),
                                ),
                                'symbol' => 'b',
                            ),
                            'BYTE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1,
                                    ),
                                ),
                                'symbol' => 'B',
                            ),
                            'KILOBYTE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1024,
                                    ),
                                ),
                                'symbol' => 'kB',
                            ),
                            'MEGABYTE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1048576,
                                    ),
                                ),
                                'symbol' => 'MB',
                            ),
                            'GIGABYTE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1073741824,
                                    ),
                                ),
                                'symbol' => 'GB',
                            ),
                            'TERABYTE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1099511627776,
                                    ),
                                ),
                                'symbol' => 'TB',
                            ),
                        ),
                    ),
                    'Frequency' => array(
                        'standard' => 'HERTZ',
                        'units' => array(
                            'GIGAHERTZ' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1000000000,
                                    ),
                                ),
                                'symbol' => 'GHz',
                            ),
                            'KILOHERTZ' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1000,
                                    ),
                                ),
                                'symbol' => 'kHz',
                            ),
                            'MEGAHERTZ' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1000000,
                                    ),
                                ),
                                'symbol' => 'MHz',
                            ),
                            'TERAHERTZ' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1000000000000,
                                    ),
                                ),
                                'symbol' => 'THz',
                            ),
                            'HERTZ' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1,
                                    ),
                                ),
                                'symbol' => 'Hz',
                            ),
                        ),
                    ),
                    'Length' => array(
                        'standard' => 'METER',
                        'units' => array(
                            'CENTIMETER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.01,
                                    ),
                                ),
                                'symbol' => 'cm',
                            ),
                            'CHAIN' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 20.1168,
                                    ),
                                ),
                                'symbol' => 'ch',
                            ),
                            'DECIMETER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.1,
                                    ),
                                ),
                                'symbol' => 'dm',
                            ),
                            'DEKAMETER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 10,
                                    ),
                                ),
                                'symbol' => 'dam',
                            ),
                            'FEET' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.3048,
                                    ),
                                ),
                                'symbol' => 'ft',
                            ),
                            'FURLONG' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 201.168,
                                    ),
                                ),
                                'symbol' => 'fur',
                            ),
                            'INCH' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.0254,
                                    ),
                                ),
                                'symbol' => 'in',
                            ),
                            'HECTOMETER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 100,
                                    ),
                                ),
                                'symbol' => 'hm',
                            ),
                            'KILOMETER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1000,
                                    ),
                                ),
                                'symbol' => 'km',
                            ),
                            'METER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1,
                                    ),
                                ),
                                'symbol' => 'm',
                            ),
                            'MIL' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 2.54E-5,
                                    ),
                                ),
                                'symbol' => 'mil',
                            ),
                            'MILE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1609.344,
                                    ),
                                ),
                                'symbol' => 'mi',
                            ),
                            'MILLIMETER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.001,
                                    ),
                                ),
                                'symbol' => 'mm',
                            ),
                            'YARD' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.9144,
                                    ),
                                ),
                                'symbol' => 'yd',
                            ),
                        ),
                    ),
                    'Power' => array(
                        'standard' => 'WATT',
                        'units' => array(
                            'GIGAWATT' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1000000000,
                                    ),
                                ),
                                'symbol' => 'GW',
                            ),
                            'KILOWATT' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1000,
                                    ),
                                ),
                                'symbol' => 'kW',
                            ),
                            'MEGAWATT' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1000000,
                                    ),
                                ),
                                'symbol' => 'MW',
                            ),
                            'TERAWATT' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1000000000000,
                                    ),
                                ),
                                'symbol' => 'TW',
                            ),
                            'WATT' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1,
                                    ),
                                ),
                                'symbol' => 'W',
                            ),
                        ),
                    ),
                    'Speed' => array(
                        'standard' => 'METER_PER_SECOND',
                        'units' => array(
                            'FOOT_PER_SECOND' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.3048,
                                    ),
                                ),
                                'symbol' => 'ftdivs',
                            ),
                            'FOOT_PER_HOUR' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.3048,
                                    ),
                                    1 => array(
                                        'div' => 3600,
                                    ),
                                ),
                                'symbol' => 'ftdivh',
                            ),
                            'KILOMETER_PER_HOUR' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1000,
                                    ),
                                    1 => array(
                                        'div' => 3600,
                                    ),
                                ),
                                'symbol' => 'kmdivh',
                            ),
                            'METER_PER_HOUR' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1,
                                    ),
                                    1 => array(
                                        'div' => 3600,
                                    ),
                                ),
                                'symbol' => 'mdivh',
                            ),
                            'METER_PER_MINUTE' => array(
                                'convert' => array(
                                    0 => array(
                                        'div' => 60,
                                    ),
                                ),
                                'symbol' => 'mdivm',
                            ),
                            'METER_PER_SECOND' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1,
                                    ),
                                ),
                                'symbol' => 'mdivs',
                            ),
                            'MILE_PER_HOUR' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1609.344,
                                    ),
                                    1 => array(
                                        'div' => 3600,
                                    ),
                                ),
                                'symbol' => 'midivh',
                            ),
                            'YARD_PER_HOUR' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => '0.9144\'',
                                    ),
                                    1 => array(
                                        'div' => 3600,
                                    ),
                                ),
                                'symbol' => 'yddivh',
                            ),
                        ),
                    ),
                    'Temperature' => array(
                        'standard' => 'KELVIN',
                        'units' => array(
                            'CELSIUS' => array(
                                'convert' => array(
                                    0 => array(
                                        'add' => 273.15,
                                    ),
                                ),
                                'symbol' => '°C',
                            ),
                            'FAHRENHEIT' => array(
                                'convert' => array(
                                    0 => array(
                                        'sub' => 32,
                                    ),
                                    1 => array(
                                        'div' => 1.8,
                                    ),
                                    2 => array(
                                        'add' => 273.15,
                                    ),
                                ),
                                'symbol' => '°F',
                            ),
                            'KELVIN' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1,
                                    ),
                                ),
                                'symbol' => '°K',
                            ),
                            'RANKINE' => array(
                                'convert' => array(
                                    0 => array(
                                        'div' => 1.8,
                                    ),
                                ),
                                'symbol' => '°R',
                            ),
                            'REAUMUR' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1.25,
                                    ),
                                    1 => array(
                                        'add' => 273.15,
                                    ),
                                ),
                                'symbol' => '°r',
                            ),
                        ),
                    ),
                    'Volume' => array(
                        'standard' => 'CUBIC_METER',
                        'units' => array(
                            'BARREL' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.16365924,
                                    ),
                                ),
                                'symbol' => 'bbl',
                            ),
                            'CENTILITER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1.0E-5,
                                    ),
                                ),
                                'symbol' => 'cl',
                            ),
                            'CUBIC_CENTIMETER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1.0E-6,
                                    ),
                                ),
                                'symbol' => 'cl³',
                            ),
                            'CUBIC_DECIMETER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.001,
                                    ),
                                ),
                                'symbol' => 'dl³',
                            ),
                            'CUBIC_FOOT' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 6.54119159,
                                    ),
                                    1 => array(
                                        'div' => 231,
                                    ),
                                ),
                                'symbol' => 'ft³',
                            ),
                            'CUBIC_INCH' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.0037854118,
                                    ),
                                    1 => array(
                                        'div' => 231,
                                    ),
                                ),
                                'symbol' => 'in³',
                            ),
                            'CUBIC_METER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1,
                                    ),
                                ),
                                'symbol' => 'm³',
                            ),
                            'CUBIC_MILLIMETER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1.0E-9,
                                    ),
                                ),
                                'symbol' => 'mm³',
                            ),
                            'CUBIC_YARD' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.764554861,
                                    ),
                                ),
                                'symbol' => 'yd³',
                            ),
                            'DECILITER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.0001,
                                    ),
                                ),
                                'symbol' => 'dl',
                            ),
                            'GALLON' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.00454609,
                                    ),
                                ),
                                'symbol' => 'gal',
                            ),
                            'LITER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.001,
                                    ),
                                ),
                                'symbol' => 'l',
                            ),
                            'MILLILITER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1.0E-6,
                                    ),
                                ),
                                'symbol' => 'ml',
                            ),
                            'OUNCE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.00454609,
                                    ),
                                    1 => array(
                                        'div' => 160,
                                    ),
                                ),
                                'symbol' => 'oz',
                            ),
                            'PINT' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.00454609,
                                    ),
                                    1 => array(
                                        'div' => 8,
                                    ),
                                ),
                                'symbol' => 'pt',
                            ),
                        ),
                    ),
                    'Weight' => array(
                        'standard' => 'KILOGRAM',
                        'units' => array(
                            'DENIER' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.001275,
                                    ),
                                ),
                                'symbol' => 'denier',
                            ),
                            'GRAIN' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 6.479891E-5,
                                    ),
                                ),
                                'symbol' => 'gr',
                            ),
                            'GRAM' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.001,
                                    ),
                                ),
                                'symbol' => 'g',
                            ),
                            'KILOGRAM' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1,
                                    ),
                                ),
                                'symbol' => 'kg',
                            ),
                            'LIVRE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.4895,
                                    ),
                                ),
                                'symbol' => 'livre',
                            ),
                            'MARC' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.24475,
                                    ),
                                ),
                                'symbol' => 'marc',
                            ),
                            'MILLIGRAM' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1.0E-6,
                                    ),
                                ),
                                'symbol' => 'mg',
                            ),
                            'ONCE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.03059,
                                    ),
                                ),
                                'symbol' => 'once',
                            ),
                            'OUNCE' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.45359237,
                                    ),
                                    1 => array(
                                        'div' => 16,
                                    ),
                                ),
                                'symbol' => 'oz',
                            ),
                            'POUND' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 0.45359237,
                                    ),
                                ),
                                'symbol' => 'lb',
                            ),
                            'TON' => array(
                                'convert' => array(
                                    0 => array(
                                        'mul' => 1000,
                                    ),
                                ),
                                'symbol' => 't',
                            ),
                        ),
                    ),
                ),
            ),
            'oro_notification.send_from' => 'welmag@ukr.net',
            'oro_notification.event_entity.class' => 'Oro\\Bundle\\NotificationBundle\\Entity\\Event',
            'oro_notification.emailnotification.entity.class' => 'Oro\\Bundle\\NotificationBundle\\Entity\\EmailNotification',
            'oro_notification.email_processor.class' => 'Oro\\Bundle\\NotificationBundle\\Processor\\EmailNotificationProcessor',
            'oro_notification.manager.class' => 'Oro\\Bundle\\NotificationBundle\\Provider\\NotificationManager',
            'oro_notification.email_handler.class' => 'Oro\\Bundle\\NotificationBundle\\Event\\Handler\\EmailNotificationHandler',
            'oro_notification.doctrine_listener.class' => 'Oro\\Bundle\\NotificationBundle\\Provider\\DoctrineListener',
            'oro_notification.form.type.email_notification.class' => 'Oro\\Bundle\\NotificationBundle\\Form\\Type\\EmailNotificationType',
            'oro_notification.form.type.recipient_list.class' => 'Oro\\Bundle\\NotificationBundle\\Form\\Type\\RecipientListType',
            'oro_notification.form.handler.email_notification.class' => 'Oro\\Bundle\\NotificationBundle\\Form\\Handler\\EmailNotificationHandler',
            'oro_notification.email_notification.manager.api.class' => 'Oro\\Bundle\\SoapBundle\\Entity\\Manager\\ApiEntityManager',
            'oro_notification.form.type.email_notification.api.class' => 'Oro\\Bundle\\NotificationBundle\\Form\\Type\\EmailNotificationApiType',
            'oro_notification.form.handler.email_notification.api.class' => 'Oro\\Bundle\\NotificationBundle\\Form\\Handler\\EmailNotificationHandler',
            'oro_notification.mailer.transport.spool_db.class' => 'Oro\\Bundle\\NotificationBundle\\Provider\\Mailer\\DbSpool',
            'oro_notification.mailer.transport.spool_entity.class' => 'Oro\\Bundle\\NotificationBundle\\Entity\\SpoolItem',
            'swiftmailer.mailer.db_spool_mailer.spool.enabled' => true,
            'oro_notification.event_listener.email_notification_service.class' => 'Oro\\Bundle\\NotificationBundle\\Provider\\EmailNotificationGridHelper',
            'oro_notification.locale_listener.class' => 'Oro\\Bundle\\NotificationBundle\\EventListener\\LocaleListener',
            'oro_organization.type.business_unit.class' => 'Oro\\Bundle\\OrganizationBundle\\Form\\Type\\BusinessUnitType',
            'oro_organization.handler.business_unit.class' => 'Oro\\Bundle\\OrganizationBundle\\Form\\Handler\\BusinessUnitHandler',
            'oro_organization.business_unit.entity.class' => 'Oro\\Bundle\\OrganizationBundle\\Entity\\BusinessUnit',
            'oro_organization.business_unit.manager.class' => 'Oro\\Bundle\\OrganizationBundle\\Entity\\Manager\\BusinessUnitManager',
            'oro_organization.business_unit.form.type.business_unit.api.class' => 'Oro\\Bundle\\OrganizationBundle\\Form\\Type\\BusinessUnitApiType',
            'oro_organization.business_unit.manager.api.class' => 'Oro\\Bundle\\SoapBundle\\Entity\\Manager\\ApiEntityManager',
            'oro_organization.organization.entity.class' => 'Oro\\Bundle\\OrganizationBundle\\Entity\\Organization',
            'oro_organization.organization.manager.api.class' => 'Oro\\Bundle\\SoapBundle\\Entity\\Manager\\ApiEntityManager',
            'oro_organization.type.ownership_type.class' => 'Oro\\Bundle\\OrganizationBundle\\Form\\Type\\OwnershipType',
            'oro_organization.form.type.business_unit_tree_select_type.class' => 'Oro\\Bundle\\OrganizationBundle\\Form\\Type\\BusinessUnitTreeSelectType',
            'oro_organization.form.extension.owner.class' => 'Oro\\Bundle\\OrganizationBundle\\Form\\Extension\\OwnerFormExtension',
            'oro_organization.form.transformer.business_unit_select.class' => 'Oro\\Bundle\\OrganizationBundle\\Form\\Transformer\\BusinessUnitTransformer',
            'oro_organization.form.listener.class' => 'Oro\\Bundle\\OrganizationBundle\\Event\\FormListener',
            'oro_organization.twig.get_owner.class' => 'Oro\\Bundle\\OrganizationBundle\\Twig\\OwnerTypeExtension',
            'oro_organization.entity_ownership.listener.class' => 'Oro\\Bundle\\OrganizationBundle\\Event\\RecordOwnerDataListener',
            'oro_organization.business_unit.listener.class' => 'Oro\\Bundle\\OrganizationBundle\\Event\\BusinessUnitListener',
            'oro_organization.twig.business_units.class' => 'Oro\\Bundle\\OrganizationBundle\\Twig\\BusinessUnitExtension',
            'oro_organization.provider.business_units.class' => 'Oro\\Bundle\\OrganizationBundle\\Provider\\BusinessUnitGridService',
            'oro_organization.form.type.business_unit_select.class' => 'Oro\\Bundle\\OrganizationBundle\\Form\\Type\\BusinessUnitSelectType',
            'oro_platform.maintenance.class' => 'Oro\\Bundle\\PlatformBundle\\Maintenance\\Mode',
            'oro_query_designer.query_designer.manager.class' => 'Oro\\Bundle\\QueryDesignerBundle\\QueryDesigner\\Manager',
            'oro_query_designer.config.resolver.class' => 'Oro\\Bundle\\QueryDesignerBundle\\QueryDesigner\\ConfigurationResolver',
            'oro_query_designer.grid.extension.orm_datasource.class' => 'Oro\\Bundle\\QueryDesignerBundle\\Grid\\Extension\\OrmDatasourceExtension',
            'oro_query_designer.form.type.function_choice.class' => 'Oro\\Bundle\\QueryDesignerBundle\\Form\\Type\\FunctionChoiceType',
            'oro_query_designer.form.type.sorting_choice.class' => 'Oro\\Bundle\\QueryDesignerBundle\\Form\\Type\\SortingChoiceType',
            'oro_query_designer.form.type.query_designer_column.class' => 'Oro\\Bundle\\QueryDesignerBundle\\Form\\Type\\ColumnType',
            'oro_query_designer.form.type.query_designer_filter.class' => 'Oro\\Bundle\\QueryDesignerBundle\\Form\\Type\\FilterType',
            'oro_query_designer.form.type.query_designer_grouping.class' => 'Oro\\Bundle\\QueryDesignerBundle\\Form\\Type\\GroupingType',
            'oro_report.datagrid.configuration.provider.class' => 'Oro\\Bundle\\ReportBundle\\Grid\\ReportDatagridConfigurationProvider',
            'oro_report.listener.navigation_listener.class' => 'Oro\\Bundle\\ReportBundle\\EventListener\\NavigationListener',
            'oro_report.report_manage.class' => 'Oro\\Bundle\\ReportBundle\\Entity\\Manager\\ReportManager',
            'oro.report.report.entity.class' => 'Oro\\Bundle\\ReportBundle\\Entity\\Report',
            'oro_report.report.entity.class' => 'Oro\\Bundle\\ReportBundle\\Entity\\Report',
            'oro_report.form.type.report.class' => 'Oro\\Bundle\\ReportBundle\\Form\\Type\\ReportType',
            'oro_report.form.type.entity_choice.class' => 'Oro\\Bundle\\ReportBundle\\Form\\Type\\ReportEntityChoiceType',
            'oro_report.form.type.entity_field_choice.class' => 'Oro\\Bundle\\ReportBundle\\Form\\Type\\ReportEntityFieldChoiceType',
            'oro_report.form.handler.report.class' => 'Oro\\Bundle\\ReportBundle\\Form\\Handler\\ReportHandler',
            'oro_report.report.manager.api.class' => 'Oro\\Bundle\\SoapBundle\\Entity\\Manager\\ApiEntityManager',
            'oro_requirejs.twig.class' => 'Oro\\Bundle\\RequireJSBundle\\Twig\\OroRequireJSExtension',
            'oro_requirejs.provider.config.class' => 'Oro\\Bundle\\RequireJSBundle\\Provider\\Config',
            'oro_require_js' => array(
                'build_path' => 'js/oro.min.js',
                'building_timeout' => 3600,
                'build' => array(
                    'preserveLicenseComments' => true,
                    'optimize' => 'uglify2',
                    'paths' => array(

                    ),
                ),
                'config' => array(
                    'waitSeconds' => 0,
                ),
                'web_root' => '/var/www/orocrm-platform/app/../web',
                'js_engine' => 'node',
            ),
            'oro_require_js.web_root' => '/var/www/orocrm-platform/app/../web',
            'oro_require_js.build_path' => 'js/oro.min.js',
            'oro_search.log_queries' => false,
            'oro_search.entities_config' => array(
                'Oro\\Bundle\\EmailBundle\\Entity\\Email' => array(
                    'alias' => 'oro_email',
                    'label' => 'Emails',
                    'search_template' => 'OroEmailBundle:Email:searchResult.html.twig',
                    'route' => array(
                        'name' => 'oro_email_view',
                        'parameters' => array(
                            'id' => 'id',
                        ),
                    ),
                    'title_fields' => array(
                        0 => 'subject',
                    ),
                    'fields' => array(
                        0 => array(
                            'name' => 'subject',
                            'target_type' => 'text',
                            'target_fields' => array(
                                0 => 'subject',
                            ),
                        ),
                    ),
                ),
                'Oro\\Bundle\\TagBundle\\Entity\\Tag' => array(
                    'alias' => 'oro_tag',
                    'title_fields' => array(
                        0 => 'name',
                    ),
                    'search_template' => 'OroTagBundle:Search:result.html.twig',
                    'route' => array(
                        'name' => 'oro_tag_search',
                        'parameters' => array(
                            'id' => 'id',
                        ),
                    ),
                    'fields' => array(
                        0 => array(
                            'name' => 'name',
                            'target_type' => 'text',
                            'target_fields' => array(
                                0 => 'name',
                            ),
                        ),
                    ),
                ),
                'Oro\\Bundle\\UserBundle\\Entity\\User' => array(
                    'alias' => 'oro_user',
                    'title_fields' => array(
                        0 => 'username',
                    ),
                    'route' => array(
                        'name' => 'oro_user_view',
                        'parameters' => array(
                            'id' => 'id',
                        ),
                    ),
                    'search_template' => 'OroUserBundle:Search:result.html.twig',
                    'fields' => array(
                        0 => array(
                            'name' => 'username',
                            'target_type' => 'text',
                            'target_fields' => array(
                                0 => 'username',
                            ),
                        ),
                        1 => array(
                            'name' => 'email',
                            'target_type' => 'text',
                            'target_fields' => array(
                                0 => 'email',
                            ),
                        ),
                        2 => array(
                            'name' => 'namePrefix',
                            'target_type' => 'text',
                            'target_fields' => array(
                                0 => 'namePrefix',
                            ),
                        ),
                        3 => array(
                            'name' => 'firstName',
                            'target_type' => 'text',
                            'target_fields' => array(
                                0 => 'firstName',
                            ),
                        ),
                        4 => array(
                            'name' => 'middleName',
                            'target_type' => 'text',
                            'target_fields' => array(
                                0 => 'middleName',
                            ),
                        ),
                        5 => array(
                            'name' => 'lastName',
                            'target_type' => 'text',
                            'target_fields' => array(
                                0 => 'lastName',
                            ),
                        ),
                        6 => array(
                            'name' => 'nameSuffix',
                            'target_type' => 'text',
                            'target_fields' => array(
                                0 => 'nameSuffix',
                            ),
                        ),
                        7 => array(
                            'name' => 'birthday',
                            'target_type' => 'birthday',
                            'target_fields' => array(
                                0 => 'birthday',
                            ),
                        ),
                    ),
                ),
            ),
            'oro_search.engine_orm' => array(
                'pdo_mysql' => 'Oro\\Bundle\\SearchBundle\\Engine\\Orm\\PdoMysql',
                'pdo_pgsql' => 'Oro\\Bundle\\SearchBundle\\Engine\\Orm\\PdoPgsql',
            ),
            'oro_search.search.engine.class' => 'Oro\\Bundle\\SearchBundle\\Engine\\Orm',
            'oro_search.realtime_update' => true,
            'oro_search.index.class' => 'Oro\\Bundle\\SearchBundle\\Engine\\Indexer',
            'oro_search.security_provider.class' => 'Oro\\Bundle\\SearchBundle\\Security\\SecurityProvider',
            'oro_search.index_listener.class' => 'Oro\\Bundle\\SearchBundle\\EventListener\\IndexListener',
            'oro_search.twig_extension.class' => 'Oro\\Bundle\\SearchBundle\\Twig\\OroSearchExtension',
            'oro_search.mapper.class' => 'Oro\\Bundle\\SearchBundle\\Engine\\ObjectMapper',
            'oro_search.provider.result_statistics_provider.class' => 'Oro\\Bundle\\SearchBundle\\Provider\\ResultStatisticsProvider',
            'oro_search.formatter.result_formatter.class' => 'Oro\\Bundle\\SearchBundle\\Formatter\\ResultFormatter',
            'oro_search.prepare_result_item.listener.class' => 'Oro\\Bundle\\SearchBundle\\EventListener\\PrepareResultItemListener',
            'oro_search.extension.formatter.property.search_result_property.class' => 'Oro\\Bundle\\SearchBundle\\Extension\\SearchResultProperty',
            'oro_search.extension.search_results.class' => 'Oro\\Bundle\\SearchBundle\\Extension\\SearchResultsExtension',
            'oro_search.event_listener.search_results_grid_listener.class' => 'Oro\\Bundle\\SearchBundle\\EventListener\\SearchResultsGridListener',
            'oro_search.datasource.search.class' => 'Oro\\Bundle\\SearchBundle\\Extension\\SearchDatasource',
            'oro_search.extension.orm_pager.class' => 'Oro\\Bundle\\SearchBundle\\Extension\\Pager\\SearchPagerExtension',
            'oro_search.extension.pager.search.pager.class' => 'Oro\\Bundle\\SearchBundle\\Extension\\Pager\\IndexerPager',
            'oro_search.twig.item_container_template' => 'OroSearchBundle:Datagrid:itemContainer.html.twig',
            'oro_segmentation_tree.segment_manager.class' => 'Oro\\Bundle\\SegmentationTreeBundle\\Manager\\SegmentManager',
            'oro_sidebar.sidebar_widgets_definitions' => array(
                'hello_world' => array(
                    'title' => 'Welcome Oro',
                    'icon' => 'bundles/orosidebar/sidebar_widgets/hello_world/img/icon.ico',
                    'module' => 'oro/sidebar/widget/hello-world',
                    'placement' => 'both',
                    'settings' => array(
                        'content' => 'Welcome to OroCRM!<br/>OroCRM is an easy-to-use, open source CRM with built-in marketing tools for your ecommerce business. learn more at <a href="http://orocrm.com">orocrm.com</a>',
                    ),
                ),
            ),
            'oro_sidebar.widget_definition.registry.class' => 'Oro\\Bundle\\SidebarBundle\\Model\\WidgetDefinitionRegistry',
            'oro_sidebar.twig.extension.class' => 'Oro\\Bundle\\SidebarBundle\\Twig\\SidebarExtension',
            'oro_soap.loader.class' => 'Oro\\Bundle\\SoapBundle\\ServiceDefinition\\Loader\\OroSoapLoader',
            'oro_wamp.publisher.class' => 'Oro\\Bundle\\SyncBundle\\Wamp\\TopicPublisher',
            'oro_wamp.db_ping.class' => 'Oro\\Bundle\\SyncBundle\\Wamp\\DbPing',
            'oro_wamp.twig.class' => 'Oro\\Bundle\\SyncBundle\\Twig\\OroSyncExtension',
            'oro_wamp.listener.maintenance.class' => 'Oro\\Bundle\\SyncBundle\\EventListener\\MaintenanceListener',
            'oro_tag.tag.entity.class' => 'Oro\\Bundle\\TagBundle\\Entity\\Tag',
            'oro_tag.tagging.entity.class' => 'Oro\\Bundle\\TagBundle\\Entity\\Tagging',
            'oro_tag.tag_listener.class' => 'Oro\\Bundle\\TagBundle\\EventListener\\TagListener',
            'oro_tag.owner_listener.class' => 'Oro\\Bundle\\TagBundle\\EventListener\\OwnerListener',
            'oro_tag.tag.form.type.tag.class' => 'Oro\\Bundle\\TagBundle\\Form\\Type\\TagType',
            'oro_tag.tag.form.type.tag.api.class' => 'Oro\\Bundle\\TagBundle\\Form\\Type\\TagApiType',
            'oro_tag.tag.form.handler.tag.class' => 'Oro\\Bundle\\TagBundle\\Form\\Handler\\TagHandler',
            'oro_tag.tag.manager.api.class' => 'Oro\\Bundle\\SoapBundle\\Entity\\Manager\\ApiEntityManager',
            'oro_tag.tag.manager.class' => 'Oro\\Bundle\\TagBundle\\Entity\\TagManager',
            'oro_tag.autocomplete.tag.search_handler.class' => 'Oro\\Bundle\\FormBundle\\Autocomplete\\SearchHandler',
            'oro_tag.form.type.tag_select.class' => 'Oro\\Bundle\\TagBundle\\Form\\Type\\TagSelectType',
            'oro_tag.form.type.tag_autocomplete.class' => 'Oro\\Bundle\\TagBundle\\Form\\Type\\TagAutocompleteType',
            'oro_tag.form.subscriber.tag_select.class' => 'Oro\\Bundle\\TagBundle\\Form\\EventSubscriber\\TagSubscriber',
            'oro_tag.form.transformer.tag_select.class' => 'Oro\\Bundle\\TagBundle\\Form\\Transformer\\TagTransformer',
            'oro_tag.provider.search_provider.class' => 'Oro\\Bundle\\TagBundle\\Provider\\SearchProvider',
            'oro_tag.twig.tag.extension.class' => 'Oro\\Bundle\\TagBundle\\Twig\\TagExtension',
            'oro_tag.event_listener.search_results_grid_listener.class' => 'Oro\\Bundle\\TagBundle\\EventListener\\TagSearchResultsGridListener',
            'oro_theme.settings' => array(
                'demo' => array(
                    'label' => 'Demo Theme',
                    'icon' => 'bundles/oroui/themes/demo/images/favicon.ico',
                    'styles' => array(
                        0 => 'bundles/oroui/themes/demo/css/less/main.less',
                        1 => 'bundles/oroui/themes/demo/css/style.css',
                    ),
                ),
                'oro' => array(
                    'label' => 'Oro Theme',
                    'icon' => 'bundles/oroui/themes/oro/images/favicon.ico',
                    'styles' => array(
                        0 => 'bundles/oroui/themes/oro/css/style.css',
                    ),
                ),
            ),
            'oro_theme.registry.class' => 'Oro\\Bundle\\ThemeBundle\\Model\\ThemeRegistry',
            'oro_theme.event_listener.load_css.class' => 'Oro\\Bundle\\ThemeBundle\\EventListener\\LoadCssEventListener',
            'oro_theme.twig.extension.class' => 'Oro\\Bundle\\ThemeBundle\\Twig\\ThemeExtension',
            'oro_translation.form.type.translatable_entity.class' => 'Oro\\Bundle\\TranslationBundle\\Form\\Type\\TranslatableEntityType',
            'oro_translation.controller.class' => 'Oro\\Bundle\\TranslationBundle\\Controller\\Controller',
            'oro_translation.extractor.php_code_extractor.class' => 'Oro\\Bundle\\TranslationBundle\\Extractor\\PhpCodeExtractor',
            'oro_translation.database_translation.loader.class' => 'Oro\\Bundle\\TranslationBundle\\Translation\\OrmTranslationLoader',
            'oro_translation.database_translation.metadata.cache.class' => 'Oro\\Bundle\\TranslationBundle\\Translation\\OrmTranslationMetadataCache',
            'oro_translation.listener.request.class' => 'Oro\\Bundle\\TranslationBundle\\EventListener\\RequestListener',
            'oro_translation.js_translation.domains' => array(
                0 => 'jsmessages',
                1 => 'validators',
            ),
            'oro_user.manager.class' => 'Oro\\Bundle\\UserBundle\\Entity\\UserManager',
            'oro_user.manager.api.class' => 'Oro\\Bundle\\SoapBundle\\Entity\\Manager\\ApiEntityManager',
            'oro_user.status.manager.class' => 'Oro\\Bundle\\UserBundle\\Entity\\Manager\\StatusManager',
            'oro_user.entity.class' => 'Oro\\Bundle\\UserBundle\\Entity\\User',
            'oro_user.group.entity.class' => 'Oro\\Bundle\\UserBundle\\Entity\\Group',
            'oro_user.role.entity.class' => 'Oro\\Bundle\\UserBundle\\Entity\\Role',
            'oro_user.security.provider.class' => 'Oro\\Bundle\\UserBundle\\Security\\UserProvider',
            'oro_user.security.login.class' => 'Oro\\Bundle\\UserBundle\\EventListener\\LoginSubscriber',
            'oro_user.acl.twig.class' => 'Oro\\Bundle\\UserBundle\\Twig\\OroUserExtension',
            'oro_user.user_menu.builder.class' => 'Oro\\Bundle\\UserBundle\\Menu\\UserMenuBuilder',
            'oro_user.role.listener.class' => 'Oro\\Bundle\\UserBundle\\EventListener\\RoleListener',
            'oro_user.role.manager.class' => 'Oro\\Bundle\\UserBundle\\Entity\\Manager\\RoleManager',
            'oro_user.role.manager.api.class' => 'Oro\\Bundle\\SoapBundle\\Entity\\Manager\\ApiEntityManager',
            'oro_user.group.manager.class' => 'Oro\\Bundle\\UserBundle\\Entity\\Manager\\GroupManager',
            'oro_user.group.manager.api.class' => 'Oro\\Bundle\\SoapBundle\\Entity\\Manager\\ApiEntityManager',
            'oro_user.entity_with_image.subscriber.class' => 'Oro\\Bundle\\UserBundle\\Entity\\EventListener\\UploadedImageSubscriber',
            'oro_user.autocomplete.user.search_handler' => 'Oro\\Bundle\\UserBundle\\Autocomplete\\UserSearchHandler',
            'oro_user.autocomplete.user.search_acl_handler.class' => 'Oro\\Bundle\\UserBundle\\Autocomplete\\UserAclHandler',
            'oro_user.email.owner.provider.class' => 'Oro\\Bundle\\UserBundle\\Entity\\Provider\\EmailOwnerProvider',
            'oro_user.gender_provider.class' => 'Oro\\Bundle\\UserBundle\\Provider\\GenderProvider',
            'oro_user.change_password.subscriber.class' => 'Oro\\Bundle\\UserBundle\\Form\\EventListener\\ChangePasswordSubscriber',
            'oro_user.event_listener.user_email_grid_listener.class' => 'Oro\\Bundle\\UserBundle\\EventListener\\UserEmailGridListener',
            'oro_user.form.type.user.class' => 'Oro\\Bundle\\UserBundle\\Form\\Type\\UserType',
            'oro_user.form.type.user.api.class' => 'Oro\\Bundle\\UserBundle\\Form\\Type\\UserApiType',
            'oro_user.form.type.reset.class' => 'Oro\\Bundle\\UserBundle\\Form\\Type\\ResetType',
            'oro_user.form.type.role.api.class' => 'Oro\\Bundle\\UserBundle\\Form\\Type\\RoleApiType',
            'oro_user.form.type.group.class' => 'Oro\\Bundle\\UserBundle\\Form\\Type\\GroupType',
            'oro_user.form.type.group.api.class' => 'Oro\\Bundle\\UserBundle\\Form\\Type\\GroupApiType',
            'oro_user.form.type.status.class' => 'Oro\\Bundle\\UserBundle\\Form\\Type\\StatusType',
            'oro_user.form.type.user_select.class' => 'Oro\\Bundle\\UserBundle\\Form\\Type\\UserSelectType',
            'oro_user.form.type.user_multiselect.class' => 'Oro\\Bundle\\UserBundle\\Form\\Type\\UserMultiSelectType',
            'oro_user.form.type.gender.class' => 'Oro\\Bundle\\UserBundle\\Form\\Type\\GenderType',
            'oro_user.form.type.email.class' => 'Oro\\Bundle\\UserBundle\\Form\\Type\\EmailType',
            'oro_user.form.type.change_password.class' => 'Oro\\Bundle\\UserBundle\\Form\\Type\\ChangePasswordType',
            'oro_user.form.handler.user.class' => 'Oro\\Bundle\\UserBundle\\Form\\Handler\\UserHandler',
            'oro_user.form.handler.reset.class' => 'Oro\\Bundle\\UserBundle\\Form\\Handler\\ResetHandler',
            'oro_user.form.handler.role.class' => 'Oro\\Bundle\\UserBundle\\Form\\Handler\\RoleHandler',
            'oro_user.form.handler.group.class' => 'Oro\\Bundle\\UserBundle\\Form\\Handler\\GroupHandler',
            'oro_user.form.handler.status.class' => 'Oro\\Bundle\\UserBundle\\Form\\Handler\\StatusHandler',
            'oro_user.form.handler.acl_role.class' => 'Oro\\Bundle\\UserBundle\\Form\\Handler\\AclRoleHandler',
            'oro_user.form.type.user_acl_select.class' => 'Oro\\Bundle\\UserBundle\\Form\\Type\\UserAclSelectType',
            'oro_user.importexport.user_normalizer.class' => 'Oro\\Bundle\\UserBundle\\ImportExport\\Serializer\\Normalizer\\UserNormalizer',
            'oro_user.reset.ttl' => 86400,
            'oro_user.email' => array(
                'no-reply@example.com' => 'Oro Admin',
            ),
            'oro_user.privileges' => array(
                'entity' => array(
                    'label' => 'Entity',
                    'view_type' => 'grid',
                    'types' => array(
                        0 => 'entity',
                    ),
                    'field_type' => 'oro_acl_access_level_selector',
                    'fix_values' => false,
                    'default_value' => 5,
                    'show_default' => true,
                ),
                'action' => array(
                    'label' => 'Capabilities',
                    'view_type' => 'list',
                    'types' => array(
                        0 => 'action',
                    ),
                    'field_type' => 'oro_acl_access_level_selector',
                    'fix_values' => false,
                    'default_value' => 1,
                    'show_default' => false,
                ),
            ),
            'oro_windows.twig.extension.class' => 'Oro\\Bundle\\WindowsBundle\\Twig\\WindowsExtension',
            'oro_workflow.context_accessor.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\ContextAccessor',
            'oro_workflow.doctrine_helper.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\DoctrineHelper',
            'oro_workflow.registry.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\WorkflowRegistry',
            'oro_workflow.manager.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\WorkflowManager',
            'oro_workflow.workflow_result.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\WorkflowResult',
            'oro_workflow.prototype.workflow.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Workflow',
            'oro_workflow.prototype.step_manager.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\StepManager',
            'oro_workflow.prototype.attribute_manager.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\AttributeManager',
            'oro_workflow.prototype.transition_manager.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\TransitionManager',
            'oro_workflow.condition_factory.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Condition\\ConditionFactory',
            'oro_workflow.condition.andx.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Condition\\Andx',
            'oro_workflow.condition.orx.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Condition\\Orx',
            'oro_workflow.condition.not.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Condition\\Not',
            'oro_workflow.condition.true.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Condition\\True',
            'oro_workflow.condition.false.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Condition\\False',
            'oro_workflow.condition.equal_to.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Condition\\EqualTo',
            'oro_workflow.condition.not_equal_to.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Condition\\NotEqualTo',
            'oro_workflow.condition.blank.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Condition\\Blank',
            'oro_workflow.condition.not_blank.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Condition\\NotBlank',
            'oro_workflow.condition.has_value.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Condition\\HasValue',
            'oro_workflow.condition.not_has_value.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Condition\\NotHasValue',
            'oro_workflow.condition.greater_than.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Condition\\GreaterThan',
            'oro_workflow.condition.greater_than_or_equal.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Condition\\GreaterThanOrEqual',
            'oro_workflow.condition.less_than.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Condition\\LessThan',
            'oro_workflow.condition.less_than_or_equal.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Condition\\LessThanOrEqual',
            'oro_workflow.condition.configurable.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Condition\\Configurable',
            'oro_workflow.action_factory.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Action\\ActionFactory',
            'oro_workflow.action.tree.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Action\\TreeExecutor',
            'oro_workflow.action.configurable.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Action\\Configurable',
            'oro_workflow.action.assign_value.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Action\\AssignValue',
            'oro_workflow.action.unset_value.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Action\\UnsetValue',
            'oro_workflow.action.create_object.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Action\\CreateObject',
            'oro_workflow.action.create_entity.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Action\\CreateEntity',
            'oro_workflow.action.request_entity.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Action\\RequestEntity',
            'oro_workflow.action.call_method.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Action\\CallMethod',
            'oro_workflow.action.start_workflow.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Action\\StartWorkflow',
            'oro_workflow.action.close_workflow.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Action\\CloseWorkflow',
            'oro_workflow.action.redirect.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Action\\Redirect',
            'oro_workflow.action.redirect_to_workflow.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Action\\RedirectToWorkflow',
            'oro_workflow.action.format_string.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Action\\FormatString',
            'oro_workflow.action.assign_active_user.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Action\\AssignActiveUser',
            'oro_workflow.action.format_name.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Action\\FormatName',
            'oro_workflow.configuration_pass.replace_property_path.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\ConfigurationPass\\ReplacePropertyPath',
            'oro_workflow.condition_assembler.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Condition\\ConditionAssembler',
            'oro_workflow.action_assembler.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\Action\\ActionAssembler',
            'oro_workflow.attribute_assembler.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\AttributeAssembler',
            'oro_workflow.step_assembler.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\StepAssembler',
            'oro_workflow.transition_assembler.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\TransitionAssembler',
            'oro_workflow.workflow_assembler.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\WorkflowAssembler',
            'oro_workflow.form_options_assembler.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\FormOptionsAssembler',
            'oro_workflow.form.event_listener.default_values.class' => 'Oro\\Bundle\\WorkflowBundle\\Form\\EventListener\\DefaultValuesListener',
            'oro_workflow.form.event_listener.init_actions.class' => 'Oro\\Bundle\\WorkflowBundle\\Form\\EventListener\\InitActionsListener',
            'oro_workflow.form.event_listener.required_attributes.class' => 'Oro\\Bundle\\WorkflowBundle\\Form\\EventListener\\RequiredAttributesListener',
            'oro_workflow.form.type.attributes.class' => 'Oro\\Bundle\\WorkflowBundle\\Form\\Type\\WorkflowAttributesType',
            'oro_workflow.form.type.step.class' => 'Oro\\Bundle\\WorkflowBundle\\Form\\Type\\WorkflowStepType',
            'oro_workflow.form.type.transition.class' => 'Oro\\Bundle\\WorkflowBundle\\Form\\Type\\WorkflowTransitionType',
            'oro_workflow.serializer.data.serializer.class' => 'Oro\\Bundle\\WorkflowBundle\\Serializer\\WorkflowDataSerializer',
            'oro_workflow.serializer.data.normalizer.class' => 'Oro\\Bundle\\WorkflowBundle\\Serializer\\Normalizer\\WorkflowDataNormalizer',
            'oro_workflow.serializer.data.attribute_normalizer.standard.class' => 'Oro\\Bundle\\WorkflowBundle\\Serializer\\Normalizer\\StandardAttributeNormalizer',
            'oro_workflow.serializer.data.attribute_normalizer.entity.class' => 'Oro\\Bundle\\WorkflowBundle\\Serializer\\Normalizer\\EntityAttributeNormalizer',
            'oro_workflow.serializer.handler.workflow_result.class' => 'Oro\\Bundle\\WorkflowBundle\\Serializer\\Handler\\WorkflowResultHandler',
            'oro_workflow.entity_binder.class' => 'Oro\\Bundle\\WorkflowBundle\\Model\\EntityBinder',
            'oro_workflow.configuration.config_provider.class' => 'Oro\\Bundle\\WorkflowBundle\\Configuration\\ConfigurationProvider',
            'oro_workflow.configuration.config.workflow_sole.class' => 'Oro\\Bundle\\WorkflowBundle\\Configuration\\WorkflowConfiguration',
            'oro_workflow.configuration.config.workflow_list.class' => 'Oro\\Bundle\\WorkflowBundle\\Configuration\\WorkflowListConfiguration',
            'oro_workflow.configuration.builder.workflow_definition.class' => 'Oro\\Bundle\\WorkflowBundle\\Configuration\\ConfigurationWorkflowDefinitionBuilder',
            'oro_workflow.twig.extension.class_name.class' => 'Oro\\Bundle\\WorkflowBundle\\Twig\\ClassNameExtension',
            'oro_workflow.twig.extension.workflow.class' => 'Oro\\Bundle\\WorkflowBundle\\Twig\\WorkflowExtension',
            'oro_workflow.twig.extension.view_attribute.class' => 'Oro\\Bundle\\WorkflowBundle\\Twig\\ViewAttributeExtension',
            'oro_workflow.twig.extension.view_attribute.templates' => array(
                0 => 'OroWorkflowBundle:WorkflowStep:view_attributes.html.twig',
            ),
            'oro_workflow.listener.subscriver.workflow_definition.class' => 'Oro\\Bundle\\WorkflowBundle\\EventListener\\WorkflowDefinitionSubscriber',
            'oro_workflow.listener.subscriber.workflow_data_serialize.class' => 'Oro\\Bundle\\WorkflowBundle\\EventListener\\WorkflowDataSerializeSubscriber',
            'oro_workflow.http.workflow_item_validator.class' => 'Oro\\Bundle\\WorkflowBundle\\Http\\WorkflowItemValidator',
            'oro_workflow.validator.transition_is_allowed.class' => 'Oro\\Bundle\\WorkflowBundle\\Validator\\Constraints\\TransitionIsAllowedValidator',
            'sylius.process.builder.class' => 'Sylius\\Bundle\\FlowBundle\\Process\\Builder\\ProcessBuilder',
            'sylius.process.context.class' => 'Sylius\\Bundle\\FlowBundle\\Process\\Context\\ProcessContext',
            'sylius.controller.process.class' => 'Sylius\\Bundle\\FlowBundle\\Controller\\ProcessController',
            'sylius.process.coordinator.class' => 'Sylius\\Bundle\\FlowBundle\\Process\\Coordinator\\Coordinator',
            'sylius.process_storage.session.class' => 'Sylius\\Bundle\\FlowBundle\\Storage\\SessionStorage',
            'sylius.process_storage.session.bag.class' => 'Sylius\\Bundle\\FlowBundle\\Storage\\SessionFlowsBag',
            'oro_menu.factory.acl_extension.class' => 'Oro\\Bundle\\NavigationBundle\\Menu\\AclAwareMenuFactoryExtension',
            'oro_menu.factory.class' => 'Knp\\Menu\\MenuFactory',
            'oro_menu.builder_chain.class' => 'Oro\\Bundle\\NavigationBundle\\Provider\\BuilderChainProvider',
            'oro_menu.configuration_builder.class' => 'Oro\\Bundle\\NavigationBundle\\Menu\\ConfigurationBuilder',
            'oro_menu.twig.extension.class' => 'Oro\\Bundle\\NavigationBundle\\Twig\\MenuExtension',
            'oro_navigation.navigation_item_menu.builder.class' => 'Oro\\Bundle\\NavigationBundle\\Menu\\NavigationItemBuilder',
            'oro_navigation.navigation_history_menu.builder.class' => 'Oro\\Bundle\\NavigationBundle\\Menu\\NavigationHistoryBuilder',
            'oro_navigation.navigation_mostviewed_menu.builder.class' => 'Oro\\Bundle\\NavigationBundle\\Menu\\NavigationMostviewedBuilder',
            'oro_navigation.item.builder.pinbar.class' => 'Oro\\Bundle\\NavigationBundle\\Entity\\Builder\\PinbarTabBuilder',
            'oro_navigation.item.builder.favorite.class' => 'Oro\\Bundle\\NavigationBundle\\Entity\\Builder\\NavigationItemBuilder',
            'oro_navigation.item.builder.history.class' => 'Oro\\Bundle\\NavigationBundle\\Entity\\Builder\\HistoryItemBuilder',
            'oro_navigation.item.factory.class' => 'Oro\\Bundle\\NavigationBundle\\Entity\\Builder\\ItemFactory',
            'oro_navigation.item.pinbar.post_persist_listener.class' => 'Oro\\Bundle\\NavigationBundle\\Entity\\Listener\\PinbarPostPersist',
            'oro_navigation.event.response_history.listener.class' => 'Oro\\Bundle\\NavigationBundle\\Event\\ResponseHistoryListener',
            'oro_navigation.event.response_hashnav.listener.class' => 'Oro\\Bundle\\NavigationBundle\\Event\\ResponseHashnavListener',
            'oro_navigation.event.doctrine_tag_subscriber.class' => 'Oro\\Bundle\\NavigationBundle\\Event\\DoctrineTagEventSubscriber',
            'oro_navigation.menu.matcher.voter.request' => 'Oro\\Bundle\\NavigationBundle\\Menu\\Matcher\\Voter\\RequestVoter',
            'oro_navigation.menu.matcher.voter.routepattern' => 'Oro\\Bundle\\NavigationBundle\\Menu\\Matcher\\Voter\\RoutePatternVoter',
            'oro_navigation.title_service.class' => 'Oro\\Bundle\\NavigationBundle\\Provider\\TitleService',
            'oro_navigation.title_service.twig.extension.class' => 'Oro\\Bundle\\NavigationBundle\\Twig\\TitleExtension',
            'oro_navigation.title_service.annotations_reader.class' => 'Oro\\Bundle\\NavigationBundle\\Title\\TitleReader\\AnnotationsReader',
            'oro_navigation.title_service.config_reader.class' => 'Oro\\Bundle\\NavigationBundle\\Title\\TitleReader\\ConfigReader',
            'oro_navigation.title_service.event.request.listener.class' => 'Oro\\Bundle\\NavigationBundle\\Event\\RequestTitleListener',
            'oro_navigation.translation.extractor.class' => 'Oro\\Bundle\\NavigationBundle\\Title\\TranslationExtractor',
            'oro_navigation.twig_hash_nav_extension.class' => 'Oro\\Bundle\\NavigationBundle\\Twig\\HashNavExtension',
            'oro_navigation.form.type.pagestate.class' => 'Oro\\Bundle\\NavigationBundle\\Form\\Type\\PageStateType',
            'oro_navigation.form.handler.pagestate.class' => 'Oro\\Bundle\\NavigationBundle\\Form\\Handler\\PageStateHandler',
            'oro_navigation.breadcrumbs_manager.class' => 'Oro\\Bundle\\NavigationBundle\\Menu\\BreadcrumbManager',
            'oro_navigation.twig.content_tags.class' => 'Oro\\Bundle\\NavigationBundle\\Twig\\ContentTagsExtension',
            'oro_navigation.content.topic_sender.class' => 'Oro\\Bundle\\NavigationBundle\\Content\\TopicSender',
            'oro_navigation.content.tag_generator_chain.class' => 'Oro\\Bundle\\NavigationBundle\\Content\\TagGeneratorChain',
            'oro_navigation.content.doctrine_tag_generator.class' => 'Oro\\Bundle\\NavigationBundle\\Content\\DoctrineTagGenerator',
            'oro_navigation.content.simple_tag_generator.class' => 'Oro\\Bundle\\NavigationBundle\\Content\\SimpleTagGenerator',
            'oro_navigation.content.datagrid_tag_listener.class' => 'Oro\\Bundle\\NavigationBundle\\Content\\DataGridTagListener',
            'web_profiler.controller.profiler.class' => 'Symfony\\Bundle\\WebProfilerBundle\\Controller\\ProfilerController',
            'web_profiler.controller.router.class' => 'Symfony\\Bundle\\WebProfilerBundle\\Controller\\RouterController',
            'web_profiler.controller.exception.class' => 'Symfony\\Bundle\\WebProfilerBundle\\Controller\\ExceptionController',
            'web_profiler.debug_toolbar.class' => 'Symfony\\Bundle\\WebProfilerBundle\\EventListener\\WebDebugToolbarListener',
            'web_profiler.debug_toolbar.intercept_redirects' => false,
            'web_profiler.debug_toolbar.mode' => 2,
            'web_profiler.debug_toolbar.position' => 'bottom',
            'sensio_distribution.webconfigurator.class' => 'Sensio\\Bundle\\DistributionBundle\\Configurator\\Configurator',
            'jdare_clank.web_socket_server.class' => 'JDare\\ClankBundle\\Server\\Type\\WebSocketServerType',
            'jdare_clank.web_socket_server.port' => 8080,
            'jdare_clank.web_socket_server.host' => '127.0.0.1',
            'jdare_clank.periodic_services' => array(
                0 => array(
                    'service' => 'oro_wamp.db_ping',
                    'time' => 60000,
                ),
            ),
            'jdare_clank.rpc_services' => array(

            ),
            'jdare_clank.topic_services' => array(

            ),
            'jdare_clank.session_handler' => 'session.handler.pdo',
            'jdare_clank.servers' => array(
                0 => 'jdare_clank.web_socket_server',
            ),
            'data_collector.templates' => array(
                'data_collector.config' => array(
                    0 => 'config',
                    1 => '@WebProfiler/Collector/config.html.twig',
                ),
                'data_collector.request' => array(
                    0 => 'request',
                    1 => '@WebProfiler/Collector/request.html.twig',
                ),
                'data_collector.exception' => array(
                    0 => 'exception',
                    1 => '@WebProfiler/Collector/exception.html.twig',
                ),
                'data_collector.events' => array(
                    0 => 'events',
                    1 => '@WebProfiler/Collector/events.html.twig',
                ),
                'data_collector.logger' => array(
                    0 => 'logger',
                    1 => '@WebProfiler/Collector/logger.html.twig',
                ),
                'data_collector.time' => array(
                    0 => 'time',
                    1 => '@WebProfiler/Collector/time.html.twig',
                ),
                'data_collector.memory' => array(
                    0 => 'memory',
                    1 => '@WebProfiler/Collector/memory.html.twig',
                ),
                'data_collector.router' => array(
                    0 => 'router',
                    1 => '@WebProfiler/Collector/router.html.twig',
                ),
                'data_collector.security' => array(
                    0 => 'security',
                    1 => 'SecurityBundle:Collector:security',
                ),
                'swiftmailer.data_collector' => array(
                    0 => 'swiftmailer',
                    1 => '@Swiftmailer/Collector/swiftmailer.html.twig',
                ),
                'data_collector.doctrine' => array(
                    0 => 'db',
                    1 => '@Doctrine/Collector/db.html.twig',
                ),
            ),
            'nelmio_api_doc.parser.form_type_parser.class' => 'Nelmio\\ApiDocBundle\\Parser\\FormTypeParser',
            'nelmio_api_doc.parser.validation_parser.class' => 'Nelmio\\ApiDocBundle\\Parser\\ValidationParser',
            'nelmio_api_doc.parser.jms_metadata_parser.class' => 'Nelmio\\ApiDocBundle\\Parser\\JmsMetadataParser',
        );
    }
}
